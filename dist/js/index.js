/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(32);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _reactDropzone = __webpack_require__(178);
	
	var _reactDropzone2 = _interopRequireDefault(_reactDropzone);
	
	__webpack_require__(179);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var AWS = window.AWS;
	
	function s3Client() {
	  AWS.config.region = "ap-northeast-1";
	  AWS.config.credentials = new AWS.CognitoIdentityCredentials({ IdentityPoolId: "ap-northeast-1:" });
	  AWS.config.credentials.get();
	  console.log("Cognito Identify Id: " + AWS.config.credentials.identityId);
	  return new AWS.S3({ params: { Bucket: "step-functions-trial" } });
	}
	
	var FileUpload = function (_React$Component) {
	  _inherits(FileUpload, _React$Component);
	
	  function FileUpload() {
	    _classCallCheck(this, FileUpload);
	
	    var _this = _possibleConstructorReturn(this, (FileUpload.__proto__ || Object.getPrototypeOf(FileUpload)).call(this));
	
	    _this.state = {
	      uploadStatus: "Waiting Upload"
	    };
	    _this.onDrop = _this.onDrop.bind(_this); // Important !!!
	    return _this;
	  }
	
	  _createClass(FileUpload, [{
	    key: 'onDrop',
	    value: function onDrop(files) {
	      var _this2 = this;
	
	      this.setState({ uploadStatus: "Uploading..." });
	      var s3 = s3Client();
	      //console.log(files);
	      //console.log(s3);
	      var putObjectPromise = s3.putObject({
	        Key: files[0].name,
	        ContentType: files[0].type,
	        Body: files[0],
	        ACL: "public-read"
	      }).promise();
	      putObjectPromise.then(function (data) {
	        console.log('Success');
	        _this2.setState({ uploadStatus: 'Upload succeeded' });
	      }).catch(function (err) {
	        console.log(err);
	        _this2.setState({ uploadStatus: 'Upload failed' });
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(
	          _reactDropzone2.default,
	          { onDrop: this.onDrop, multiple: false },
	          _react2.default.createElement(
	            'div',
	            null,
	            'Try dropping a file here, or click to select a file to upload.'
	          )
	        ),
	        _react2.default.createElement(Message, { uploadStatus: this.state.uploadStatus })
	      );
	    }
	  }]);
	
	  return FileUpload;
	}(_react2.default.Component);
	
	;
	
	var Message = function (_React$Component2) {
	  _inherits(Message, _React$Component2);
	
	  function Message() {
	    _classCallCheck(this, Message);
	
	    return _possibleConstructorReturn(this, (Message.__proto__ || Object.getPrototypeOf(Message)).apply(this, arguments));
	  }
	
	  _createClass(Message, [{
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        this.props.uploadStatus
	      );
	    }
	  }]);
	
	  return Message;
	}(_react2.default.Component);
	
	_reactDom2.default.render(_react2.default.createElement(FileUpload, null), document.getElementById('container'));

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(2);


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var ReactChildren = __webpack_require__(5);
	var ReactComponent = __webpack_require__(18);
	var ReactPureComponent = __webpack_require__(21);
	var ReactClass = __webpack_require__(22);
	var ReactDOMFactories = __webpack_require__(24);
	var ReactElement = __webpack_require__(9);
	var ReactPropTypes = __webpack_require__(29);
	var ReactVersion = __webpack_require__(30);
	
	var onlyChild = __webpack_require__(31);
	var warning = __webpack_require__(11);
	
	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;
	
	if (process.env.NODE_ENV !== 'production') {
	  var ReactElementValidator = __webpack_require__(25);
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}
	
	var __spread = _assign;
	
	if (process.env.NODE_ENV !== 'production') {
	  var warned = false;
	  __spread = function () {
	    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
	    warned = true;
	    return _assign.apply(null, arguments);
	  };
	}
	
	var React = {
	
	  // Modern
	
	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },
	
	  Component: ReactComponent,
	  PureComponent: ReactPureComponent,
	
	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,
	
	  // Classic
	
	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },
	
	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,
	
	  version: ReactVersion,
	
	  // Deprecated hook for JSX spread, don't use this for anything.
	  __spread: __spread
	};
	
	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 3 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 4 */
/***/ function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	
	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;
	
	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}
	
		return Object(val);
	}
	
	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}
	
			// Detect buggy property enumeration order in older V8 versions.
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}
	
			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}
	
	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;
	
		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);
	
			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}
	
			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}
	
		return to;
	};


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(6);
	var ReactElement = __webpack_require__(9);
	
	var emptyFunction = __webpack_require__(12);
	var traverseAllChildren = __webpack_require__(15);
	
	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;
	
	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);
	
	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;
	
	  func.call(context, child, bookKeeping.count++);
	}
	
	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);
	
	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;
	
	
	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}
	
	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}
	
	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}
	
	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}
	
	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}
	
	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}
	
	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};
	
	module.exports = ReactChildren;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(7);
	
	var invariant = __webpack_require__(8);
	
	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};
	
	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};
	
	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};
	
	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};
	
	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};
	
	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;
	
	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};
	
	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler
	};
	
	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 7 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';
	
	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */
	
	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;
	
	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;
	
	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }
	
	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';
	
	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame
	
	  throw error;
	}
	
	module.exports = reactProdInvariant;

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	var validateFormat = function validateFormat(format) {};
	
	if (process.env.NODE_ENV !== 'production') {
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}
	
	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}
	
	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var ReactCurrentOwner = __webpack_require__(10);
	
	var warning = __webpack_require__(11);
	var canDefineProperty = __webpack_require__(13);
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	var REACT_ELEMENT_TYPE = __webpack_require__(14);
	
	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};
	
	var specialPropKeyWarningShown, specialPropRefWarningShown;
	
	function hasValidRef(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.ref !== undefined;
	}
	
	function hasValidKey(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.key !== undefined;
	}
	
	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    if (!specialPropKeyWarningShown) {
	      specialPropKeyWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}
	
	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    if (!specialPropRefWarningShown) {
	      specialPropRefWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}
	
	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,
	
	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,
	
	    // Record the component responsible for creating this element.
	    _owner: owner
	  };
	
	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};
	
	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }
	
	  return element;
	};
	
	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
	 */
	ReactElement.createElement = function (type, config, children) {
	  var propName;
	
	  // Reserved names are extracted
	  var props = {};
	
	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;
	
	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }
	
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }
	    props.children = childArray;
	  }
	
	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (key || ref) {
	      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
	        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
	        if (key) {
	          defineKeyPropWarningGetter(props, displayName);
	        }
	        if (ref) {
	          defineRefPropWarningGetter(props, displayName);
	        }
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};
	
	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
	 */
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};
	
	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
	
	  return newElement;
	};
	
	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
	 */
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;
	
	  // Original props are copied
	  var props = _assign({}, element.props);
	
	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;
	
	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;
	
	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }
	
	    // Remaining properties override existing props
	    var defaultProps;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }
	
	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};
	
	/**
	 * Verifies the object is a ReactElement.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};
	
	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 10 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {
	
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	
	};
	
	module.exports = ReactCurrentOwner;

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(12);
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = emptyFunction;
	
	if (process.env.NODE_ENV !== 'production') {
	  (function () {
	    var printWarning = function printWarning(format) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    };
	
	    warning = function warning(condition, format) {
	      if (format === undefined) {
	        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	      }
	
	      if (format.indexOf('Failed Composite propType: ') === 0) {
	        return; // Ignore CompositeComponent proptype check.
	      }
	
	      if (!condition) {
	        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	          args[_key2 - 2] = arguments[_key2];
	        }
	
	        printWarning.apply(undefined, [format].concat(args));
	      }
	    };
	  })();
	}
	
	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 12 */
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}
	
	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};
	
	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};
	
	module.exports = emptyFunction;

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    // $FlowFixMe https://github.com/facebook/flow/issues/285
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}
	
	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 14 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;
	
	module.exports = REACT_ELEMENT_TYPE;

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(7);
	
	var ReactCurrentOwner = __webpack_require__(10);
	var REACT_ELEMENT_TYPE = __webpack_require__(14);
	
	var getIteratorFn = __webpack_require__(16);
	var invariant = __webpack_require__(8);
	var KeyEscapeUtils = __webpack_require__(17);
	var warning = __webpack_require__(11);
	
	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';
	
	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */
	
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */
	
	var didWarnAboutMaps = false;
	
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}
	
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;
	
	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }
	
	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }
	
	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
	
	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }
	
	  return subtreeCount;
	}
	
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }
	
	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}
	
	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 16 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/* global Symbol */
	
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}
	
	module.exports = getIteratorFn;

/***/ },
/* 17 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */
	
	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });
	
	  return '$' + escapedString;
	}
	
	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);
	
	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}
	
	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};
	
	module.exports = KeyEscapeUtils;

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(7);
	
	var ReactNoopUpdateQueue = __webpack_require__(19);
	
	var canDefineProperty = __webpack_require__(13);
	var emptyObject = __webpack_require__(20);
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);
	
	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}
	
	ReactComponent.prototype.isReactComponent = {};
	
	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'setState');
	  }
	};
	
	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'forceUpdate');
	  }
	};
	
	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}
	
	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var warning = __webpack_require__(11);
	
	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}
	
	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnNoop(publicInstance, 'replaceState');
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnNoop(publicInstance, 'setState');
	  }
	};
	
	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyObject = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}
	
	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var ReactComponent = __webpack_require__(18);
	var ReactNoopUpdateQueue = __webpack_require__(19);
	
	var emptyObject = __webpack_require__(20);
	
	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactPureComponent(props, context, updater) {
	  // Duplicated from ReactComponent.
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}
	
	function ComponentDummy() {}
	ComponentDummy.prototype = ReactComponent.prototype;
	ReactPureComponent.prototype = new ComponentDummy();
	ReactPureComponent.prototype.constructor = ReactPureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(ReactPureComponent.prototype, ReactComponent.prototype);
	ReactPureComponent.prototype.isPureReactComponent = true;
	
	module.exports = ReactPureComponent;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(7),
	    _assign = __webpack_require__(4);
	
	var ReactComponent = __webpack_require__(18);
	var ReactElement = __webpack_require__(9);
	var ReactPropTypeLocationNames = __webpack_require__(23);
	var ReactNoopUpdateQueue = __webpack_require__(19);
	
	var emptyObject = __webpack_require__(20);
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);
	
	var MIXINS_KEY = 'mixins';
	
	// Helper function to allow the creation of anonymous functions which do not
	// have .name set to the name of the variable being assigned to.
	function identity(fn) {
	  return fn;
	}
	
	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	
	
	var injectedMixins = [];
	
	/**
	 * Composite components are higher-level components that compose other composite
	 * or host components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {
	
	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: 'DEFINE_MANY',
	
	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: 'DEFINE_MANY',
	
	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: 'DEFINE_MANY',
	
	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: 'DEFINE_MANY',
	
	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: 'DEFINE_MANY',
	
	  // ==== Definition methods ====
	
	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: 'DEFINE_MANY_MERGED',
	
	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: 'DEFINE_MANY_MERGED',
	
	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: 'DEFINE_MANY_MERGED',
	
	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: 'DEFINE_ONCE',
	
	  // ==== Delegate methods ====
	
	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: 'DEFINE_MANY',
	
	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: 'DEFINE_MANY',
	
	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: 'DEFINE_MANY',
	
	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: 'DEFINE_ONCE',
	
	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: 'DEFINE_MANY',
	
	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: 'DEFINE_MANY',
	
	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: 'DEFINE_MANY',
	
	  // ==== Advanced methods ====
	
	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: 'OVERRIDE_BASE'
	
	};
	
	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, 'childContext');
	    }
	    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, 'context');
	    }
	    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, 'prop');
	    }
	    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };
	
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but only in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
	    }
	  }
	}
	
	function validateMethodOverride(isAlreadyDefined, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;
	
	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === 'OVERRIDE_BASE') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
	  }
	
	  // Disallow defining methods more than once unless explicitly allowed.
	  if (isAlreadyDefined) {
	    !(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
	  }
	}
	
	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classes.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    if (process.env.NODE_ENV !== 'production') {
	      var typeofSpec = typeof spec;
	      var isMixinValid = typeofSpec === 'object' && spec !== null;
	
	      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
	    }
	
	    return;
	  }
	
	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;
	
	  var proto = Constructor.prototype;
	  var autoBindPairs = proto.__reactAutoBindPairs;
	
	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }
	
	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }
	
	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }
	
	    var property = spec[name];
	    var isAlreadyDefined = proto.hasOwnProperty(name);
	    validateMethodOverride(isAlreadyDefined, name);
	
	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;
	
	      if (shouldAutoBind) {
	        autoBindPairs.push(name, property);
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];
	
	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;
	
	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === 'DEFINE_MANY_MERGED') {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === 'DEFINE_MANY') {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}
	
	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }
	
	    var isReserved = name in RESERVED_SPEC_KEYS;
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;
	
	    var isInherited = name in Constructor;
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
	    Constructor[name] = property;
	  }
	}
	
	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;
	
	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}
	
	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}
	
	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}
	
	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	    };
	  }
	  return boundMethod;
	}
	
	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  var pairs = component.__reactAutoBindPairs;
	  for (var i = 0; i < pairs.length; i += 2) {
	    var autoBindKey = pairs[i];
	    var method = pairs[i + 1];
	    component[autoBindKey] = bindAutoBindMethod(component, method);
	  }
	}
	
	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {
	
	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback, 'replaceState');
	    }
	  },
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  }
	};
	
	var ReactClassComponent = function () {};
	_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);
	
	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {
	
	  /**
	   * Creates a composite component class given a class specification.
	   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    // To keep our warnings more understandable, we'll use a little hack here to
	    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
	    // unnecessarily identify a class without displayName as 'Constructor'.
	    var Constructor = identity(function (props, context, updater) {
	      // This constructor gets overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.
	
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
	      }
	
	      // Wire up auto-binding
	      if (this.__reactAutoBindPairs.length) {
	        bindAutoBindMethods(this);
	      }
	
	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;
	
	      this.state = null;
	
	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.
	
	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (initialState === undefined && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
	
	      this.state = initialState;
	    });
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	    Constructor.prototype.__reactAutoBindPairs = [];
	
	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
	
	    mixSpecIntoComponent(Constructor, spec);
	
	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }
	
	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
	    }
	
	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }
	
	    return Constructor;
	  },
	
	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }
	
	};
	
	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypeLocationNames = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}
	
	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(9);
	
	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @private
	 */
	var createDOMFactory = ReactElement.createFactory;
	if (process.env.NODE_ENV !== 'production') {
	  var ReactElementValidator = __webpack_require__(25);
	  createDOMFactory = ReactElementValidator.createFactory;
	}
	
	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = {
	  a: createDOMFactory('a'),
	  abbr: createDOMFactory('abbr'),
	  address: createDOMFactory('address'),
	  area: createDOMFactory('area'),
	  article: createDOMFactory('article'),
	  aside: createDOMFactory('aside'),
	  audio: createDOMFactory('audio'),
	  b: createDOMFactory('b'),
	  base: createDOMFactory('base'),
	  bdi: createDOMFactory('bdi'),
	  bdo: createDOMFactory('bdo'),
	  big: createDOMFactory('big'),
	  blockquote: createDOMFactory('blockquote'),
	  body: createDOMFactory('body'),
	  br: createDOMFactory('br'),
	  button: createDOMFactory('button'),
	  canvas: createDOMFactory('canvas'),
	  caption: createDOMFactory('caption'),
	  cite: createDOMFactory('cite'),
	  code: createDOMFactory('code'),
	  col: createDOMFactory('col'),
	  colgroup: createDOMFactory('colgroup'),
	  data: createDOMFactory('data'),
	  datalist: createDOMFactory('datalist'),
	  dd: createDOMFactory('dd'),
	  del: createDOMFactory('del'),
	  details: createDOMFactory('details'),
	  dfn: createDOMFactory('dfn'),
	  dialog: createDOMFactory('dialog'),
	  div: createDOMFactory('div'),
	  dl: createDOMFactory('dl'),
	  dt: createDOMFactory('dt'),
	  em: createDOMFactory('em'),
	  embed: createDOMFactory('embed'),
	  fieldset: createDOMFactory('fieldset'),
	  figcaption: createDOMFactory('figcaption'),
	  figure: createDOMFactory('figure'),
	  footer: createDOMFactory('footer'),
	  form: createDOMFactory('form'),
	  h1: createDOMFactory('h1'),
	  h2: createDOMFactory('h2'),
	  h3: createDOMFactory('h3'),
	  h4: createDOMFactory('h4'),
	  h5: createDOMFactory('h5'),
	  h6: createDOMFactory('h6'),
	  head: createDOMFactory('head'),
	  header: createDOMFactory('header'),
	  hgroup: createDOMFactory('hgroup'),
	  hr: createDOMFactory('hr'),
	  html: createDOMFactory('html'),
	  i: createDOMFactory('i'),
	  iframe: createDOMFactory('iframe'),
	  img: createDOMFactory('img'),
	  input: createDOMFactory('input'),
	  ins: createDOMFactory('ins'),
	  kbd: createDOMFactory('kbd'),
	  keygen: createDOMFactory('keygen'),
	  label: createDOMFactory('label'),
	  legend: createDOMFactory('legend'),
	  li: createDOMFactory('li'),
	  link: createDOMFactory('link'),
	  main: createDOMFactory('main'),
	  map: createDOMFactory('map'),
	  mark: createDOMFactory('mark'),
	  menu: createDOMFactory('menu'),
	  menuitem: createDOMFactory('menuitem'),
	  meta: createDOMFactory('meta'),
	  meter: createDOMFactory('meter'),
	  nav: createDOMFactory('nav'),
	  noscript: createDOMFactory('noscript'),
	  object: createDOMFactory('object'),
	  ol: createDOMFactory('ol'),
	  optgroup: createDOMFactory('optgroup'),
	  option: createDOMFactory('option'),
	  output: createDOMFactory('output'),
	  p: createDOMFactory('p'),
	  param: createDOMFactory('param'),
	  picture: createDOMFactory('picture'),
	  pre: createDOMFactory('pre'),
	  progress: createDOMFactory('progress'),
	  q: createDOMFactory('q'),
	  rp: createDOMFactory('rp'),
	  rt: createDOMFactory('rt'),
	  ruby: createDOMFactory('ruby'),
	  s: createDOMFactory('s'),
	  samp: createDOMFactory('samp'),
	  script: createDOMFactory('script'),
	  section: createDOMFactory('section'),
	  select: createDOMFactory('select'),
	  small: createDOMFactory('small'),
	  source: createDOMFactory('source'),
	  span: createDOMFactory('span'),
	  strong: createDOMFactory('strong'),
	  style: createDOMFactory('style'),
	  sub: createDOMFactory('sub'),
	  summary: createDOMFactory('summary'),
	  sup: createDOMFactory('sup'),
	  table: createDOMFactory('table'),
	  tbody: createDOMFactory('tbody'),
	  td: createDOMFactory('td'),
	  textarea: createDOMFactory('textarea'),
	  tfoot: createDOMFactory('tfoot'),
	  th: createDOMFactory('th'),
	  thead: createDOMFactory('thead'),
	  time: createDOMFactory('time'),
	  title: createDOMFactory('title'),
	  tr: createDOMFactory('tr'),
	  track: createDOMFactory('track'),
	  u: createDOMFactory('u'),
	  ul: createDOMFactory('ul'),
	  'var': createDOMFactory('var'),
	  video: createDOMFactory('video'),
	  wbr: createDOMFactory('wbr'),
	
	  // SVG
	  circle: createDOMFactory('circle'),
	  clipPath: createDOMFactory('clipPath'),
	  defs: createDOMFactory('defs'),
	  ellipse: createDOMFactory('ellipse'),
	  g: createDOMFactory('g'),
	  image: createDOMFactory('image'),
	  line: createDOMFactory('line'),
	  linearGradient: createDOMFactory('linearGradient'),
	  mask: createDOMFactory('mask'),
	  path: createDOMFactory('path'),
	  pattern: createDOMFactory('pattern'),
	  polygon: createDOMFactory('polygon'),
	  polyline: createDOMFactory('polyline'),
	  radialGradient: createDOMFactory('radialGradient'),
	  rect: createDOMFactory('rect'),
	  stop: createDOMFactory('stop'),
	  svg: createDOMFactory('svg'),
	  text: createDOMFactory('text'),
	  tspan: createDOMFactory('tspan')
	};
	
	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(10);
	var ReactComponentTreeHook = __webpack_require__(26);
	var ReactElement = __webpack_require__(9);
	
	var checkReactTypeSpec = __webpack_require__(27);
	
	var canDefineProperty = __webpack_require__(13);
	var getIteratorFn = __webpack_require__(16);
	var warning = __webpack_require__(11);
	
	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};
	
	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();
	
	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      info = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }
	  return info;
	}
	
	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;
	
	  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});
	
	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
	  if (memoizer[currentComponentErrorInfo]) {
	    return;
	  }
	  memoizer[currentComponentErrorInfo] = true;
	
	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwner = '';
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }
	
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
	}
	
	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}
	
	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
	  }
	}
	
	var ReactElementValidator = {
	
	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    if (!validType) {
	      if (typeof type !== 'function' && typeof type !== 'string') {
	        var info = '';
	        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
	        }
	        info += getDeclarationErrorAddendum();
	        process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
	      }
	    }
	
	    var element = ReactElement.createElement.apply(this, arguments);
	
	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }
	
	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }
	
	    validatePropTypes(element);
	
	    return element;
	  },
	
	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }
	
	    return validatedFactory;
	  },
	
	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }
	
	};
	
	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(7);
	
	var ReactCurrentOwner = __webpack_require__(10);
	
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);
	
	function isNative(fn) {
	  // Based on isNative() from Lodash
	  var funcToString = Function.prototype.toString;
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	  var reIsNative = RegExp('^' + funcToString
	  // Take an example native function source for comparison
	  .call(hasOwnProperty)
	  // Strip regex characters so we can use it for regex
	  .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  // Remove hasOwnProperty from the template to make it generic
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
	  try {
	    var source = funcToString.call(fn);
	    return reIsNative.test(source);
	  } catch (err) {
	    return false;
	  }
	}
	
	var canUseCollections =
	// Array.from
	typeof Array.from === 'function' &&
	// Map
	typeof Map === 'function' && isNative(Map) &&
	// Map.prototype.keys
	Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
	// Set
	typeof Set === 'function' && isNative(Set) &&
	// Set.prototype.keys
	Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);
	
	var setItem;
	var getItem;
	var removeItem;
	var getItemIDs;
	var addRoot;
	var removeRoot;
	var getRootIDs;
	
	if (canUseCollections) {
	  var itemMap = new Map();
	  var rootIDSet = new Set();
	
	  setItem = function (id, item) {
	    itemMap.set(id, item);
	  };
	  getItem = function (id) {
	    return itemMap.get(id);
	  };
	  removeItem = function (id) {
	    itemMap['delete'](id);
	  };
	  getItemIDs = function () {
	    return Array.from(itemMap.keys());
	  };
	
	  addRoot = function (id) {
	    rootIDSet.add(id);
	  };
	  removeRoot = function (id) {
	    rootIDSet['delete'](id);
	  };
	  getRootIDs = function () {
	    return Array.from(rootIDSet.keys());
	  };
	} else {
	  var itemByKey = {};
	  var rootByKey = {};
	
	  // Use non-numeric keys to prevent V8 performance issues:
	  // https://github.com/facebook/react/pull/7232
	  var getKeyFromID = function (id) {
	    return '.' + id;
	  };
	  var getIDFromKey = function (key) {
	    return parseInt(key.substr(1), 10);
	  };
	
	  setItem = function (id, item) {
	    var key = getKeyFromID(id);
	    itemByKey[key] = item;
	  };
	  getItem = function (id) {
	    var key = getKeyFromID(id);
	    return itemByKey[key];
	  };
	  removeItem = function (id) {
	    var key = getKeyFromID(id);
	    delete itemByKey[key];
	  };
	  getItemIDs = function () {
	    return Object.keys(itemByKey).map(getIDFromKey);
	  };
	
	  addRoot = function (id) {
	    var key = getKeyFromID(id);
	    rootByKey[key] = true;
	  };
	  removeRoot = function (id) {
	    var key = getKeyFromID(id);
	    delete rootByKey[key];
	  };
	  getRootIDs = function () {
	    return Object.keys(rootByKey).map(getIDFromKey);
	  };
	}
	
	var unmountedIDs = [];
	
	function purgeDeep(id) {
	  var item = getItem(id);
	  if (item) {
	    var childIDs = item.childIDs;
	
	    removeItem(id);
	    childIDs.forEach(purgeDeep);
	  }
	}
	
	function describeComponentFrame(name, source, ownerName) {
	  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
	}
	
	function getDisplayName(element) {
	  if (element == null) {
	    return '#empty';
	  } else if (typeof element === 'string' || typeof element === 'number') {
	    return '#text';
	  } else if (typeof element.type === 'string') {
	    return element.type;
	  } else {
	    return element.type.displayName || element.type.name || 'Unknown';
	  }
	}
	
	function describeID(id) {
	  var name = ReactComponentTreeHook.getDisplayName(id);
	  var element = ReactComponentTreeHook.getElement(id);
	  var ownerID = ReactComponentTreeHook.getOwnerID(id);
	  var ownerName;
	  if (ownerID) {
	    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
	  }
	  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
	  return describeComponentFrame(name, element && element._source, ownerName);
	}
	
	var ReactComponentTreeHook = {
	  onSetChildren: function (id, nextChildIDs) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.childIDs = nextChildIDs;
	
	    for (var i = 0; i < nextChildIDs.length; i++) {
	      var nextChildID = nextChildIDs[i];
	      var nextChild = getItem(nextChildID);
	      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
	      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
	      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
	      if (nextChild.parentID == null) {
	        nextChild.parentID = id;
	        // TODO: This shouldn't be necessary but mounting a new root during in
	        // componentWillMount currently causes not-yet-mounted components to
	        // be purged from our tree data so their parent id is missing.
	      }
	      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
	    }
	  },
	  onBeforeMountComponent: function (id, element, parentID) {
	    var item = {
	      element: element,
	      parentID: parentID,
	      text: null,
	      childIDs: [],
	      isMounted: false,
	      updateCount: 0
	    };
	    setItem(id, item);
	  },
	  onBeforeUpdateComponent: function (id, element) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.element = element;
	  },
	  onMountComponent: function (id) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.isMounted = true;
	    var isRoot = item.parentID === 0;
	    if (isRoot) {
	      addRoot(id);
	    }
	  },
	  onUpdateComponent: function (id) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.updateCount++;
	  },
	  onUnmountComponent: function (id) {
	    var item = getItem(id);
	    if (item) {
	      // We need to check if it exists.
	      // `item` might not exist if it is inside an error boundary, and a sibling
	      // error boundary child threw while mounting. Then this instance never
	      // got a chance to mount, but it still gets an unmounting event during
	      // the error boundary cleanup.
	      item.isMounted = false;
	      var isRoot = item.parentID === 0;
	      if (isRoot) {
	        removeRoot(id);
	      }
	    }
	    unmountedIDs.push(id);
	  },
	  purgeUnmountedComponents: function () {
	    if (ReactComponentTreeHook._preventPurging) {
	      // Should only be used for testing.
	      return;
	    }
	
	    for (var i = 0; i < unmountedIDs.length; i++) {
	      var id = unmountedIDs[i];
	      purgeDeep(id);
	    }
	    unmountedIDs.length = 0;
	  },
	  isMounted: function (id) {
	    var item = getItem(id);
	    return item ? item.isMounted : false;
	  },
	  getCurrentStackAddendum: function (topElement) {
	    var info = '';
	    if (topElement) {
	      var name = getDisplayName(topElement);
	      var owner = topElement._owner;
	      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
	    }
	
	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;
	
	    info += ReactComponentTreeHook.getStackAddendumByID(id);
	    return info;
	  },
	  getStackAddendumByID: function (id) {
	    var info = '';
	    while (id) {
	      info += describeID(id);
	      id = ReactComponentTreeHook.getParentID(id);
	    }
	    return info;
	  },
	  getChildIDs: function (id) {
	    var item = getItem(id);
	    return item ? item.childIDs : [];
	  },
	  getDisplayName: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element) {
	      return null;
	    }
	    return getDisplayName(element);
	  },
	  getElement: function (id) {
	    var item = getItem(id);
	    return item ? item.element : null;
	  },
	  getOwnerID: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element || !element._owner) {
	      return null;
	    }
	    return element._owner._debugID;
	  },
	  getParentID: function (id) {
	    var item = getItem(id);
	    return item ? item.parentID : null;
	  },
	  getSource: function (id) {
	    var item = getItem(id);
	    var element = item ? item.element : null;
	    var source = element != null ? element._source : null;
	    return source;
	  },
	  getText: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (typeof element === 'string') {
	      return element;
	    } else if (typeof element === 'number') {
	      return '' + element;
	    } else {
	      return null;
	    }
	  },
	  getUpdateCount: function (id) {
	    var item = getItem(id);
	    return item ? item.updateCount : 0;
	  },
	
	
	  getRootIDs: getRootIDs,
	  getRegisteredIDs: getItemIDs
	};
	
	module.exports = ReactComponentTreeHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(7);
	
	var ReactPropTypeLocationNames = __webpack_require__(23);
	var ReactPropTypesSecret = __webpack_require__(28);
	
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(26);
	}
	
	var loggedTypeFailures = {};
	
	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var componentStackInfo = '';
	
	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(26);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }
	
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}
	
	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 28 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	
	module.exports = ReactPropTypesSecret;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(9);
	var ReactPropTypeLocationNames = __webpack_require__(23);
	var ReactPropTypesSecret = __webpack_require__(28);
	
	var emptyFunction = __webpack_require__(12);
	var getIteratorFn = __webpack_require__(16);
	var warning = __webpack_require__(11);
	
	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */
	
	var ANONYMOUS = '<<anonymous>>';
	
	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),
	  symbol: createPrimitiveTypeChecker('symbol'),
	
	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};
	
	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	/*eslint-disable no-self-compare*/
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    return x !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}
	/*eslint-enable no-self-compare*/
	
	/**
	 * We use an Error-like object for backward compatibility as people may call
	 * PropTypes directly and inspect their output. However we don't use real
	 * Errors anymore. We don't inspect their stack anyway, and creating them
	 * is prohibitively expensive if they are created too often, such as what
	 * happens in oneOfType() for any type before the one that matched.
	 */
	function PropTypeError(message) {
	  this.message = message;
	  this.stack = '';
	}
	// Make `instanceof Error` still work for returned errors.
	PropTypeError.prototype = Error.prototype;
	
	function createChainableTypeChecker(validate) {
	  if (process.env.NODE_ENV !== 'production') {
	    var manualPropTypeCallCache = {};
	  }
	  function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (process.env.NODE_ENV !== 'production') {
	      if (secret !== ReactPropTypesSecret && typeof console !== 'undefined') {
	        var cacheKey = componentName + ':' + propName;
	        if (!manualPropTypeCallCache[cacheKey]) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will not work in production with the next major version. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName) : void 0;
	          manualPropTypeCallCache[cacheKey] = true;
	        }
	      }
	    }
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        if (props[propName] === null) {
	          return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	        }
	        return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }
	
	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);
	
	  return chainedCheckType;
	}
	
	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName, secret) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);
	
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}
	
	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	    }
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!ReactElement.isValidElement(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	    return emptyFunction.thatReturnsNull;
	  }
	
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (is(propValue, expectedValues[i])) {
	        return null;
	      }
	    }
	
	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	    }
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	    return emptyFunction.thatReturnsNull;
	  }
	
	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	        return null;
	      }
	    }
	
	    var locationName = ReactPropTypeLocationNames[location];
	    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }
	
	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }
	
	      return true;
	    default:
	      return false;
	  }
	}
	
	function isSymbol(propType, propValue) {
	  // Native Symbol.
	  if (propType === 'symbol') {
	    return true;
	  }
	
	  // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	  if (propValue['@@toStringTag'] === 'Symbol') {
	    return true;
	  }
	
	  // Fallback for non-spec compliant Symbols which are polyfilled.
	  if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	    return true;
	  }
	
	  return false;
	}
	
	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  if (isSymbol(propType, propValue)) {
	    return 'symbol';
	  }
	  return propType;
	}
	
	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}
	
	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return ANONYMOUS;
	  }
	  return propValue.constructor.name;
	}
	
	module.exports = ReactPropTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 30 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	module.exports = '15.4.2';

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	'use strict';
	
	var _prodInvariant = __webpack_require__(7);
	
	var ReactElement = __webpack_require__(9);
	
	var invariant = __webpack_require__(8);
	
	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
	  return children;
	}
	
	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(33);


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/
	
	'use strict';
	
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDefaultInjection = __webpack_require__(38);
	var ReactMount = __webpack_require__(166);
	var ReactReconciler = __webpack_require__(59);
	var ReactUpdates = __webpack_require__(56);
	var ReactVersion = __webpack_require__(171);
	
	var findDOMNode = __webpack_require__(172);
	var getHostComponentFromComposite = __webpack_require__(173);
	var renderSubtreeIntoContainer = __webpack_require__(174);
	var warning = __webpack_require__(11);
	
	ReactDefaultInjection.inject();
	
	var ReactDOM = {
	  findDOMNode: findDOMNode,
	  render: ReactMount.render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,
	
	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};
	
	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    ComponentTree: {
	      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
	      getNodeFromInstance: function (inst) {
	        // inst is an internal instance (but could be a composite)
	        if (inst._renderedComponent) {
	          inst = getHostComponentFromComposite(inst);
	        }
	        if (inst) {
	          return ReactDOMComponentTree.getNodeFromInstance(inst);
	        } else {
	          return null;
	        }
	      }
	    },
	    Mount: ReactMount,
	    Reconciler: ReactReconciler
	  });
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(48);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
	
	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        // Firefox does not have the issue with devtools loaded over file://
	        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
	        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }
	
	    var testFunc = function testFn() {};
	    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 'It looks like you\'re using a minified copy of the development build ' + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;
	
	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;
	
	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;
	
	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];
	
	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
	        break;
	      }
	    }
	  }
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  var ReactInstrumentation = __webpack_require__(62);
	  var ReactDOMUnknownPropertyHook = __webpack_require__(175);
	  var ReactDOMNullInputValuePropHook = __webpack_require__(176);
	  var ReactDOMInvalidARIAHook = __webpack_require__(177);
	
	  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
	}
	
	module.exports = ReactDOM;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var DOMProperty = __webpack_require__(36);
	var ReactDOMComponentFlags = __webpack_require__(37);
	
	var invariant = __webpack_require__(8);
	
	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var Flags = ReactDOMComponentFlags;
	
	var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);
	
	/**
	 * Check if a given node should be cached.
	 */
	function shouldPrecacheNode(node, nodeID) {
	  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
	}
	
	/**
	 * Drill down (through composites and empty components) until we get a host or
	 * host text component.
	 *
	 * This is pretty polymorphic but unavoidable with the current structure we have
	 * for `_renderedChildren`.
	 */
	function getRenderedHostOrTextFromComponent(component) {
	  var rendered;
	  while (rendered = component._renderedComponent) {
	    component = rendered;
	  }
	  return component;
	}
	
	/**
	 * Populate `_hostNode` on the rendered host/text component with the given
	 * DOM node. The passed `inst` can be a composite.
	 */
	function precacheNode(inst, node) {
	  var hostInst = getRenderedHostOrTextFromComponent(inst);
	  hostInst._hostNode = node;
	  node[internalInstanceKey] = hostInst;
	}
	
	function uncacheNode(inst) {
	  var node = inst._hostNode;
	  if (node) {
	    delete node[internalInstanceKey];
	    inst._hostNode = null;
	  }
	}
	
	/**
	 * Populate `_hostNode` on each child of `inst`, assuming that the children
	 * match up with the DOM (element) children of `node`.
	 *
	 * We cache entire levels at once to avoid an n^2 problem where we access the
	 * children of a node sequentially and have to walk from the start to our target
	 * node every time.
	 *
	 * Since we update `_renderedChildren` and the actual DOM at (slightly)
	 * different times, we could race here and see a newer `_renderedChildren` than
	 * the DOM nodes we see. To avoid this, ReactMultiChild calls
	 * `prepareToManageChildren` before we change `_renderedChildren`, at which
	 * time the container's child nodes are always cached (until it unmounts).
	 */
	function precacheChildNodes(inst, node) {
	  if (inst._flags & Flags.hasCachedChildNodes) {
	    return;
	  }
	  var children = inst._renderedChildren;
	  var childNode = node.firstChild;
	  outer: for (var name in children) {
	    if (!children.hasOwnProperty(name)) {
	      continue;
	    }
	    var childInst = children[name];
	    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
	    if (childID === 0) {
	      // We're currently unmounting this child in ReactMultiChild; skip it.
	      continue;
	    }
	    // We assume the child nodes are in the same order as the child instances.
	    for (; childNode !== null; childNode = childNode.nextSibling) {
	      if (shouldPrecacheNode(childNode, childID)) {
	        precacheNode(childInst, childNode);
	        continue outer;
	      }
	    }
	    // We reached the end of the DOM children without finding an ID match.
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
	  }
	  inst._flags |= Flags.hasCachedChildNodes;
	}
	
	/**
	 * Given a DOM node, return the closest ReactDOMComponent or
	 * ReactDOMTextComponent instance ancestor.
	 */
	function getClosestInstanceFromNode(node) {
	  if (node[internalInstanceKey]) {
	    return node[internalInstanceKey];
	  }
	
	  // Walk up the tree until we find an ancestor whose instance we have cached.
	  var parents = [];
	  while (!node[internalInstanceKey]) {
	    parents.push(node);
	    if (node.parentNode) {
	      node = node.parentNode;
	    } else {
	      // Top of the tree. This node must not be part of a React tree (or is
	      // unmounted, potentially).
	      return null;
	    }
	  }
	
	  var closest;
	  var inst;
	  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
	    closest = inst;
	    if (parents.length) {
	      precacheChildNodes(inst, node);
	    }
	  }
	
	  return closest;
	}
	
	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */
	function getInstanceFromNode(node) {
	  var inst = getClosestInstanceFromNode(node);
	  if (inst != null && inst._hostNode === node) {
	    return inst;
	  } else {
	    return null;
	  }
	}
	
	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */
	function getNodeFromInstance(inst) {
	  // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.
	  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	
	  if (inst._hostNode) {
	    return inst._hostNode;
	  }
	
	  // Walk up the tree until we find an ancestor whose DOM node we have cached.
	  var parents = [];
	  while (!inst._hostNode) {
	    parents.push(inst);
	    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
	    inst = inst._hostParent;
	  }
	
	  // Now parents contains each ancestor that does *not* have a cached native
	  // node, and `inst` is the deepest ancestor that does.
	  for (; parents.length; inst = parents.pop()) {
	    precacheChildNodes(inst, inst._hostNode);
	  }
	
	  return inst._hostNode;
	}
	
	var ReactDOMComponentTree = {
	  getClosestInstanceFromNode: getClosestInstanceFromNode,
	  getInstanceFromNode: getInstanceFromNode,
	  getNodeFromInstance: getNodeFromInstance,
	  precacheChildNodes: precacheChildNodes,
	  precacheNode: precacheNode,
	  uncacheNode: uncacheNode
	};
	
	module.exports = ReactDOMComponentTree;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 35 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';
	
	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */
	
	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;
	
	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;
	
	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }
	
	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';
	
	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame
	
	  throw error;
	}
	
	module.exports = reactProdInvariant;

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var invariant = __webpack_require__(8);
	
	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}
	
	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_PROPERTY: 0x1,
	  HAS_BOOLEAN_VALUE: 0x4,
	  HAS_NUMERIC_VALUE: 0x8,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,
	
	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};
	
	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }
	
	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;
	
	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];
	
	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,
	
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;
	
	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }
	
	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }
	
	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }
	
	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }
	
	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }
	
	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};
	
	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
	/* eslint-enable max-len */
	
	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {
	
	  ID_ATTRIBUTE_NAME: 'data-reactid',
	  ROOT_ATTRIBUTE_NAME: 'data-reactroot',
	
	  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
	  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',
	
	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},
	
	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   *
	   * autofocus is predefined, because adding it to the property whitelist
	   * causes unintended side effects.
	   *
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? { autofocus: 'autoFocus' } : null,
	
	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],
	
	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },
	
	  injection: DOMPropertyInjection
	};
	
	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 37 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMComponentFlags = {
	  hasCachedChildNodes: 1 << 0
	};
	
	module.exports = ReactDOMComponentFlags;

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ARIADOMPropertyConfig = __webpack_require__(39);
	var BeforeInputEventPlugin = __webpack_require__(40);
	var ChangeEventPlugin = __webpack_require__(55);
	var DefaultEventPluginOrder = __webpack_require__(72);
	var EnterLeaveEventPlugin = __webpack_require__(73);
	var HTMLDOMPropertyConfig = __webpack_require__(78);
	var ReactComponentBrowserEnvironment = __webpack_require__(79);
	var ReactDOMComponent = __webpack_require__(92);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDOMEmptyComponent = __webpack_require__(137);
	var ReactDOMTreeTraversal = __webpack_require__(138);
	var ReactDOMTextComponent = __webpack_require__(139);
	var ReactDefaultBatchingStrategy = __webpack_require__(140);
	var ReactEventListener = __webpack_require__(141);
	var ReactInjection = __webpack_require__(144);
	var ReactReconcileTransaction = __webpack_require__(145);
	var SVGDOMPropertyConfig = __webpack_require__(153);
	var SelectEventPlugin = __webpack_require__(154);
	var SimpleEventPlugin = __webpack_require__(155);
	
	var alreadyInjected = false;
	
	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;
	
	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);
	
	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
	  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);
	
	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });
	
	  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);
	
	  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);
	
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);
	
	  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
	    return new ReactDOMEmptyComponent(instantiate);
	  });
	
	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	
	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	}
	
	module.exports = {
	  inject: inject
	};

/***/ },
/* 39 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ARIADOMPropertyConfig = {
	  Properties: {
	    // Global States and Properties
	    'aria-current': 0, // state
	    'aria-details': 0,
	    'aria-disabled': 0, // state
	    'aria-hidden': 0, // state
	    'aria-invalid': 0, // state
	    'aria-keyshortcuts': 0,
	    'aria-label': 0,
	    'aria-roledescription': 0,
	    // Widget Attributes
	    'aria-autocomplete': 0,
	    'aria-checked': 0,
	    'aria-expanded': 0,
	    'aria-haspopup': 0,
	    'aria-level': 0,
	    'aria-modal': 0,
	    'aria-multiline': 0,
	    'aria-multiselectable': 0,
	    'aria-orientation': 0,
	    'aria-placeholder': 0,
	    'aria-pressed': 0,
	    'aria-readonly': 0,
	    'aria-required': 0,
	    'aria-selected': 0,
	    'aria-sort': 0,
	    'aria-valuemax': 0,
	    'aria-valuemin': 0,
	    'aria-valuenow': 0,
	    'aria-valuetext': 0,
	    // Live Region Attributes
	    'aria-atomic': 0,
	    'aria-busy': 0,
	    'aria-live': 0,
	    'aria-relevant': 0,
	    // Drag-and-Drop Attributes
	    'aria-dropeffect': 0,
	    'aria-grabbed': 0,
	    // Relationship Attributes
	    'aria-activedescendant': 0,
	    'aria-colcount': 0,
	    'aria-colindex': 0,
	    'aria-colspan': 0,
	    'aria-controls': 0,
	    'aria-describedby': 0,
	    'aria-errormessage': 0,
	    'aria-flowto': 0,
	    'aria-labelledby': 0,
	    'aria-owns': 0,
	    'aria-posinset': 0,
	    'aria-rowcount': 0,
	    'aria-rowindex': 0,
	    'aria-rowspan': 0,
	    'aria-setsize': 0
	  },
	  DOMAttributeNames: {},
	  DOMPropertyNames: {}
	};
	
	module.exports = ARIADOMPropertyConfig;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPropagators = __webpack_require__(41);
	var ExecutionEnvironment = __webpack_require__(48);
	var FallbackCompositionState = __webpack_require__(49);
	var SyntheticCompositionEvent = __webpack_require__(52);
	var SyntheticInputEvent = __webpack_require__(54);
	
	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;
	
	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;
	
	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}
	
	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();
	
	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
	
	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}
	
	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
	
	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: 'onBeforeInput',
	      captured: 'onBeforeInputCapture'
	    },
	    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionEnd',
	      captured: 'onCompositionEndCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionStart',
	      captured: 'onCompositionStartCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionUpdate',
	      captured: 'onCompositionUpdateCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  }
	};
	
	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;
	
	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}
	
	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case 'topCompositionStart':
	      return eventTypes.compositionStart;
	    case 'topCompositionEnd':
	      return eventTypes.compositionEnd;
	    case 'topCompositionUpdate':
	      return eventTypes.compositionUpdate;
	  }
	}
	
	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
	}
	
	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topKeyUp':
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case 'topKeyDown':
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case 'topKeyPress':
	    case 'topMouseDown':
	    case 'topBlur':
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}
	
	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}
	
	// Track the current IME composition fallback object, if any.
	var currentComposition = null;
	
	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;
	
	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }
	
	  if (!eventType) {
	    return null;
	  }
	
	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }
	
	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);
	
	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }
	
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topCompositionEnd':
	      return getDataFromCustomEvent(nativeEvent);
	    case 'topKeyPress':
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }
	
	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;
	
	    case 'topTextInput':
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;
	
	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }
	
	      return chars;
	
	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}
	
	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (currentComposition) {
	    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }
	
	  switch (topLevelType) {
	    case 'topPaste':
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case 'topKeyPress':
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case 'topCompositionEnd':
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}
	
	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;
	
	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }
	
	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }
	
	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
	
	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
	  }
	};
	
	module.exports = BeforeInputEventPlugin;

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(42);
	var EventPluginUtils = __webpack_require__(44);
	
	var accumulateInto = __webpack_require__(46);
	var forEachAccumulated = __webpack_require__(47);
	var warning = __webpack_require__(11);
	
	var getListener = EventPluginHub.getListener;
	
	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}
	
	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(inst, phase, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
	  }
	  var listener = listenerAtPhase(inst, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}
	
	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}
	
	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    var targetInst = event._targetInst;
	    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
	    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
	  }
	}
	
	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}
	
	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}
	
	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}
	
	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}
	
	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}
	
	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}
	
	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};
	
	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var EventPluginRegistry = __webpack_require__(43);
	var EventPluginUtils = __webpack_require__(44);
	var ReactErrorUtils = __webpack_require__(45);
	
	var accumulateInto = __webpack_require__(46);
	var forEachAccumulated = __webpack_require__(47);
	var invariant = __webpack_require__(8);
	
	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};
	
	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;
	
	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);
	
	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};
	
	var getDictionaryKey = function (inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	};
	
	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}
	
	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	      return !!(props.disabled && isInteractive(type));
	    default:
	      return false;
	  }
	}
	
	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {
	
	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {
	
	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,
	
	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
	
	  },
	
	  /**
	   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {function} listener The callback to store.
	   */
	  putListener: function (inst, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;
	
	    var key = getDictionaryKey(inst);
	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[key] = listener;
	
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(inst, registrationName, listener);
	    }
	  },
	
	  /**
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (inst, registrationName) {
	    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
	    // live here; needs to be moved to a better place soon
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
	      return null;
	    }
	    var key = getDictionaryKey(inst);
	    return bankForRegistrationName && bankForRegistrationName[key];
	  },
	
	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (inst, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(inst, registrationName);
	    }
	
	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      var key = getDictionaryKey(inst);
	      delete bankForRegistrationName[key];
	    }
	  },
	
	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   */
	  deleteAllListeners: function (inst) {
	    var key = getDictionaryKey(inst);
	    for (var registrationName in listenerBank) {
	      if (!listenerBank.hasOwnProperty(registrationName)) {
	        continue;
	      }
	
	      if (!listenerBank[registrationName][key]) {
	        continue;
	      }
	
	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(inst, registrationName);
	      }
	
	      delete listenerBank[registrationName][key];
	    }
	  },
	
	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },
	
	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },
	
	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },
	
	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },
	
	  __getListenerBank: function () {
	    return listenerBank;
	  }
	
	};
	
	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var invariant = __webpack_require__(8);
	
	/**
	 * Injectable ordering of event plugins.
	 */
	var eventPluginOrder = null;
	
	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};
	
	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!eventPluginOrder) {
	    // Wait until an `eventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var pluginModule = namesToPlugins[pluginName];
	    var pluginIndex = eventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
	    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
	    var publishedEvents = pluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
	    }
	  }
	}
	
	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
	
	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
	    return true;
	  }
	  return false;
	}
	
	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, pluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
	  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
	
	  if (process.env.NODE_ENV !== 'production') {
	    var lowerCasedName = registrationName.toLowerCase();
	    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;
	
	    if (registrationName === 'onDoubleClick') {
	      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }
	}
	
	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {
	
	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],
	
	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},
	
	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},
	
	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},
	
	  /**
	   * Mapping from lowercase registration names to the properly cased version,
	   * used to warn in the case of missing event handlers. Available
	   * only in __DEV__.
	   * @type {Object}
	   */
	  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,
	  // Trust the developer to only use possibleRegistrationNames in __DEV__
	
	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (injectedEventPluginOrder) {
	    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
	    // Clone the ordering so it cannot be dynamically mutated.
	    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
	    recomputePluginOrdering();
	  },
	
	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var pluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
	        namesToPlugins[pluginName] = pluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },
	
	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    if (dispatchConfig.phasedRegistrationNames !== undefined) {
	      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
	      // that it is not undefined.
	      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	
	      for (var phase in phasedRegistrationNames) {
	        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
	          continue;
	        }
	        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
	        if (pluginModule) {
	          return pluginModule;
	        }
	      }
	    }
	    return null;
	  },
	
	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    eventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;
	
	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }
	
	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
	      for (var lowerCasedName in possibleRegistrationNames) {
	        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
	          delete possibleRegistrationNames[lowerCasedName];
	        }
	      }
	    }
	  }
	
	};
	
	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var ReactErrorUtils = __webpack_require__(45);
	
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);
	
	/**
	 * Injected dependencies:
	 */
	
	/**
	 * - `ComponentTree`: [required] Module that can convert between React instances
	 *   and actual node references.
	 */
	var ComponentTree;
	var TreeTraversal;
	var injection = {
	  injectComponentTree: function (Injected) {
	    ComponentTree = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
	    }
	  },
	  injectTreeTraversal: function (Injected) {
	    TreeTraversal = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
	    }
	  }
	};
	
	function isEndish(topLevelType) {
	  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
	}
	
	function isMoveish(topLevelType) {
	  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
	}
	function isStartish(topLevelType) {
	  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
	}
	
	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;
	
	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
	
	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
	
	    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
	  };
	}
	
	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */
	function executeDispatch(event, simulated, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
	  }
	  event.currentTarget = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
	  }
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchInstances[i])) {
	        return dispatchInstances[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchInstances)) {
	      return dispatchInstances;
	    }
	  }
	  return null;
	}
	
	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchInstances = null;
	  event._dispatchListeners = null;
	  return ret;
	}
	
	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchInstance = event._dispatchInstances;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
	  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
	  var res = dispatchListener ? dispatchListener(event) : null;
	  event.currentTarget = null;
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	  return res;
	}
	
	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}
	
	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,
	
	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,
	
	  getInstanceFromNode: function (node) {
	    return ComponentTree.getInstanceFromNode(node);
	  },
	  getNodeFromInstance: function (node) {
	    return ComponentTree.getNodeFromInstance(node);
	  },
	  isAncestor: function (a, b) {
	    return TreeTraversal.isAncestor(a, b);
	  },
	  getLowestCommonAncestor: function (a, b) {
	    return TreeTraversal.getLowestCommonAncestor(a, b);
	  },
	  getParentInstance: function (inst) {
	    return TreeTraversal.getParentInstance(inst);
	  },
	  traverseTwoPhase: function (target, fn, arg) {
	    return TreeTraversal.traverseTwoPhase(target, fn, arg);
	  },
	  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
	    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
	  },
	
	  injection: injection
	};
	
	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var caughtError = null;
	
	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a) {
	  try {
	    func(a);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	  }
	}
	
	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,
	
	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,
	
	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};
	
	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
	      var boundFunc = func.bind(null, a);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      // $FlowFixMe https://github.com/facebook/flow/issues/2336
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}
	
	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var invariant = __webpack_require__(8);
	
	/**
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */
	
	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;
	
	  if (current == null) {
	    return next;
	  }
	
	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  if (Array.isArray(current)) {
	    if (Array.isArray(next)) {
	      current.push.apply(current, next);
	      return current;
	    }
	    current.push(next);
	    return current;
	  }
	
	  if (Array.isArray(next)) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }
	
	  return [current, next];
	}
	
	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 47 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	
	function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	}
	
	module.exports = forEachAccumulated;

/***/ },
/* 48 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	
	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {
	
	  canUseDOM: canUseDOM,
	
	  canUseWorkers: typeof Worker !== 'undefined',
	
	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
	
	  canUseViewport: canUseDOM && !!window.screen,
	
	  isInWorker: !canUseDOM // For now, this is true - might change in the future.
	
	};
	
	module.exports = ExecutionEnvironment;

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var PooledClass = __webpack_require__(50);
	
	var getTextContentAccessor = __webpack_require__(51);
	
	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}
	
	_assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },
	
	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },
	
	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }
	
	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;
	
	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }
	
	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }
	
	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});
	
	PooledClass.addPoolingTo(FallbackCompositionState);
	
	module.exports = FallbackCompositionState;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var invariant = __webpack_require__(8);
	
	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};
	
	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};
	
	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};
	
	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};
	
	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};
	
	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;
	
	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};
	
	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler
	};
	
	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(48);
	
	var contentKey = null;
	
	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}
	
	module.exports = getTextContentAccessor;

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(53);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);
	
	module.exports = SyntheticCompositionEvent;

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var PooledClass = __webpack_require__(50);
	
	var emptyFunction = __webpack_require__(12);
	var warning = __webpack_require__(11);
	
	var didWarnForAddedNewProperty = false;
	var isProxySupported = typeof Proxy === 'function';
	
	var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};
	
	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */
	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  if (process.env.NODE_ENV !== 'production') {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	  }
	
	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;
	
	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      delete this[propName]; // this has a getter/setter for warnings
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }
	
	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	  return this;
	}
	
	_assign(SyntheticEvent.prototype, {
	
	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }
	
	    if (event.preventDefault) {
	      event.preventDefault();
	    } else if (typeof event.returnValue !== 'unknown') {
	      // eslint-disable-line valid-typeof
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },
	
	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }
	
	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else if (typeof event.cancelBubble !== 'unknown') {
	      // eslint-disable-line valid-typeof
	      // The ChangeEventPlugin registers a "propertychange" event for
	      // IE. This event does not support bubbling or cancelling, and
	      // any references to cancelBubble throw "Member not found".  A
	      // typeof check of "unknown" circumvents this issue (and is also
	      // IE specific).
	      event.cancelBubble = true;
	    }
	
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,
	
	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      if (process.env.NODE_ENV !== 'production') {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      } else {
	        this[propName] = null;
	      }
	    }
	    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
	      this[shouldBeReleasedProperties[i]] = null;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
	    }
	  }
	
	});
	
	SyntheticEvent.Interface = EventInterface;
	
	if (process.env.NODE_ENV !== 'production') {
	  if (isProxySupported) {
	    /*eslint-disable no-func-assign */
	    SyntheticEvent = new Proxy(SyntheticEvent, {
	      construct: function (target, args) {
	        return this.apply(target, Object.create(target.prototype), args);
	      },
	      apply: function (constructor, that, args) {
	        return new Proxy(constructor.apply(that, args), {
	          set: function (target, prop, value) {
	            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
	              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
	              didWarnForAddedNewProperty = true;
	            }
	            target[prop] = value;
	            return true;
	          }
	        });
	      }
	    });
	    /*eslint-enable no-func-assign */
	  }
	}
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;
	
	  var E = function () {};
	  E.prototype = Super.prototype;
	  var prototype = new E();
	
	  _assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;
	
	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;
	
	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};
	
	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);
	
	module.exports = SyntheticEvent;
	
	/**
	  * Helper to nullify syntheticEvent instance properties when destructing
	  *
	  * @param {object} SyntheticEvent
	  * @param {String} propName
	  * @return {object} defineProperty object
	  */
	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };
	
	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }
	
	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }
	
	  function warn(action, result) {
	    var warningCondition = false;
	    process.env.NODE_ENV !== 'production' ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(53);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);
	
	module.exports = SyntheticInputEvent;

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(42);
	var EventPropagators = __webpack_require__(41);
	var ExecutionEnvironment = __webpack_require__(48);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(56);
	var SyntheticEvent = __webpack_require__(53);
	
	var getEventTarget = __webpack_require__(69);
	var isEventSupported = __webpack_require__(70);
	var isTextInputElement = __webpack_require__(71);
	
	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: 'onChange',
	      captured: 'onChangeCapture'
	    },
	    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
	  }
	};
	
	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementInst = null;
	var activeElementValue = null;
	var activeElementValueProp = null;
	
	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}
	
	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
	}
	
	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	
	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}
	
	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}
	
	function startWatchingForChangeEventIE8(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}
	
	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementInst = null;
	}
	
	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topChange') {
	    return targetInst;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForChangeEventIE8();
	  }
	}
	
	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  // IE10+ fire input events to often, such when a placeholder
	  // changes or when an input with a placeholder is focused.
	  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 11);
	}
	
	/**
	 * (For IE <=11) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};
	
	/**
	 * (For IE <=11) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');
	
	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  if (activeElement.attachEvent) {
	    activeElement.attachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.addEventListener('propertychange', handlePropertyChange, false);
	  }
	}
	
	/**
	 * (For IE <=11) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }
	
	  // delete restores the original property definition
	  delete activeElement.value;
	
	  if (activeElement.detachEvent) {
	    activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.removeEventListener('propertychange', handlePropertyChange, false);
	  }
	
	  activeElement = null;
	  activeElementInst = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}
	
	/**
	 * (For IE <=11) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;
	
	  manualDispatchChangeEvent(nativeEvent);
	}
	
	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetInstForInputEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topInput') {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return targetInst;
	  }
	}
	
	function handleEventsForInputEventIE(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9-11, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForValueChange();
	  }
	}
	
	// For IE8 and IE9.
	function getTargetInstForInputEventIE(topLevelType, targetInst) {
	  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementInst;
	    }
	  }
	}
	
	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}
	
	function getTargetInstForClickEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topClick') {
	    return targetInst;
	  }
	}
	
	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;
	
	    var getTargetInstFunc, handleEventFunc;
	    if (shouldUseChangeEvent(targetNode)) {
	      if (doesChangeEventBubble) {
	        getTargetInstFunc = getTargetInstForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }
	
	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst);
	      if (inst) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }
	
	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    }
	  }
	
	};
	
	module.exports = ChangeEventPlugin;

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);
	
	var CallbackQueue = __webpack_require__(57);
	var PooledClass = __webpack_require__(50);
	var ReactFeatureFlags = __webpack_require__(58);
	var ReactReconciler = __webpack_require__(59);
	var Transaction = __webpack_require__(68);
	
	var invariant = __webpack_require__(8);
	
	var dirtyComponents = [];
	var updateBatchNumber = 0;
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;
	
	var batchingStrategy = null;
	
	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
	}
	
	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};
	
	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};
	
	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];
	
	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */true);
	}
	
	_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },
	
	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});
	
	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);
	
	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}
	
	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}
	
	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;
	
	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);
	
	  // Any updates enqueued while reconciling must be performed after this entire
	  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
	  // C, B could update twice in a single batch if C's render enqueues an update
	  // to B (since B would have already updated, we should skip it, and the only
	  // way we can know to do so is by checking the batch counter).
	  updateBatchNumber++;
	
	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];
	
	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;
	
	    var markerName;
	    if (ReactFeatureFlags.logTopLevelRenders) {
	      var namedComponent = component;
	      // Duck type TopLevelWrapper. This is probably always true.
	      if (component._currentElement.type.isReactTopLevelWrapper) {
	        namedComponent = component._renderedComponent;
	      }
	      markerName = 'React update: ' + namedComponent.getName();
	      console.time(markerName);
	    }
	
	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);
	
	    if (markerName) {
	      console.timeEnd(markerName);
	    }
	
	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}
	
	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }
	
	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	
	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();
	
	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)
	
	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }
	
	  dirtyComponents.push(component);
	  if (component._updateBatchNumber == null) {
	    component._updateBatchNumber = updateBatchNumber + 1;
	  }
	}
	
	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}
	
	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },
	
	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
	    batchingStrategy = _batchingStrategy;
	  }
	};
	
	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,
	
	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};
	
	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var PooledClass = __webpack_require__(50);
	
	var invariant = __webpack_require__(8);
	
	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	
	var CallbackQueue = function () {
	  function CallbackQueue(arg) {
	    _classCallCheck(this, CallbackQueue);
	
	    this._callbacks = null;
	    this._contexts = null;
	    this._arg = arg;
	  }
	
	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	
	
	  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._callbacks.push(callback);
	    this._contexts = this._contexts || [];
	    this._contexts.push(context);
	  };
	
	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	
	
	  CallbackQueue.prototype.notifyAll = function notifyAll() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    var arg = this._arg;
	    if (callbacks && contexts) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i], arg);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  };
	
	  CallbackQueue.prototype.checkpoint = function checkpoint() {
	    return this._callbacks ? this._callbacks.length : 0;
	  };
	
	  CallbackQueue.prototype.rollback = function rollback(len) {
	    if (this._callbacks && this._contexts) {
	      this._callbacks.length = len;
	      this._contexts.length = len;
	    }
	  };
	
	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	
	
	  CallbackQueue.prototype.reset = function reset() {
	    this._callbacks = null;
	    this._contexts = null;
	  };
	
	  /**
	   * `PooledClass` looks for this.
	   */
	
	
	  CallbackQueue.prototype.destructor = function destructor() {
	    this.reset();
	  };
	
	  return CallbackQueue;
	}();
	
	module.exports = PooledClass.addPoolingTo(CallbackQueue);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 58 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactFeatureFlags = {
	  // When true, call console.time() before and .timeEnd() after each top-level
	  // render (both initial renders and updates). Useful when looking at prod-mode
	  // timeline profiles in Chrome, for example.
	  logTopLevelRenders: false
	};
	
	module.exports = ReactFeatureFlags;

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactRef = __webpack_require__(60);
	var ReactInstrumentation = __webpack_require__(62);
	
	var warning = __webpack_require__(11);
	
	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}
	
	var ReactReconciler = {
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} the containing host component instance
	   * @param {?object} info about the host container
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID // 0 in production and for roots
	  ) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
	      }
	    }
	    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
	      }
	    }
	    return markup;
	  },
	
	  /**
	   * Returns a value that can be passed to
	   * ReactComponentEnvironment.replaceNodeWithMarkup.
	   */
	  getHostNode: function (internalInstance) {
	    return internalInstance.getHostNode();
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance, safely) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
	      }
	    }
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent(safely);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
	      }
	    }
	  },
	
	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;
	
	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.
	
	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
	      }
	    }
	
	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);
	
	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }
	
	    internalInstance.receiveComponent(nextElement, transaction, context);
	
	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  },
	
	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
	    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
	      // The component's enqueued batch number should always be the current
	      // batch or the following one.
	      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
	      return;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
	      }
	    }
	    internalInstance.performUpdateIfNecessary(transaction);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  }
	
	};
	
	module.exports = ReactReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactOwner = __webpack_require__(61);
	
	var ReactRef = {};
	
	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}
	
	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}
	
	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};
	
	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.
	
	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.
	
	  var prevRef = null;
	  var prevOwner = null;
	  if (prevElement !== null && typeof prevElement === 'object') {
	    prevRef = prevElement.ref;
	    prevOwner = prevElement._owner;
	  }
	
	  var nextRef = null;
	  var nextOwner = null;
	  if (nextElement !== null && typeof nextElement === 'object') {
	    nextRef = nextElement.ref;
	    nextOwner = nextElement._owner;
	  }
	
	  return prevRef !== nextRef ||
	  // If owner changes but we have an unchanged function ref, don't update refs
	  typeof nextRef === 'string' && nextOwner !== prevOwner;
	};
	
	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};
	
	module.exports = ReactRef;

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var invariant = __webpack_require__(8);
	
	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid owner.
	 * @final
	 */
	function isValidOwner(object) {
	  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	}
	
	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {
	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
	    owner.attachRef(ref, component);
	  },
	
	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
	    var ownerPublicInstance = owner.getPublicInstance();
	    // Check that `component`'s owner is still alive and that `component` is still the current ref
	    // because we do not want to detach the ref if another component stole it.
	    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }
	
	};
	
	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	// Trust the developer to only use ReactInstrumentation with a __DEV__ check
	
	var debugTool = null;
	
	if (process.env.NODE_ENV !== 'production') {
	  var ReactDebugTool = __webpack_require__(63);
	  debugTool = ReactDebugTool;
	}
	
	module.exports = { debugTool: debugTool };
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactInvalidSetStateWarningHook = __webpack_require__(64);
	var ReactHostOperationHistoryHook = __webpack_require__(65);
	var ReactComponentTreeHook = __webpack_require__(26);
	var ExecutionEnvironment = __webpack_require__(48);
	
	var performanceNow = __webpack_require__(66);
	var warning = __webpack_require__(11);
	
	var hooks = [];
	var didHookThrowForEvent = {};
	
	function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
	  try {
	    fn.call(context, arg1, arg2, arg3, arg4, arg5);
	  } catch (e) {
	    process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
	    didHookThrowForEvent[event] = true;
	  }
	}
	
	function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
	  for (var i = 0; i < hooks.length; i++) {
	    var hook = hooks[i];
	    var fn = hook[event];
	    if (fn) {
	      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
	    }
	  }
	}
	
	var isProfiling = false;
	var flushHistory = [];
	var lifeCycleTimerStack = [];
	var currentFlushNesting = 0;
	var currentFlushMeasurements = [];
	var currentFlushStartTime = 0;
	var currentTimerDebugID = null;
	var currentTimerStartTime = 0;
	var currentTimerNestedFlushDuration = 0;
	var currentTimerType = null;
	
	var lifeCycleTimerHasWarned = false;
	
	function clearHistory() {
	  ReactComponentTreeHook.purgeUnmountedComponents();
	  ReactHostOperationHistoryHook.clearHistory();
	}
	
	function getTreeSnapshot(registeredIDs) {
	  return registeredIDs.reduce(function (tree, id) {
	    var ownerID = ReactComponentTreeHook.getOwnerID(id);
	    var parentID = ReactComponentTreeHook.getParentID(id);
	    tree[id] = {
	      displayName: ReactComponentTreeHook.getDisplayName(id),
	      text: ReactComponentTreeHook.getText(id),
	      updateCount: ReactComponentTreeHook.getUpdateCount(id),
	      childIDs: ReactComponentTreeHook.getChildIDs(id),
	      // Text nodes don't have owners but this is close enough.
	      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
	      parentID: parentID
	    };
	    return tree;
	  }, {});
	}
	
	function resetMeasurements() {
	  var previousStartTime = currentFlushStartTime;
	  var previousMeasurements = currentFlushMeasurements;
	  var previousOperations = ReactHostOperationHistoryHook.getHistory();
	
	  if (currentFlushNesting === 0) {
	    currentFlushStartTime = 0;
	    currentFlushMeasurements = [];
	    clearHistory();
	    return;
	  }
	
	  if (previousMeasurements.length || previousOperations.length) {
	    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
	    flushHistory.push({
	      duration: performanceNow() - previousStartTime,
	      measurements: previousMeasurements || [],
	      operations: previousOperations || [],
	      treeSnapshot: getTreeSnapshot(registeredIDs)
	    });
	  }
	
	  clearHistory();
	  currentFlushStartTime = performanceNow();
	  currentFlushMeasurements = [];
	}
	
	function checkDebugID(debugID) {
	  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	  if (allowRoot && debugID === 0) {
	    return;
	  }
	  if (!debugID) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
	  }
	}
	
	function beginLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  currentTimerStartTime = performanceNow();
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}
	
	function endLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  if (isProfiling) {
	    currentFlushMeasurements.push({
	      timerType: timerType,
	      instanceID: debugID,
	      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
	    });
	  }
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}
	
	function pauseCurrentLifeCycleTimer() {
	  var currentTimer = {
	    startTime: currentTimerStartTime,
	    nestedFlushStartTime: performanceNow(),
	    debugID: currentTimerDebugID,
	    timerType: currentTimerType
	  };
	  lifeCycleTimerStack.push(currentTimer);
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}
	
	function resumeCurrentLifeCycleTimer() {
	  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
	      startTime = _lifeCycleTimerStack$.startTime,
	      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
	      debugID = _lifeCycleTimerStack$.debugID,
	      timerType = _lifeCycleTimerStack$.timerType;
	
	  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
	  currentTimerStartTime = startTime;
	  currentTimerNestedFlushDuration += nestedFlushDuration;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}
	
	var lastMarkTimeStamp = 0;
	var canUsePerformanceMeasure =
	// $FlowFixMe https://github.com/facebook/flow/issues/2345
	typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';
	
	function shouldMark(debugID) {
	  if (!isProfiling || !canUsePerformanceMeasure) {
	    return false;
	  }
	  var element = ReactComponentTreeHook.getElement(debugID);
	  if (element == null || typeof element !== 'object') {
	    return false;
	  }
	  var isHostElement = typeof element.type === 'string';
	  if (isHostElement) {
	    return false;
	  }
	  return true;
	}
	
	function markBegin(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }
	
	  var markName = debugID + '::' + markType;
	  lastMarkTimeStamp = performanceNow();
	  performance.mark(markName);
	}
	
	function markEnd(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }
	
	  var markName = debugID + '::' + markType;
	  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';
	
	  // Chrome has an issue of dropping markers recorded too fast:
	  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
	  // To work around this, we will not report very small measurements.
	  // I determined the magic number by tweaking it back and forth.
	  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
	  // When the bug is fixed, we can `measure()` unconditionally if we want to.
	  var timeStamp = performanceNow();
	  if (timeStamp - lastMarkTimeStamp > 0.1) {
	    var measurementName = displayName + ' [' + markType + ']';
	    performance.measure(measurementName, markName);
	  }
	
	  performance.clearMarks(markName);
	  performance.clearMeasures(measurementName);
	}
	
	var ReactDebugTool = {
	  addHook: function (hook) {
	    hooks.push(hook);
	  },
	  removeHook: function (hook) {
	    for (var i = 0; i < hooks.length; i++) {
	      if (hooks[i] === hook) {
	        hooks.splice(i, 1);
	        i--;
	      }
	    }
	  },
	  isProfiling: function () {
	    return isProfiling;
	  },
	  beginProfiling: function () {
	    if (isProfiling) {
	      return;
	    }
	
	    isProfiling = true;
	    flushHistory.length = 0;
	    resetMeasurements();
	    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
	  },
	  endProfiling: function () {
	    if (!isProfiling) {
	      return;
	    }
	
	    isProfiling = false;
	    resetMeasurements();
	    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
	  },
	  getFlushHistory: function () {
	    return flushHistory;
	  },
	  onBeginFlush: function () {
	    currentFlushNesting++;
	    resetMeasurements();
	    pauseCurrentLifeCycleTimer();
	    emitEvent('onBeginFlush');
	  },
	  onEndFlush: function () {
	    resetMeasurements();
	    currentFlushNesting--;
	    resumeCurrentLifeCycleTimer();
	    emitEvent('onEndFlush');
	  },
	  onBeginLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
	    markBegin(debugID, timerType);
	    beginLifeCycleTimer(debugID, timerType);
	  },
	  onEndLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    endLifeCycleTimer(debugID, timerType);
	    markEnd(debugID, timerType);
	    emitEvent('onEndLifeCycleTimer', debugID, timerType);
	  },
	  onBeginProcessingChildContext: function () {
	    emitEvent('onBeginProcessingChildContext');
	  },
	  onEndProcessingChildContext: function () {
	    emitEvent('onEndProcessingChildContext');
	  },
	  onHostOperation: function (operation) {
	    checkDebugID(operation.instanceID);
	    emitEvent('onHostOperation', operation);
	  },
	  onSetState: function () {
	    emitEvent('onSetState');
	  },
	  onSetChildren: function (debugID, childDebugIDs) {
	    checkDebugID(debugID);
	    childDebugIDs.forEach(checkDebugID);
	    emitEvent('onSetChildren', debugID, childDebugIDs);
	  },
	  onBeforeMountComponent: function (debugID, element, parentDebugID) {
	    checkDebugID(debugID);
	    checkDebugID(parentDebugID, true);
	    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
	    markBegin(debugID, 'mount');
	  },
	  onMountComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'mount');
	    emitEvent('onMountComponent', debugID);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUpdateComponent', debugID, element);
	    markBegin(debugID, 'update');
	  },
	  onUpdateComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'update');
	    emitEvent('onUpdateComponent', debugID);
	  },
	  onBeforeUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUnmountComponent', debugID);
	    markBegin(debugID, 'unmount');
	  },
	  onUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'unmount');
	    emitEvent('onUnmountComponent', debugID);
	  },
	  onTestEvent: function () {
	    emitEvent('onTestEvent');
	  }
	};
	
	// TODO remove these when RN/www gets updated
	ReactDebugTool.addDevtool = ReactDebugTool.addHook;
	ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;
	
	ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
	ReactDebugTool.addHook(ReactComponentTreeHook);
	var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	if (/[?&]react_perf\b/.test(url)) {
	  ReactDebugTool.beginProfiling();
	}
	
	module.exports = ReactDebugTool;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var warning = __webpack_require__(11);
	
	if (process.env.NODE_ENV !== 'production') {
	  var processingChildContext = false;
	
	  var warnInvalidSetState = function () {
	    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
	  };
	}
	
	var ReactInvalidSetStateWarningHook = {
	  onBeginProcessingChildContext: function () {
	    processingChildContext = true;
	  },
	  onEndProcessingChildContext: function () {
	    processingChildContext = false;
	  },
	  onSetState: function () {
	    warnInvalidSetState();
	  }
	};
	
	module.exports = ReactInvalidSetStateWarningHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 65 */
/***/ function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var history = [];
	
	var ReactHostOperationHistoryHook = {
	  onHostOperation: function (operation) {
	    history.push(operation);
	  },
	  clearHistory: function () {
	    if (ReactHostOperationHistoryHook._preventClearing) {
	      // Should only be used for tests.
	      return;
	    }
	
	    history = [];
	  },
	  getHistory: function () {
	    return history;
	  }
	};
	
	module.exports = ReactHostOperationHistoryHook;

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var performance = __webpack_require__(67);
	
	var performanceNow;
	
	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function performanceNow() {
	    return performance.now();
	  };
	} else {
	  performanceNow = function performanceNow() {
	    return Date.now();
	  };
	}
	
	module.exports = performanceNow;

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(48);
	
	var performance;
	
	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}
	
	module.exports = performance || {};

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var invariant = __webpack_require__(8);
	
	var OBSERVED_ERROR = {};
	
	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var TransactionImpl = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },
	
	  _isInTransaction: false,
	
	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,
	
	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },
	
	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },
	
	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },
	
	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};
	
	module.exports = TransactionImpl;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 69 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	
	  // Normalize SVG <use> element events #4963
	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  }
	
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}
	
	module.exports = getEventTarget;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(48);
	
	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}
	
	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }
	
	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;
	
	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }
	
	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }
	
	  return isSupported;
	}
	
	module.exports = isEventSupported;

/***/ },
/* 71 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};
	
	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	
	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }
	
	  if (nodeName === 'textarea') {
	    return true;
	  }
	
	  return false;
	}
	
	module.exports = isTextInputElement;

/***/ },
/* 72 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	
	var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];
	
	module.exports = DefaultEventPluginOrder;

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPropagators = __webpack_require__(41);
	var ReactDOMComponentTree = __webpack_require__(34);
	var SyntheticMouseEvent = __webpack_require__(74);
	
	var eventTypes = {
	  mouseEnter: {
	    registrationName: 'onMouseEnter',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  },
	  mouseLeave: {
	    registrationName: 'onMouseLeave',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  }
	};
	
	var EnterLeaveEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }
	
	    var win;
	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }
	
	    var from;
	    var to;
	    if (topLevelType === 'topMouseOut') {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }
	
	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }
	
	    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
	    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);
	
	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;
	
	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;
	
	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);
	
	    return [leave, enter];
	  }
	
	};
	
	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(75);
	var ViewportMetrics = __webpack_require__(76);
	
	var getEventModifierState = __webpack_require__(77);
	
	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);
	
	module.exports = SyntheticMouseEvent;

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(53);
	
	var getEventTarget = __webpack_require__(69);
	
	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }
	
	    var target = getEventTarget(event);
	    if (target.window === target) {
	      // target is a window object
	      return target;
	    }
	
	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);
	
	module.exports = SyntheticUIEvent;

/***/ },
/* 76 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ViewportMetrics = {
	
	  currentScrollLeft: 0,
	
	  currentScrollTop: 0,
	
	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }
	
	};
	
	module.exports = ViewportMetrics;

/***/ },
/* 77 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */
	
	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};
	
	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}
	
	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}
	
	module.exports = getEventModifierState;

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(36);
	
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;
	
	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: 0,
	    acceptCharset: 0,
	    accessKey: 0,
	    action: 0,
	    allowFullScreen: HAS_BOOLEAN_VALUE,
	    allowTransparency: 0,
	    alt: 0,
	    // specifies target context for links with `preload` type
	    as: 0,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: 0,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: HAS_BOOLEAN_VALUE,
	    cellPadding: 0,
	    cellSpacing: 0,
	    charSet: 0,
	    challenge: 0,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    cite: 0,
	    classID: 0,
	    className: 0,
	    cols: HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: 0,
	    content: 0,
	    contentEditable: 0,
	    contextMenu: 0,
	    controls: HAS_BOOLEAN_VALUE,
	    coords: 0,
	    crossOrigin: 0,
	    data: 0, // For `<object />` acts as `src`.
	    dateTime: 0,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: 0,
	    disabled: HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: 0,
	    encType: 0,
	    form: 0,
	    formAction: 0,
	    formEncType: 0,
	    formMethod: 0,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: 0,
	    frameBorder: 0,
	    headers: 0,
	    height: 0,
	    hidden: HAS_BOOLEAN_VALUE,
	    high: 0,
	    href: 0,
	    hrefLang: 0,
	    htmlFor: 0,
	    httpEquiv: 0,
	    icon: 0,
	    id: 0,
	    inputMode: 0,
	    integrity: 0,
	    is: 0,
	    keyParams: 0,
	    keyType: 0,
	    kind: 0,
	    label: 0,
	    lang: 0,
	    list: 0,
	    loop: HAS_BOOLEAN_VALUE,
	    low: 0,
	    manifest: 0,
	    marginHeight: 0,
	    marginWidth: 0,
	    max: 0,
	    maxLength: 0,
	    media: 0,
	    mediaGroup: 0,
	    method: 0,
	    min: 0,
	    minLength: 0,
	    // Caution; `option.selected` is not updated if `select.multiple` is
	    // disabled with `removeAttribute`.
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: 0,
	    nonce: 0,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: 0,
	    pattern: 0,
	    placeholder: 0,
	    playsInline: HAS_BOOLEAN_VALUE,
	    poster: 0,
	    preload: 0,
	    profile: 0,
	    radioGroup: 0,
	    readOnly: HAS_BOOLEAN_VALUE,
	    referrerPolicy: 0,
	    rel: 0,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: 0,
	    rows: HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: HAS_NUMERIC_VALUE,
	    sandbox: 0,
	    scope: 0,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: 0,
	    seamless: HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: 0,
	    size: HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: 0,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: 0,
	    src: 0,
	    srcDoc: 0,
	    srcLang: 0,
	    srcSet: 0,
	    start: HAS_NUMERIC_VALUE,
	    step: 0,
	    style: 0,
	    summary: 0,
	    tabIndex: 0,
	    target: 0,
	    title: 0,
	    // Setting .type throws on non-<input> tags
	    type: 0,
	    useMap: 0,
	    value: 0,
	    width: 0,
	    wmode: 0,
	    wrap: 0,
	
	    /**
	     * RDFa Properties
	     */
	    about: 0,
	    datatype: 0,
	    inlist: 0,
	    prefix: 0,
	    // property is also supported for OpenGraph in meta tags.
	    property: 0,
	    resource: 0,
	    'typeof': 0,
	    vocab: 0,
	
	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: 0,
	    autoCorrect: 0,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: 0,
	    // color is for Safari mask-icon link
	    color: 0,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: 0,
	    itemScope: HAS_BOOLEAN_VALUE,
	    itemType: 0,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: 0,
	    itemRef: 0,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: 0,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: 0,
	    // IE-only attribute that controls focus behavior
	    unselectable: 0
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {}
	};
	
	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMChildrenOperations = __webpack_require__(80);
	var ReactDOMIDOperations = __webpack_require__(91);
	
	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {
	
	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,
	
	  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup
	
	};
	
	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMLazyTree = __webpack_require__(81);
	var Danger = __webpack_require__(87);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactInstrumentation = __webpack_require__(62);
	
	var createMicrosoftUnsafeLocalFunction = __webpack_require__(84);
	var setInnerHTML = __webpack_require__(83);
	var setTextContent = __webpack_require__(85);
	
	function getNodeAfter(parentNode, node) {
	  // Special case for text components, which return [open, close] comments
	  // from getHostNode.
	  if (Array.isArray(node)) {
	    node = node[1];
	  }
	  return node ? node.nextSibling : parentNode.firstChild;
	}
	
	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
	  // We rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
	  // we are careful to use `null`.)
	  parentNode.insertBefore(childNode, referenceNode);
	});
	
	function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
	  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
	}
	
	function moveChild(parentNode, childNode, referenceNode) {
	  if (Array.isArray(childNode)) {
	    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
	  } else {
	    insertChildAt(parentNode, childNode, referenceNode);
	  }
	}
	
	function removeChild(parentNode, childNode) {
	  if (Array.isArray(childNode)) {
	    var closingComment = childNode[1];
	    childNode = childNode[0];
	    removeDelimitedText(parentNode, childNode, closingComment);
	    parentNode.removeChild(closingComment);
	  }
	  parentNode.removeChild(childNode);
	}
	
	function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
	  var node = openingComment;
	  while (true) {
	    var nextNode = node.nextSibling;
	    insertChildAt(parentNode, node, referenceNode);
	    if (node === closingComment) {
	      break;
	    }
	    node = nextNode;
	  }
	}
	
	function removeDelimitedText(parentNode, startNode, closingComment) {
	  while (true) {
	    var node = startNode.nextSibling;
	    if (node === closingComment) {
	      // The closing comment is removed by ReactMultiChild.
	      break;
	    } else {
	      parentNode.removeChild(node);
	    }
	  }
	}
	
	function replaceDelimitedText(openingComment, closingComment, stringText) {
	  var parentNode = openingComment.parentNode;
	  var nodeAfterComment = openingComment.nextSibling;
	  if (nodeAfterComment === closingComment) {
	    // There are no text nodes between the opening and closing comments; insert
	    // a new one if stringText isn't empty.
	    if (stringText) {
	      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
	    }
	  } else {
	    if (stringText) {
	      // Set the text content of the first node after the opening comment, and
	      // remove all following nodes up until the closing comment.
	      setTextContent(nodeAfterComment, stringText);
	      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
	    } else {
	      removeDelimitedText(parentNode, openingComment, closingComment);
	    }
	  }
	
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onHostOperation({
	      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
	      type: 'replace text',
	      payload: stringText
	    });
	  }
	}
	
	var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
	if (process.env.NODE_ENV !== 'production') {
	  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
	    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
	    if (prevInstance._debugID !== 0) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: prevInstance._debugID,
	        type: 'replace with',
	        payload: markup.toString()
	      });
	    } else {
	      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
	      if (nextInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: nextInstance._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  };
	}
	
	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {
	
	  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,
	
	  replaceDelimitedText: replaceDelimitedText,
	
	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  processUpdates: function (parentNode, updates) {
	    if (process.env.NODE_ENV !== 'production') {
	      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
	    }
	
	    for (var k = 0; k < updates.length; k++) {
	      var update = updates[k];
	      switch (update.type) {
	        case 'INSERT_MARKUP':
	          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'insert child',
	              payload: { toIndex: update.toIndex, content: update.content.toString() }
	            });
	          }
	          break;
	        case 'MOVE_EXISTING':
	          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'move child',
	              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
	            });
	          }
	          break;
	        case 'SET_MARKUP':
	          setInnerHTML(parentNode, update.content);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace children',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'TEXT_CONTENT':
	          setTextContent(parentNode, update.content);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace text',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'REMOVE_NODE':
	          removeChild(parentNode, update.fromNode);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'remove child',
	              payload: { fromIndex: update.fromIndex }
	            });
	          }
	          break;
	      }
	    }
	  }
	
	};
	
	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMNamespaces = __webpack_require__(82);
	var setInnerHTML = __webpack_require__(83);
	
	var createMicrosoftUnsafeLocalFunction = __webpack_require__(84);
	var setTextContent = __webpack_require__(85);
	
	var ELEMENT_NODE_TYPE = 1;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
	
	/**
	 * In IE (8-11) and Edge, appending nodes with no children is dramatically
	 * faster than appending a full subtree, so we essentially queue up the
	 * .appendChild calls here and apply them so each node is added to its parent
	 * before any children are added.
	 *
	 * In other browsers, doing so is slower or neutral compared to the other order
	 * (in Firefox, twice as slow) so we only do this inversion in IE.
	 *
	 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
	 */
	var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);
	
	function insertTreeChildren(tree) {
	  if (!enableLazy) {
	    return;
	  }
	  var node = tree.node;
	  var children = tree.children;
	  if (children.length) {
	    for (var i = 0; i < children.length; i++) {
	      insertTreeBefore(node, children[i], null);
	    }
	  } else if (tree.html != null) {
	    setInnerHTML(node, tree.html);
	  } else if (tree.text != null) {
	    setTextContent(node, tree.text);
	  }
	}
	
	var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
	  // DocumentFragments aren't actually part of the DOM after insertion so
	  // appending children won't update the DOM. We need to ensure the fragment
	  // is properly populated first, breaking out of our lazy approach for just
	  // this level. Also, some <object> plugins (like Flash Player) will read
	  // <param> nodes immediately upon insertion into the DOM, so <object>
	  // must also be populated prior to insertion into the DOM.
	  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
	    insertTreeChildren(tree);
	    parentNode.insertBefore(tree.node, referenceNode);
	  } else {
	    parentNode.insertBefore(tree.node, referenceNode);
	    insertTreeChildren(tree);
	  }
	});
	
	function replaceChildWithTree(oldNode, newTree) {
	  oldNode.parentNode.replaceChild(newTree.node, oldNode);
	  insertTreeChildren(newTree);
	}
	
	function queueChild(parentTree, childTree) {
	  if (enableLazy) {
	    parentTree.children.push(childTree);
	  } else {
	    parentTree.node.appendChild(childTree.node);
	  }
	}
	
	function queueHTML(tree, html) {
	  if (enableLazy) {
	    tree.html = html;
	  } else {
	    setInnerHTML(tree.node, html);
	  }
	}
	
	function queueText(tree, text) {
	  if (enableLazy) {
	    tree.text = text;
	  } else {
	    setTextContent(tree.node, text);
	  }
	}
	
	function toString() {
	  return this.node.nodeName;
	}
	
	function DOMLazyTree(node) {
	  return {
	    node: node,
	    children: [],
	    html: null,
	    text: null,
	    toString: toString
	  };
	}
	
	DOMLazyTree.insertTreeBefore = insertTreeBefore;
	DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
	DOMLazyTree.queueChild = queueChild;
	DOMLazyTree.queueHTML = queueHTML;
	DOMLazyTree.queueText = queueText;
	
	module.exports = DOMLazyTree;

/***/ },
/* 82 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMNamespaces = {
	  html: 'http://www.w3.org/1999/xhtml',
	  mathml: 'http://www.w3.org/1998/Math/MathML',
	  svg: 'http://www.w3.org/2000/svg'
	};
	
	module.exports = DOMNamespaces;

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(48);
	var DOMNamespaces = __webpack_require__(82);
	
	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;
	
	var createMicrosoftUnsafeLocalFunction = __webpack_require__(84);
	
	// SVG temp container for IE lacking innerHTML
	var reusableSVGContainer;
	
	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  // IE does not have innerHTML for SVG nodes, so instead we inject the
	  // new markup in a temp node and then move the child nodes across into
	  // the target node
	  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
	    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
	    var svgNode = reusableSVGContainer.firstChild;
	    while (svgNode.firstChild) {
	      node.appendChild(svgNode.firstChild);
	    }
	  } else {
	    node.innerHTML = html;
	  }
	});
	
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html
	
	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }
	
	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;
	
	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	  testElement = null;
	}
	
	module.exports = setInnerHTML;

/***/ },
/* 84 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/* globals MSApp */
	
	'use strict';
	
	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */
	
	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};
	
	module.exports = createMicrosoftUnsafeLocalFunction;

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(48);
	var escapeTextContentForBrowser = __webpack_require__(86);
	var setInnerHTML = __webpack_require__(83);
	
	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;
	
	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }
	  node.textContent = text;
	};
	
	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      if (node.nodeType === 3) {
	        node.nodeValue = text;
	        return;
	      }
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}
	
	module.exports = setTextContent;

/***/ },
/* 86 */
/***/ function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * Based on the escape-html library, which is used under the MIT License below:
	 *
	 * Copyright (c) 2012-2013 TJ Holowaychuk
	 * Copyright (c) 2015 Andreas Lubbe
	 * Copyright (c) 2015 Tiancheng "Timothy" Gu
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * 'Software'), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject to
	 * the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be
	 * included in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 *
	 */
	
	'use strict';
	
	// code copied and modified from escape-html
	/**
	 * Module variables.
	 * @private
	 */
	
	var matchHtmlRegExp = /["'&<>]/;
	
	/**
	 * Escape special characters in the given string of html.
	 *
	 * @param  {string} string The string to escape for inserting into HTML
	 * @return {string}
	 * @public
	 */
	
	function escapeHtml(string) {
	  var str = '' + string;
	  var match = matchHtmlRegExp.exec(str);
	
	  if (!match) {
	    return str;
	  }
	
	  var escape;
	  var html = '';
	  var index = 0;
	  var lastIndex = 0;
	
	  for (index = match.index; index < str.length; index++) {
	    switch (str.charCodeAt(index)) {
	      case 34:
	        // "
	        escape = '&quot;';
	        break;
	      case 38:
	        // &
	        escape = '&amp;';
	        break;
	      case 39:
	        // '
	        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
	        break;
	      case 60:
	        // <
	        escape = '&lt;';
	        break;
	      case 62:
	        // >
	        escape = '&gt;';
	        break;
	      default:
	        continue;
	    }
	
	    if (lastIndex !== index) {
	      html += str.substring(lastIndex, index);
	    }
	
	    lastIndex = index + 1;
	    html += escape;
	  }
	
	  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
	}
	// end code copied and modified from escape-html
	
	
	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  if (typeof text === 'boolean' || typeof text === 'number') {
	    // this shortcircuit helps perf for types that we know will never have
	    // special characters, especially given that this function is used often
	    // for numeric dom ids.
	    return '' + text;
	  }
	  return escapeHtml(text);
	}
	
	module.exports = escapeTextContentForBrowser;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var DOMLazyTree = __webpack_require__(81);
	var ExecutionEnvironment = __webpack_require__(48);
	
	var createNodesFromMarkup = __webpack_require__(88);
	var emptyFunction = __webpack_require__(12);
	var invariant = __webpack_require__(8);
	
	var Danger = {
	
	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
	    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;
	
	    if (typeof markup === 'string') {
	      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	      oldChild.parentNode.replaceChild(newChild, oldChild);
	    } else {
	      DOMLazyTree.replaceChildWithTree(oldChild, markup);
	    }
	  }
	
	};
	
	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	/*eslint-disable fb-www/unsafe-html*/
	
	var ExecutionEnvironment = __webpack_require__(48);
	
	var createArrayFromMixed = __webpack_require__(89);
	var getMarkupWrap = __webpack_require__(90);
	var invariant = __webpack_require__(8);
	
	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;
	
	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}
	
	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
	  var nodeName = getNodeName(markup);
	
	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];
	
	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }
	
	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }
	
	  var nodes = Array.from(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}
	
	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var invariant = __webpack_require__(8);
	
	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;
	
	  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
	  // in old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;
	
	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;
	
	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;
	
	  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;
	
	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }
	
	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}
	
	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}
	
	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}
	
	module.exports = createArrayFromMixed;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/*eslint-disable fb-www/unsafe-html */
	
	var ExecutionEnvironment = __webpack_require__(48);
	
	var invariant = __webpack_require__(8);
	
	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
	
	var shouldWrap = {};
	
	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];
	
	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];
	
	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],
	
	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],
	
	  'optgroup': selectWrap,
	  'option': selectWrap,
	
	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,
	
	  'td': trWrap,
	  'th': trWrap
	};
	
	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});
	
	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}
	
	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMChildrenOperations = __webpack_require__(80);
	var ReactDOMComponentTree = __webpack_require__(34);
	
	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {
	
	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
	    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
	    DOMChildrenOperations.processUpdates(node, updates);
	  }
	};
	
	module.exports = ReactDOMIDOperations;

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/* global hasOwnProperty:true */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);
	
	var AutoFocusUtils = __webpack_require__(93);
	var CSSPropertyOperations = __webpack_require__(95);
	var DOMLazyTree = __webpack_require__(81);
	var DOMNamespaces = __webpack_require__(82);
	var DOMProperty = __webpack_require__(36);
	var DOMPropertyOperations = __webpack_require__(103);
	var EventPluginHub = __webpack_require__(42);
	var EventPluginRegistry = __webpack_require__(43);
	var ReactBrowserEventEmitter = __webpack_require__(105);
	var ReactDOMComponentFlags = __webpack_require__(37);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDOMInput = __webpack_require__(108);
	var ReactDOMOption = __webpack_require__(111);
	var ReactDOMSelect = __webpack_require__(112);
	var ReactDOMTextarea = __webpack_require__(113);
	var ReactInstrumentation = __webpack_require__(62);
	var ReactMultiChild = __webpack_require__(114);
	var ReactServerRenderingTransaction = __webpack_require__(133);
	
	var emptyFunction = __webpack_require__(12);
	var escapeTextContentForBrowser = __webpack_require__(86);
	var invariant = __webpack_require__(8);
	var isEventSupported = __webpack_require__(70);
	var shallowEqual = __webpack_require__(123);
	var validateDOMNesting = __webpack_require__(136);
	var warning = __webpack_require__(11);
	
	var Flags = ReactDOMComponentFlags;
	var deleteListener = EventPluginHub.deleteListener;
	var getNode = ReactDOMComponentTree.getNodeFromInstance;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = EventPluginRegistry.registrationNameModules;
	
	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };
	
	var STYLE = 'style';
	var HTML = '__html';
	var RESERVED_PROPS = {
	  children: null,
	  dangerouslySetInnerHTML: null,
	  suppressContentEditableWarning: null
	};
	
	// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
	var DOC_FRAGMENT_TYPE = 11;
	
	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}
	
	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined because undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}
	
	var styleMutationWarning = {};
	
	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }
	
	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }
	
	  var hash = ownerName + '|' + componentName;
	
	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }
	
	  styleMutationWarning[hash] = true;
	
	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
	}
	
	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (voidElementTags[component._tag]) {
	    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
	}
	
	function enqueuePutListener(inst, registrationName, listener, transaction) {
	  if (transaction instanceof ReactServerRenderingTransaction) {
	    return;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : void 0;
	  }
	  var containerInfo = inst._hostContainerInfo;
	  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
	  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
	  listenTo(registrationName, doc);
	  transaction.getReactMountReady().enqueue(putListener, {
	    inst: inst,
	    registrationName: registrationName,
	    listener: listener
	  });
	}
	
	function putListener() {
	  var listenerToPut = this;
	  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
	}
	
	function inputPostMount() {
	  var inst = this;
	  ReactDOMInput.postMountWrapper(inst);
	}
	
	function textareaPostMount() {
	  var inst = this;
	  ReactDOMTextarea.postMountWrapper(inst);
	}
	
	function optionPostMount() {
	  var inst = this;
	  ReactDOMOption.postMountWrapper(inst);
	}
	
	var setAndValidateContentChildDev = emptyFunction;
	if (process.env.NODE_ENV !== 'production') {
	  setAndValidateContentChildDev = function (content) {
	    var hasExistingContent = this._contentDebugID != null;
	    var debugID = this._debugID;
	    // This ID represents the inlined child that has no backing instance:
	    var contentDebugID = -debugID;
	
	    if (content == null) {
	      if (hasExistingContent) {
	        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
	      }
	      this._contentDebugID = null;
	      return;
	    }
	
	    validateDOMNesting(null, String(content), this, this._ancestorInfo);
	    this._contentDebugID = contentDebugID;
	    if (hasExistingContent) {
	      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
	      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
	    } else {
	      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
	      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
	      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
	    }
	  };
	}
	
	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};
	
	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
	  var node = getNode(inst);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;
	
	  switch (inst._tag) {
	    case 'iframe':
	    case 'object':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'video':
	    case 'audio':
	
	      inst._wrapperState.listeners = [];
	      // Create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
	        }
	      }
	      break;
	    case 'source':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
	      break;
	    case 'input':
	    case 'select':
	    case 'textarea':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
	      break;
	  }
	}
	
	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}
	
	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.
	
	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};
	
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};
	
	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.
	
	var voidElementTags = _assign({
	  'menuitem': true
	}, omittedCloseTags);
	
	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name
	
	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;
	
	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
	    validatedTagCache[tag] = true;
	  }
	}
	
	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}
	
	var globalIdCounter = 1;
	
	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(element) {
	  var tag = element.type;
	  validateDangerousTag(tag);
	  this._currentElement = element;
	  this._tag = tag.toLowerCase();
	  this._namespaceURI = null;
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._hostNode = null;
	  this._hostParent = null;
	  this._rootNodeID = 0;
	  this._domID = 0;
	  this._hostContainerInfo = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._flags = 0;
	  if (process.env.NODE_ENV !== 'production') {
	    this._ancestorInfo = null;
	    setAndValidateContentChildDev.call(this, null);
	  }
	}
	
	ReactDOMComponent.displayName = 'ReactDOMComponent';
	
	ReactDOMComponent.Mixin = {
	
	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?ReactDOMComponent} the parent component instance
	   * @param {?object} info about the host container
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    this._rootNodeID = globalIdCounter++;
	    this._domID = hostContainerInfo._idCounter++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;
	
	    var props = this._currentElement.props;
	
	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, hostParent);
	        props = ReactDOMInput.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, hostParent);
	        props = ReactDOMOption.getHostProps(this, props);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, hostParent);
	        props = ReactDOMSelect.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, hostParent);
	        props = ReactDOMTextarea.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	    }
	
	    assertValidProps(this, props);
	
	    // We create tags in the namespace of their parent container, except HTML
	    // tags get no namespace.
	    var namespaceURI;
	    var parentTag;
	    if (hostParent != null) {
	      namespaceURI = hostParent._namespaceURI;
	      parentTag = hostParent._tag;
	    } else if (hostContainerInfo._tag) {
	      namespaceURI = hostContainerInfo._namespaceURI;
	      parentTag = hostContainerInfo._tag;
	    }
	    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
	      namespaceURI = DOMNamespaces.html;
	    }
	    if (namespaceURI === DOMNamespaces.html) {
	      if (this._tag === 'svg') {
	        namespaceURI = DOMNamespaces.svg;
	      } else if (this._tag === 'math') {
	        namespaceURI = DOMNamespaces.mathml;
	      }
	    }
	    this._namespaceURI = namespaceURI;
	
	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo._tag) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(this._tag, null, this, parentInfo);
	      }
	      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
	    }
	
	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var el;
	      if (namespaceURI === DOMNamespaces.html) {
	        if (this._tag === 'script') {
	          // Create the script via .innerHTML so its "parser-inserted" flag is
	          // set to true and it does not execute
	          var div = ownerDocument.createElement('div');
	          var type = this._currentElement.type;
	          div.innerHTML = '<' + type + '></' + type + '>';
	          el = div.removeChild(div.firstChild);
	        } else if (props.is) {
	          el = ownerDocument.createElement(this._currentElement.type, props.is);
	        } else {
	          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
	          // See discussion in https://github.com/facebook/react/pull/6896
	          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	          el = ownerDocument.createElement(this._currentElement.type);
	        }
	      } else {
	        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
	      }
	      ReactDOMComponentTree.precacheNode(this, el);
	      this._flags |= Flags.hasCachedChildNodes;
	      if (!this._hostParent) {
	        DOMPropertyOperations.setAttributeForRoot(el);
	      }
	      this._updateDOMProperties(null, props, transaction);
	      var lazyTree = DOMLazyTree(el);
	      this._createInitialChildren(transaction, props, context, lazyTree);
	      mountImage = lazyTree;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }
	
	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(inputPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'textarea':
	        transaction.getReactMountReady().enqueue(textareaPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'select':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'button':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'option':
	        transaction.getReactMountReady().enqueue(optionPostMount, this);
	        break;
	    }
	
	    return mountImage;
	  },
	
	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;
	
	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = _assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }
	
	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }
	
	    if (!this._hostParent) {
	      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
	    }
	    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
	    return ret;
	  },
	
	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';
	
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	        if (process.env.NODE_ENV !== 'production') {
	          setAndValidateContentChildDev.call(this, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },
	
	  _createInitialChildren: function (transaction, props, context, lazyTree) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      // TODO: Validate that text is allowed as a child of this node
	      if (contentToUse != null) {
	        // Avoid setting textContent when the text is empty. In IE11 setting
	        // textContent on a text area will cause the placeholder to not
	        // show within the textarea until it has been focused and blurred again.
	        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
	        if (contentToUse !== '') {
	          if (process.env.NODE_ENV !== 'production') {
	            setAndValidateContentChildDev.call(this, contentToUse);
	          }
	          DOMLazyTree.queueText(lazyTree, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
	        }
	      }
	    }
	  },
	
	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },
	
	  /**
	   * Updates a DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;
	
	    switch (this._tag) {
	      case 'input':
	        lastProps = ReactDOMInput.getHostProps(this, lastProps);
	        nextProps = ReactDOMInput.getHostProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getHostProps(this, lastProps);
	        nextProps = ReactDOMOption.getHostProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
	        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
	        break;
	      case 'textarea':
	        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
	        break;
	    }
	
	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);
	
	    switch (this._tag) {
	      case 'input':
	        // Update the wrapper around inputs *after* updating props. This has to
	        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
	        // raise warnings and prevent the new value from being assigned.
	        ReactDOMInput.updateWrapper(this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        break;
	      case 'select':
	        // <select> value update needs to occur after <option> children
	        // reconciliation
	        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	        break;
	    }
	  },
	
	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, lastProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = _assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        var node = getNode(this);
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertently setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
	    }
	  },
	
	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;
	
	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;
	
	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;
	
	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    }
	
	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	        if (process.env.NODE_ENV !== 'production') {
	          setAndValidateContentChildDev.call(this, nextContent);
	        }
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    } else if (nextChildren != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        setAndValidateContentChildDev.call(this, null);
	      }
	
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },
	
	  getHostNode: function () {
	    return getNode(this);
	  },
	
	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
	        break;
	    }
	
	    this.unmountChildren(safely);
	    ReactDOMComponentTree.uncacheNode(this);
	    EventPluginHub.deleteAllListeners(this);
	    this._rootNodeID = 0;
	    this._domID = 0;
	    this._wrapperState = null;
	
	    if (process.env.NODE_ENV !== 'production') {
	      setAndValidateContentChildDev.call(this, null);
	    }
	  },
	
	  getPublicInstance: function () {
	    return getNode(this);
	  }
	
	};
	
	_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);
	
	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMComponentTree = __webpack_require__(34);
	
	var focusNode = __webpack_require__(94);
	
	var AutoFocusUtils = {
	  focusDOMComponent: function () {
	    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
	  }
	};
	
	module.exports = AutoFocusUtils;

/***/ },
/* 94 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}
	
	module.exports = focusNode;

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(96);
	var ExecutionEnvironment = __webpack_require__(48);
	var ReactInstrumentation = __webpack_require__(62);
	
	var camelizeStyleName = __webpack_require__(97);
	var dangerousStyleValue = __webpack_require__(99);
	var hyphenateStyleName = __webpack_require__(100);
	var memoizeStringOnly = __webpack_require__(102);
	var warning = __webpack_require__(11);
	
	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});
	
	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
	
	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;
	
	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;
	
	  var warnHyphenatedStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
	  };
	
	  var warnBadVendoredStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
	  };
	
	  var warnStyleValueWithSemicolon = function (name, value, owner) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }
	
	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
	  };
	
	  var warnStyleValueIsNaN = function (name, value, owner) {
	    if (warnedForNaNValue) {
	      return;
	    }
	
	    warnedForNaNValue = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
	  };
	
	  var checkRenderMessage = function (owner) {
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' Check the render method of `' + name + '`.';
	      }
	    }
	    return '';
	  };
	
	  /**
	   * @param {string} name
	   * @param {*} value
	   * @param {ReactDOMComponent} component
	   */
	  var warnValidStyle = function (name, value, component) {
	    var owner;
	    if (component) {
	      owner = component._currentElement._owner;
	    }
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name, owner);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name, owner);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value, owner);
	    }
	
	    if (typeof value === 'number' && isNaN(value)) {
	      warnStyleValueIsNaN(name, value, owner);
	    }
	  };
	}
	
	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {
	
	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles, component) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue, component);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, component) + ';';
	      }
	    }
	    return serialized || null;
	  },
	
	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   */
	  setValueForStyles: function (node, styles, component) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: component._debugID,
	        type: 'update styles',
	        payload: styles
	      });
	    }
	
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName], component);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName], component);
	      if (styleName === 'float' || styleName === 'cssFloat') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }
	
	};
	
	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 96 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridRow: true,
	  gridColumn: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,
	
	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};
	
	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}
	
	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
	
	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});
	
	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};
	
	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};
	
	module.exports = CSSProperty;

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var camelize = __webpack_require__(98);
	
	var msPattern = /^-ms-/;
	
	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}
	
	module.exports = camelizeStyleName;

/***/ },
/* 98 */
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var _hyphenPattern = /-(.)/g;
	
	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}
	
	module.exports = camelize;

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(96);
	var warning = __webpack_require__(11);
	
	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	var styleWarnings = {};
	
	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @param {ReactDOMComponent} component
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value, component) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901
	
	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }
	
	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }
	
	  if (typeof value === 'string') {
	    if (process.env.NODE_ENV !== 'production') {
	      // Allow '0' to pass through without warning. 0 is already special and
	      // doesn't require units, so we don't need to warn about it.
	      if (component && value !== '0') {
	        var owner = component._currentElement._owner;
	        var ownerName = owner ? owner.getName() : null;
	        if (ownerName && !styleWarnings[ownerName]) {
	          styleWarnings[ownerName] = {};
	        }
	        var warned = false;
	        if (ownerName) {
	          var warnings = styleWarnings[ownerName];
	          warned = warnings[name];
	          if (!warned) {
	            warnings[name] = true;
	          }
	        }
	        if (!warned) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
	        }
	      }
	    }
	    value = value.trim();
	  }
	  return value + 'px';
	}
	
	module.exports = dangerousStyleValue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var hyphenate = __webpack_require__(101);
	
	var msPattern = /^ms-/;
	
	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}
	
	module.exports = hyphenateStyleName;

/***/ },
/* 101 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var _uppercasePattern = /([A-Z])/g;
	
	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}
	
	module.exports = hyphenate;

/***/ },
/* 102 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 */
	
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}
	
	module.exports = memoizeStringOnly;

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(36);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactInstrumentation = __webpack_require__(62);
	
	var quoteAttributeValueForBrowser = __webpack_require__(104);
	var warning = __webpack_require__(11);
	
	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};
	
	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
	  return false;
	}
	
	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}
	
	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {
	
	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },
	
	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },
	
	  createMarkupForRoot: function () {
	    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
	  },
	
	  setAttributeForRoot: function (node) {
	    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
	  },
	
	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    }
	    return null;
	  },
	
	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },
	
	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	        return;
	      } else if (propertyInfo.mustUseProperty) {
	        // Contrary to `setAttribute`, object properties are properly
	        // `toString`ed by IE8/9.
	        node[propertyInfo.propertyName] = value;
	      } else {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	      return;
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },
	
	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },
	
	  /**
	   * Deletes an attributes from a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForAttribute: function (node, name) {
	    node.removeAttribute(name);
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  },
	
	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseProperty) {
	        var propName = propertyInfo.propertyName;
	        if (propertyInfo.hasBooleanValue) {
	          node[propName] = false;
	        } else {
	          node[propName] = '';
	        }
	      } else {
	        node.removeAttribute(propertyInfo.attributeName);
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  }
	
	};
	
	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var escapeTextContentForBrowser = __webpack_require__(86);
	
	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}
	
	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var EventPluginRegistry = __webpack_require__(43);
	var ReactEventEmitterMixin = __webpack_require__(106);
	var ViewportMetrics = __webpack_require__(76);
	
	var getVendorPrefixedEventName = __webpack_require__(107);
	var isEventSupported = __webpack_require__(70);
	
	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */
	
	var hasEventPageXY;
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;
	
	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
	  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
	  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};
	
	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);
	
	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}
	
	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {
	
	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,
	
	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },
	
	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },
	
	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },
	
	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];
	
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === 'topWheel') {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === 'topScroll') {
	
	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === 'topFocus' || dependency === 'topBlur') {
	
	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
	          }
	
	          // to make sure blur and focus event listeners are only attached once
	          isListening.topBlur = true;
	          isListening.topFocus = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }
	
	        isListening[dependency] = true;
	      }
	    }
	  },
	
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  /**
	   * Protect against document.createEvent() returning null
	   * Some popup blocker extensions appear to do this:
	   * https://github.com/facebook/react/issues/6887
	   */
	  supportsEventPageXY: function () {
	    if (!document.createEvent) {
	      return false;
	    }
	    var ev = document.createEvent('MouseEvent');
	    return ev != null && 'pageX' in ev;
	  },
	
	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
	   * pageX/pageY isn't supported (legacy browsers).
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (hasEventPageXY === undefined) {
	      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
	    }
	    if (!hasEventPageXY && !isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  }
	
	});
	
	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(42);
	
	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}
	
	var ReactEventEmitterMixin = {
	
	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   */
	  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};
	
	module.exports = ReactEventEmitterMixin;

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(48);
	
	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */
	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};
	
	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  prefixes['ms' + styleProp] = 'MS' + eventName;
	  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();
	
	  return prefixes;
	}
	
	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */
	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};
	
	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */
	var prefixedEventNames = {};
	
	/**
	 * Element to check for prefixes on.
	 */
	var style = {};
	
	/**
	 * Bootstrap if a DOM exists.
	 */
	if (ExecutionEnvironment.canUseDOM) {
	  style = document.createElement('div').style;
	
	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.
	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  }
	
	  // Same as above
	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}
	
	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */
	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }
	
	  var prefixMap = vendorPrefixes[eventName];
	
	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }
	
	  return '';
	}
	
	module.exports = getVendorPrefixedEventName;

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);
	
	var DOMPropertyOperations = __webpack_require__(103);
	var LinkedValueUtils = __webpack_require__(109);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(56);
	
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);
	
	var didWarnValueLink = false;
	var didWarnCheckedLink = false;
	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;
	
	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}
	
	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}
	
	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getHostProps: function (inst, props) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);
	
	    var hostProps = _assign({
	      // Make sure we set .type before any other properties (setting .value
	      // before .type means .value is lost in IE11 and below)
	      type: undefined,
	      // Make sure we set .step before .value (setting .value before .step
	      // means .value is rounded on mount, based upon step precision)
	      step: undefined,
	      // Make sure we set .min & .max before .value (to ensure proper order
	      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
	      min: undefined,
	      max: undefined
	    }, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });
	
	    return hostProps;
	  },
	
	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
	
	      var owner = inst._currentElement._owner;
	
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnCheckedLink = true;
	      }
	      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnCheckedDefaultChecked = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnValueDefaultValue = true;
	      }
	    }
	
	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	      initialValue: props.value != null ? props.value : defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };
	
	    if (process.env.NODE_ENV !== 'production') {
	      inst._wrapperState.controlled = isControlled(props);
	    }
	  },
	
	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    if (process.env.NODE_ENV !== 'production') {
	      var controlled = isControlled(props);
	      var owner = inst._currentElement._owner;
	
	      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnUncontrolledToControlled = true;
	      }
	      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnControlledToUncontrolled = true;
	      }
	    }
	
	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
	    }
	
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;
	
	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	    } else {
	      if (props.value == null && props.defaultValue != null) {
	        // In Chrome, assigning defaultValue to certain input types triggers input validation.
	        // For number inputs, the display value loses trailing decimal points. For email inputs,
	        // Chrome raises "The specified value <x> is not a valid email address".
	        //
	        // Here we check to see if the defaultValue has actually changed, avoiding these problems
	        // when the user is inputting text
	        //
	        // https://github.com/facebook/react/issues/7253
	        if (node.defaultValue !== '' + props.defaultValue) {
	          node.defaultValue = '' + props.defaultValue;
	        }
	      }
	      if (props.checked == null && props.defaultChecked != null) {
	        node.defaultChecked = !!props.defaultChecked;
	      }
	    }
	  },
	
	  postMountWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	
	    // Detach value from defaultValue. We won't do anything if we're working on
	    // submit or reset inputs as those values & defaultValues are linked. They
	    // are not resetable nodes so this operation doesn't matter and actually
	    // removes browser-default values (eg "Submit Query") when no value is
	    // provided.
	
	    switch (props.type) {
	      case 'submit':
	      case 'reset':
	        break;
	      case 'color':
	      case 'date':
	      case 'datetime':
	      case 'datetime-local':
	      case 'month':
	      case 'time':
	      case 'week':
	        // This fixes the no-show issue on iOS Safari and Android Chrome:
	        // https://github.com/facebook/react/issues/7233
	        node.value = '';
	        node.value = node.defaultValue;
	        break;
	      default:
	        node.value = node.value;
	        break;
	    }
	
	    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	    // this is needed to work around a chrome bug where setting defaultChecked
	    // will sometimes influence the value of checked (even after detachment).
	    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	    // We need to temporarily unset name to avoid disrupting radio button groups.
	    var name = node.name;
	    if (name !== '') {
	      node.name = '';
	    }
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !node.defaultChecked;
	    if (name !== '') {
	      node.name = name;
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	
	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	
	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
	    var queryRoot = rootNode;
	
	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }
	
	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
	
	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.
	      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }
	
	  return returnValue;
	}
	
	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var React = __webpack_require__(2);
	var ReactPropTypesSecret = __webpack_require__(110);
	
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);
	
	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};
	
	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
	}
	
	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
	}
	
	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: React.PropTypes.func
	};
	
	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
	      }
	    }
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};
	
	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 110 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	
	module.exports = ReactPropTypesSecret;

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var React = __webpack_require__(2);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDOMSelect = __webpack_require__(112);
	
	var warning = __webpack_require__(11);
	var didWarnInvalidOptionChildren = false;
	
	function flattenChildren(children) {
	  var content = '';
	
	  // Flatten children and warn if they aren't strings or numbers;
	  // invalid types are ignored.
	  React.Children.forEach(children, function (child) {
	    if (child == null) {
	      return;
	    }
	    if (typeof child === 'string' || typeof child === 'number') {
	      content += child;
	    } else if (!didWarnInvalidOptionChildren) {
	      didWarnInvalidOptionChildren = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
	    }
	  });
	
	  return content;
	}
	
	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, hostParent) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
	    }
	
	    // Look up whether this option is 'selected'
	    var selectValue = null;
	    if (hostParent != null) {
	      var selectParent = hostParent;
	
	      if (selectParent._tag === 'optgroup') {
	        selectParent = selectParent._hostParent;
	      }
	
	      if (selectParent != null && selectParent._tag === 'select') {
	        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
	      }
	    }
	
	    // If the value is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      var value;
	      if (props.value != null) {
	        value = props.value + '';
	      } else {
	        value = flattenChildren(props.children);
	      }
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === value;
	      }
	    }
	
	    inst._wrapperState = { selected: selected };
	  },
	
	  postMountWrapper: function (inst) {
	    // value="" should make a value attribute (#6219)
	    var props = inst._currentElement.props;
	    if (props.value != null) {
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      node.setAttribute('value', props.value);
	    }
	  },
	
	  getHostProps: function (inst, props) {
	    var hostProps = _assign({ selected: undefined, children: undefined }, props);
	
	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      hostProps.selected = inst._wrapperState.selected;
	    }
	
	    var content = flattenChildren(props.children);
	
	    if (content) {
	      hostProps.children = content;
	    }
	
	    return hostProps;
	  }
	
	};
	
	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var LinkedValueUtils = __webpack_require__(109);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(56);
	
	var warning = __webpack_require__(11);
	
	var didWarnValueLink = false;
	var didWarnValueDefaultValue = false;
	
	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;
	
	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	
	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}
	
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	var valuePropNames = ['value', 'defaultValue'];
	
	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);
	
	  if (props.valueLink !== undefined && !didWarnValueLink) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
	    didWarnValueLink = true;
	  }
	
	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    var isArray = Array.isArray(props[propName]);
	    if (props.multiple && !isArray) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    } else if (!props.multiple && isArray) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    }
	  }
	}
	
	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;
	
	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}
	
	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  getHostProps: function (inst, props) {
	    return _assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },
	
	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }
	
	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };
	
	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	      didWarnValueDefaultValue = true;
	    }
	  },
	
	  getSelectValueContext: function (inst) {
	    // ReactDOMOption looks at this initial value so the initial generated
	    // markup has correct `selected` attributes
	    return inst._wrapperState.initialValue;
	  },
	
	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    // After the initial mount, we control selected-ness manually so don't pass
	    // this value down
	    inst._wrapperState.initialValue = undefined;
	
	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);
	
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	
	  if (this._rootNodeID) {
	    this._wrapperState.pendingUpdate = true;
	  }
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}
	
	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);
	
	var LinkedValueUtils = __webpack_require__(109);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(56);
	
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);
	
	var didWarnValueLink = false;
	var didWarnValDefaultVal = false;
	
	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}
	
	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getHostProps: function (inst, props) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;
	
	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.  We could add a check in setTextContent
	    // to only set the value if/when the value differs from the node value (which would
	    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
	    // The value can be a boolean or object so that's why it's forced to be a string.
	    var hostProps = _assign({}, props, {
	      value: undefined,
	      defaultValue: undefined,
	      children: '' + inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });
	
	    return hostProps;
	  },
	
	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	        didWarnValDefaultVal = true;
	      }
	    }
	
	    var value = LinkedValueUtils.getValue(props);
	    var initialValue = value;
	
	    // Only bother fetching default value if we're going to use it
	    if (value == null) {
	      var defaultValue = props.defaultValue;
	      // TODO (yungsters): Remove support for children content in <textarea>.
	      var children = props.children;
	      if (children != null) {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
	        }
	        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
	        if (Array.isArray(children)) {
	          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
	          children = children[0];
	        }
	
	        defaultValue = '' + children;
	      }
	      if (defaultValue == null) {
	        defaultValue = '';
	      }
	      initialValue = defaultValue;
	    }
	
	    inst._wrapperState = {
	      initialValue: '' + initialValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };
	  },
	
	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;
	
	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	      if (props.defaultValue == null) {
	        node.defaultValue = newValue;
	      }
	    }
	    if (props.defaultValue != null) {
	      node.defaultValue = props.defaultValue;
	    }
	  },
	
	  postMountWrapper: function (inst) {
	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var textContent = node.textContent;
	
	    // Only set node.value if textContent is equal to the expected
	    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
	    // will populate textContent as well.
	    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
	    if (textContent === inst._wrapperState.initialValue) {
	      node.value = textContent;
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}
	
	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var ReactComponentEnvironment = __webpack_require__(115);
	var ReactInstanceMap = __webpack_require__(116);
	var ReactInstrumentation = __webpack_require__(62);
	
	var ReactCurrentOwner = __webpack_require__(10);
	var ReactReconciler = __webpack_require__(59);
	var ReactChildReconciler = __webpack_require__(117);
	
	var emptyFunction = __webpack_require__(12);
	var flattenChildren = __webpack_require__(132);
	var invariant = __webpack_require__(8);
	
	/**
	 * Make an update for markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function makeInsertMarkup(markup, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'INSERT_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}
	
	/**
	 * Make an update for moving an existing element to another index.
	 *
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function makeMove(child, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'MOVE_EXISTING',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: ReactReconciler.getHostNode(child),
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}
	
	/**
	 * Make an update for removing an element at an index.
	 *
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function makeRemove(child, node) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'REMOVE_NODE',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: node,
	    toIndex: null,
	    afterNode: null
	  };
	}
	
	/**
	 * Make an update for setting the markup of a node.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function makeSetMarkup(markup) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'SET_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}
	
	/**
	 * Make an update for setting the text content.
	 *
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function makeTextContent(textContent) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'TEXT_CONTENT',
	    content: textContent,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}
	
	/**
	 * Push an update, if any, onto the queue. Creates a new queue if none is
	 * passed and always returns the queue. Mutative.
	 */
	function enqueue(queue, update) {
	  if (update) {
	    queue = queue || [];
	    queue.push(update);
	  }
	  return queue;
	}
	
	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue(inst, updateQueue) {
	  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
	}
	
	var setChildrenForInstrumentation = emptyFunction;
	if (process.env.NODE_ENV !== 'production') {
	  var getDebugID = function (inst) {
	    if (!inst._debugID) {
	      // Check for ART-like instances. TODO: This is silly/gross.
	      var internal;
	      if (internal = ReactInstanceMap.get(inst)) {
	        inst = internal;
	      }
	    }
	    return inst._debugID;
	  };
	  setChildrenForInstrumentation = function (children) {
	    var debugID = getDebugID(this);
	    // TODO: React Native empty components are also multichild.
	    // This means they still get into this method but don't have _debugID.
	    if (debugID !== 0) {
	      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
	        return children[key]._debugID;
	      }) : []);
	    }
	  };
	}
	
	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {
	
	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {
	
	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        var selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },
	
	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
	      var nextChildren;
	      var selfDebugID = 0;
	      if (process.env.NODE_ENV !== 'production') {
	        selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          return nextChildren;
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	      return nextChildren;
	    },
	
	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          var selfDebugID = 0;
	          if (process.env.NODE_ENV !== 'production') {
	            selfDebugID = getDebugID(this);
	          }
	          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	
	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, children);
	      }
	
	      return mountImages;
	    },
	
	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      // Set new text content.
	      var updates = [makeTextContent(nextContent)];
	      processQueue(this, updates);
	    },
	
	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      var updates = [makeSetMarkup(nextMarkup)];
	      processQueue(this, updates);
	    },
	
	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      // Hook used by React ART
	      this._updateChildren(nextNestedChildrenElements, transaction, context);
	    },
	
	    /**
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var removedNodes = {};
	      var mountImages = [];
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var updates = null;
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var nextIndex = 0;
	      var lastIndex = 0;
	      // `nextMountIndex` will increment for each newly mounted child.
	      var nextMountIndex = 0;
	      var lastPlacedNode = null;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            // The `removedNodes` loop below will actually remove the child.
	          }
	          // The child must be instantiated before it's mounted.
	          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
	          nextMountIndex++;
	        }
	        nextIndex++;
	        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
	      }
	      // Remove children that are no longer present.
	      for (name in removedNodes) {
	        if (removedNodes.hasOwnProperty(name)) {
	          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
	        }
	      }
	      if (updates) {
	        processQueue(this, updates);
	      }
	      this._renderedChildren = nextChildren;
	
	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, nextChildren);
	      }
	    },
	
	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted. It does not actually perform any
	     * backend operations.
	     *
	     * @internal
	     */
	    unmountChildren: function (safely) {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren, safely);
	      this._renderedChildren = null;
	    },
	
	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, afterNode, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        return makeMove(child, afterNode, toIndex);
	      }
	    },
	
	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, afterNode, mountImage) {
	      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
	    },
	
	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child, node) {
	      return makeRemove(child, node);
	    },
	
	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
	      child._mountIndex = index;
	      return this.createChild(child, afterNode, mountImage);
	    },
	
	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child, node) {
	      var update = this.removeChild(child, node);
	      child._mountIndex = null;
	      return update;
	    }
	
	  }
	
	};
	
	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var invariant = __webpack_require__(8);
	
	var injected = false;
	
	var ReactComponentEnvironment = {
	
	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkup: null,
	
	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,
	
	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
	      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }
	
	};
	
	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 116 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */
	
	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	
	var ReactInstanceMap = {
	
	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },
	
	  get: function (key) {
	    return key._reactInternalInstance;
	  },
	
	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },
	
	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }
	
	};
	
	module.exports = ReactInstanceMap;

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactReconciler = __webpack_require__(59);
	
	var instantiateReactComponent = __webpack_require__(118);
	var KeyEscapeUtils = __webpack_require__(128);
	var shouldUpdateReactComponent = __webpack_require__(124);
	var traverseAllChildren = __webpack_require__(129);
	var warning = __webpack_require__(11);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(26);
	}
	
	function instantiateChild(childInstances, child, name, selfDebugID) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    if (!ReactComponentTreeHook) {
	      ReactComponentTreeHook = __webpack_require__(26);
	    }
	    if (!keyUnique) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	    }
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, true);
	  }
	}
	
	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID // 0 in production and for roots
	  ) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	
	    if (process.env.NODE_ENV !== 'production') {
	      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
	        return instantiateChild(childInsts, child, name, selfDebugID);
	      }, childInstances);
	    } else {
	      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    }
	    return childInstances;
	  },
	
	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID // 0 in production and for roots
	  ) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return;
	    }
	    var name;
	    var prevChild;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	          ReactReconciler.unmountComponent(prevChild, false);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, true);
	        nextChildren[name] = nextChildInstance;
	        // Creating mount image now ensures refs are resolved in right order
	        // (see https://github.com/facebook/react/pull/7101 for explanation).
	        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
	        mountImages.push(nextChildMountImage);
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        prevChild = prevChildren[name];
	        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	        ReactReconciler.unmountComponent(prevChild, false);
	      }
	    }
	  },
	
	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren, safely) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild, safely);
	      }
	    }
	  }
	
	};
	
	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);
	
	var ReactCompositeComponent = __webpack_require__(119);
	var ReactEmptyComponent = __webpack_require__(125);
	var ReactHostComponent = __webpack_require__(126);
	
	var getNextDebugID = __webpack_require__(127);
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);
	
	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function (element) {
	  this.construct(element);
	};
	_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
	  _instantiateReactComponent: instantiateReactComponent
	});
	
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}
	
	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {boolean} shouldHaveDebugID
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, shouldHaveDebugID) {
	  var instance;
	
	  if (node === null || node === false) {
	    instance = ReactEmptyComponent.create(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    var type = element.type;
	    if (typeof type !== 'function' && typeof type !== 'string') {
	      var info = '';
	      if (process.env.NODE_ENV !== 'production') {
	        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
	        }
	      }
	      info += getDeclarationErrorAddendum(element._owner);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info) : _prodInvariant('130', type == null ? type : typeof type, info) : void 0;
	    }
	
	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactHostComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	
	      // We renamed this. Allow the old name for compat. :(
	      if (!instance.getHostNode) {
	        instance.getHostNode = instance.getNativeNode;
	      }
	    } else {
	      instance = new ReactCompositeComponentWrapper(element);
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactHostComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
	  }
	
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
	  }
	
	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;
	
	  if (process.env.NODE_ENV !== 'production') {
	    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
	  }
	
	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }
	
	  return instance;
	}
	
	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);
	
	var React = __webpack_require__(2);
	var ReactComponentEnvironment = __webpack_require__(115);
	var ReactCurrentOwner = __webpack_require__(10);
	var ReactErrorUtils = __webpack_require__(45);
	var ReactInstanceMap = __webpack_require__(116);
	var ReactInstrumentation = __webpack_require__(62);
	var ReactNodeTypes = __webpack_require__(120);
	var ReactReconciler = __webpack_require__(59);
	
	if (process.env.NODE_ENV !== 'production') {
	  var checkReactTypeSpec = __webpack_require__(121);
	}
	
	var emptyObject = __webpack_require__(20);
	var invariant = __webpack_require__(8);
	var shallowEqual = __webpack_require__(123);
	var shouldUpdateReactComponent = __webpack_require__(124);
	var warning = __webpack_require__(11);
	
	var CompositeTypes = {
	  ImpureClass: 0,
	  PureClass: 1,
	  StatelessFunctional: 2
	};
	
	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  var element = Component(this.props, this.context, this.updater);
	  warnIfInvalidElement(Component, element);
	  return element;
	};
	
	function warnIfInvalidElement(Component, element) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
	  }
	}
	
	function shouldConstruct(Component) {
	  return !!(Component.prototype && Component.prototype.isReactComponent);
	}
	
	function isPureComponent(Component) {
	  return !!(Component.prototype && Component.prototype.isPureReactComponent);
	}
	
	// Separated into a function to contain deoptimizations caused by try/finally.
	function measureLifeCyclePerf(fn, debugID, timerType) {
	  if (debugID === 0) {
	    // Top-level wrappers (see ReactMount) and empty components (see
	    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
	    // Both are implementation details that should go away in the future.
	    return fn();
	  }
	
	  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
	  try {
	    return fn();
	  } finally {
	    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
	  }
	}
	
	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */
	
	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;
	
	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponent = {
	
	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = 0;
	    this._compositeType = null;
	    this._instance = null;
	    this._hostParent = null;
	    this._hostContainerInfo = null;
	
	    // See ReactUpdateQueue
	    this._updateBatchNumber = null;
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    this._renderedNodeType = null;
	    this._renderedComponent = null;
	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;
	
	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	
	    // ComponentWillUnmount shall only be called once
	    this._calledComponentWillUnmount = false;
	
	    if (process.env.NODE_ENV !== 'production') {
	      this._warnedAboutRefsInRender = false;
	    }
	  },
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} hostParent
	   * @param {?object} hostContainerInfo
	   * @param {?object} context
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var _this = this;
	
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;
	
	    var publicProps = this._currentElement.props;
	    var publicContext = this._processContext(context);
	
	    var Component = this._currentElement.type;
	
	    var updateQueue = transaction.getUpdateQueue();
	
	    // Initialize the public class
	    var doConstruct = shouldConstruct(Component);
	    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
	    var renderedElement;
	
	    // Support functional components
	    if (!doConstruct && (inst == null || inst.render == null)) {
	      renderedElement = inst;
	      warnIfInvalidElement(Component, renderedElement);
	      !(inst === null || inst === false || React.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
	      inst = new StatelessComponent(Component);
	      this._compositeType = CompositeTypes.StatelessFunctional;
	    } else {
	      if (isPureComponent(Component)) {
	        this._compositeType = CompositeTypes.PureClass;
	      } else {
	        this._compositeType = CompositeTypes.ImpureClass;
	      }
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
	      }
	
	      var propsMutated = inst.props !== publicProps;
	      var componentName = Component.displayName || Component.name || 'Component';
	
	      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
	    }
	
	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = updateQueue;
	
	    this._instance = inst;
	
	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);
	
	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
	    }
	
	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;
	
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    var markup;
	    if (inst.unstable_handleError) {
	      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } else {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	
	    if (inst.componentDidMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(function () {
	            return inst.componentDidMount();
	          }, _this._debugID, 'componentDidMount');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	      }
	    }
	
	    return markup;
	  },
	
	  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactCurrentOwner.current = this;
	      try {
	        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	    }
	  },
	
	  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
	    var Component = this._currentElement.type;
	
	    if (doConstruct) {
	      if (process.env.NODE_ENV !== 'production') {
	        return measureLifeCyclePerf(function () {
	          return new Component(publicProps, publicContext, updateQueue);
	        }, this._debugID, 'ctor');
	      } else {
	        return new Component(publicProps, publicContext, updateQueue);
	      }
	    }
	
	    // This can still be an instance in case of factory components
	    // but we'll count this as time spent rendering as the more common case.
	    if (process.env.NODE_ENV !== 'production') {
	      return measureLifeCyclePerf(function () {
	        return Component(publicProps, publicContext, updateQueue);
	      }, this._debugID, 'render');
	    } else {
	      return Component(publicProps, publicContext, updateQueue);
	    }
	  },
	
	  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var markup;
	    var checkpoint = transaction.checkpoint();
	    try {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } catch (e) {
	      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
	      transaction.rollback(checkpoint);
	      this._instance.unstable_handleError(e);
	      if (this._pendingStateQueue) {
	        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
	      }
	      checkpoint = transaction.checkpoint();
	
	      this._renderedComponent.unmountComponent(true);
	      transaction.rollback(checkpoint);
	
	      // Try again - we've informed the component about the error, so they can render an error message this time.
	      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	    return markup;
	  },
	
	  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var inst = this._instance;
	
	    var debugID = 0;
	    if (process.env.NODE_ENV !== 'production') {
	      debugID = this._debugID;
	    }
	
	    if (inst.componentWillMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillMount();
	        }, debugID, 'componentWillMount');
	      } else {
	        inst.componentWillMount();
	      }
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }
	
	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }
	
	    var nodeType = ReactNodeTypes.getType(renderedElement);
	    this._renderedNodeType = nodeType;
	    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	    );
	    this._renderedComponent = child;
	
	    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (debugID !== 0) {
	        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	      }
	    }
	
	    return markup;
	  },
	
	  getHostNode: function () {
	    return ReactReconciler.getHostNode(this._renderedComponent);
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    if (!this._renderedComponent) {
	      return;
	    }
	
	    var inst = this._instance;
	
	    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
	      inst._calledComponentWillUnmount = true;
	
	      if (safely) {
	        var name = this.getName() + '.componentWillUnmount()';
	        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          measureLifeCyclePerf(function () {
	            return inst.componentWillUnmount();
	          }, this._debugID, 'componentWillUnmount');
	        } else {
	          inst.componentWillUnmount();
	        }
	      }
	    }
	
	    if (this._renderedComponent) {
	      ReactReconciler.unmountComponent(this._renderedComponent, safely);
	      this._renderedNodeType = null;
	      this._renderedComponent = null;
	      this._instance = null;
	    }
	
	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;
	
	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = 0;
	    this._topLevelWrapper = null;
	
	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);
	
	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    var maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
	      }
	    }
	    return maskedContext;
	  },
	
	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext;
	
	    if (inst.getChildContext) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
	        try {
	          childContext = inst.getChildContext();
	        } finally {
	          ReactInstrumentation.debugTool.onEndProcessingChildContext();
	        }
	      } else {
	        childContext = inst.getChildContext();
	      }
	    }
	
	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkContextTypes(Component.childContextTypes, childContext, 'childContext');
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
	      }
	      return _assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },
	
	  /**
	   * Assert that the context types are valid
	   *
	   * @param {object} typeSpecs Map of context field to a ReactPropType
	   * @param {object} values Runtime values that need to be type-checked
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkContextTypes: function (typeSpecs, values, location) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
	    }
	  },
	
	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;
	
	    this._pendingElement = null;
	
	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },
	
	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
	    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    } else {
	      this._updateBatchNumber = null;
	    }
	  },
	
	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;
	
	    var willReceive = false;
	    var nextContext;
	
	    // Determine if the context has changed or not
	    if (this._context === nextUnmaskedContext) {
	      nextContext = inst.context;
	    } else {
	      nextContext = this._processContext(nextUnmaskedContext);
	      willReceive = true;
	    }
	
	    var prevProps = prevParentElement.props;
	    var nextProps = nextParentElement.props;
	
	    // Not a simple state update but a props update
	    if (prevParentElement !== nextParentElement) {
	      willReceive = true;
	    }
	
	    // An update here will schedule an update but immediately set
	    // _pendingStateQueue which will ensure that any state updates gets
	    // immediately reconciled instead of waiting for the next batch.
	    if (willReceive && inst.componentWillReceiveProps) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillReceiveProps(nextProps, nextContext);
	        }, this._debugID, 'componentWillReceiveProps');
	      } else {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }
	
	    var nextState = this._processPendingState(nextProps, nextContext);
	    var shouldUpdate = true;
	
	    if (!this._pendingForceUpdate) {
	      if (inst.shouldComponentUpdate) {
	        if (process.env.NODE_ENV !== 'production') {
	          shouldUpdate = measureLifeCyclePerf(function () {
	            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	          }, this._debugID, 'shouldComponentUpdate');
	        } else {
	          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	        }
	      } else {
	        if (this._compositeType === CompositeTypes.PureClass) {
	          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
	        }
	      }
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
	    }
	
	    this._updateBatchNumber = null;
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },
	
	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;
	
	    if (!queue) {
	      return inst.state;
	    }
	
	    if (replace && queue.length === 1) {
	      return queue[0];
	    }
	
	    var nextState = _assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }
	
	    return nextState;
	  },
	
	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var _this2 = this;
	
	    var inst = this._instance;
	
	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }
	
	    if (inst.componentWillUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillUpdate(nextProps, nextState, nextContext);
	        }, this._debugID, 'componentWillUpdate');
	      } else {
	        inst.componentWillUpdate(nextProps, nextState, nextContext);
	      }
	    }
	
	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;
	
	    this._updateRenderedComponent(transaction, unmaskedContext);
	
	    if (hasComponentDidUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	      }
	    }
	  },
	
	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	
	    var debugID = 0;
	    if (process.env.NODE_ENV !== 'production') {
	      debugID = this._debugID;
	    }
	
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
	      ReactReconciler.unmountComponent(prevComponentInstance, false);
	
	      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
	      this._renderedNodeType = nodeType;
	      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	      );
	      this._renderedComponent = child;
	
	      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);
	
	      if (process.env.NODE_ENV !== 'production') {
	        if (debugID !== 0) {
	          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	        }
	      }
	
	      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
	    }
	  },
	
	  /**
	   * Overridden in shallow rendering.
	   *
	   * @protected
	   */
	  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
	    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
	  },
	
	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedElement;
	
	    if (process.env.NODE_ENV !== 'production') {
	      renderedElement = measureLifeCyclePerf(function () {
	        return inst.render();
	      }, this._debugID, 'render');
	    } else {
	      renderedElement = inst.render();
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (renderedElement === undefined && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedElement = null;
	      }
	    }
	
	    return renderedElement;
	  },
	
	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedElement;
	    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
	      ReactCurrentOwner.current = this;
	      try {
	        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;
	
	    return renderedElement;
	  },
	
	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },
	
	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },
	
	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },
	
	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (this._compositeType === CompositeTypes.StatelessFunctional) {
	      return null;
	    }
	    return inst;
	  },
	
	  // Stub
	  _instantiateReactComponent: null
	
	};
	
	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var React = __webpack_require__(2);
	
	var invariant = __webpack_require__(8);
	
	var ReactNodeTypes = {
	  HOST: 0,
	  COMPOSITE: 1,
	  EMPTY: 2,
	
	  getType: function (node) {
	    if (node === null || node === false) {
	      return ReactNodeTypes.EMPTY;
	    } else if (React.isValidElement(node)) {
	      if (typeof node.type === 'function') {
	        return ReactNodeTypes.COMPOSITE;
	      } else {
	        return ReactNodeTypes.HOST;
	      }
	    }
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
	  }
	};
	
	module.exports = ReactNodeTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var ReactPropTypeLocationNames = __webpack_require__(122);
	var ReactPropTypesSecret = __webpack_require__(110);
	
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(26);
	}
	
	var loggedTypeFailures = {};
	
	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var componentStackInfo = '';
	
	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(26);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }
	
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}
	
	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypeLocationNames = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}
	
	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 123 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * 
	 */
	
	/*eslint-disable no-self-compare */
	
	'use strict';
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Added the nonzero y check to make Flow happy, but it is redundant
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}
	
	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }
	
	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }
	
	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);
	
	  if (keysA.length !== keysB.length) {
	    return false;
	  }
	
	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	module.exports = shallowEqual;

/***/ },
/* 124 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }
	
	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	}
	
	module.exports = shouldUpdateReactComponent;

/***/ },
/* 125 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyComponentFactory;
	
	var ReactEmptyComponentInjection = {
	  injectEmptyComponentFactory: function (factory) {
	    emptyComponentFactory = factory;
	  }
	};
	
	var ReactEmptyComponent = {
	  create: function (instantiate) {
	    return emptyComponentFactory(instantiate);
	  }
	};
	
	ReactEmptyComponent.injection = ReactEmptyComponentInjection;
	
	module.exports = ReactEmptyComponent;

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var invariant = __webpack_require__(8);
	
	var genericComponentClass = null;
	var textComponentClass = null;
	
	var ReactHostComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  }
	};
	
	/**
	 * Get a host internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
	  return new genericComponentClass(element);
	}
	
	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}
	
	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}
	
	var ReactHostComponent = {
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactHostComponentInjection
	};
	
	module.exports = ReactHostComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 127 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var nextDebugID = 1;
	
	function getNextDebugID() {
	  return nextDebugID++;
	}
	
	module.exports = getNextDebugID;

/***/ },
/* 128 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */
	
	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });
	
	  return '$' + escapedString;
	}
	
	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);
	
	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}
	
	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};
	
	module.exports = KeyEscapeUtils;

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var ReactCurrentOwner = __webpack_require__(10);
	var REACT_ELEMENT_TYPE = __webpack_require__(130);
	
	var getIteratorFn = __webpack_require__(131);
	var invariant = __webpack_require__(8);
	var KeyEscapeUtils = __webpack_require__(128);
	var warning = __webpack_require__(11);
	
	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';
	
	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */
	
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */
	
	var didWarnAboutMaps = false;
	
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}
	
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;
	
	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }
	
	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }
	
	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
	
	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }
	
	  return subtreeCount;
	}
	
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }
	
	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}
	
	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 130 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;
	
	module.exports = REACT_ELEMENT_TYPE;

/***/ },
/* 131 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/* global Symbol */
	
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}
	
	module.exports = getIteratorFn;

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var KeyEscapeUtils = __webpack_require__(128);
	var traverseAllChildren = __webpack_require__(129);
	var warning = __webpack_require__(11);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(26);
	}
	
	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 * @param {number=} selfDebugID Optional debugID of the current internal instance.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
	  // We found a component instance.
	  if (traverseContext && typeof traverseContext === 'object') {
	    var result = traverseContext;
	    var keyUnique = result[name] === undefined;
	    if (process.env.NODE_ENV !== 'production') {
	      if (!ReactComponentTreeHook) {
	        ReactComponentTreeHook = __webpack_require__(26);
	      }
	      if (!keyUnique) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	      }
	    }
	    if (keyUnique && child != null) {
	      result[name] = child;
	    }
	  }
	}
	
	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children, selfDebugID) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	
	  if (process.env.NODE_ENV !== 'production') {
	    traverseAllChildren(children, function (traverseContext, child, name) {
	      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
	    }, result);
	  } else {
	    traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  }
	  return result;
	}
	
	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var PooledClass = __webpack_require__(50);
	var Transaction = __webpack_require__(68);
	var ReactInstrumentation = __webpack_require__(62);
	var ReactServerUpdateQueue = __webpack_require__(134);
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [];
	
	if (process.env.NODE_ENV !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}
	
	var noopCallbackQueue = {
	  enqueue: function () {}
	};
	
	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.useCreateElement = false;
	  this.updateQueue = new ReactServerUpdateQueue(this);
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return noopCallbackQueue;
	  },
	
	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return this.updateQueue;
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {},
	
	  checkpoint: function () {},
	
	  rollback: function () {}
	};
	
	_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);
	
	PooledClass.addPoolingTo(ReactServerRenderingTransaction);
	
	module.exports = ReactServerRenderingTransaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ReactUpdateQueue = __webpack_require__(135);
	
	var warning = __webpack_require__(11);
	
	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}
	
	/**
	 * This is the update queue used for server rendering.
	 * It delegates to ReactUpdateQueue while server rendering is in progress and
	 * switches to ReactNoopUpdateQueue after the transaction has completed.
	 * @class ReactServerUpdateQueue
	 * @param {Transaction} transaction
	 */
	
	var ReactServerUpdateQueue = function () {
	  function ReactServerUpdateQueue(transaction) {
	    _classCallCheck(this, ReactServerUpdateQueue);
	
	    this.transaction = transaction;
	  }
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	
	
	  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
	    return false;
	  };
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	
	
	  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
	    }
	  };
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	
	
	  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
	    } else {
	      warnNoop(publicInstance, 'forceUpdate');
	    }
	  };
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} completeState Next state.
	   * @internal
	   */
	
	
	  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
	    } else {
	      warnNoop(publicInstance, 'replaceState');
	    }
	  };
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} partialState Next partial state to be merged with state.
	   * @internal
	   */
	
	
	  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
	    } else {
	      warnNoop(publicInstance, 'setState');
	    }
	  };
	
	  return ReactServerUpdateQueue;
	}();
	
	module.exports = ReactServerUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var ReactCurrentOwner = __webpack_require__(10);
	var ReactInstanceMap = __webpack_require__(116);
	var ReactInstrumentation = __webpack_require__(62);
	var ReactUpdates = __webpack_require__(56);
	
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);
	
	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}
	
	function formatUnexpectedArgument(arg) {
	  var type = typeof arg;
	  if (type !== 'object') {
	    return type;
	  }
	  var displayName = arg.constructor && arg.constructor.name || type;
	  var keys = Object.keys(arg);
	  if (keys.length > 0 && keys.length < 20) {
	    return displayName + ' (keys: ' + keys.join(', ') + ')';
	  }
	  return displayName;
	}
	
	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var ctor = publicInstance.constructor;
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
	    }
	    return null;
	  }
	
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
	  }
	
	  return internalInstance;
	}
	
	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @param {string} callerName Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback, callerName) {
	    ReactUpdateQueue.validateCallback(callback, callerName);
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
	
	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }
	
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },
	
	  enqueueCallbackInternal: function (internalInstance, callback) {
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingForceUpdate = true;
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onSetState();
	      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
	    }
	
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);
	
	    enqueueUpdate(internalInstance);
	  },
	
	  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
	    internalInstance._pendingElement = nextElement;
	    // TODO: introduce _pendingContext instead of setting it directly.
	    internalInstance._context = nextContext;
	    enqueueUpdate(internalInstance);
	  },
	
	  validateCallback: function (callback, callerName) {
	    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
	  }
	
	};
	
	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var emptyFunction = __webpack_require__(12);
	var warning = __webpack_require__(11);
	
	var validateDOMNesting = emptyFunction;
	
	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
	
	  var emptyAncestorInfo = {
	    current: null,
	
	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,
	
	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };
	
	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };
	
	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }
	
	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }
	
	    ancestorInfo.current = info;
	
	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }
	
	    return ancestorInfo;
	  };
	
	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	      case '#document':
	        return tag === 'html';
	    }
	
	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
	
	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;
	
	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }
	
	    return true;
	  };
	
	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	
	      case 'pre':
	      case 'listing':
	
	      case 'table':
	
	      case 'hr':
	
	      case 'xmp':
	
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;
	
	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
	
	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;
	
	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;
	
	      case 'button':
	        return ancestorInfo.buttonTagInScope;
	
	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;
	
	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }
	
	    return null;
	  };
	
	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }
	
	    var stack = [];
	    do {
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };
	
	  var didWarn = {};
	
	  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	
	    if (childText != null) {
	      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
	      childTag = '#text';
	    }
	
	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;
	
	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;
	
	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;
	
	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);
	
	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;
	
	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }
	
	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');
	
	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;
	
	      var tagDisplayName = childTag;
	      var whitespaceInfo = '';
	      if (childTag === '#text') {
	        if (/\S/.test(childText)) {
	          tagDisplayName = 'Text nodes';
	        } else {
	          tagDisplayName = 'Whitespace text nodes';
	          whitespaceInfo = ' Make sure you don\'t have any extra whitespace between tags on ' + 'each line of your source code.';
	        }
	      } else {
	        tagDisplayName = '<' + childTag + '>';
	      }
	
	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
	      }
	    }
	  };
	
	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;
	
	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}
	
	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var DOMLazyTree = __webpack_require__(81);
	var ReactDOMComponentTree = __webpack_require__(34);
	
	var ReactDOMEmptyComponent = function (instantiate) {
	  // ReactCompositeComponent uses this:
	  this._currentElement = null;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;
	  this._hostContainerInfo = null;
	  this._domID = 0;
	};
	_assign(ReactDOMEmptyComponent.prototype, {
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var domID = hostContainerInfo._idCounter++;
	    this._domID = domID;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;
	
	    var nodeValue = ' react-empty: ' + this._domID + ' ';
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var node = ownerDocument.createComment(nodeValue);
	      ReactDOMComponentTree.precacheNode(this, node);
	      return DOMLazyTree(node);
	    } else {
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd insert a comment node, but since this is a situation
	        // where React won't take over (static pages), we can simply return
	        // nothing.
	        return '';
	      }
	      return '<!--' + nodeValue + '-->';
	    }
	  },
	  receiveComponent: function () {},
	  getHostNode: function () {
	    return ReactDOMComponentTree.getNodeFromInstance(this);
	  },
	  unmountComponent: function () {
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	});
	
	module.exports = ReactDOMEmptyComponent;

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var invariant = __webpack_require__(8);
	
	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */
	function getLowestCommonAncestor(instA, instB) {
	  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	
	  var depthA = 0;
	  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
	    depthA++;
	  }
	  var depthB = 0;
	  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
	    depthB++;
	  }
	
	  // If A is deeper, crawl up.
	  while (depthA - depthB > 0) {
	    instA = instA._hostParent;
	    depthA--;
	  }
	
	  // If B is deeper, crawl up.
	  while (depthB - depthA > 0) {
	    instB = instB._hostParent;
	    depthB--;
	  }
	
	  // Walk in lockstep until we find a match.
	  var depth = depthA;
	  while (depth--) {
	    if (instA === instB) {
	      return instA;
	    }
	    instA = instA._hostParent;
	    instB = instB._hostParent;
	  }
	  return null;
	}
	
	/**
	 * Return if A is an ancestor of B.
	 */
	function isAncestor(instA, instB) {
	  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
	  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
	
	  while (instB) {
	    if (instB === instA) {
	      return true;
	    }
	    instB = instB._hostParent;
	  }
	  return false;
	}
	
	/**
	 * Return the parent instance of the passed-in instance.
	 */
	function getParentInstance(inst) {
	  !('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;
	
	  return inst._hostParent;
	}
	
	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */
	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];
	  while (inst) {
	    path.push(inst);
	    inst = inst._hostParent;
	  }
	  var i;
	  for (i = path.length; i-- > 0;) {
	    fn(path[i], 'captured', arg);
	  }
	  for (i = 0; i < path.length; i++) {
	    fn(path[i], 'bubbled', arg);
	  }
	}
	
	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */
	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];
	  while (from && from !== common) {
	    pathFrom.push(from);
	    from = from._hostParent;
	  }
	  var pathTo = [];
	  while (to && to !== common) {
	    pathTo.push(to);
	    to = to._hostParent;
	  }
	  var i;
	  for (i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], 'bubbled', argFrom);
	  }
	  for (i = pathTo.length; i-- > 0;) {
	    fn(pathTo[i], 'captured', argTo);
	  }
	}
	
	module.exports = {
	  isAncestor: isAncestor,
	  getLowestCommonAncestor: getLowestCommonAncestor,
	  getParentInstance: getParentInstance,
	  traverseTwoPhase: traverseTwoPhase,
	  traverseEnterLeave: traverseEnterLeave
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35),
	    _assign = __webpack_require__(4);
	
	var DOMChildrenOperations = __webpack_require__(80);
	var DOMLazyTree = __webpack_require__(81);
	var ReactDOMComponentTree = __webpack_require__(34);
	
	var escapeTextContentForBrowser = __webpack_require__(86);
	var invariant = __webpack_require__(8);
	var validateDOMNesting = __webpack_require__(136);
	
	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings between comment nodes so that they
	 * can undergo the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (text) {
	  // TODO: This is really a ReactText (ReactNode), not a ReactElement
	  this._currentElement = text;
	  this._stringText = '' + text;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;
	
	  // Properties
	  this._domID = 0;
	  this._mountIndex = 0;
	  this._closingComment = null;
	  this._commentNodes = null;
	};
	
	_assign(ReactDOMTextComponent.prototype, {
	
	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo != null) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(null, this._stringText, this, parentInfo);
	      }
	    }
	
	    var domID = hostContainerInfo._idCounter++;
	    var openingValue = ' react-text: ' + domID + ' ';
	    var closingValue = ' /react-text ';
	    this._domID = domID;
	    this._hostParent = hostParent;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var openingComment = ownerDocument.createComment(openingValue);
	      var closingComment = ownerDocument.createComment(closingValue);
	      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
	      if (this._stringText) {
	        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
	      }
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
	      ReactDOMComponentTree.precacheNode(this, openingComment);
	      this._closingComment = closingComment;
	      return lazyTree;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);
	
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this between comment nodes for the reasons stated
	        // above, but since this is a situation where React won't take over
	        // (static pages), we can simply return the text as it is.
	        return escapedText;
	      }
	
	      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
	    }
	  },
	
	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var commentNodes = this.getHostNode();
	        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
	      }
	    }
	  },
	
	  getHostNode: function () {
	    var hostNode = this._commentNodes;
	    if (hostNode) {
	      return hostNode;
	    }
	    if (!this._closingComment) {
	      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
	      var node = openingComment.nextSibling;
	      while (true) {
	        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
	        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
	          this._closingComment = node;
	          break;
	        }
	        node = node.nextSibling;
	      }
	    }
	    hostNode = [this._hostNode, this._closingComment];
	    this._commentNodes = hostNode;
	    return hostNode;
	  },
	
	  unmountComponent: function () {
	    this._closingComment = null;
	    this._commentNodes = null;
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	
	});
	
	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var ReactUpdates = __webpack_require__(56);
	var Transaction = __webpack_require__(68);
	
	var emptyFunction = __webpack_require__(12);
	
	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};
	
	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};
	
	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];
	
	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}
	
	_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});
	
	var transaction = new ReactDefaultBatchingStrategyTransaction();
	
	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,
	
	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;
	
	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;
	
	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      return callback(a, b, c, d, e);
	    } else {
	      return transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};
	
	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var EventListener = __webpack_require__(142);
	var ExecutionEnvironment = __webpack_require__(48);
	var PooledClass = __webpack_require__(50);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactUpdates = __webpack_require__(56);
	
	var getEventTarget = __webpack_require__(69);
	var getUnboundedScrollPosition = __webpack_require__(143);
	
	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */
	function findParent(inst) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  while (inst._hostParent) {
	    inst = inst._hostParent;
	  }
	  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
	  var container = rootNode.parentNode;
	  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
	}
	
	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	_assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);
	
	function handleTopLevelImpl(bookKeeping) {
	  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
	  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);
	
	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = targetInst;
	  do {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = ancestor && findParent(ancestor);
	  } while (ancestor);
	
	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}
	
	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}
	
	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,
	
	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,
	
	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },
	
	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },
	
	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },
	
	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },
	
	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },
	
	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },
	
	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }
	
	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};
	
	module.exports = ReactEventListener;

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @typechecks
	 */
	
	var emptyFunction = __webpack_require__(12);
	
	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function listen(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function remove() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },
	
	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function capture(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },
	
	  registerDefault: function registerDefault() {}
	};
	
	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 143 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}
	
	module.exports = getUnboundedScrollPosition;

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(36);
	var EventPluginHub = __webpack_require__(42);
	var EventPluginUtils = __webpack_require__(44);
	var ReactComponentEnvironment = __webpack_require__(115);
	var ReactEmptyComponent = __webpack_require__(125);
	var ReactBrowserEventEmitter = __webpack_require__(105);
	var ReactHostComponent = __webpack_require__(126);
	var ReactUpdates = __webpack_require__(56);
	
	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventPluginUtils: EventPluginUtils.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  HostComponent: ReactHostComponent.injection,
	  Updates: ReactUpdates.injection
	};
	
	module.exports = ReactInjection;

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var CallbackQueue = __webpack_require__(57);
	var PooledClass = __webpack_require__(50);
	var ReactBrowserEventEmitter = __webpack_require__(105);
	var ReactInputSelection = __webpack_require__(146);
	var ReactInstrumentation = __webpack_require__(62);
	var Transaction = __webpack_require__(68);
	var ReactUpdateQueue = __webpack_require__(135);
	
	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};
	
	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },
	
	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};
	
	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },
	
	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];
	
	if (process.env.NODE_ENV !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}
	
	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(useCreateElement) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactDOMTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = useCreateElement;
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },
	
	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return ReactUpdateQueue;
	  },
	
	  /**
	   * Save current transaction state -- if the return value from this method is
	   * passed to `rollback`, the transaction will be reset to that state.
	   */
	  checkpoint: function () {
	    // reactMountReady is the our only stateful wrapper
	    return this.reactMountReady.checkpoint();
	  },
	
	  rollback: function (checkpoint) {
	    this.reactMountReady.rollback(checkpoint);
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};
	
	_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);
	
	PooledClass.addPoolingTo(ReactReconcileTransaction);
	
	module.exports = ReactReconcileTransaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMSelection = __webpack_require__(147);
	
	var containsNode = __webpack_require__(149);
	var focusNode = __webpack_require__(94);
	var getActiveElement = __webpack_require__(152);
	
	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}
	
	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {
	
	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },
	
	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },
	
	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },
	
	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;
	
	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }
	
	    return selection || { start: 0, end: 0 };
	  },
	
	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (end === undefined) {
	      end = start;
	    }
	
	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};
	
	module.exports = ReactInputSelection;

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(48);
	
	var getNodeForCharacterOffset = __webpack_require__(148);
	var getTextContentAccessor = __webpack_require__(51);
	
	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}
	
	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;
	
	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);
	
	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;
	
	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}
	
	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();
	
	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }
	
	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;
	
	  var currentRange = selection.getRangeAt(0);
	
	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }
	
	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);
	
	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;
	
	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);
	
	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);
	
	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;
	
	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;
	
	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}
	
	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;
	
	  if (offsets.end === undefined) {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }
	
	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}
	
	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }
	
	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);
	
	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }
	
	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);
	
	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();
	
	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}
	
	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);
	
	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,
	
	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};
	
	module.exports = ReactDOMSelection;

/***/ },
/* 148 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}
	
	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}
	
	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;
	
	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;
	
	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }
	
	      nodeStart = nodeEnd;
	    }
	
	    node = getLeafNode(getSiblingNode(node));
	  }
	}
	
	module.exports = getNodeForCharacterOffset;

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	var isTextNode = __webpack_require__(150);
	
	/*eslint-disable no-bitwise */
	
	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}
	
	module.exports = containsNode;

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var isNode = __webpack_require__(151);
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}
	
	module.exports = isTextNode;

/***/ },
/* 151 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}
	
	module.exports = isNode;

/***/ },
/* 152 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	/* eslint-disable fb-www/typeof-undefined */
	
	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 */
	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}
	
	module.exports = getActiveElement;

/***/ },
/* 153 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};
	
	// We use attributes for everything SVG so let's avoid some duplication and run
	// code instead.
	// The following are all specified in the HTML config already so we exclude here.
	// - class (as className)
	// - color
	// - height
	// - id
	// - lang
	// - max
	// - media
	// - method
	// - min
	// - name
	// - style
	// - target
	// - type
	// - width
	var ATTRS = {
	  accentHeight: 'accent-height',
	  accumulate: 0,
	  additive: 0,
	  alignmentBaseline: 'alignment-baseline',
	  allowReorder: 'allowReorder',
	  alphabetic: 0,
	  amplitude: 0,
	  arabicForm: 'arabic-form',
	  ascent: 0,
	  attributeName: 'attributeName',
	  attributeType: 'attributeType',
	  autoReverse: 'autoReverse',
	  azimuth: 0,
	  baseFrequency: 'baseFrequency',
	  baseProfile: 'baseProfile',
	  baselineShift: 'baseline-shift',
	  bbox: 0,
	  begin: 0,
	  bias: 0,
	  by: 0,
	  calcMode: 'calcMode',
	  capHeight: 'cap-height',
	  clip: 0,
	  clipPath: 'clip-path',
	  clipRule: 'clip-rule',
	  clipPathUnits: 'clipPathUnits',
	  colorInterpolation: 'color-interpolation',
	  colorInterpolationFilters: 'color-interpolation-filters',
	  colorProfile: 'color-profile',
	  colorRendering: 'color-rendering',
	  contentScriptType: 'contentScriptType',
	  contentStyleType: 'contentStyleType',
	  cursor: 0,
	  cx: 0,
	  cy: 0,
	  d: 0,
	  decelerate: 0,
	  descent: 0,
	  diffuseConstant: 'diffuseConstant',
	  direction: 0,
	  display: 0,
	  divisor: 0,
	  dominantBaseline: 'dominant-baseline',
	  dur: 0,
	  dx: 0,
	  dy: 0,
	  edgeMode: 'edgeMode',
	  elevation: 0,
	  enableBackground: 'enable-background',
	  end: 0,
	  exponent: 0,
	  externalResourcesRequired: 'externalResourcesRequired',
	  fill: 0,
	  fillOpacity: 'fill-opacity',
	  fillRule: 'fill-rule',
	  filter: 0,
	  filterRes: 'filterRes',
	  filterUnits: 'filterUnits',
	  floodColor: 'flood-color',
	  floodOpacity: 'flood-opacity',
	  focusable: 0,
	  fontFamily: 'font-family',
	  fontSize: 'font-size',
	  fontSizeAdjust: 'font-size-adjust',
	  fontStretch: 'font-stretch',
	  fontStyle: 'font-style',
	  fontVariant: 'font-variant',
	  fontWeight: 'font-weight',
	  format: 0,
	  from: 0,
	  fx: 0,
	  fy: 0,
	  g1: 0,
	  g2: 0,
	  glyphName: 'glyph-name',
	  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
	  glyphOrientationVertical: 'glyph-orientation-vertical',
	  glyphRef: 'glyphRef',
	  gradientTransform: 'gradientTransform',
	  gradientUnits: 'gradientUnits',
	  hanging: 0,
	  horizAdvX: 'horiz-adv-x',
	  horizOriginX: 'horiz-origin-x',
	  ideographic: 0,
	  imageRendering: 'image-rendering',
	  'in': 0,
	  in2: 0,
	  intercept: 0,
	  k: 0,
	  k1: 0,
	  k2: 0,
	  k3: 0,
	  k4: 0,
	  kernelMatrix: 'kernelMatrix',
	  kernelUnitLength: 'kernelUnitLength',
	  kerning: 0,
	  keyPoints: 'keyPoints',
	  keySplines: 'keySplines',
	  keyTimes: 'keyTimes',
	  lengthAdjust: 'lengthAdjust',
	  letterSpacing: 'letter-spacing',
	  lightingColor: 'lighting-color',
	  limitingConeAngle: 'limitingConeAngle',
	  local: 0,
	  markerEnd: 'marker-end',
	  markerMid: 'marker-mid',
	  markerStart: 'marker-start',
	  markerHeight: 'markerHeight',
	  markerUnits: 'markerUnits',
	  markerWidth: 'markerWidth',
	  mask: 0,
	  maskContentUnits: 'maskContentUnits',
	  maskUnits: 'maskUnits',
	  mathematical: 0,
	  mode: 0,
	  numOctaves: 'numOctaves',
	  offset: 0,
	  opacity: 0,
	  operator: 0,
	  order: 0,
	  orient: 0,
	  orientation: 0,
	  origin: 0,
	  overflow: 0,
	  overlinePosition: 'overline-position',
	  overlineThickness: 'overline-thickness',
	  paintOrder: 'paint-order',
	  panose1: 'panose-1',
	  pathLength: 'pathLength',
	  patternContentUnits: 'patternContentUnits',
	  patternTransform: 'patternTransform',
	  patternUnits: 'patternUnits',
	  pointerEvents: 'pointer-events',
	  points: 0,
	  pointsAtX: 'pointsAtX',
	  pointsAtY: 'pointsAtY',
	  pointsAtZ: 'pointsAtZ',
	  preserveAlpha: 'preserveAlpha',
	  preserveAspectRatio: 'preserveAspectRatio',
	  primitiveUnits: 'primitiveUnits',
	  r: 0,
	  radius: 0,
	  refX: 'refX',
	  refY: 'refY',
	  renderingIntent: 'rendering-intent',
	  repeatCount: 'repeatCount',
	  repeatDur: 'repeatDur',
	  requiredExtensions: 'requiredExtensions',
	  requiredFeatures: 'requiredFeatures',
	  restart: 0,
	  result: 0,
	  rotate: 0,
	  rx: 0,
	  ry: 0,
	  scale: 0,
	  seed: 0,
	  shapeRendering: 'shape-rendering',
	  slope: 0,
	  spacing: 0,
	  specularConstant: 'specularConstant',
	  specularExponent: 'specularExponent',
	  speed: 0,
	  spreadMethod: 'spreadMethod',
	  startOffset: 'startOffset',
	  stdDeviation: 'stdDeviation',
	  stemh: 0,
	  stemv: 0,
	  stitchTiles: 'stitchTiles',
	  stopColor: 'stop-color',
	  stopOpacity: 'stop-opacity',
	  strikethroughPosition: 'strikethrough-position',
	  strikethroughThickness: 'strikethrough-thickness',
	  string: 0,
	  stroke: 0,
	  strokeDasharray: 'stroke-dasharray',
	  strokeDashoffset: 'stroke-dashoffset',
	  strokeLinecap: 'stroke-linecap',
	  strokeLinejoin: 'stroke-linejoin',
	  strokeMiterlimit: 'stroke-miterlimit',
	  strokeOpacity: 'stroke-opacity',
	  strokeWidth: 'stroke-width',
	  surfaceScale: 'surfaceScale',
	  systemLanguage: 'systemLanguage',
	  tableValues: 'tableValues',
	  targetX: 'targetX',
	  targetY: 'targetY',
	  textAnchor: 'text-anchor',
	  textDecoration: 'text-decoration',
	  textRendering: 'text-rendering',
	  textLength: 'textLength',
	  to: 0,
	  transform: 0,
	  u1: 0,
	  u2: 0,
	  underlinePosition: 'underline-position',
	  underlineThickness: 'underline-thickness',
	  unicode: 0,
	  unicodeBidi: 'unicode-bidi',
	  unicodeRange: 'unicode-range',
	  unitsPerEm: 'units-per-em',
	  vAlphabetic: 'v-alphabetic',
	  vHanging: 'v-hanging',
	  vIdeographic: 'v-ideographic',
	  vMathematical: 'v-mathematical',
	  values: 0,
	  vectorEffect: 'vector-effect',
	  version: 0,
	  vertAdvY: 'vert-adv-y',
	  vertOriginX: 'vert-origin-x',
	  vertOriginY: 'vert-origin-y',
	  viewBox: 'viewBox',
	  viewTarget: 'viewTarget',
	  visibility: 0,
	  widths: 0,
	  wordSpacing: 'word-spacing',
	  writingMode: 'writing-mode',
	  x: 0,
	  xHeight: 'x-height',
	  x1: 0,
	  x2: 0,
	  xChannelSelector: 'xChannelSelector',
	  xlinkActuate: 'xlink:actuate',
	  xlinkArcrole: 'xlink:arcrole',
	  xlinkHref: 'xlink:href',
	  xlinkRole: 'xlink:role',
	  xlinkShow: 'xlink:show',
	  xlinkTitle: 'xlink:title',
	  xlinkType: 'xlink:type',
	  xmlBase: 'xml:base',
	  xmlns: 0,
	  xmlnsXlink: 'xmlns:xlink',
	  xmlLang: 'xml:lang',
	  xmlSpace: 'xml:space',
	  y: 0,
	  y1: 0,
	  y2: 0,
	  yChannelSelector: 'yChannelSelector',
	  z: 0,
	  zoomAndPan: 'zoomAndPan'
	};
	
	var SVGDOMPropertyConfig = {
	  Properties: {},
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {}
	};
	
	Object.keys(ATTRS).forEach(function (key) {
	  SVGDOMPropertyConfig.Properties[key] = 0;
	  if (ATTRS[key]) {
	    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
	  }
	});
	
	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPropagators = __webpack_require__(41);
	var ExecutionEnvironment = __webpack_require__(48);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactInputSelection = __webpack_require__(146);
	var SyntheticEvent = __webpack_require__(53);
	
	var getActiveElement = __webpack_require__(152);
	var isTextInputElement = __webpack_require__(71);
	var shallowEqual = __webpack_require__(123);
	
	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;
	
	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: 'onSelect',
	      captured: 'onSelectCapture'
	    },
	    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
	  }
	};
	
	var activeElement = null;
	var activeElementInst = null;
	var lastSelection = null;
	var mouseDown = false;
	
	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events. See #3639.
	var hasListener = false;
	
	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}
	
	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }
	
	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;
	
	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);
	
	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;
	
	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);
	
	    return syntheticEvent;
	  }
	
	  return null;
	}
	
	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }
	
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;
	
	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case 'topFocus':
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement = targetNode;
	          activeElementInst = targetInst;
	          lastSelection = null;
	        }
	        break;
	      case 'topBlur':
	        activeElement = null;
	        activeElementInst = null;
	        lastSelection = null;
	        break;
	
	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case 'topMouseDown':
	        mouseDown = true;
	        break;
	      case 'topContextMenu':
	      case 'topMouseUp':
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	
	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case 'topSelectionChange':
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case 'topKeyDown':
	      case 'topKeyUp':
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }
	
	    return null;
	  },
	
	  didPutListener: function (inst, registrationName, listener) {
	    if (registrationName === 'onSelect') {
	      hasListener = true;
	    }
	  }
	};
	
	module.exports = SelectEventPlugin;

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var EventListener = __webpack_require__(142);
	var EventPropagators = __webpack_require__(41);
	var ReactDOMComponentTree = __webpack_require__(34);
	var SyntheticAnimationEvent = __webpack_require__(156);
	var SyntheticClipboardEvent = __webpack_require__(157);
	var SyntheticEvent = __webpack_require__(53);
	var SyntheticFocusEvent = __webpack_require__(158);
	var SyntheticKeyboardEvent = __webpack_require__(159);
	var SyntheticMouseEvent = __webpack_require__(74);
	var SyntheticDragEvent = __webpack_require__(162);
	var SyntheticTouchEvent = __webpack_require__(163);
	var SyntheticTransitionEvent = __webpack_require__(164);
	var SyntheticUIEvent = __webpack_require__(75);
	var SyntheticWheelEvent = __webpack_require__(165);
	
	var emptyFunction = __webpack_require__(12);
	var getEventCharCode = __webpack_require__(160);
	var invariant = __webpack_require__(8);
	
	/**
	 * Turns
	 * ['abort', ...]
	 * into
	 * eventTypes = {
	 *   'abort': {
	 *     phasedRegistrationNames: {
	 *       bubbled: 'onAbort',
	 *       captured: 'onAbortCapture',
	 *     },
	 *     dependencies: ['topAbort'],
	 *   },
	 *   ...
	 * };
	 * topLevelEventsToDispatchConfig = {
	 *   'topAbort': { sameConfig }
	 * };
	 */
	var eventTypes = {};
	var topLevelEventsToDispatchConfig = {};
	['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
	  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
	  var onEvent = 'on' + capitalizedEvent;
	  var topEvent = 'top' + capitalizedEvent;
	
	  var type = {
	    phasedRegistrationNames: {
	      bubbled: onEvent,
	      captured: onEvent + 'Capture'
	    },
	    dependencies: [topEvent]
	  };
	  eventTypes[event] = type;
	  topLevelEventsToDispatchConfig[topEvent] = type;
	});
	
	var onClickListeners = {};
	
	function getDictionaryKey(inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	}
	
	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}
	
	var SimpleEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case 'topAbort':
	      case 'topCanPlay':
	      case 'topCanPlayThrough':
	      case 'topDurationChange':
	      case 'topEmptied':
	      case 'topEncrypted':
	      case 'topEnded':
	      case 'topError':
	      case 'topInput':
	      case 'topInvalid':
	      case 'topLoad':
	      case 'topLoadedData':
	      case 'topLoadedMetadata':
	      case 'topLoadStart':
	      case 'topPause':
	      case 'topPlay':
	      case 'topPlaying':
	      case 'topProgress':
	      case 'topRateChange':
	      case 'topReset':
	      case 'topSeeked':
	      case 'topSeeking':
	      case 'topStalled':
	      case 'topSubmit':
	      case 'topSuspend':
	      case 'topTimeUpdate':
	      case 'topVolumeChange':
	      case 'topWaiting':
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case 'topKeyPress':
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case 'topKeyDown':
	      case 'topKeyUp':
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case 'topBlur':
	      case 'topFocus':
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case 'topClick':
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case 'topDoubleClick':
	      case 'topMouseDown':
	      case 'topMouseMove':
	      case 'topMouseUp':
	      // TODO: Disabled elements should not respond to mouse events
	      /* falls through */
	      case 'topMouseOut':
	      case 'topMouseOver':
	      case 'topContextMenu':
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case 'topDrag':
	      case 'topDragEnd':
	      case 'topDragEnter':
	      case 'topDragExit':
	      case 'topDragLeave':
	      case 'topDragOver':
	      case 'topDragStart':
	      case 'topDrop':
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case 'topTouchCancel':
	      case 'topTouchEnd':
	      case 'topTouchMove':
	      case 'topTouchStart':
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case 'topAnimationEnd':
	      case 'topAnimationIteration':
	      case 'topAnimationStart':
	        EventConstructor = SyntheticAnimationEvent;
	        break;
	      case 'topTransitionEnd':
	        EventConstructor = SyntheticTransitionEvent;
	        break;
	      case 'topScroll':
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case 'topWheel':
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case 'topCopy':
	      case 'topCut':
	      case 'topPaste':
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },
	
	  didPutListener: function (inst, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      if (!onClickListeners[key]) {
	        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },
	
	  willDeleteListener: function (inst, registrationName) {
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      onClickListeners[key].remove();
	      delete onClickListeners[key];
	    }
	  }
	
	};
	
	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(53);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */
	var AnimationEventInterface = {
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);
	
	module.exports = SyntheticAnimationEvent;

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(53);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);
	
	module.exports = SyntheticClipboardEvent;

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(75);
	
	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);
	
	module.exports = SyntheticFocusEvent;

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(75);
	
	var getEventCharCode = __webpack_require__(160);
	var getEventKey = __webpack_require__(161);
	var getEventModifierState = __webpack_require__(77);
	
	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.
	
	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.
	
	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);
	
	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 160 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;
	
	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;
	
	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }
	
	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }
	
	  return 0;
	}
	
	module.exports = getEventCharCode;

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var getEventCharCode = __webpack_require__(160);
	
	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};
	
	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};
	
	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.
	
	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }
	
	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);
	
	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}
	
	module.exports = getEventKey;

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(74);
	
	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);
	
	module.exports = SyntheticDragEvent;

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(75);
	
	var getEventModifierState = __webpack_require__(77);
	
	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);
	
	module.exports = SyntheticTouchEvent;

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(53);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */
	var TransitionEventInterface = {
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);
	
	module.exports = SyntheticTransitionEvent;

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(74);
	
	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,
	
	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);
	
	module.exports = SyntheticWheelEvent;

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var DOMLazyTree = __webpack_require__(81);
	var DOMProperty = __webpack_require__(36);
	var React = __webpack_require__(2);
	var ReactBrowserEventEmitter = __webpack_require__(105);
	var ReactCurrentOwner = __webpack_require__(10);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactDOMContainerInfo = __webpack_require__(167);
	var ReactDOMFeatureFlags = __webpack_require__(168);
	var ReactFeatureFlags = __webpack_require__(58);
	var ReactInstanceMap = __webpack_require__(116);
	var ReactInstrumentation = __webpack_require__(62);
	var ReactMarkupChecksum = __webpack_require__(169);
	var ReactReconciler = __webpack_require__(59);
	var ReactUpdateQueue = __webpack_require__(135);
	var ReactUpdates = __webpack_require__(56);
	
	var emptyObject = __webpack_require__(20);
	var instantiateReactComponent = __webpack_require__(118);
	var invariant = __webpack_require__(8);
	var setInnerHTML = __webpack_require__(83);
	var shouldUpdateReactComponent = __webpack_require__(124);
	var warning = __webpack_require__(11);
	
	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;
	
	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
	
	var instancesByReactRootID = {};
	
	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}
	
	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}
	
	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}
	
	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
	  var markerName;
	  if (ReactFeatureFlags.logTopLevelRenders) {
	    var wrappedElement = wrapperInstance._currentElement.props.child;
	    var type = wrappedElement.type;
	    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
	    console.time(markerName);
	  }
	
	  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
	  );
	
	  if (markerName) {
	    console.timeEnd(markerName);
	  }
	
	  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
	  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
	}
	
	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */
	  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}
	
	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container, safely) {
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onBeginFlush();
	  }
	  ReactReconciler.unmountComponent(instance, safely);
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onEndFlush();
	  }
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }
	
	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}
	
	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  if (rootEl) {
	    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
	    return !!(inst && inst._hostParent);
	  }
	}
	
	/**
	 * True if the supplied DOM node is a React DOM element and
	 * it has been rendered by another copy of React.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM has been rendered by another copy of React
	 * @internal
	 */
	function nodeIsRenderedByOtherInstance(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
	}
	
	/**
	 * True if the supplied DOM node is a valid node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid DOM node.
	 * @internal
	 */
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
	}
	
	/**
	 * True if the supplied DOM node is a valid React node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid React DOM node.
	 * @internal
	 */
	function isReactNode(node) {
	  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
	}
	
	function getHostRootInstanceInContainer(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
	  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
	}
	
	function getTopLevelWrapperInContainer(container) {
	  var root = getHostRootInstanceInContainer(container);
	  return root ? root._hostContainerInfo._topLevelWrapper : null;
	}
	
	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var topLevelRootCounter = 1;
	var TopLevelWrapper = function () {
	  this.rootID = topLevelRootCounter++;
	};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  return this.props.child;
	};
	TopLevelWrapper.isReactTopLevelWrapper = true;
	
	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	
	  TopLevelWrapper: TopLevelWrapper,
	
	  /**
	   * Used by devtools. The keys are not important.
	   */
	  _instancesByReactRootID: instancesByReactRootID,
	
	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },
	
	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });
	
	    return prevComponent;
	  },
	
	  /**
	   * Render a new component into the DOM. Hooked by hooks!
	   *
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;
	
	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;
	
	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	    var componentInstance = instantiateReactComponent(nextElement, false);
	
	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.
	
	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);
	
	    var wrapperID = componentInstance._instance.rootID;
	    instancesByReactRootID[wrapperID] = componentInstance;
	
	    return componentInstance;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },
	
	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
	    !React.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;
	
	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;
	
	    var nextWrappedElement = React.createElement(TopLevelWrapper, { child: nextElement });
	
	    var nextContext;
	    if (parentComponent) {
	      var parentInst = ReactInstanceMap.get(parentComponent);
	      nextContext = parentInst._processChildContext(parentInst._context);
	    } else {
	      nextContext = emptyObject;
	    }
	
	    var prevComponent = getTopLevelWrapperInContainer(container);
	
	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props.child;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }
	
	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;
	
	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }
	
	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },
	
	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;
	
	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by another copy of React.') : void 0;
	    }
	
	    var prevComponent = getTopLevelWrapperInContainer(container);
	    if (!prevComponent) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	      // Check if the container itself is a React root node.
	      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);
	
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
	      }
	
	      return false;
	    }
	    delete instancesByReactRootID[prevComponent._instance.rootID];
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
	    return true;
	  },
	
	  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;
	
	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        ReactDOMComponentTree.precacheNode(instance, rootElement);
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	
	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);
	
	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }
	
	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);
	
	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;
	
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
	        }
	      }
	    }
	
	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;
	
	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      DOMLazyTree.insertTreeBefore(container, markup, null);
	    } else {
	      setInnerHTML(container, markup);
	      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
	      if (hostNode._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: hostNode._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  }
	};
	
	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var validateDOMNesting = __webpack_require__(136);
	
	var DOC_NODE_TYPE = 9;
	
	function ReactDOMContainerInfo(topLevelWrapper, node) {
	  var info = {
	    _topLevelWrapper: topLevelWrapper,
	    _idCounter: 1,
	    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
	    _node: node,
	    _tag: node ? node.nodeName.toLowerCase() : null,
	    _namespaceURI: node ? node.namespaceURI : null
	  };
	  if (process.env.NODE_ENV !== 'production') {
	    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
	  }
	  return info;
	}
	
	module.exports = ReactDOMContainerInfo;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 168 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMFeatureFlags = {
	  useCreateElement: true,
	  useFiber: false
	};
	
	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var adler32 = __webpack_require__(170);
	
	var TAG_END = /\/?>/;
	var COMMENT_START = /^<\!\-\-/;
	
	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',
	
	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);
	
	    // Add checksum (handle both parent tags, comments and self-closing tags)
	    if (COMMENT_START.test(markup)) {
	      return markup;
	    } else {
	      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	    }
	  },
	
	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};
	
	module.exports = ReactMarkupChecksum;

/***/ },
/* 170 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var MOD = 65521;
	
	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    var n = Math.min(i + 4096, m);
	    for (; i < n; i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}
	
	module.exports = adler32;

/***/ },
/* 171 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	module.exports = '15.4.2';

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(35);
	
	var ReactCurrentOwner = __webpack_require__(10);
	var ReactDOMComponentTree = __webpack_require__(34);
	var ReactInstanceMap = __webpack_require__(116);
	
	var getHostComponentFromComposite = __webpack_require__(173);
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);
	
	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }
	
	  var inst = ReactInstanceMap.get(componentOrElement);
	  if (inst) {
	    inst = getHostComponentFromComposite(inst);
	    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
	  }
	
	  if (typeof componentOrElement.render === 'function') {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
	  }
	}
	
	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactNodeTypes = __webpack_require__(120);
	
	function getHostComponentFromComposite(inst) {
	  var type;
	
	  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
	    inst = inst._renderedComponent;
	  }
	
	  if (type === ReactNodeTypes.HOST) {
	    return inst._renderedComponent;
	  } else if (type === ReactNodeTypes.EMPTY) {
	    return null;
	  }
	}
	
	module.exports = getHostComponentFromComposite;

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactMount = __webpack_require__(166);
	
	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(36);
	var EventPluginRegistry = __webpack_require__(43);
	var ReactComponentTreeHook = __webpack_require__(26);
	
	var warning = __webpack_require__(11);
	
	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true,
	
	    autoFocus: true,
	    defaultValue: true,
	    valueLink: true,
	    defaultChecked: true,
	    checkedLink: true,
	    innerHTML: true,
	    suppressContentEditableWarning: true,
	    onFocusIn: true,
	    onFocusOut: true
	  };
	  var warnedProperties = {};
	
	  var validateProperty = function (tagName, name, debugID) {
	    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
	      return true;
	    }
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return true;
	    }
	    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
	      return true;
	    }
	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();
	
	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;
	
	    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;
	
	    if (standardName != null) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else if (registrationName != null) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else {
	      // We were unable to guess which prop the user intended.
	      // It is likely that the user was just blindly spreading/forwarding props
	      // Components should be careful to only render valid props/attributes.
	      // Warning will be invoked in warnUnknownProperties to allow grouping.
	      return false;
	    }
	  };
	}
	
	var warnUnknownProperties = function (debugID, element) {
	  var unknownProps = [];
	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      unknownProps.push(key);
	    }
	  }
	
	  var unknownPropString = unknownProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');
	
	  if (unknownProps.length === 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (unknownProps.length > 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	};
	
	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }
	  warnUnknownProperties(debugID, element);
	}
	
	var ReactDOMUnknownPropertyHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};
	
	module.exports = ReactDOMUnknownPropertyHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactComponentTreeHook = __webpack_require__(26);
	
	var warning = __webpack_require__(11);
	
	var didWarnValueNull = false;
	
	function handleElement(debugID, element) {
	  if (element == null) {
	    return;
	  }
	  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
	    return;
	  }
	  if (element.props != null && element.props.value === null && !didWarnValueNull) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	
	    didWarnValueNull = true;
	  }
	}
	
	var ReactDOMNullInputValuePropHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};
	
	module.exports = ReactDOMNullInputValuePropHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(36);
	var ReactComponentTreeHook = __webpack_require__(26);
	
	var warning = __webpack_require__(11);
	
	var warnedProperties = {};
	var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
	
	function validateProperty(tagName, name, debugID) {
	  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	    return true;
	  }
	
	  if (rARIA.test(name)) {
	    var lowerCasedName = name.toLowerCase();
	    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;
	
	    // If this is an aria-* attribute, but is not listed in the known DOM
	    // DOM properties, then it is an invalid aria-* attribute.
	    if (standardName == null) {
	      warnedProperties[name] = true;
	      return false;
	    }
	    // aria-* attributes should be lowercase; suggest the lowercase version.
	    if (name !== standardName) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      warnedProperties[name] = true;
	      return true;
	    }
	  }
	
	  return true;
	}
	
	function warnInvalidARIAProps(debugID, element) {
	  var invalidProps = [];
	
	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      invalidProps.push(key);
	    }
	  }
	
	  var unknownPropString = invalidProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');
	
	  if (invalidProps.length === 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (invalidProps.length > 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	}
	
	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }
	
	  warnInvalidARIAProps(debugID, element);
	}
	
	var ReactDOMInvalidARIAHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    if (process.env.NODE_ENV !== 'production') {
	      handleElement(debugID, element);
	    }
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    if (process.env.NODE_ENV !== 'production') {
	      handleElement(debugID, element);
	    }
	  }
	};
	
	module.exports = ReactDOMInvalidARIAHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(1));
		else if(typeof define === 'function' && define.amd)
			define(["react"], factory);
		else if(typeof exports === 'object')
			exports["Dropzone"] = factory(require("react"));
		else
			root["Dropzone"] = factory(root["react"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		
		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _react = __webpack_require__(1);
		
		var _react2 = _interopRequireDefault(_react);
		
		var _attrAccept = __webpack_require__(2);
		
		var _attrAccept2 = _interopRequireDefault(_attrAccept);
		
		var _getDataTransferItems = __webpack_require__(3);
		
		var _getDataTransferItems2 = _interopRequireDefault(_getDataTransferItems);
		
		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
		
		function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint prefer-template: 0 */
		
		
		var supportMultiple = typeof document !== 'undefined' && document && document.createElement ? 'multiple' in document.createElement('input') : true;
		
		var Dropzone = function (_React$Component) {
		  _inherits(Dropzone, _React$Component);
		
		  _createClass(Dropzone, null, [{
		    key: 'renderChildren',
		    value: function renderChildren(children, isDragActive, isDragReject) {
		      if (typeof children === 'function') {
		        return children({ isDragActive: isDragActive, isDragReject: isDragReject });
		      }
		      return children;
		    }
		  }]);
		
		  function Dropzone(props, context) {
		    _classCallCheck(this, Dropzone);
		
		    var _this = _possibleConstructorReturn(this, (Dropzone.__proto__ || Object.getPrototypeOf(Dropzone)).call(this, props, context));
		
		    _this.onClick = _this.onClick.bind(_this);
		    _this.onDragStart = _this.onDragStart.bind(_this);
		    _this.onDragEnter = _this.onDragEnter.bind(_this);
		    _this.onDragLeave = _this.onDragLeave.bind(_this);
		    _this.onDragOver = _this.onDragOver.bind(_this);
		    _this.onDrop = _this.onDrop.bind(_this);
		    _this.onFileDialogCancel = _this.onFileDialogCancel.bind(_this);
		    _this.fileAccepted = _this.fileAccepted.bind(_this);
		    _this.isFileDialogActive = false;
		    _this.state = {
		      isDragActive: false
		    };
		    return _this;
		  }
		
		  _createClass(Dropzone, [{
		    key: 'componentDidMount',
		    value: function componentDidMount() {
		      this.enterCounter = 0;
		      // Tried implementing addEventListener, but didn't work out
		      document.body.onfocus = this.onFileDialogCancel;
		    }
		  }, {
		    key: 'componentWillUnmount',
		    value: function componentWillUnmount() {
		      // Can be replaced with removeEventListener, if addEventListener works
		      document.body.onfocus = null;
		    }
		  }, {
		    key: 'onDragStart',
		    value: function onDragStart(e) {
		      if (this.props.onDragStart) {
		        this.props.onDragStart.call(this, e);
		      }
		    }
		  }, {
		    key: 'onDragEnter',
		    value: function onDragEnter(e) {
		      e.preventDefault();
		
		      // Count the dropzone and any children that are entered.
		      ++this.enterCounter;
		
		      var allFilesAccepted = this.allFilesAccepted((0, _getDataTransferItems2.default)(e, this.props.multiple));
		
		      this.setState({
		        isDragActive: allFilesAccepted,
		        isDragReject: !allFilesAccepted
		      });
		
		      if (this.props.onDragEnter) {
		        this.props.onDragEnter.call(this, e);
		      }
		    }
		  }, {
		    key: 'onDragOver',
		    value: function onDragOver(e) {
		      // eslint-disable-line class-methods-use-this
		      e.preventDefault();
		      e.stopPropagation();
		      try {
		        e.dataTransfer.dropEffect = 'copy'; // eslint-disable-line no-param-reassign
		      } catch (err) {
		        // continue regardless of error
		      }
		
		      if (this.props.onDragOver) {
		        this.props.onDragOver.call(this, e);
		      }
		      return false;
		    }
		  }, {
		    key: 'onDragLeave',
		    value: function onDragLeave(e) {
		      e.preventDefault();
		
		      // Only deactivate once the dropzone and all children was left.
		      if (--this.enterCounter > 0) {
		        return;
		      }
		
		      this.setState({
		        isDragActive: false,
		        isDragReject: false
		      });
		
		      if (this.props.onDragLeave) {
		        this.props.onDragLeave.call(this, e);
		      }
		    }
		  }, {
		    key: 'onDrop',
		    value: function onDrop(e) {
		      var _this2 = this;
		
		      var _props = this.props,
		          onDrop = _props.onDrop,
		          onDropAccepted = _props.onDropAccepted,
		          onDropRejected = _props.onDropRejected,
		          multiple = _props.multiple,
		          disablePreview = _props.disablePreview;
		
		      var fileList = (0, _getDataTransferItems2.default)(e, multiple);
		      var acceptedFiles = [];
		      var rejectedFiles = [];
		
		      // Stop default browser behavior
		      e.preventDefault();
		
		      // Reset the counter along with the drag on a drop.
		      this.enterCounter = 0;
		      this.isFileDialogActive = false;
		
		      fileList.forEach(function (file) {
		        if (!disablePreview) {
		          file.preview = window.URL.createObjectURL(file); // eslint-disable-line no-param-reassign
		        }
		
		        if (_this2.fileAccepted(file) && _this2.fileMatchSize(file)) {
		          acceptedFiles.push(file);
		        } else {
		          rejectedFiles.push(file);
		        }
		      });
		
		      if (onDrop) {
		        onDrop.call(this, acceptedFiles, rejectedFiles, e);
		      }
		
		      if (rejectedFiles.length > 0 && onDropRejected) {
		        onDropRejected.call(this, rejectedFiles, e);
		      }
		
		      if (acceptedFiles.length > 0 && onDropAccepted) {
		        onDropAccepted.call(this, acceptedFiles, e);
		      }
		
		      // Reset drag state
		      this.setState({
		        isDragActive: false,
		        isDragReject: false
		      });
		    }
		  }, {
		    key: 'onClick',
		    value: function onClick(e) {
		      var _props2 = this.props,
		          onClick = _props2.onClick,
		          disableClick = _props2.disableClick;
		
		      if (!disableClick) {
		        e.stopPropagation();
		        this.open();
		        if (onClick) {
		          onClick.call(this, e);
		        }
		      }
		    }
		  }, {
		    key: 'onFileDialogCancel',
		    value: function onFileDialogCancel() {
		      // timeout will not recognize context of this method
		      var onFileDialogCancel = this.props.onFileDialogCancel;
		      var fileInputEl = this.fileInputEl;
		      var isFileDialogActive = this.isFileDialogActive;
		      // execute the timeout only if the onFileDialogCancel is defined and FileDialog
		      // is opened in the browser
		
		      if (onFileDialogCancel && isFileDialogActive) {
		        setTimeout(function () {
		          // Returns an object as FileList
		          var FileList = fileInputEl.files;
		          if (!FileList.length) {
		            isFileDialogActive = false;
		            onFileDialogCancel();
		          }
		        }, 300);
		      }
		    }
		  }, {
		    key: 'fileAccepted',
		    value: function fileAccepted(file) {
		      return (0, _attrAccept2.default)(file, this.props.accept);
		    }
		  }, {
		    key: 'fileMatchSize',
		    value: function fileMatchSize(file) {
		      return file.size <= this.props.maxSize && file.size >= this.props.minSize;
		    }
		  }, {
		    key: 'allFilesAccepted',
		    value: function allFilesAccepted(files) {
		      return files.every(this.fileAccepted);
		    }
		  }, {
		    key: 'open',
		    value: function open() {
		      this.isFileDialogActive = true;
		      this.fileInputEl.value = null;
		      this.fileInputEl.click();
		    }
		  }, {
		    key: 'render',
		    value: function render() {
		      var _this3 = this;
		
		      var _props3 = this.props,
		          accept = _props3.accept,
		          activeClassName = _props3.activeClassName,
		          inputProps = _props3.inputProps,
		          multiple = _props3.multiple,
		          name = _props3.name,
		          rejectClassName = _props3.rejectClassName,
		          children = _props3.children,
		          rest = _objectWithoutProperties(_props3, ['accept', 'activeClassName', 'inputProps', 'multiple', 'name', 'rejectClassName', 'children']);
		
		      var activeStyle = rest.activeStyle,
		          className = rest.className,
		          rejectStyle = rest.rejectStyle,
		          style = rest.style,
		          props = _objectWithoutProperties(rest, ['activeStyle', 'className', 'rejectStyle', 'style']);
		
		      var _state = this.state,
		          isDragActive = _state.isDragActive,
		          isDragReject = _state.isDragReject;
		
		
		      className = className || '';
		
		      if (isDragActive && activeClassName) {
		        className += ' ' + activeClassName;
		      }
		      if (isDragReject && rejectClassName) {
		        className += ' ' + rejectClassName;
		      }
		
		      if (!className && !style && !activeStyle && !rejectStyle) {
		        style = {
		          width: 200,
		          height: 200,
		          borderWidth: 2,
		          borderColor: '#666',
		          borderStyle: 'dashed',
		          borderRadius: 5
		        };
		        activeStyle = {
		          borderStyle: 'solid',
		          backgroundColor: '#eee'
		        };
		        rejectStyle = {
		          borderStyle: 'solid',
		          backgroundColor: '#ffdddd'
		        };
		      }
		
		      var appliedStyle = void 0;
		      if (activeStyle && isDragActive) {
		        appliedStyle = _extends({}, style, activeStyle);
		      } else if (rejectStyle && isDragReject) {
		        appliedStyle = _extends({}, style, rejectStyle);
		      } else {
		        appliedStyle = _extends({}, style);
		      }
		
		      var inputAttributes = {
		        accept: accept,
		        type: 'file',
		        style: { display: 'none' },
		        multiple: supportMultiple && multiple,
		        ref: function ref(el) {
		          return _this3.fileInputEl = el;
		        }, // eslint-disable-line
		        onChange: this.onDrop
		      };
		
		      if (name && name.length) {
		        inputAttributes.name = name;
		      }
		
		      // Remove custom properties before passing them to the wrapper div element
		      var customProps = ['acceptedFiles', 'disablePreview', 'disableClick', 'onDropAccepted', 'onDropRejected', 'onFileDialogCancel', 'maxSize', 'minSize'];
		      var divProps = _extends({}, props);
		      customProps.forEach(function (prop) {
		        return delete divProps[prop];
		      });
		
		      return _react2.default.createElement(
		        'div',
		        _extends({
		          className: className,
		          style: appliedStyle
		        }, divProps /* expand user provided props first so event handlers are never overridden */, {
		          onClick: this.onClick,
		          onDragStart: this.onDragStart,
		          onDragEnter: this.onDragEnter,
		          onDragOver: this.onDragOver,
		          onDragLeave: this.onDragLeave,
		          onDrop: this.onDrop
		        }),
		        Dropzone.renderChildren(children, isDragActive, isDragReject),
		        _react2.default.createElement('input', _extends({}, inputProps /* expand user provided inputProps first so inputAttributes override them */, inputAttributes))
		      );
		    }
		  }]);
		
		  return Dropzone;
		}(_react2.default.Component);
		
		Dropzone.defaultProps = {
		  disablePreview: false,
		  disableClick: false,
		  multiple: true,
		  maxSize: Infinity,
		  minSize: 0
		};
		
		Dropzone.propTypes = {
		  onClick: _react2.default.PropTypes.func,
		  onDrop: _react2.default.PropTypes.func,
		  onDropAccepted: _react2.default.PropTypes.func,
		  onDropRejected: _react2.default.PropTypes.func,
		  onDragStart: _react2.default.PropTypes.func,
		  onDragEnter: _react2.default.PropTypes.func,
		  onDragOver: _react2.default.PropTypes.func,
		  onDragLeave: _react2.default.PropTypes.func,
		
		  children: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.node, _react2.default.PropTypes.func]), // Contents of the dropzone
		  style: _react2.default.PropTypes.object, // CSS styles to apply
		  activeStyle: _react2.default.PropTypes.object, // CSS styles to apply when drop will be accepted
		  rejectStyle: _react2.default.PropTypes.object, // CSS styles to apply when drop will be rejected
		  className: _react2.default.PropTypes.string, // Optional className
		  activeClassName: _react2.default.PropTypes.string, // className for accepted state
		  rejectClassName: _react2.default.PropTypes.string, // className for rejected state
		
		  disablePreview: _react2.default.PropTypes.bool, // Enable/disable preview generation
		  disableClick: _react2.default.PropTypes.bool, // Disallow clicking on the dropzone container to open file dialog
		  onFileDialogCancel: _react2.default.PropTypes.func, // Provide a callback on clicking the cancel button of the file dialog
		
		  inputProps: _react2.default.PropTypes.object, // Pass additional attributes to the <input type="file"/> tag
		  multiple: _react2.default.PropTypes.bool, // Allow dropping multiple files
		  accept: _react2.default.PropTypes.string, // Allow specific types of files. See https://github.com/okonet/attr-accept for more information
		  name: _react2.default.PropTypes.string, // name attribute for the input tag
		  maxSize: _react2.default.PropTypes.number,
		  minSize: _react2.default.PropTypes.number
		};
		
		exports.default = Dropzone;
		module.exports = exports['default'];
	
	/***/ },
	/* 1 */
	/***/ function(module, exports) {
	
		module.exports = __WEBPACK_EXTERNAL_MODULE_1__;
	
	/***/ },
	/* 2 */
	/***/ function(module, exports) {
	
		module.exports=function(t){function n(e){if(r[e])return r[e].exports;var o=r[e]={exports:{},id:e,loaded:!1};return t[e].call(o.exports,o,o.exports,n),o.loaded=!0,o.exports}var r={};return n.m=t,n.c=r,n.p="",n(0)}([function(t,n,r){"use strict";n.__esModule=!0,r(8),r(9),n["default"]=function(t,n){if(t&&n){var r=function(){var r=Array.isArray(n)?n:n.split(","),e=t.name||"",o=t.type||"",i=o.replace(/\/.*$/,"");return{v:r.some(function(t){var n=t.trim();return"."===n.charAt(0)?e.toLowerCase().endsWith(n.toLowerCase()):/\/\*$/.test(n)?i===n.replace(/\/.*$/,""):o===n})}}();if("object"==typeof r)return r.v}return!0},t.exports=n["default"]},function(t,n){var r=t.exports={version:"1.2.2"};"number"==typeof __e&&(__e=r)},function(t,n){var r=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},function(t,n,r){var e=r(2),o=r(1),i=r(4),u=r(19),c="prototype",f=function(t,n){return function(){return t.apply(n,arguments)}},s=function(t,n,r){var a,p,l,y,d=t&s.G,h=t&s.P,v=d?e:t&s.S?e[n]||(e[n]={}):(e[n]||{})[c],x=d?o:o[n]||(o[n]={});d&&(r=n);for(a in r)p=!(t&s.F)&&v&&a in v,l=(p?v:r)[a],y=t&s.B&&p?f(l,e):h&&"function"==typeof l?f(Function.call,l):l,v&&!p&&u(v,a,l),x[a]!=l&&i(x,a,y),h&&((x[c]||(x[c]={}))[a]=l)};e.core=o,s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,t.exports=s},function(t,n,r){var e=r(5),o=r(18);t.exports=r(22)?function(t,n,r){return e.setDesc(t,n,o(1,r))}:function(t,n,r){return t[n]=r,t}},function(t,n){var r=Object;t.exports={create:r.create,getProto:r.getPrototypeOf,isEnum:{}.propertyIsEnumerable,getDesc:r.getOwnPropertyDescriptor,setDesc:r.defineProperty,setDescs:r.defineProperties,getKeys:r.keys,getNames:r.getOwnPropertyNames,getSymbols:r.getOwnPropertySymbols,each:[].forEach}},function(t,n){var r=0,e=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++r+e).toString(36))}},function(t,n,r){var e=r(20)("wks"),o=r(2).Symbol;t.exports=function(t){return e[t]||(e[t]=o&&o[t]||(o||r(6))("Symbol."+t))}},function(t,n,r){r(26),t.exports=r(1).Array.some},function(t,n,r){r(25),t.exports=r(1).String.endsWith},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,n,r){var e=r(10);t.exports=function(t,n,r){if(e(t),void 0===n)return t;switch(r){case 1:return function(r){return t.call(n,r)};case 2:return function(r,e){return t.call(n,r,e)};case 3:return function(r,e,o){return t.call(n,r,e,o)}}return function(){return t.apply(n,arguments)}}},function(t,n){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,n,r){t.exports=function(t){var n=/./;try{"/./"[t](n)}catch(e){try{return n[r(7)("match")]=!1,!"/./"[t](n)}catch(o){}}return!0}},function(t,n){t.exports=function(t){try{return!!t()}catch(n){return!0}}},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,r){var e=r(16),o=r(11),i=r(7)("match");t.exports=function(t){var n;return e(t)&&(void 0!==(n=t[i])?!!n:"RegExp"==o(t))}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n,r){var e=r(2),o=r(4),i=r(6)("src"),u="toString",c=Function[u],f=(""+c).split(u);r(1).inspectSource=function(t){return c.call(t)},(t.exports=function(t,n,r,u){"function"==typeof r&&(o(r,i,t[n]?""+t[n]:f.join(String(n))),"name"in r||(r.name=n)),t===e?t[n]=r:(u||delete t[n],o(t,n,r))})(Function.prototype,u,function(){return"function"==typeof this&&this[i]||c.call(this)})},function(t,n,r){var e=r(2),o="__core-js_shared__",i=e[o]||(e[o]={});t.exports=function(t){return i[t]||(i[t]={})}},function(t,n,r){var e=r(17),o=r(13);t.exports=function(t,n,r){if(e(n))throw TypeError("String#"+r+" doesn't accept regex!");return String(o(t))}},function(t,n,r){t.exports=!r(15)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,n){var r=Math.ceil,e=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?e:r)(t)}},function(t,n,r){var e=r(23),o=Math.min;t.exports=function(t){return t>0?o(e(t),9007199254740991):0}},function(t,n,r){"use strict";var e=r(3),o=r(24),i=r(21),u="endsWith",c=""[u];e(e.P+e.F*r(14)(u),"String",{endsWith:function(t){var n=i(this,t,u),r=arguments,e=r.length>1?r[1]:void 0,f=o(n.length),s=void 0===e?f:Math.min(o(e),f),a=String(t);return c?c.call(n,a,s):n.slice(s-a.length,s)===a}})},function(t,n,r){var e=r(5),o=r(3),i=r(1).Array||Array,u={},c=function(t,n){e.each.call(t.split(","),function(t){void 0==n&&t in i?u[t]=i[t]:t in[]&&(u[t]=r(12)(Function.call,[][t],n))})};c("pop,reverse,shift,keys,values,entries",1),c("indexOf,every,some,forEach,map,filter,find,findIndex,includes",3),c("join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill"),o(o.S,"Array",u)}]);
	
	/***/ },
	/* 3 */
	/***/ function(module, exports) {
	
		"use strict";
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = getDataTransferFiles;
		function getDataTransferFiles(event) {
		  var isMultipleAllowed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
		
		  var dataTransferItemsList = [];
		  if (event.dataTransfer) {
		    var dt = event.dataTransfer;
		    if (dt.files && dt.files.length) {
		      dataTransferItemsList = dt.files;
		    } else if (dt.items && dt.items.length) {
		      // During the drag even the dataTransfer.files is null
		      // but Chrome implements some drag store, which is accesible via dataTransfer.items
		      dataTransferItemsList = dt.items;
		    }
		  } else if (event.target && event.target.files) {
		    dataTransferItemsList = event.target.files;
		  }
		
		  if (dataTransferItemsList.length > 0) {
		    dataTransferItemsList = isMultipleAllowed ? dataTransferItemsList : [dataTransferItemsList[0]];
		  }
		
		  // Convert from DataTransferItemsList to the native Array
		  return Array.prototype.slice.call(dataTransferItemsList);
		}
		module.exports = exports["default"];
	
	/***/ }
	/******/ ])
	});
	;
	//# sourceMappingURL=index.js.map

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	var require;var require;var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global, Buffer) {// AWS SDK for JavaScript v2.16.0
	// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
	// License at https://sdk.amazonaws.com/js/BUNDLE_LICENSE.txt
	(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2015-12-08",
	    "endpointPrefix": "acm",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceAbbreviation": "ACM",
	    "serviceFullName": "AWS Certificate Manager",
	    "signatureVersion": "v4",
	    "targetPrefix": "CertificateManager",
	    "uid": "acm-2015-12-08"
	  },
	  "operations": {
	    "AddTagsToCertificate": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CertificateArn",
	          "Tags"
	        ],
	        "members": {
	          "CertificateArn": {},
	          "Tags": {
	            "shape": "S3"
	          }
	        }
	      }
	    },
	    "DeleteCertificate": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CertificateArn"
	        ],
	        "members": {
	          "CertificateArn": {}
	        }
	      }
	    },
	    "DescribeCertificate": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CertificateArn"
	        ],
	        "members": {
	          "CertificateArn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Certificate": {
	            "type": "structure",
	            "members": {
	              "CertificateArn": {},
	              "DomainName": {},
	              "SubjectAlternativeNames": {
	                "shape": "Sc"
	              },
	              "DomainValidationOptions": {
	                "shape": "Sd"
	              },
	              "Serial": {},
	              "Subject": {},
	              "Issuer": {},
	              "CreatedAt": {
	                "type": "timestamp"
	              },
	              "IssuedAt": {
	                "type": "timestamp"
	              },
	              "ImportedAt": {
	                "type": "timestamp"
	              },
	              "Status": {},
	              "RevokedAt": {
	                "type": "timestamp"
	              },
	              "RevocationReason": {},
	              "NotBefore": {
	                "type": "timestamp"
	              },
	              "NotAfter": {
	                "type": "timestamp"
	              },
	              "KeyAlgorithm": {},
	              "SignatureAlgorithm": {},
	              "InUseBy": {
	                "type": "list",
	                "member": {}
	              },
	              "FailureReason": {},
	              "Type": {},
	              "RenewalSummary": {
	                "type": "structure",
	                "required": [
	                  "RenewalStatus",
	                  "DomainValidationOptions"
	                ],
	                "members": {
	                  "RenewalStatus": {},
	                  "DomainValidationOptions": {
	                    "shape": "Sd"
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "GetCertificate": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CertificateArn"
	        ],
	        "members": {
	          "CertificateArn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Certificate": {},
	          "CertificateChain": {}
	        }
	      }
	    },
	    "ImportCertificate": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Certificate",
	          "PrivateKey"
	        ],
	        "members": {
	          "CertificateArn": {},
	          "Certificate": {
	            "type": "blob"
	          },
	          "PrivateKey": {
	            "type": "blob",
	            "sensitive": true
	          },
	          "CertificateChain": {
	            "type": "blob"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "CertificateArn": {}
	        }
	      }
	    },
	    "ListCertificates": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "CertificateStatuses": {
	            "type": "list",
	            "member": {}
	          },
	          "NextToken": {},
	          "MaxItems": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NextToken": {},
	          "CertificateSummaryList": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "CertificateArn": {},
	                "DomainName": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "ListTagsForCertificate": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CertificateArn"
	        ],
	        "members": {
	          "CertificateArn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Tags": {
	            "shape": "S3"
	          }
	        }
	      }
	    },
	    "RemoveTagsFromCertificate": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CertificateArn",
	          "Tags"
	        ],
	        "members": {
	          "CertificateArn": {},
	          "Tags": {
	            "shape": "S3"
	          }
	        }
	      }
	    },
	    "RequestCertificate": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DomainName"
	        ],
	        "members": {
	          "DomainName": {},
	          "SubjectAlternativeNames": {
	            "shape": "Sc"
	          },
	          "IdempotencyToken": {},
	          "DomainValidationOptions": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "DomainName",
	                "ValidationDomain"
	              ],
	              "members": {
	                "DomainName": {},
	                "ValidationDomain": {}
	              }
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "CertificateArn": {}
	        }
	      }
	    },
	    "ResendValidationEmail": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CertificateArn",
	          "Domain",
	          "ValidationDomain"
	        ],
	        "members": {
	          "CertificateArn": {},
	          "Domain": {},
	          "ValidationDomain": {}
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S3": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "Key"
	        ],
	        "members": {
	          "Key": {},
	          "Value": {}
	        }
	      }
	    },
	    "Sc": {
	      "type": "list",
	      "member": {}
	    },
	    "Sd": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "DomainName"
	        ],
	        "members": {
	          "DomainName": {},
	          "ValidationEmails": {
	            "type": "list",
	            "member": {}
	          },
	          "ValidationDomain": {},
	          "ValidationStatus": {}
	        }
	      }
	    }
	  }
	}
	},{}],2:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "ListCertificates": {
	      "input_token": "NextToken",
	      "limit_key": "MaxItems",
	      "output_token": "NextToken",
	      "result_key": "CertificateSummaryList"
	    }
	  }
	}
	},{}],3:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2015-07-09",
	    "endpointPrefix": "apigateway",
	    "protocol": "rest-json",
	    "serviceFullName": "Amazon API Gateway",
	    "signatureVersion": "v4",
	    "uid": "apigateway-2015-07-09"
	  },
	  "operations": {
	    "CreateApiKey": {
	      "http": {
	        "requestUri": "/apikeys",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "name": {},
	          "description": {},
	          "enabled": {
	            "type": "boolean"
	          },
	          "generateDistinctId": {
	            "type": "boolean"
	          },
	          "value": {},
	          "stageKeys": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "restApiId": {},
	                "stageName": {}
	              }
	            }
	          },
	          "customerId": {}
	        }
	      },
	      "output": {
	        "shape": "S6"
	      }
	    },
	    "CreateAuthorizer": {
	      "http": {
	        "requestUri": "/restapis/{restapi_id}/authorizers",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "name",
	          "type",
	          "identitySource"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "name": {},
	          "type": {},
	          "providerARNs": {
	            "shape": "Sb"
	          },
	          "authType": {},
	          "authorizerUri": {},
	          "authorizerCredentials": {},
	          "identitySource": {},
	          "identityValidationExpression": {},
	          "authorizerResultTtlInSeconds": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "shape": "Se"
	      }
	    },
	    "CreateBasePathMapping": {
	      "http": {
	        "requestUri": "/domainnames/{domain_name}/basepathmappings",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "domainName",
	          "restApiId"
	        ],
	        "members": {
	          "domainName": {
	            "location": "uri",
	            "locationName": "domain_name"
	          },
	          "basePath": {},
	          "restApiId": {},
	          "stage": {}
	        }
	      },
	      "output": {
	        "shape": "Sg"
	      }
	    },
	    "CreateDeployment": {
	      "http": {
	        "requestUri": "/restapis/{restapi_id}/deployments",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "stageName": {},
	          "stageDescription": {},
	          "description": {},
	          "cacheClusterEnabled": {
	            "type": "boolean"
	          },
	          "cacheClusterSize": {},
	          "variables": {
	            "shape": "Sk"
	          }
	        }
	      },
	      "output": {
	        "shape": "Sl"
	      }
	    },
	    "CreateDocumentationPart": {
	      "http": {
	        "requestUri": "/restapis/{restapi_id}/documentation/parts",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "location",
	          "properties"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "location": {
	            "shape": "Sq"
	          },
	          "properties": {}
	        }
	      },
	      "output": {
	        "shape": "St"
	      }
	    },
	    "CreateDocumentationVersion": {
	      "http": {
	        "requestUri": "/restapis/{restapi_id}/documentation/versions",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "documentationVersion"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "documentationVersion": {},
	          "stageName": {},
	          "description": {}
	        }
	      },
	      "output": {
	        "shape": "Sv"
	      }
	    },
	    "CreateDomainName": {
	      "http": {
	        "requestUri": "/domainnames",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "domainName",
	          "certificateName",
	          "certificateBody",
	          "certificatePrivateKey",
	          "certificateChain"
	        ],
	        "members": {
	          "domainName": {},
	          "certificateName": {},
	          "certificateBody": {},
	          "certificatePrivateKey": {},
	          "certificateChain": {}
	        }
	      },
	      "output": {
	        "shape": "Sx"
	      }
	    },
	    "CreateModel": {
	      "http": {
	        "requestUri": "/restapis/{restapi_id}/models",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "name",
	          "contentType"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "name": {},
	          "description": {},
	          "schema": {},
	          "contentType": {}
	        }
	      },
	      "output": {
	        "shape": "Sz"
	      }
	    },
	    "CreateResource": {
	      "http": {
	        "requestUri": "/restapis/{restapi_id}/resources/{parent_id}",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "parentId",
	          "pathPart"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "parentId": {
	            "location": "uri",
	            "locationName": "parent_id"
	          },
	          "pathPart": {}
	        }
	      },
	      "output": {
	        "shape": "S11"
	      }
	    },
	    "CreateRestApi": {
	      "http": {
	        "requestUri": "/restapis",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "name"
	        ],
	        "members": {
	          "name": {},
	          "description": {},
	          "version": {},
	          "cloneFrom": {},
	          "binaryMediaTypes": {
	            "shape": "S8"
	          }
	        }
	      },
	      "output": {
	        "shape": "S1e"
	      }
	    },
	    "CreateStage": {
	      "http": {
	        "requestUri": "/restapis/{restapi_id}/stages",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "stageName",
	          "deploymentId"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "stageName": {},
	          "deploymentId": {},
	          "description": {},
	          "cacheClusterEnabled": {
	            "type": "boolean"
	          },
	          "cacheClusterSize": {},
	          "variables": {
	            "shape": "Sk"
	          },
	          "documentationVersion": {}
	        }
	      },
	      "output": {
	        "shape": "S1g"
	      }
	    },
	    "CreateUsagePlan": {
	      "http": {
	        "requestUri": "/usageplans",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "name"
	        ],
	        "members": {
	          "name": {},
	          "description": {},
	          "apiStages": {
	            "shape": "S1o"
	          },
	          "throttle": {
	            "shape": "S1q"
	          },
	          "quota": {
	            "shape": "S1r"
	          }
	        }
	      },
	      "output": {
	        "shape": "S1t"
	      }
	    },
	    "CreateUsagePlanKey": {
	      "http": {
	        "requestUri": "/usageplans/{usageplanId}/keys",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "usagePlanId",
	          "keyId",
	          "keyType"
	        ],
	        "members": {
	          "usagePlanId": {
	            "location": "uri",
	            "locationName": "usageplanId"
	          },
	          "keyId": {},
	          "keyType": {}
	        }
	      },
	      "output": {
	        "shape": "S1v"
	      }
	    },
	    "DeleteApiKey": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/apikeys/{api_Key}",
	        "responseCode": 202
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "apiKey"
	        ],
	        "members": {
	          "apiKey": {
	            "location": "uri",
	            "locationName": "api_Key"
	          }
	        }
	      }
	    },
	    "DeleteAuthorizer": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/restapis/{restapi_id}/authorizers/{authorizer_id}",
	        "responseCode": 202
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "authorizerId"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "authorizerId": {
	            "location": "uri",
	            "locationName": "authorizer_id"
	          }
	        }
	      }
	    },
	    "DeleteBasePathMapping": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/domainnames/{domain_name}/basepathmappings/{base_path}",
	        "responseCode": 202
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "domainName",
	          "basePath"
	        ],
	        "members": {
	          "domainName": {
	            "location": "uri",
	            "locationName": "domain_name"
	          },
	          "basePath": {
	            "location": "uri",
	            "locationName": "base_path"
	          }
	        }
	      }
	    },
	    "DeleteClientCertificate": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/clientcertificates/{clientcertificate_id}",
	        "responseCode": 202
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "clientCertificateId"
	        ],
	        "members": {
	          "clientCertificateId": {
	            "location": "uri",
	            "locationName": "clientcertificate_id"
	          }
	        }
	      }
	    },
	    "DeleteDeployment": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/restapis/{restapi_id}/deployments/{deployment_id}",
	        "responseCode": 202
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "deploymentId"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "deploymentId": {
	            "location": "uri",
	            "locationName": "deployment_id"
	          }
	        }
	      }
	    },
	    "DeleteDocumentationPart": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/restapis/{restapi_id}/documentation/parts/{part_id}",
	        "responseCode": 202
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "documentationPartId"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "documentationPartId": {
	            "location": "uri",
	            "locationName": "part_id"
	          }
	        }
	      }
	    },
	    "DeleteDocumentationVersion": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/restapis/{restapi_id}/documentation/versions/{doc_version}",
	        "responseCode": 202
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "documentationVersion"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "documentationVersion": {
	            "location": "uri",
	            "locationName": "doc_version"
	          }
	        }
	      }
	    },
	    "DeleteDomainName": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/domainnames/{domain_name}",
	        "responseCode": 202
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "domainName"
	        ],
	        "members": {
	          "domainName": {
	            "location": "uri",
	            "locationName": "domain_name"
	          }
	        }
	      }
	    },
	    "DeleteIntegration": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration",
	        "responseCode": 204
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "resourceId",
	          "httpMethod"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "resourceId": {
	            "location": "uri",
	            "locationName": "resource_id"
	          },
	          "httpMethod": {
	            "location": "uri",
	            "locationName": "http_method"
	          }
	        }
	      }
	    },
	    "DeleteIntegrationResponse": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}",
	        "responseCode": 204
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "resourceId",
	          "httpMethod",
	          "statusCode"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "resourceId": {
	            "location": "uri",
	            "locationName": "resource_id"
	          },
	          "httpMethod": {
	            "location": "uri",
	            "locationName": "http_method"
	          },
	          "statusCode": {
	            "location": "uri",
	            "locationName": "status_code"
	          }
	        }
	      }
	    },
	    "DeleteMethod": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}",
	        "responseCode": 204
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "resourceId",
	          "httpMethod"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "resourceId": {
	            "location": "uri",
	            "locationName": "resource_id"
	          },
	          "httpMethod": {
	            "location": "uri",
	            "locationName": "http_method"
	          }
	        }
	      }
	    },
	    "DeleteMethodResponse": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}",
	        "responseCode": 204
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "resourceId",
	          "httpMethod",
	          "statusCode"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "resourceId": {
	            "location": "uri",
	            "locationName": "resource_id"
	          },
	          "httpMethod": {
	            "location": "uri",
	            "locationName": "http_method"
	          },
	          "statusCode": {
	            "location": "uri",
	            "locationName": "status_code"
	          }
	        }
	      }
	    },
	    "DeleteModel": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/restapis/{restapi_id}/models/{model_name}",
	        "responseCode": 202
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "modelName"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "modelName": {
	            "location": "uri",
	            "locationName": "model_name"
	          }
	        }
	      }
	    },
	    "DeleteResource": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/restapis/{restapi_id}/resources/{resource_id}",
	        "responseCode": 202
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "resourceId"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "resourceId": {
	            "location": "uri",
	            "locationName": "resource_id"
	          }
	        }
	      }
	    },
	    "DeleteRestApi": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/restapis/{restapi_id}",
	        "responseCode": 202
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          }
	        }
	      }
	    },
	    "DeleteStage": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/restapis/{restapi_id}/stages/{stage_name}",
	        "responseCode": 202
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "stageName"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "stageName": {
	            "location": "uri",
	            "locationName": "stage_name"
	          }
	        }
	      }
	    },
	    "DeleteUsagePlan": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/usageplans/{usageplanId}",
	        "responseCode": 202
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "usagePlanId"
	        ],
	        "members": {
	          "usagePlanId": {
	            "location": "uri",
	            "locationName": "usageplanId"
	          }
	        }
	      }
	    },
	    "DeleteUsagePlanKey": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/usageplans/{usageplanId}/keys/{keyId}",
	        "responseCode": 202
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "usagePlanId",
	          "keyId"
	        ],
	        "members": {
	          "usagePlanId": {
	            "location": "uri",
	            "locationName": "usageplanId"
	          },
	          "keyId": {
	            "location": "uri",
	            "locationName": "keyId"
	          }
	        }
	      }
	    },
	    "FlushStageAuthorizersCache": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/restapis/{restapi_id}/stages/{stage_name}/cache/authorizers",
	        "responseCode": 202
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "stageName"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "stageName": {
	            "location": "uri",
	            "locationName": "stage_name"
	          }
	        }
	      }
	    },
	    "FlushStageCache": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/restapis/{restapi_id}/stages/{stage_name}/cache/data",
	        "responseCode": 202
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "stageName"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "stageName": {
	            "location": "uri",
	            "locationName": "stage_name"
	          }
	        }
	      }
	    },
	    "GenerateClientCertificate": {
	      "http": {
	        "requestUri": "/clientcertificates",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "description": {}
	        }
	      },
	      "output": {
	        "shape": "S2h"
	      }
	    },
	    "GetAccount": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/account"
	      },
	      "input": {
	        "type": "structure",
	        "members": {}
	      },
	      "output": {
	        "shape": "S2j"
	      }
	    },
	    "GetApiKey": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/apikeys/{api_Key}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "apiKey"
	        ],
	        "members": {
	          "apiKey": {
	            "location": "uri",
	            "locationName": "api_Key"
	          },
	          "includeValue": {
	            "location": "querystring",
	            "locationName": "includeValue",
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "shape": "S6"
	      }
	    },
	    "GetApiKeys": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/apikeys"
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "position": {
	            "location": "querystring",
	            "locationName": "position"
	          },
	          "limit": {
	            "location": "querystring",
	            "locationName": "limit",
	            "type": "integer"
	          },
	          "nameQuery": {
	            "location": "querystring",
	            "locationName": "name"
	          },
	          "customerId": {
	            "location": "querystring",
	            "locationName": "customerId"
	          },
	          "includeValues": {
	            "location": "querystring",
	            "locationName": "includeValues",
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "warnings": {
	            "shape": "S8"
	          },
	          "position": {},
	          "items": {
	            "locationName": "item",
	            "type": "list",
	            "member": {
	              "shape": "S6"
	            }
	          }
	        }
	      }
	    },
	    "GetAuthorizer": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/restapis/{restapi_id}/authorizers/{authorizer_id}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "authorizerId"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "authorizerId": {
	            "location": "uri",
	            "locationName": "authorizer_id"
	          }
	        }
	      },
	      "output": {
	        "shape": "Se"
	      }
	    },
	    "GetAuthorizers": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/restapis/{restapi_id}/authorizers"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "position": {
	            "location": "querystring",
	            "locationName": "position"
	          },
	          "limit": {
	            "location": "querystring",
	            "locationName": "limit",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "position": {},
	          "items": {
	            "locationName": "item",
	            "type": "list",
	            "member": {
	              "shape": "Se"
	            }
	          }
	        }
	      }
	    },
	    "GetBasePathMapping": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/domainnames/{domain_name}/basepathmappings/{base_path}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "domainName",
	          "basePath"
	        ],
	        "members": {
	          "domainName": {
	            "location": "uri",
	            "locationName": "domain_name"
	          },
	          "basePath": {
	            "location": "uri",
	            "locationName": "base_path"
	          }
	        }
	      },
	      "output": {
	        "shape": "Sg"
	      }
	    },
	    "GetBasePathMappings": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/domainnames/{domain_name}/basepathmappings"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "domainName"
	        ],
	        "members": {
	          "domainName": {
	            "location": "uri",
	            "locationName": "domain_name"
	          },
	          "position": {
	            "location": "querystring",
	            "locationName": "position"
	          },
	          "limit": {
	            "location": "querystring",
	            "locationName": "limit",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "position": {},
	          "items": {
	            "locationName": "item",
	            "type": "list",
	            "member": {
	              "shape": "Sg"
	            }
	          }
	        }
	      }
	    },
	    "GetClientCertificate": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/clientcertificates/{clientcertificate_id}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "clientCertificateId"
	        ],
	        "members": {
	          "clientCertificateId": {
	            "location": "uri",
	            "locationName": "clientcertificate_id"
	          }
	        }
	      },
	      "output": {
	        "shape": "S2h"
	      }
	    },
	    "GetClientCertificates": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/clientcertificates"
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "position": {
	            "location": "querystring",
	            "locationName": "position"
	          },
	          "limit": {
	            "location": "querystring",
	            "locationName": "limit",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "position": {},
	          "items": {
	            "locationName": "item",
	            "type": "list",
	            "member": {
	              "shape": "S2h"
	            }
	          }
	        }
	      }
	    },
	    "GetDeployment": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/restapis/{restapi_id}/deployments/{deployment_id}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "deploymentId"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "deploymentId": {
	            "location": "uri",
	            "locationName": "deployment_id"
	          }
	        }
	      },
	      "output": {
	        "shape": "Sl"
	      }
	    },
	    "GetDeployments": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/restapis/{restapi_id}/deployments"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "position": {
	            "location": "querystring",
	            "locationName": "position"
	          },
	          "limit": {
	            "location": "querystring",
	            "locationName": "limit",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "position": {},
	          "items": {
	            "locationName": "item",
	            "type": "list",
	            "member": {
	              "shape": "Sl"
	            }
	          }
	        }
	      }
	    },
	    "GetDocumentationPart": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/restapis/{restapi_id}/documentation/parts/{part_id}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "documentationPartId"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "documentationPartId": {
	            "location": "uri",
	            "locationName": "part_id"
	          }
	        }
	      },
	      "output": {
	        "shape": "St"
	      }
	    },
	    "GetDocumentationParts": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/restapis/{restapi_id}/documentation/parts"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "type": {
	            "location": "querystring",
	            "locationName": "type"
	          },
	          "nameQuery": {
	            "location": "querystring",
	            "locationName": "name"
	          },
	          "path": {
	            "location": "querystring",
	            "locationName": "path"
	          },
	          "position": {
	            "location": "querystring",
	            "locationName": "position"
	          },
	          "limit": {
	            "location": "querystring",
	            "locationName": "limit",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "position": {},
	          "items": {
	            "locationName": "item",
	            "type": "list",
	            "member": {
	              "shape": "St"
	            }
	          }
	        }
	      }
	    },
	    "GetDocumentationVersion": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/restapis/{restapi_id}/documentation/versions/{doc_version}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "documentationVersion"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "documentationVersion": {
	            "location": "uri",
	            "locationName": "doc_version"
	          }
	        }
	      },
	      "output": {
	        "shape": "Sv"
	      }
	    },
	    "GetDocumentationVersions": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/restapis/{restapi_id}/documentation/versions"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "position": {
	            "location": "querystring",
	            "locationName": "position"
	          },
	          "limit": {
	            "location": "querystring",
	            "locationName": "limit",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "position": {},
	          "items": {
	            "locationName": "item",
	            "type": "list",
	            "member": {
	              "shape": "Sv"
	            }
	          }
	        }
	      }
	    },
	    "GetDomainName": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/domainnames/{domain_name}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "domainName"
	        ],
	        "members": {
	          "domainName": {
	            "location": "uri",
	            "locationName": "domain_name"
	          }
	        }
	      },
	      "output": {
	        "shape": "Sx"
	      }
	    },
	    "GetDomainNames": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/domainnames"
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "position": {
	            "location": "querystring",
	            "locationName": "position"
	          },
	          "limit": {
	            "location": "querystring",
	            "locationName": "limit",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "position": {},
	          "items": {
	            "locationName": "item",
	            "type": "list",
	            "member": {
	              "shape": "Sx"
	            }
	          }
	        }
	      }
	    },
	    "GetExport": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/restapis/{restapi_id}/stages/{stage_name}/exports/{export_type}",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "stageName",
	          "exportType"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "stageName": {
	            "location": "uri",
	            "locationName": "stage_name"
	          },
	          "exportType": {
	            "location": "uri",
	            "locationName": "export_type"
	          },
	          "parameters": {
	            "shape": "Sk",
	            "location": "querystring"
	          },
	          "accepts": {
	            "location": "header",
	            "locationName": "Accept"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "contentType": {
	            "location": "header",
	            "locationName": "Content-Type"
	          },
	          "contentDisposition": {
	            "location": "header",
	            "locationName": "Content-Disposition"
	          },
	          "body": {
	            "type": "blob"
	          }
	        },
	        "payload": "body"
	      }
	    },
	    "GetIntegration": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "resourceId",
	          "httpMethod"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "resourceId": {
	            "location": "uri",
	            "locationName": "resource_id"
	          },
	          "httpMethod": {
	            "location": "uri",
	            "locationName": "http_method"
	          }
	        }
	      },
	      "output": {
	        "shape": "S18"
	      }
	    },
	    "GetIntegrationResponse": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "resourceId",
	          "httpMethod",
	          "statusCode"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "resourceId": {
	            "location": "uri",
	            "locationName": "resource_id"
	          },
	          "httpMethod": {
	            "location": "uri",
	            "locationName": "http_method"
	          },
	          "statusCode": {
	            "location": "uri",
	            "locationName": "status_code"
	          }
	        }
	      },
	      "output": {
	        "shape": "S1c"
	      }
	    },
	    "GetMethod": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "resourceId",
	          "httpMethod"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "resourceId": {
	            "location": "uri",
	            "locationName": "resource_id"
	          },
	          "httpMethod": {
	            "location": "uri",
	            "locationName": "http_method"
	          }
	        }
	      },
	      "output": {
	        "shape": "S13"
	      }
	    },
	    "GetMethodResponse": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "resourceId",
	          "httpMethod",
	          "statusCode"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "resourceId": {
	            "location": "uri",
	            "locationName": "resource_id"
	          },
	          "httpMethod": {
	            "location": "uri",
	            "locationName": "http_method"
	          },
	          "statusCode": {
	            "location": "uri",
	            "locationName": "status_code"
	          }
	        }
	      },
	      "output": {
	        "shape": "S16"
	      }
	    },
	    "GetModel": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/restapis/{restapi_id}/models/{model_name}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "modelName"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "modelName": {
	            "location": "uri",
	            "locationName": "model_name"
	          },
	          "flatten": {
	            "location": "querystring",
	            "locationName": "flatten",
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "shape": "Sz"
	      }
	    },
	    "GetModelTemplate": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/restapis/{restapi_id}/models/{model_name}/default_template"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "modelName"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "modelName": {
	            "location": "uri",
	            "locationName": "model_name"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "value": {}
	        }
	      }
	    },
	    "GetModels": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/restapis/{restapi_id}/models"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "position": {
	            "location": "querystring",
	            "locationName": "position"
	          },
	          "limit": {
	            "location": "querystring",
	            "locationName": "limit",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "position": {},
	          "items": {
	            "locationName": "item",
	            "type": "list",
	            "member": {
	              "shape": "Sz"
	            }
	          }
	        }
	      }
	    },
	    "GetResource": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/restapis/{restapi_id}/resources/{resource_id}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "resourceId"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "resourceId": {
	            "location": "uri",
	            "locationName": "resource_id"
	          }
	        }
	      },
	      "output": {
	        "shape": "S11"
	      }
	    },
	    "GetResources": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/restapis/{restapi_id}/resources"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "position": {
	            "location": "querystring",
	            "locationName": "position"
	          },
	          "limit": {
	            "location": "querystring",
	            "locationName": "limit",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "position": {},
	          "items": {
	            "locationName": "item",
	            "type": "list",
	            "member": {
	              "shape": "S11"
	            }
	          }
	        }
	      }
	    },
	    "GetRestApi": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/restapis/{restapi_id}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          }
	        }
	      },
	      "output": {
	        "shape": "S1e"
	      }
	    },
	    "GetRestApis": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/restapis"
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "position": {
	            "location": "querystring",
	            "locationName": "position"
	          },
	          "limit": {
	            "location": "querystring",
	            "locationName": "limit",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "position": {},
	          "items": {
	            "locationName": "item",
	            "type": "list",
	            "member": {
	              "shape": "S1e"
	            }
	          }
	        }
	      }
	    },
	    "GetSdk": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/restapis/{restapi_id}/stages/{stage_name}/sdks/{sdk_type}",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "stageName",
	          "sdkType"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "stageName": {
	            "location": "uri",
	            "locationName": "stage_name"
	          },
	          "sdkType": {
	            "location": "uri",
	            "locationName": "sdk_type"
	          },
	          "parameters": {
	            "shape": "Sk",
	            "location": "querystring"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "contentType": {
	            "location": "header",
	            "locationName": "Content-Type"
	          },
	          "contentDisposition": {
	            "location": "header",
	            "locationName": "Content-Disposition"
	          },
	          "body": {
	            "type": "blob"
	          }
	        },
	        "payload": "body"
	      }
	    },
	    "GetSdkType": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/sdktypes/{sdktype_id}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "id"
	        ],
	        "members": {
	          "id": {
	            "location": "uri",
	            "locationName": "sdktype_id"
	          }
	        }
	      },
	      "output": {
	        "shape": "S44"
	      }
	    },
	    "GetSdkTypes": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/sdktypes"
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "position": {
	            "location": "querystring",
	            "locationName": "position"
	          },
	          "limit": {
	            "location": "querystring",
	            "locationName": "limit",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "position": {},
	          "items": {
	            "locationName": "item",
	            "type": "list",
	            "member": {
	              "shape": "S44"
	            }
	          }
	        }
	      }
	    },
	    "GetStage": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/restapis/{restapi_id}/stages/{stage_name}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "stageName"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "stageName": {
	            "location": "uri",
	            "locationName": "stage_name"
	          }
	        }
	      },
	      "output": {
	        "shape": "S1g"
	      }
	    },
	    "GetStages": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/restapis/{restapi_id}/stages"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "deploymentId": {
	            "location": "querystring",
	            "locationName": "deploymentId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "item": {
	            "type": "list",
	            "member": {
	              "shape": "S1g"
	            }
	          }
	        }
	      }
	    },
	    "GetUsage": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/usageplans/{usageplanId}/usage"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "usagePlanId",
	          "startDate",
	          "endDate"
	        ],
	        "members": {
	          "usagePlanId": {
	            "location": "uri",
	            "locationName": "usageplanId"
	          },
	          "keyId": {
	            "location": "querystring",
	            "locationName": "keyId"
	          },
	          "startDate": {
	            "location": "querystring",
	            "locationName": "startDate"
	          },
	          "endDate": {
	            "location": "querystring",
	            "locationName": "endDate"
	          },
	          "position": {
	            "location": "querystring",
	            "locationName": "position"
	          },
	          "limit": {
	            "location": "querystring",
	            "locationName": "limit",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "shape": "S4f"
	      }
	    },
	    "GetUsagePlan": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/usageplans/{usageplanId}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "usagePlanId"
	        ],
	        "members": {
	          "usagePlanId": {
	            "location": "uri",
	            "locationName": "usageplanId"
	          }
	        }
	      },
	      "output": {
	        "shape": "S1t"
	      }
	    },
	    "GetUsagePlanKey": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/usageplans/{usageplanId}/keys/{keyId}",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "usagePlanId",
	          "keyId"
	        ],
	        "members": {
	          "usagePlanId": {
	            "location": "uri",
	            "locationName": "usageplanId"
	          },
	          "keyId": {
	            "location": "uri",
	            "locationName": "keyId"
	          }
	        }
	      },
	      "output": {
	        "shape": "S1v"
	      }
	    },
	    "GetUsagePlanKeys": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/usageplans/{usageplanId}/keys"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "usagePlanId"
	        ],
	        "members": {
	          "usagePlanId": {
	            "location": "uri",
	            "locationName": "usageplanId"
	          },
	          "position": {
	            "location": "querystring",
	            "locationName": "position"
	          },
	          "limit": {
	            "location": "querystring",
	            "locationName": "limit",
	            "type": "integer"
	          },
	          "nameQuery": {
	            "location": "querystring",
	            "locationName": "name"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "position": {},
	          "items": {
	            "locationName": "item",
	            "type": "list",
	            "member": {
	              "shape": "S1v"
	            }
	          }
	        }
	      }
	    },
	    "GetUsagePlans": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/usageplans"
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "position": {
	            "location": "querystring",
	            "locationName": "position"
	          },
	          "keyId": {
	            "location": "querystring",
	            "locationName": "keyId"
	          },
	          "limit": {
	            "location": "querystring",
	            "locationName": "limit",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "position": {},
	          "items": {
	            "locationName": "item",
	            "type": "list",
	            "member": {
	              "shape": "S1t"
	            }
	          }
	        }
	      }
	    },
	    "ImportApiKeys": {
	      "http": {
	        "requestUri": "/apikeys?mode=import",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "body",
	          "format"
	        ],
	        "members": {
	          "body": {
	            "type": "blob"
	          },
	          "format": {
	            "location": "querystring",
	            "locationName": "format"
	          },
	          "failOnWarnings": {
	            "location": "querystring",
	            "locationName": "failonwarnings",
	            "type": "boolean"
	          }
	        },
	        "payload": "body"
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ids": {
	            "shape": "S8"
	          },
	          "warnings": {
	            "shape": "S8"
	          }
	        }
	      }
	    },
	    "ImportDocumentationParts": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/restapis/{restapi_id}/documentation/parts"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "body"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "mode": {
	            "location": "querystring",
	            "locationName": "mode"
	          },
	          "failOnWarnings": {
	            "location": "querystring",
	            "locationName": "failonwarnings",
	            "type": "boolean"
	          },
	          "body": {
	            "type": "blob"
	          }
	        },
	        "payload": "body"
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ids": {
	            "shape": "S8"
	          },
	          "warnings": {
	            "shape": "S8"
	          }
	        }
	      }
	    },
	    "ImportRestApi": {
	      "http": {
	        "requestUri": "/restapis?mode=import",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "body"
	        ],
	        "members": {
	          "failOnWarnings": {
	            "location": "querystring",
	            "locationName": "failonwarnings",
	            "type": "boolean"
	          },
	          "parameters": {
	            "shape": "Sk",
	            "location": "querystring"
	          },
	          "body": {
	            "type": "blob"
	          }
	        },
	        "payload": "body"
	      },
	      "output": {
	        "shape": "S1e"
	      }
	    },
	    "PutIntegration": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "resourceId",
	          "httpMethod",
	          "type"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "resourceId": {
	            "location": "uri",
	            "locationName": "resource_id"
	          },
	          "httpMethod": {
	            "location": "uri",
	            "locationName": "http_method"
	          },
	          "type": {},
	          "integrationHttpMethod": {
	            "locationName": "httpMethod"
	          },
	          "uri": {},
	          "credentials": {},
	          "requestParameters": {
	            "shape": "Sk"
	          },
	          "requestTemplates": {
	            "shape": "Sk"
	          },
	          "passthroughBehavior": {},
	          "cacheNamespace": {},
	          "cacheKeyParameters": {
	            "shape": "S8"
	          },
	          "contentHandling": {}
	        }
	      },
	      "output": {
	        "shape": "S18"
	      }
	    },
	    "PutIntegrationResponse": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "resourceId",
	          "httpMethod",
	          "statusCode"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "resourceId": {
	            "location": "uri",
	            "locationName": "resource_id"
	          },
	          "httpMethod": {
	            "location": "uri",
	            "locationName": "http_method"
	          },
	          "statusCode": {
	            "location": "uri",
	            "locationName": "status_code"
	          },
	          "selectionPattern": {},
	          "responseParameters": {
	            "shape": "Sk"
	          },
	          "responseTemplates": {
	            "shape": "Sk"
	          },
	          "contentHandling": {}
	        }
	      },
	      "output": {
	        "shape": "S1c"
	      }
	    },
	    "PutMethod": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "resourceId",
	          "httpMethod",
	          "authorizationType"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "resourceId": {
	            "location": "uri",
	            "locationName": "resource_id"
	          },
	          "httpMethod": {
	            "location": "uri",
	            "locationName": "http_method"
	          },
	          "authorizationType": {},
	          "authorizerId": {},
	          "apiKeyRequired": {
	            "type": "boolean"
	          },
	          "operationName": {},
	          "requestParameters": {
	            "shape": "S14"
	          },
	          "requestModels": {
	            "shape": "Sk"
	          }
	        }
	      },
	      "output": {
	        "shape": "S13"
	      }
	    },
	    "PutMethodResponse": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "resourceId",
	          "httpMethod",
	          "statusCode"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "resourceId": {
	            "location": "uri",
	            "locationName": "resource_id"
	          },
	          "httpMethod": {
	            "location": "uri",
	            "locationName": "http_method"
	          },
	          "statusCode": {
	            "location": "uri",
	            "locationName": "status_code"
	          },
	          "responseParameters": {
	            "shape": "S14"
	          },
	          "responseModels": {
	            "shape": "Sk"
	          }
	        }
	      },
	      "output": {
	        "shape": "S16"
	      }
	    },
	    "PutRestApi": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/restapis/{restapi_id}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "body"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "mode": {
	            "location": "querystring",
	            "locationName": "mode"
	          },
	          "failOnWarnings": {
	            "location": "querystring",
	            "locationName": "failonwarnings",
	            "type": "boolean"
	          },
	          "parameters": {
	            "shape": "Sk",
	            "location": "querystring"
	          },
	          "body": {
	            "type": "blob"
	          }
	        },
	        "payload": "body"
	      },
	      "output": {
	        "shape": "S1e"
	      }
	    },
	    "TestInvokeAuthorizer": {
	      "http": {
	        "requestUri": "/restapis/{restapi_id}/authorizers/{authorizer_id}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "authorizerId"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "authorizerId": {
	            "location": "uri",
	            "locationName": "authorizer_id"
	          },
	          "headers": {
	            "shape": "S55"
	          },
	          "pathWithQueryString": {},
	          "body": {},
	          "stageVariables": {
	            "shape": "Sk"
	          },
	          "additionalContext": {
	            "shape": "Sk"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "clientStatus": {
	            "type": "integer"
	          },
	          "log": {},
	          "latency": {
	            "type": "long"
	          },
	          "principalId": {},
	          "policy": {},
	          "authorization": {
	            "type": "map",
	            "key": {},
	            "value": {
	              "shape": "S8"
	            }
	          },
	          "claims": {
	            "shape": "Sk"
	          }
	        }
	      }
	    },
	    "TestInvokeMethod": {
	      "http": {
	        "requestUri": "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "resourceId",
	          "httpMethod"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "resourceId": {
	            "location": "uri",
	            "locationName": "resource_id"
	          },
	          "httpMethod": {
	            "location": "uri",
	            "locationName": "http_method"
	          },
	          "pathWithQueryString": {},
	          "body": {},
	          "headers": {
	            "shape": "S55"
	          },
	          "clientCertificateId": {},
	          "stageVariables": {
	            "shape": "Sk"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "status": {
	            "type": "integer"
	          },
	          "body": {},
	          "headers": {
	            "shape": "S55"
	          },
	          "log": {},
	          "latency": {
	            "type": "long"
	          }
	        }
	      }
	    },
	    "UpdateAccount": {
	      "http": {
	        "method": "PATCH",
	        "requestUri": "/account"
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "patchOperations": {
	            "shape": "S5b"
	          }
	        }
	      },
	      "output": {
	        "shape": "S2j"
	      }
	    },
	    "UpdateApiKey": {
	      "http": {
	        "method": "PATCH",
	        "requestUri": "/apikeys/{api_Key}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "apiKey"
	        ],
	        "members": {
	          "apiKey": {
	            "location": "uri",
	            "locationName": "api_Key"
	          },
	          "patchOperations": {
	            "shape": "S5b"
	          }
	        }
	      },
	      "output": {
	        "shape": "S6"
	      }
	    },
	    "UpdateAuthorizer": {
	      "http": {
	        "method": "PATCH",
	        "requestUri": "/restapis/{restapi_id}/authorizers/{authorizer_id}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "authorizerId"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "authorizerId": {
	            "location": "uri",
	            "locationName": "authorizer_id"
	          },
	          "patchOperations": {
	            "shape": "S5b"
	          }
	        }
	      },
	      "output": {
	        "shape": "Se"
	      }
	    },
	    "UpdateBasePathMapping": {
	      "http": {
	        "method": "PATCH",
	        "requestUri": "/domainnames/{domain_name}/basepathmappings/{base_path}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "domainName",
	          "basePath"
	        ],
	        "members": {
	          "domainName": {
	            "location": "uri",
	            "locationName": "domain_name"
	          },
	          "basePath": {
	            "location": "uri",
	            "locationName": "base_path"
	          },
	          "patchOperations": {
	            "shape": "S5b"
	          }
	        }
	      },
	      "output": {
	        "shape": "Sg"
	      }
	    },
	    "UpdateClientCertificate": {
	      "http": {
	        "method": "PATCH",
	        "requestUri": "/clientcertificates/{clientcertificate_id}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "clientCertificateId"
	        ],
	        "members": {
	          "clientCertificateId": {
	            "location": "uri",
	            "locationName": "clientcertificate_id"
	          },
	          "patchOperations": {
	            "shape": "S5b"
	          }
	        }
	      },
	      "output": {
	        "shape": "S2h"
	      }
	    },
	    "UpdateDeployment": {
	      "http": {
	        "method": "PATCH",
	        "requestUri": "/restapis/{restapi_id}/deployments/{deployment_id}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "deploymentId"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "deploymentId": {
	            "location": "uri",
	            "locationName": "deployment_id"
	          },
	          "patchOperations": {
	            "shape": "S5b"
	          }
	        }
	      },
	      "output": {
	        "shape": "Sl"
	      }
	    },
	    "UpdateDocumentationPart": {
	      "http": {
	        "method": "PATCH",
	        "requestUri": "/restapis/{restapi_id}/documentation/parts/{part_id}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "documentationPartId"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "documentationPartId": {
	            "location": "uri",
	            "locationName": "part_id"
	          },
	          "patchOperations": {
	            "shape": "S5b"
	          }
	        }
	      },
	      "output": {
	        "shape": "St"
	      }
	    },
	    "UpdateDocumentationVersion": {
	      "http": {
	        "method": "PATCH",
	        "requestUri": "/restapis/{restapi_id}/documentation/versions/{doc_version}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "documentationVersion"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "documentationVersion": {
	            "location": "uri",
	            "locationName": "doc_version"
	          },
	          "patchOperations": {
	            "shape": "S5b"
	          }
	        }
	      },
	      "output": {
	        "shape": "Sv"
	      }
	    },
	    "UpdateDomainName": {
	      "http": {
	        "method": "PATCH",
	        "requestUri": "/domainnames/{domain_name}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "domainName"
	        ],
	        "members": {
	          "domainName": {
	            "location": "uri",
	            "locationName": "domain_name"
	          },
	          "patchOperations": {
	            "shape": "S5b"
	          }
	        }
	      },
	      "output": {
	        "shape": "Sx"
	      }
	    },
	    "UpdateIntegration": {
	      "http": {
	        "method": "PATCH",
	        "requestUri": "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "resourceId",
	          "httpMethod"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "resourceId": {
	            "location": "uri",
	            "locationName": "resource_id"
	          },
	          "httpMethod": {
	            "location": "uri",
	            "locationName": "http_method"
	          },
	          "patchOperations": {
	            "shape": "S5b"
	          }
	        }
	      },
	      "output": {
	        "shape": "S18"
	      }
	    },
	    "UpdateIntegrationResponse": {
	      "http": {
	        "method": "PATCH",
	        "requestUri": "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "resourceId",
	          "httpMethod",
	          "statusCode"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "resourceId": {
	            "location": "uri",
	            "locationName": "resource_id"
	          },
	          "httpMethod": {
	            "location": "uri",
	            "locationName": "http_method"
	          },
	          "statusCode": {
	            "location": "uri",
	            "locationName": "status_code"
	          },
	          "patchOperations": {
	            "shape": "S5b"
	          }
	        }
	      },
	      "output": {
	        "shape": "S1c"
	      }
	    },
	    "UpdateMethod": {
	      "http": {
	        "method": "PATCH",
	        "requestUri": "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "resourceId",
	          "httpMethod"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "resourceId": {
	            "location": "uri",
	            "locationName": "resource_id"
	          },
	          "httpMethod": {
	            "location": "uri",
	            "locationName": "http_method"
	          },
	          "patchOperations": {
	            "shape": "S5b"
	          }
	        }
	      },
	      "output": {
	        "shape": "S13"
	      }
	    },
	    "UpdateMethodResponse": {
	      "http": {
	        "method": "PATCH",
	        "requestUri": "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "resourceId",
	          "httpMethod",
	          "statusCode"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "resourceId": {
	            "location": "uri",
	            "locationName": "resource_id"
	          },
	          "httpMethod": {
	            "location": "uri",
	            "locationName": "http_method"
	          },
	          "statusCode": {
	            "location": "uri",
	            "locationName": "status_code"
	          },
	          "patchOperations": {
	            "shape": "S5b"
	          }
	        }
	      },
	      "output": {
	        "shape": "S16"
	      }
	    },
	    "UpdateModel": {
	      "http": {
	        "method": "PATCH",
	        "requestUri": "/restapis/{restapi_id}/models/{model_name}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "modelName"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "modelName": {
	            "location": "uri",
	            "locationName": "model_name"
	          },
	          "patchOperations": {
	            "shape": "S5b"
	          }
	        }
	      },
	      "output": {
	        "shape": "Sz"
	      }
	    },
	    "UpdateResource": {
	      "http": {
	        "method": "PATCH",
	        "requestUri": "/restapis/{restapi_id}/resources/{resource_id}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "resourceId"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "resourceId": {
	            "location": "uri",
	            "locationName": "resource_id"
	          },
	          "patchOperations": {
	            "shape": "S5b"
	          }
	        }
	      },
	      "output": {
	        "shape": "S11"
	      }
	    },
	    "UpdateRestApi": {
	      "http": {
	        "method": "PATCH",
	        "requestUri": "/restapis/{restapi_id}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "patchOperations": {
	            "shape": "S5b"
	          }
	        }
	      },
	      "output": {
	        "shape": "S1e"
	      }
	    },
	    "UpdateStage": {
	      "http": {
	        "method": "PATCH",
	        "requestUri": "/restapis/{restapi_id}/stages/{stage_name}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "restApiId",
	          "stageName"
	        ],
	        "members": {
	          "restApiId": {
	            "location": "uri",
	            "locationName": "restapi_id"
	          },
	          "stageName": {
	            "location": "uri",
	            "locationName": "stage_name"
	          },
	          "patchOperations": {
	            "shape": "S5b"
	          }
	        }
	      },
	      "output": {
	        "shape": "S1g"
	      }
	    },
	    "UpdateUsage": {
	      "http": {
	        "method": "PATCH",
	        "requestUri": "/usageplans/{usageplanId}/keys/{keyId}/usage"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "usagePlanId",
	          "keyId"
	        ],
	        "members": {
	          "usagePlanId": {
	            "location": "uri",
	            "locationName": "usageplanId"
	          },
	          "keyId": {
	            "location": "uri",
	            "locationName": "keyId"
	          },
	          "patchOperations": {
	            "shape": "S5b"
	          }
	        }
	      },
	      "output": {
	        "shape": "S4f"
	      }
	    },
	    "UpdateUsagePlan": {
	      "http": {
	        "method": "PATCH",
	        "requestUri": "/usageplans/{usageplanId}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "usagePlanId"
	        ],
	        "members": {
	          "usagePlanId": {
	            "location": "uri",
	            "locationName": "usageplanId"
	          },
	          "patchOperations": {
	            "shape": "S5b"
	          }
	        }
	      },
	      "output": {
	        "shape": "S1t"
	      }
	    }
	  },
	  "shapes": {
	    "S6": {
	      "type": "structure",
	      "members": {
	        "id": {},
	        "value": {},
	        "name": {},
	        "customerId": {},
	        "description": {},
	        "enabled": {
	          "type": "boolean"
	        },
	        "createdDate": {
	          "type": "timestamp"
	        },
	        "lastUpdatedDate": {
	          "type": "timestamp"
	        },
	        "stageKeys": {
	          "shape": "S8"
	        }
	      }
	    },
	    "S8": {
	      "type": "list",
	      "member": {}
	    },
	    "Sb": {
	      "type": "list",
	      "member": {}
	    },
	    "Se": {
	      "type": "structure",
	      "members": {
	        "id": {},
	        "name": {},
	        "type": {},
	        "providerARNs": {
	          "shape": "Sb"
	        },
	        "authType": {},
	        "authorizerUri": {},
	        "authorizerCredentials": {},
	        "identitySource": {},
	        "identityValidationExpression": {},
	        "authorizerResultTtlInSeconds": {
	          "type": "integer"
	        }
	      }
	    },
	    "Sg": {
	      "type": "structure",
	      "members": {
	        "basePath": {},
	        "restApiId": {},
	        "stage": {}
	      }
	    },
	    "Sk": {
	      "type": "map",
	      "key": {},
	      "value": {}
	    },
	    "Sl": {
	      "type": "structure",
	      "members": {
	        "id": {},
	        "description": {},
	        "createdDate": {
	          "type": "timestamp"
	        },
	        "apiSummary": {
	          "type": "map",
	          "key": {},
	          "value": {
	            "type": "map",
	            "key": {},
	            "value": {
	              "type": "structure",
	              "members": {
	                "authorizationType": {},
	                "apiKeyRequired": {
	                  "type": "boolean"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "Sq": {
	      "type": "structure",
	      "required": [
	        "type"
	      ],
	      "members": {
	        "type": {},
	        "path": {},
	        "method": {},
	        "statusCode": {},
	        "name": {}
	      }
	    },
	    "St": {
	      "type": "structure",
	      "members": {
	        "id": {},
	        "location": {
	          "shape": "Sq"
	        },
	        "properties": {}
	      }
	    },
	    "Sv": {
	      "type": "structure",
	      "members": {
	        "version": {},
	        "createdDate": {
	          "type": "timestamp"
	        },
	        "description": {}
	      }
	    },
	    "Sx": {
	      "type": "structure",
	      "members": {
	        "domainName": {},
	        "certificateName": {},
	        "certificateUploadDate": {
	          "type": "timestamp"
	        },
	        "distributionDomainName": {}
	      }
	    },
	    "Sz": {
	      "type": "structure",
	      "members": {
	        "id": {},
	        "name": {},
	        "description": {},
	        "schema": {},
	        "contentType": {}
	      }
	    },
	    "S11": {
	      "type": "structure",
	      "members": {
	        "id": {},
	        "parentId": {},
	        "pathPart": {},
	        "path": {},
	        "resourceMethods": {
	          "type": "map",
	          "key": {},
	          "value": {
	            "shape": "S13"
	          }
	        }
	      }
	    },
	    "S13": {
	      "type": "structure",
	      "members": {
	        "httpMethod": {},
	        "authorizationType": {},
	        "authorizerId": {},
	        "apiKeyRequired": {
	          "type": "boolean"
	        },
	        "operationName": {},
	        "requestParameters": {
	          "shape": "S14"
	        },
	        "requestModels": {
	          "shape": "Sk"
	        },
	        "methodResponses": {
	          "type": "map",
	          "key": {},
	          "value": {
	            "shape": "S16"
	          }
	        },
	        "methodIntegration": {
	          "shape": "S18"
	        }
	      }
	    },
	    "S14": {
	      "type": "map",
	      "key": {},
	      "value": {
	        "type": "boolean"
	      }
	    },
	    "S16": {
	      "type": "structure",
	      "members": {
	        "statusCode": {},
	        "responseParameters": {
	          "shape": "S14"
	        },
	        "responseModels": {
	          "shape": "Sk"
	        }
	      }
	    },
	    "S18": {
	      "type": "structure",
	      "members": {
	        "type": {},
	        "httpMethod": {},
	        "uri": {},
	        "credentials": {},
	        "requestParameters": {
	          "shape": "Sk"
	        },
	        "requestTemplates": {
	          "shape": "Sk"
	        },
	        "passthroughBehavior": {},
	        "contentHandling": {},
	        "cacheNamespace": {},
	        "cacheKeyParameters": {
	          "shape": "S8"
	        },
	        "integrationResponses": {
	          "type": "map",
	          "key": {},
	          "value": {
	            "shape": "S1c"
	          }
	        }
	      }
	    },
	    "S1c": {
	      "type": "structure",
	      "members": {
	        "statusCode": {},
	        "selectionPattern": {},
	        "responseParameters": {
	          "shape": "Sk"
	        },
	        "responseTemplates": {
	          "shape": "Sk"
	        },
	        "contentHandling": {}
	      }
	    },
	    "S1e": {
	      "type": "structure",
	      "members": {
	        "id": {},
	        "name": {},
	        "description": {},
	        "createdDate": {
	          "type": "timestamp"
	        },
	        "version": {},
	        "warnings": {
	          "shape": "S8"
	        },
	        "binaryMediaTypes": {
	          "shape": "S8"
	        }
	      }
	    },
	    "S1g": {
	      "type": "structure",
	      "members": {
	        "deploymentId": {},
	        "clientCertificateId": {},
	        "stageName": {},
	        "description": {},
	        "cacheClusterEnabled": {
	          "type": "boolean"
	        },
	        "cacheClusterSize": {},
	        "cacheClusterStatus": {},
	        "methodSettings": {
	          "type": "map",
	          "key": {},
	          "value": {
	            "type": "structure",
	            "members": {
	              "metricsEnabled": {
	                "type": "boolean"
	              },
	              "loggingLevel": {},
	              "dataTraceEnabled": {
	                "type": "boolean"
	              },
	              "throttlingBurstLimit": {
	                "type": "integer"
	              },
	              "throttlingRateLimit": {
	                "type": "double"
	              },
	              "cachingEnabled": {
	                "type": "boolean"
	              },
	              "cacheTtlInSeconds": {
	                "type": "integer"
	              },
	              "cacheDataEncrypted": {
	                "type": "boolean"
	              },
	              "requireAuthorizationForCacheControl": {
	                "type": "boolean"
	              },
	              "unauthorizedCacheControlHeaderStrategy": {}
	            }
	          }
	        },
	        "variables": {
	          "shape": "Sk"
	        },
	        "documentationVersion": {},
	        "createdDate": {
	          "type": "timestamp"
	        },
	        "lastUpdatedDate": {
	          "type": "timestamp"
	        }
	      }
	    },
	    "S1o": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "apiId": {},
	          "stage": {}
	        }
	      }
	    },
	    "S1q": {
	      "type": "structure",
	      "members": {
	        "burstLimit": {
	          "type": "integer"
	        },
	        "rateLimit": {
	          "type": "double"
	        }
	      }
	    },
	    "S1r": {
	      "type": "structure",
	      "members": {
	        "limit": {
	          "type": "integer"
	        },
	        "offset": {
	          "type": "integer"
	        },
	        "period": {}
	      }
	    },
	    "S1t": {
	      "type": "structure",
	      "members": {
	        "id": {},
	        "name": {},
	        "description": {},
	        "apiStages": {
	          "shape": "S1o"
	        },
	        "throttle": {
	          "shape": "S1q"
	        },
	        "quota": {
	          "shape": "S1r"
	        },
	        "productCode": {}
	      }
	    },
	    "S1v": {
	      "type": "structure",
	      "members": {
	        "id": {},
	        "type": {},
	        "value": {},
	        "name": {}
	      }
	    },
	    "S2h": {
	      "type": "structure",
	      "members": {
	        "clientCertificateId": {},
	        "description": {},
	        "pemEncodedCertificate": {},
	        "createdDate": {
	          "type": "timestamp"
	        },
	        "expirationDate": {
	          "type": "timestamp"
	        }
	      }
	    },
	    "S2j": {
	      "type": "structure",
	      "members": {
	        "cloudwatchRoleArn": {},
	        "throttleSettings": {
	          "shape": "S1q"
	        },
	        "features": {
	          "shape": "S8"
	        },
	        "apiKeyVersion": {}
	      }
	    },
	    "S44": {
	      "type": "structure",
	      "members": {
	        "id": {},
	        "friendlyName": {},
	        "description": {},
	        "configurationProperties": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "members": {
	              "name": {},
	              "friendlyName": {},
	              "description": {},
	              "required": {
	                "type": "boolean"
	              },
	              "defaultValue": {}
	            }
	          }
	        }
	      }
	    },
	    "S4f": {
	      "type": "structure",
	      "members": {
	        "usagePlanId": {},
	        "startDate": {},
	        "endDate": {},
	        "position": {},
	        "items": {
	          "locationName": "values",
	          "type": "map",
	          "key": {},
	          "value": {
	            "type": "list",
	            "member": {
	              "type": "list",
	              "member": {
	                "type": "long"
	              }
	            }
	          }
	        }
	      }
	    },
	    "S55": {
	      "type": "map",
	      "key": {},
	      "value": {}
	    },
	    "S5b": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "op": {},
	          "path": {},
	          "value": {},
	          "from": {}
	        }
	      }
	    }
	  }
	}
	},{}],4:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "GetApiKeys": {
	      "input_token": "position",
	      "output_token": "position",
	      "limit_key": "limit",
	      "result_key": "items"
	    },
	    "GetBasePathMappings": {
	      "input_token": "position",
	      "output_token": "position",
	      "limit_key": "limit",
	      "result_key": "items"
	    },
	    "GetClientCertificates": {
	      "input_token": "position",
	      "output_token": "position",
	      "limit_key": "limit",
	      "result_key": "items"
	    },
	    "GetDeployments": {
	      "input_token": "position",
	      "output_token": "position",
	      "limit_key": "limit",
	      "result_key": "items"
	    },
	    "GetDomainNames": {
	      "input_token": "position",
	      "output_token": "position",
	      "limit_key": "limit",
	      "result_key": "items"
	    },
	    "GetModels": {
	      "input_token": "position",
	      "output_token": "position",
	      "limit_key": "limit",
	      "result_key": "items"
	    },
	    "GetResources": {
	      "input_token": "position",
	      "output_token": "position",
	      "limit_key": "limit",
	      "result_key": "items"
	    },
	    "GetRestApis": {
	      "input_token": "position",
	      "output_token": "position",
	      "limit_key": "limit",
	      "result_key": "items"
	    },
	    "GetUsage": {
	      "input_token": "position",
	      "output_token": "position",
	      "limit_key": "limit",
	      "result_key": "items"
	    },
	    "GetUsagePlans": {
	      "input_token": "position",
	      "output_token": "position",
	      "limit_key": "limit",
	      "result_key": "items"
	    },
	    "GetUsagePlanKeys": {
	      "input_token": "position",
	      "output_token": "position",
	      "limit_key": "limit",
	      "result_key": "items"
	    }
	  }
	}
	
	},{}],5:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2016-02-06",
	    "endpointPrefix": "autoscaling",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceFullName": "Application Auto Scaling",
	    "signatureVersion": "v4",
	    "signingName": "application-autoscaling",
	    "targetPrefix": "AnyScaleFrontendService",
	    "uid": "application-autoscaling-2016-02-06"
	  },
	  "operations": {
	    "DeleteScalingPolicy": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "PolicyName",
	          "ServiceNamespace",
	          "ResourceId",
	          "ScalableDimension"
	        ],
	        "members": {
	          "PolicyName": {},
	          "ServiceNamespace": {},
	          "ResourceId": {},
	          "ScalableDimension": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeregisterScalableTarget": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ServiceNamespace",
	          "ResourceId",
	          "ScalableDimension"
	        ],
	        "members": {
	          "ServiceNamespace": {},
	          "ResourceId": {},
	          "ScalableDimension": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DescribeScalableTargets": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ServiceNamespace"
	        ],
	        "members": {
	          "ServiceNamespace": {},
	          "ResourceIds": {
	            "shape": "S9"
	          },
	          "ScalableDimension": {},
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ScalableTargets": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "ServiceNamespace",
	                "ResourceId",
	                "ScalableDimension",
	                "MinCapacity",
	                "MaxCapacity",
	                "RoleARN",
	                "CreationTime"
	              ],
	              "members": {
	                "ServiceNamespace": {},
	                "ResourceId": {},
	                "ScalableDimension": {},
	                "MinCapacity": {
	                  "type": "integer"
	                },
	                "MaxCapacity": {
	                  "type": "integer"
	                },
	                "RoleARN": {},
	                "CreationTime": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeScalingActivities": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ServiceNamespace"
	        ],
	        "members": {
	          "ServiceNamespace": {},
	          "ResourceId": {},
	          "ScalableDimension": {},
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ScalingActivities": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "ActivityId",
	                "ServiceNamespace",
	                "ResourceId",
	                "ScalableDimension",
	                "Description",
	                "Cause",
	                "StartTime",
	                "StatusCode"
	              ],
	              "members": {
	                "ActivityId": {},
	                "ServiceNamespace": {},
	                "ResourceId": {},
	                "ScalableDimension": {},
	                "Description": {},
	                "Cause": {},
	                "StartTime": {
	                  "type": "timestamp"
	                },
	                "EndTime": {
	                  "type": "timestamp"
	                },
	                "StatusCode": {},
	                "StatusMessage": {},
	                "Details": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeScalingPolicies": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ServiceNamespace"
	        ],
	        "members": {
	          "PolicyNames": {
	            "shape": "S9"
	          },
	          "ServiceNamespace": {},
	          "ResourceId": {},
	          "ScalableDimension": {},
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ScalingPolicies": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "PolicyARN",
	                "PolicyName",
	                "ServiceNamespace",
	                "ResourceId",
	                "ScalableDimension",
	                "PolicyType",
	                "CreationTime"
	              ],
	              "members": {
	                "PolicyARN": {},
	                "PolicyName": {},
	                "ServiceNamespace": {},
	                "ResourceId": {},
	                "ScalableDimension": {},
	                "PolicyType": {},
	                "StepScalingPolicyConfiguration": {
	                  "shape": "St"
	                },
	                "Alarms": {
	                  "type": "list",
	                  "member": {
	                    "type": "structure",
	                    "required": [
	                      "AlarmName",
	                      "AlarmARN"
	                    ],
	                    "members": {
	                      "AlarmName": {},
	                      "AlarmARN": {}
	                    }
	                  }
	                },
	                "CreationTime": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "PutScalingPolicy": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "PolicyName",
	          "ServiceNamespace",
	          "ResourceId",
	          "ScalableDimension"
	        ],
	        "members": {
	          "PolicyName": {},
	          "ServiceNamespace": {},
	          "ResourceId": {},
	          "ScalableDimension": {},
	          "PolicyType": {},
	          "StepScalingPolicyConfiguration": {
	            "shape": "St"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "PolicyARN"
	        ],
	        "members": {
	          "PolicyARN": {}
	        }
	      }
	    },
	    "RegisterScalableTarget": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ServiceNamespace",
	          "ResourceId",
	          "ScalableDimension"
	        ],
	        "members": {
	          "ServiceNamespace": {},
	          "ResourceId": {},
	          "ScalableDimension": {},
	          "MinCapacity": {
	            "type": "integer"
	          },
	          "MaxCapacity": {
	            "type": "integer"
	          },
	          "RoleARN": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    }
	  },
	  "shapes": {
	    "S9": {
	      "type": "list",
	      "member": {}
	    },
	    "St": {
	      "type": "structure",
	      "members": {
	        "AdjustmentType": {},
	        "StepAdjustments": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "required": [
	              "ScalingAdjustment"
	            ],
	            "members": {
	              "MetricIntervalLowerBound": {
	                "type": "double"
	              },
	              "MetricIntervalUpperBound": {
	                "type": "double"
	              },
	              "ScalingAdjustment": {
	                "type": "integer"
	              }
	            }
	          }
	        },
	        "MinAdjustmentMagnitude": {
	          "type": "integer"
	        },
	        "Cooldown": {
	          "type": "integer"
	        },
	        "MetricAggregationType": {}
	      }
	    }
	  }
	}
	},{}],6:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "DescribeScalableTargets": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "limit_key": "MaxResults",
	      "result_key": "ScalableTargets"
	    },
	    "DescribeScalingPolicies": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "limit_key": "MaxResults",
	      "result_key": "ScalingPolicies"
	    },
	    "DescribeScalingActivities": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "limit_key": "MaxResults",
	      "result_key": "ScalingActivities"
	    }
	  }
	}
	
	},{}],7:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2011-01-01",
	    "endpointPrefix": "autoscaling",
	    "protocol": "query",
	    "serviceFullName": "Auto Scaling",
	    "signatureVersion": "v4",
	    "uid": "autoscaling-2011-01-01",
	    "xmlNamespace": "http://autoscaling.amazonaws.com/doc/2011-01-01/"
	  },
	  "operations": {
	    "AttachInstances": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AutoScalingGroupName"
	        ],
	        "members": {
	          "InstanceIds": {
	            "shape": "S2"
	          },
	          "AutoScalingGroupName": {}
	        }
	      }
	    },
	    "AttachLoadBalancerTargetGroups": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AutoScalingGroupName",
	          "TargetGroupARNs"
	        ],
	        "members": {
	          "AutoScalingGroupName": {},
	          "TargetGroupARNs": {
	            "shape": "S6"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "AttachLoadBalancerTargetGroupsResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "AttachLoadBalancers": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AutoScalingGroupName",
	          "LoadBalancerNames"
	        ],
	        "members": {
	          "AutoScalingGroupName": {},
	          "LoadBalancerNames": {
	            "shape": "Sa"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "AttachLoadBalancersResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "CompleteLifecycleAction": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LifecycleHookName",
	          "AutoScalingGroupName",
	          "LifecycleActionResult"
	        ],
	        "members": {
	          "LifecycleHookName": {},
	          "AutoScalingGroupName": {},
	          "LifecycleActionToken": {},
	          "LifecycleActionResult": {},
	          "InstanceId": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CompleteLifecycleActionResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "CreateAutoScalingGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AutoScalingGroupName",
	          "MinSize",
	          "MaxSize"
	        ],
	        "members": {
	          "AutoScalingGroupName": {},
	          "LaunchConfigurationName": {},
	          "InstanceId": {},
	          "MinSize": {
	            "type": "integer"
	          },
	          "MaxSize": {
	            "type": "integer"
	          },
	          "DesiredCapacity": {
	            "type": "integer"
	          },
	          "DefaultCooldown": {
	            "type": "integer"
	          },
	          "AvailabilityZones": {
	            "shape": "Sn"
	          },
	          "LoadBalancerNames": {
	            "shape": "Sa"
	          },
	          "TargetGroupARNs": {
	            "shape": "S6"
	          },
	          "HealthCheckType": {},
	          "HealthCheckGracePeriod": {
	            "type": "integer"
	          },
	          "PlacementGroup": {},
	          "VPCZoneIdentifier": {},
	          "TerminationPolicies": {
	            "shape": "Sr"
	          },
	          "NewInstancesProtectedFromScaleIn": {
	            "type": "boolean"
	          },
	          "Tags": {
	            "shape": "Su"
	          }
	        }
	      }
	    },
	    "CreateLaunchConfiguration": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LaunchConfigurationName"
	        ],
	        "members": {
	          "LaunchConfigurationName": {},
	          "ImageId": {},
	          "KeyName": {},
	          "SecurityGroups": {
	            "shape": "S11"
	          },
	          "ClassicLinkVPCId": {},
	          "ClassicLinkVPCSecurityGroups": {
	            "shape": "S12"
	          },
	          "UserData": {},
	          "InstanceId": {},
	          "InstanceType": {},
	          "KernelId": {},
	          "RamdiskId": {},
	          "BlockDeviceMappings": {
	            "shape": "S14"
	          },
	          "InstanceMonitoring": {
	            "shape": "S1d"
	          },
	          "SpotPrice": {},
	          "IamInstanceProfile": {},
	          "EbsOptimized": {
	            "type": "boolean"
	          },
	          "AssociatePublicIpAddress": {
	            "type": "boolean"
	          },
	          "PlacementTenancy": {}
	        }
	      }
	    },
	    "CreateOrUpdateTags": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Tags"
	        ],
	        "members": {
	          "Tags": {
	            "shape": "Su"
	          }
	        }
	      }
	    },
	    "DeleteAutoScalingGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AutoScalingGroupName"
	        ],
	        "members": {
	          "AutoScalingGroupName": {},
	          "ForceDelete": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "DeleteLaunchConfiguration": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LaunchConfigurationName"
	        ],
	        "members": {
	          "LaunchConfigurationName": {}
	        }
	      }
	    },
	    "DeleteLifecycleHook": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LifecycleHookName",
	          "AutoScalingGroupName"
	        ],
	        "members": {
	          "LifecycleHookName": {},
	          "AutoScalingGroupName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteLifecycleHookResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteNotificationConfiguration": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AutoScalingGroupName",
	          "TopicARN"
	        ],
	        "members": {
	          "AutoScalingGroupName": {},
	          "TopicARN": {}
	        }
	      }
	    },
	    "DeletePolicy": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "PolicyName"
	        ],
	        "members": {
	          "AutoScalingGroupName": {},
	          "PolicyName": {}
	        }
	      }
	    },
	    "DeleteScheduledAction": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AutoScalingGroupName",
	          "ScheduledActionName"
	        ],
	        "members": {
	          "AutoScalingGroupName": {},
	          "ScheduledActionName": {}
	        }
	      }
	    },
	    "DeleteTags": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Tags"
	        ],
	        "members": {
	          "Tags": {
	            "shape": "Su"
	          }
	        }
	      }
	    },
	    "DescribeAccountLimits": {
	      "output": {
	        "resultWrapper": "DescribeAccountLimitsResult",
	        "type": "structure",
	        "members": {
	          "MaxNumberOfAutoScalingGroups": {
	            "type": "integer"
	          },
	          "MaxNumberOfLaunchConfigurations": {
	            "type": "integer"
	          },
	          "NumberOfAutoScalingGroups": {
	            "type": "integer"
	          },
	          "NumberOfLaunchConfigurations": {
	            "type": "integer"
	          }
	        }
	      }
	    },
	    "DescribeAdjustmentTypes": {
	      "output": {
	        "resultWrapper": "DescribeAdjustmentTypesResult",
	        "type": "structure",
	        "members": {
	          "AdjustmentTypes": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "AdjustmentType": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeAutoScalingGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "AutoScalingGroupNames": {
	            "shape": "S22"
	          },
	          "NextToken": {},
	          "MaxRecords": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeAutoScalingGroupsResult",
	        "type": "structure",
	        "required": [
	          "AutoScalingGroups"
	        ],
	        "members": {
	          "AutoScalingGroups": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "AutoScalingGroupName",
	                "MinSize",
	                "MaxSize",
	                "DesiredCapacity",
	                "DefaultCooldown",
	                "AvailabilityZones",
	                "HealthCheckType",
	                "CreatedTime"
	              ],
	              "members": {
	                "AutoScalingGroupName": {},
	                "AutoScalingGroupARN": {},
	                "LaunchConfigurationName": {},
	                "MinSize": {
	                  "type": "integer"
	                },
	                "MaxSize": {
	                  "type": "integer"
	                },
	                "DesiredCapacity": {
	                  "type": "integer"
	                },
	                "DefaultCooldown": {
	                  "type": "integer"
	                },
	                "AvailabilityZones": {
	                  "shape": "Sn"
	                },
	                "LoadBalancerNames": {
	                  "shape": "Sa"
	                },
	                "TargetGroupARNs": {
	                  "shape": "S6"
	                },
	                "HealthCheckType": {},
	                "HealthCheckGracePeriod": {
	                  "type": "integer"
	                },
	                "Instances": {
	                  "type": "list",
	                  "member": {
	                    "type": "structure",
	                    "required": [
	                      "InstanceId",
	                      "AvailabilityZone",
	                      "LifecycleState",
	                      "HealthStatus",
	                      "LaunchConfigurationName",
	                      "ProtectedFromScaleIn"
	                    ],
	                    "members": {
	                      "InstanceId": {},
	                      "AvailabilityZone": {},
	                      "LifecycleState": {},
	                      "HealthStatus": {},
	                      "LaunchConfigurationName": {},
	                      "ProtectedFromScaleIn": {
	                        "type": "boolean"
	                      }
	                    }
	                  }
	                },
	                "CreatedTime": {
	                  "type": "timestamp"
	                },
	                "SuspendedProcesses": {
	                  "type": "list",
	                  "member": {
	                    "type": "structure",
	                    "members": {
	                      "ProcessName": {},
	                      "SuspensionReason": {}
	                    }
	                  }
	                },
	                "PlacementGroup": {},
	                "VPCZoneIdentifier": {},
	                "EnabledMetrics": {
	                  "type": "list",
	                  "member": {
	                    "type": "structure",
	                    "members": {
	                      "Metric": {},
	                      "Granularity": {}
	                    }
	                  }
	                },
	                "Status": {},
	                "Tags": {
	                  "shape": "S2f"
	                },
	                "TerminationPolicies": {
	                  "shape": "Sr"
	                },
	                "NewInstancesProtectedFromScaleIn": {
	                  "type": "boolean"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeAutoScalingInstances": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "InstanceIds": {
	            "shape": "S2"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeAutoScalingInstancesResult",
	        "type": "structure",
	        "members": {
	          "AutoScalingInstances": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "InstanceId",
	                "AutoScalingGroupName",
	                "AvailabilityZone",
	                "LifecycleState",
	                "HealthStatus",
	                "LaunchConfigurationName",
	                "ProtectedFromScaleIn"
	              ],
	              "members": {
	                "InstanceId": {},
	                "AutoScalingGroupName": {},
	                "AvailabilityZone": {},
	                "LifecycleState": {},
	                "HealthStatus": {},
	                "LaunchConfigurationName": {},
	                "ProtectedFromScaleIn": {
	                  "type": "boolean"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeAutoScalingNotificationTypes": {
	      "output": {
	        "resultWrapper": "DescribeAutoScalingNotificationTypesResult",
	        "type": "structure",
	        "members": {
	          "AutoScalingNotificationTypes": {
	            "shape": "S2m"
	          }
	        }
	      }
	    },
	    "DescribeLaunchConfigurations": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "LaunchConfigurationNames": {
	            "type": "list",
	            "member": {}
	          },
	          "NextToken": {},
	          "MaxRecords": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeLaunchConfigurationsResult",
	        "type": "structure",
	        "required": [
	          "LaunchConfigurations"
	        ],
	        "members": {
	          "LaunchConfigurations": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "LaunchConfigurationName",
	                "ImageId",
	                "InstanceType",
	                "CreatedTime"
	              ],
	              "members": {
	                "LaunchConfigurationName": {},
	                "LaunchConfigurationARN": {},
	                "ImageId": {},
	                "KeyName": {},
	                "SecurityGroups": {
	                  "shape": "S11"
	                },
	                "ClassicLinkVPCId": {},
	                "ClassicLinkVPCSecurityGroups": {
	                  "shape": "S12"
	                },
	                "UserData": {},
	                "InstanceType": {},
	                "KernelId": {},
	                "RamdiskId": {},
	                "BlockDeviceMappings": {
	                  "shape": "S14"
	                },
	                "InstanceMonitoring": {
	                  "shape": "S1d"
	                },
	                "SpotPrice": {},
	                "IamInstanceProfile": {},
	                "CreatedTime": {
	                  "type": "timestamp"
	                },
	                "EbsOptimized": {
	                  "type": "boolean"
	                },
	                "AssociatePublicIpAddress": {
	                  "type": "boolean"
	                },
	                "PlacementTenancy": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeLifecycleHookTypes": {
	      "output": {
	        "resultWrapper": "DescribeLifecycleHookTypesResult",
	        "type": "structure",
	        "members": {
	          "LifecycleHookTypes": {
	            "shape": "S2m"
	          }
	        }
	      }
	    },
	    "DescribeLifecycleHooks": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AutoScalingGroupName"
	        ],
	        "members": {
	          "AutoScalingGroupName": {},
	          "LifecycleHookNames": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeLifecycleHooksResult",
	        "type": "structure",
	        "members": {
	          "LifecycleHooks": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "LifecycleHookName": {},
	                "AutoScalingGroupName": {},
	                "LifecycleTransition": {},
	                "NotificationTargetARN": {},
	                "RoleARN": {},
	                "NotificationMetadata": {},
	                "HeartbeatTimeout": {
	                  "type": "integer"
	                },
	                "GlobalTimeout": {
	                  "type": "integer"
	                },
	                "DefaultResult": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeLoadBalancerTargetGroups": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AutoScalingGroupName"
	        ],
	        "members": {
	          "AutoScalingGroupName": {},
	          "NextToken": {},
	          "MaxRecords": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeLoadBalancerTargetGroupsResult",
	        "type": "structure",
	        "members": {
	          "LoadBalancerTargetGroups": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "LoadBalancerTargetGroupARN": {},
	                "State": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeLoadBalancers": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AutoScalingGroupName"
	        ],
	        "members": {
	          "AutoScalingGroupName": {},
	          "NextToken": {},
	          "MaxRecords": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeLoadBalancersResult",
	        "type": "structure",
	        "members": {
	          "LoadBalancers": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "LoadBalancerName": {},
	                "State": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeMetricCollectionTypes": {
	      "output": {
	        "resultWrapper": "DescribeMetricCollectionTypesResult",
	        "type": "structure",
	        "members": {
	          "Metrics": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Metric": {}
	              }
	            }
	          },
	          "Granularities": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Granularity": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeNotificationConfigurations": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "AutoScalingGroupNames": {
	            "shape": "S22"
	          },
	          "NextToken": {},
	          "MaxRecords": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeNotificationConfigurationsResult",
	        "type": "structure",
	        "required": [
	          "NotificationConfigurations"
	        ],
	        "members": {
	          "NotificationConfigurations": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "AutoScalingGroupName": {},
	                "TopicARN": {},
	                "NotificationType": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribePolicies": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "AutoScalingGroupName": {},
	          "PolicyNames": {
	            "type": "list",
	            "member": {}
	          },
	          "PolicyTypes": {
	            "type": "list",
	            "member": {}
	          },
	          "NextToken": {},
	          "MaxRecords": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribePoliciesResult",
	        "type": "structure",
	        "members": {
	          "ScalingPolicies": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "AutoScalingGroupName": {},
	                "PolicyName": {},
	                "PolicyARN": {},
	                "PolicyType": {},
	                "AdjustmentType": {},
	                "MinAdjustmentStep": {
	                  "shape": "S3p"
	                },
	                "MinAdjustmentMagnitude": {
	                  "type": "integer"
	                },
	                "ScalingAdjustment": {
	                  "type": "integer"
	                },
	                "Cooldown": {
	                  "type": "integer"
	                },
	                "StepAdjustments": {
	                  "shape": "S3s"
	                },
	                "MetricAggregationType": {},
	                "EstimatedInstanceWarmup": {
	                  "type": "integer"
	                },
	                "Alarms": {
	                  "type": "list",
	                  "member": {
	                    "type": "structure",
	                    "members": {
	                      "AlarmName": {},
	                      "AlarmARN": {}
	                    }
	                  }
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeScalingActivities": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ActivityIds": {
	            "type": "list",
	            "member": {}
	          },
	          "AutoScalingGroupName": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeScalingActivitiesResult",
	        "type": "structure",
	        "required": [
	          "Activities"
	        ],
	        "members": {
	          "Activities": {
	            "shape": "S41"
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeScalingProcessTypes": {
	      "output": {
	        "resultWrapper": "DescribeScalingProcessTypesResult",
	        "type": "structure",
	        "members": {
	          "Processes": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "ProcessName"
	              ],
	              "members": {
	                "ProcessName": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeScheduledActions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "AutoScalingGroupName": {},
	          "ScheduledActionNames": {
	            "type": "list",
	            "member": {}
	          },
	          "StartTime": {
	            "type": "timestamp"
	          },
	          "EndTime": {
	            "type": "timestamp"
	          },
	          "NextToken": {},
	          "MaxRecords": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeScheduledActionsResult",
	        "type": "structure",
	        "members": {
	          "ScheduledUpdateGroupActions": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "AutoScalingGroupName": {},
	                "ScheduledActionName": {},
	                "ScheduledActionARN": {},
	                "Time": {
	                  "type": "timestamp"
	                },
	                "StartTime": {
	                  "type": "timestamp"
	                },
	                "EndTime": {
	                  "type": "timestamp"
	                },
	                "Recurrence": {},
	                "MinSize": {
	                  "type": "integer"
	                },
	                "MaxSize": {
	                  "type": "integer"
	                },
	                "DesiredCapacity": {
	                  "type": "integer"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeTags": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Filters": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Name": {},
	                "Values": {
	                  "type": "list",
	                  "member": {}
	                }
	              }
	            }
	          },
	          "NextToken": {},
	          "MaxRecords": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeTagsResult",
	        "type": "structure",
	        "members": {
	          "Tags": {
	            "shape": "S2f"
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeTerminationPolicyTypes": {
	      "output": {
	        "resultWrapper": "DescribeTerminationPolicyTypesResult",
	        "type": "structure",
	        "members": {
	          "TerminationPolicyTypes": {
	            "shape": "Sr"
	          }
	        }
	      }
	    },
	    "DetachInstances": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AutoScalingGroupName",
	          "ShouldDecrementDesiredCapacity"
	        ],
	        "members": {
	          "InstanceIds": {
	            "shape": "S2"
	          },
	          "AutoScalingGroupName": {},
	          "ShouldDecrementDesiredCapacity": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DetachInstancesResult",
	        "type": "structure",
	        "members": {
	          "Activities": {
	            "shape": "S41"
	          }
	        }
	      }
	    },
	    "DetachLoadBalancerTargetGroups": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AutoScalingGroupName",
	          "TargetGroupARNs"
	        ],
	        "members": {
	          "AutoScalingGroupName": {},
	          "TargetGroupARNs": {
	            "shape": "S6"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DetachLoadBalancerTargetGroupsResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DetachLoadBalancers": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AutoScalingGroupName",
	          "LoadBalancerNames"
	        ],
	        "members": {
	          "AutoScalingGroupName": {},
	          "LoadBalancerNames": {
	            "shape": "Sa"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DetachLoadBalancersResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DisableMetricsCollection": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AutoScalingGroupName"
	        ],
	        "members": {
	          "AutoScalingGroupName": {},
	          "Metrics": {
	            "shape": "S4r"
	          }
	        }
	      }
	    },
	    "EnableMetricsCollection": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AutoScalingGroupName",
	          "Granularity"
	        ],
	        "members": {
	          "AutoScalingGroupName": {},
	          "Metrics": {
	            "shape": "S4r"
	          },
	          "Granularity": {}
	        }
	      }
	    },
	    "EnterStandby": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AutoScalingGroupName",
	          "ShouldDecrementDesiredCapacity"
	        ],
	        "members": {
	          "InstanceIds": {
	            "shape": "S2"
	          },
	          "AutoScalingGroupName": {},
	          "ShouldDecrementDesiredCapacity": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "EnterStandbyResult",
	        "type": "structure",
	        "members": {
	          "Activities": {
	            "shape": "S41"
	          }
	        }
	      }
	    },
	    "ExecutePolicy": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "PolicyName"
	        ],
	        "members": {
	          "AutoScalingGroupName": {},
	          "PolicyName": {},
	          "HonorCooldown": {
	            "type": "boolean"
	          },
	          "MetricValue": {
	            "type": "double"
	          },
	          "BreachThreshold": {
	            "type": "double"
	          }
	        }
	      }
	    },
	    "ExitStandby": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AutoScalingGroupName"
	        ],
	        "members": {
	          "InstanceIds": {
	            "shape": "S2"
	          },
	          "AutoScalingGroupName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ExitStandbyResult",
	        "type": "structure",
	        "members": {
	          "Activities": {
	            "shape": "S41"
	          }
	        }
	      }
	    },
	    "PutLifecycleHook": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LifecycleHookName",
	          "AutoScalingGroupName"
	        ],
	        "members": {
	          "LifecycleHookName": {},
	          "AutoScalingGroupName": {},
	          "LifecycleTransition": {},
	          "RoleARN": {},
	          "NotificationTargetARN": {},
	          "NotificationMetadata": {},
	          "HeartbeatTimeout": {
	            "type": "integer"
	          },
	          "DefaultResult": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "PutLifecycleHookResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "PutNotificationConfiguration": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AutoScalingGroupName",
	          "TopicARN",
	          "NotificationTypes"
	        ],
	        "members": {
	          "AutoScalingGroupName": {},
	          "TopicARN": {},
	          "NotificationTypes": {
	            "shape": "S2m"
	          }
	        }
	      }
	    },
	    "PutScalingPolicy": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AutoScalingGroupName",
	          "PolicyName",
	          "AdjustmentType"
	        ],
	        "members": {
	          "AutoScalingGroupName": {},
	          "PolicyName": {},
	          "PolicyType": {},
	          "AdjustmentType": {},
	          "MinAdjustmentStep": {
	            "shape": "S3p"
	          },
	          "MinAdjustmentMagnitude": {
	            "type": "integer"
	          },
	          "ScalingAdjustment": {
	            "type": "integer"
	          },
	          "Cooldown": {
	            "type": "integer"
	          },
	          "MetricAggregationType": {},
	          "StepAdjustments": {
	            "shape": "S3s"
	          },
	          "EstimatedInstanceWarmup": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "PutScalingPolicyResult",
	        "type": "structure",
	        "members": {
	          "PolicyARN": {}
	        }
	      }
	    },
	    "PutScheduledUpdateGroupAction": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AutoScalingGroupName",
	          "ScheduledActionName"
	        ],
	        "members": {
	          "AutoScalingGroupName": {},
	          "ScheduledActionName": {},
	          "Time": {
	            "type": "timestamp"
	          },
	          "StartTime": {
	            "type": "timestamp"
	          },
	          "EndTime": {
	            "type": "timestamp"
	          },
	          "Recurrence": {},
	          "MinSize": {
	            "type": "integer"
	          },
	          "MaxSize": {
	            "type": "integer"
	          },
	          "DesiredCapacity": {
	            "type": "integer"
	          }
	        }
	      }
	    },
	    "RecordLifecycleActionHeartbeat": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LifecycleHookName",
	          "AutoScalingGroupName"
	        ],
	        "members": {
	          "LifecycleHookName": {},
	          "AutoScalingGroupName": {},
	          "LifecycleActionToken": {},
	          "InstanceId": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "RecordLifecycleActionHeartbeatResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "ResumeProcesses": {
	      "input": {
	        "shape": "S58"
	      }
	    },
	    "SetDesiredCapacity": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AutoScalingGroupName",
	          "DesiredCapacity"
	        ],
	        "members": {
	          "AutoScalingGroupName": {},
	          "DesiredCapacity": {
	            "type": "integer"
	          },
	          "HonorCooldown": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "SetInstanceHealth": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId",
	          "HealthStatus"
	        ],
	        "members": {
	          "InstanceId": {},
	          "HealthStatus": {},
	          "ShouldRespectGracePeriod": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "SetInstanceProtection": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceIds",
	          "AutoScalingGroupName",
	          "ProtectedFromScaleIn"
	        ],
	        "members": {
	          "InstanceIds": {
	            "shape": "S2"
	          },
	          "AutoScalingGroupName": {},
	          "ProtectedFromScaleIn": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "SetInstanceProtectionResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "SuspendProcesses": {
	      "input": {
	        "shape": "S58"
	      }
	    },
	    "TerminateInstanceInAutoScalingGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId",
	          "ShouldDecrementDesiredCapacity"
	        ],
	        "members": {
	          "InstanceId": {},
	          "ShouldDecrementDesiredCapacity": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "TerminateInstanceInAutoScalingGroupResult",
	        "type": "structure",
	        "members": {
	          "Activity": {
	            "shape": "S42"
	          }
	        }
	      }
	    },
	    "UpdateAutoScalingGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AutoScalingGroupName"
	        ],
	        "members": {
	          "AutoScalingGroupName": {},
	          "LaunchConfigurationName": {},
	          "MinSize": {
	            "type": "integer"
	          },
	          "MaxSize": {
	            "type": "integer"
	          },
	          "DesiredCapacity": {
	            "type": "integer"
	          },
	          "DefaultCooldown": {
	            "type": "integer"
	          },
	          "AvailabilityZones": {
	            "shape": "Sn"
	          },
	          "HealthCheckType": {},
	          "HealthCheckGracePeriod": {
	            "type": "integer"
	          },
	          "PlacementGroup": {},
	          "VPCZoneIdentifier": {},
	          "TerminationPolicies": {
	            "shape": "Sr"
	          },
	          "NewInstancesProtectedFromScaleIn": {
	            "type": "boolean"
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S2": {
	      "type": "list",
	      "member": {}
	    },
	    "S6": {
	      "type": "list",
	      "member": {}
	    },
	    "Sa": {
	      "type": "list",
	      "member": {}
	    },
	    "Sn": {
	      "type": "list",
	      "member": {}
	    },
	    "Sr": {
	      "type": "list",
	      "member": {}
	    },
	    "Su": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "Key"
	        ],
	        "members": {
	          "ResourceId": {},
	          "ResourceType": {},
	          "Key": {},
	          "Value": {},
	          "PropagateAtLaunch": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "S11": {
	      "type": "list",
	      "member": {}
	    },
	    "S12": {
	      "type": "list",
	      "member": {}
	    },
	    "S14": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "DeviceName"
	        ],
	        "members": {
	          "VirtualName": {},
	          "DeviceName": {},
	          "Ebs": {
	            "type": "structure",
	            "members": {
	              "SnapshotId": {},
	              "VolumeSize": {
	                "type": "integer"
	              },
	              "VolumeType": {},
	              "DeleteOnTermination": {
	                "type": "boolean"
	              },
	              "Iops": {
	                "type": "integer"
	              },
	              "Encrypted": {
	                "type": "boolean"
	              }
	            }
	          },
	          "NoDevice": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "S1d": {
	      "type": "structure",
	      "members": {
	        "Enabled": {
	          "type": "boolean"
	        }
	      }
	    },
	    "S22": {
	      "type": "list",
	      "member": {}
	    },
	    "S2f": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "ResourceId": {},
	          "ResourceType": {},
	          "Key": {},
	          "Value": {},
	          "PropagateAtLaunch": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "S2m": {
	      "type": "list",
	      "member": {}
	    },
	    "S3p": {
	      "type": "integer",
	      "deprecated": true
	    },
	    "S3s": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "ScalingAdjustment"
	        ],
	        "members": {
	          "MetricIntervalLowerBound": {
	            "type": "double"
	          },
	          "MetricIntervalUpperBound": {
	            "type": "double"
	          },
	          "ScalingAdjustment": {
	            "type": "integer"
	          }
	        }
	      }
	    },
	    "S41": {
	      "type": "list",
	      "member": {
	        "shape": "S42"
	      }
	    },
	    "S42": {
	      "type": "structure",
	      "required": [
	        "ActivityId",
	        "AutoScalingGroupName",
	        "Cause",
	        "StartTime",
	        "StatusCode"
	      ],
	      "members": {
	        "ActivityId": {},
	        "AutoScalingGroupName": {},
	        "Description": {},
	        "Cause": {},
	        "StartTime": {
	          "type": "timestamp"
	        },
	        "EndTime": {
	          "type": "timestamp"
	        },
	        "StatusCode": {},
	        "StatusMessage": {},
	        "Progress": {
	          "type": "integer"
	        },
	        "Details": {}
	      }
	    },
	    "S4r": {
	      "type": "list",
	      "member": {}
	    },
	    "S58": {
	      "type": "structure",
	      "required": [
	        "AutoScalingGroupName"
	      ],
	      "members": {
	        "AutoScalingGroupName": {},
	        "ScalingProcesses": {
	          "type": "list",
	          "member": {}
	        }
	      }
	    }
	  }
	}
	},{}],8:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "DescribeAutoScalingGroups": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "limit_key": "MaxRecords",
	      "result_key": "AutoScalingGroups"
	    },
	    "DescribeAutoScalingInstances": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "limit_key": "MaxRecords",
	      "result_key": "AutoScalingInstances"
	    },
	    "DescribeLaunchConfigurations": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "limit_key": "MaxRecords",
	      "result_key": "LaunchConfigurations"
	    },
	    "DescribeNotificationConfigurations": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "limit_key": "MaxRecords",
	      "result_key": "NotificationConfigurations"
	    },
	    "DescribePolicies": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "limit_key": "MaxRecords",
	      "result_key": "ScalingPolicies"
	    },
	    "DescribeScalingActivities": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "limit_key": "MaxRecords",
	      "result_key": "Activities"
	    },
	    "DescribeScheduledActions": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "limit_key": "MaxRecords",
	      "result_key": "ScheduledUpdateGroupActions"
	    },
	    "DescribeTags": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "limit_key": "MaxRecords",
	      "result_key": "Tags"
	    }
	  }
	}
	
	},{}],9:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2010-05-15",
	    "endpointPrefix": "cloudformation",
	    "protocol": "query",
	    "serviceFullName": "AWS CloudFormation",
	    "signatureVersion": "v4",
	    "uid": "cloudformation-2010-05-15",
	    "xmlNamespace": "http://cloudformation.amazonaws.com/doc/2010-05-15/"
	  },
	  "operations": {
	    "CancelUpdateStack": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StackName"
	        ],
	        "members": {
	          "StackName": {}
	        }
	      }
	    },
	    "ContinueUpdateRollback": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StackName"
	        ],
	        "members": {
	          "StackName": {},
	          "RoleARN": {},
	          "ResourcesToSkip": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ContinueUpdateRollbackResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "CreateChangeSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StackName",
	          "ChangeSetName"
	        ],
	        "members": {
	          "StackName": {},
	          "TemplateBody": {},
	          "TemplateURL": {},
	          "UsePreviousTemplate": {
	            "type": "boolean"
	          },
	          "Parameters": {
	            "shape": "Sd"
	          },
	          "Capabilities": {
	            "shape": "Si"
	          },
	          "ResourceTypes": {
	            "shape": "Sk"
	          },
	          "RoleARN": {},
	          "NotificationARNs": {
	            "shape": "Sm"
	          },
	          "Tags": {
	            "shape": "So"
	          },
	          "ChangeSetName": {},
	          "ClientToken": {},
	          "Description": {},
	          "ChangeSetType": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateChangeSetResult",
	        "type": "structure",
	        "members": {
	          "Id": {},
	          "StackId": {}
	        }
	      }
	    },
	    "CreateStack": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StackName"
	        ],
	        "members": {
	          "StackName": {},
	          "TemplateBody": {},
	          "TemplateURL": {},
	          "Parameters": {
	            "shape": "Sd"
	          },
	          "DisableRollback": {
	            "type": "boolean"
	          },
	          "TimeoutInMinutes": {
	            "type": "integer"
	          },
	          "NotificationARNs": {
	            "shape": "Sm"
	          },
	          "Capabilities": {
	            "shape": "Si"
	          },
	          "ResourceTypes": {
	            "shape": "Sk"
	          },
	          "RoleARN": {},
	          "OnFailure": {},
	          "StackPolicyBody": {},
	          "StackPolicyURL": {},
	          "Tags": {
	            "shape": "So"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateStackResult",
	        "type": "structure",
	        "members": {
	          "StackId": {}
	        }
	      }
	    },
	    "DeleteChangeSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ChangeSetName"
	        ],
	        "members": {
	          "ChangeSetName": {},
	          "StackName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteChangeSetResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteStack": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StackName"
	        ],
	        "members": {
	          "StackName": {},
	          "RetainResources": {
	            "type": "list",
	            "member": {}
	          },
	          "RoleARN": {}
	        }
	      }
	    },
	    "DescribeAccountLimits": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeAccountLimitsResult",
	        "type": "structure",
	        "members": {
	          "AccountLimits": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Name": {},
	                "Value": {
	                  "type": "integer"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeChangeSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ChangeSetName"
	        ],
	        "members": {
	          "ChangeSetName": {},
	          "StackName": {},
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeChangeSetResult",
	        "type": "structure",
	        "members": {
	          "ChangeSetName": {},
	          "ChangeSetId": {},
	          "StackId": {},
	          "StackName": {},
	          "Description": {},
	          "Parameters": {
	            "shape": "Sd"
	          },
	          "CreationTime": {
	            "type": "timestamp"
	          },
	          "ExecutionStatus": {},
	          "Status": {},
	          "StatusReason": {},
	          "NotificationARNs": {
	            "shape": "Sm"
	          },
	          "Capabilities": {
	            "shape": "Si"
	          },
	          "Tags": {
	            "shape": "So"
	          },
	          "Changes": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Type": {},
	                "ResourceChange": {
	                  "type": "structure",
	                  "members": {
	                    "Action": {},
	                    "LogicalResourceId": {},
	                    "PhysicalResourceId": {},
	                    "ResourceType": {},
	                    "Replacement": {},
	                    "Scope": {
	                      "type": "list",
	                      "member": {}
	                    },
	                    "Details": {
	                      "type": "list",
	                      "member": {
	                        "type": "structure",
	                        "members": {
	                          "Target": {
	                            "type": "structure",
	                            "members": {
	                              "Attribute": {},
	                              "Name": {},
	                              "RequiresRecreation": {}
	                            }
	                          },
	                          "Evaluation": {},
	                          "ChangeSource": {},
	                          "CausingEntity": {}
	                        }
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeStackEvents": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "StackName": {},
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeStackEventsResult",
	        "type": "structure",
	        "members": {
	          "StackEvents": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "StackId",
	                "EventId",
	                "StackName",
	                "Timestamp"
	              ],
	              "members": {
	                "StackId": {},
	                "EventId": {},
	                "StackName": {},
	                "LogicalResourceId": {},
	                "PhysicalResourceId": {},
	                "ResourceType": {},
	                "Timestamp": {
	                  "type": "timestamp"
	                },
	                "ResourceStatus": {},
	                "ResourceStatusReason": {},
	                "ResourceProperties": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeStackResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StackName",
	          "LogicalResourceId"
	        ],
	        "members": {
	          "StackName": {},
	          "LogicalResourceId": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeStackResourceResult",
	        "type": "structure",
	        "members": {
	          "StackResourceDetail": {
	            "type": "structure",
	            "required": [
	              "LogicalResourceId",
	              "ResourceType",
	              "LastUpdatedTimestamp",
	              "ResourceStatus"
	            ],
	            "members": {
	              "StackName": {},
	              "StackId": {},
	              "LogicalResourceId": {},
	              "PhysicalResourceId": {},
	              "ResourceType": {},
	              "LastUpdatedTimestamp": {
	                "type": "timestamp"
	              },
	              "ResourceStatus": {},
	              "ResourceStatusReason": {},
	              "Description": {},
	              "Metadata": {}
	            }
	          }
	        }
	      }
	    },
	    "DescribeStackResources": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "StackName": {},
	          "LogicalResourceId": {},
	          "PhysicalResourceId": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeStackResourcesResult",
	        "type": "structure",
	        "members": {
	          "StackResources": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "LogicalResourceId",
	                "ResourceType",
	                "Timestamp",
	                "ResourceStatus"
	              ],
	              "members": {
	                "StackName": {},
	                "StackId": {},
	                "LogicalResourceId": {},
	                "PhysicalResourceId": {},
	                "ResourceType": {},
	                "Timestamp": {
	                  "type": "timestamp"
	                },
	                "ResourceStatus": {},
	                "ResourceStatusReason": {},
	                "Description": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeStacks": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "StackName": {},
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeStacksResult",
	        "type": "structure",
	        "members": {
	          "Stacks": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "StackName",
	                "CreationTime",
	                "StackStatus"
	              ],
	              "members": {
	                "StackId": {},
	                "StackName": {},
	                "ChangeSetId": {},
	                "Description": {},
	                "Parameters": {
	                  "shape": "Sd"
	                },
	                "CreationTime": {
	                  "type": "timestamp"
	                },
	                "LastUpdatedTime": {
	                  "type": "timestamp"
	                },
	                "StackStatus": {},
	                "StackStatusReason": {},
	                "DisableRollback": {
	                  "type": "boolean"
	                },
	                "NotificationARNs": {
	                  "shape": "Sm"
	                },
	                "TimeoutInMinutes": {
	                  "type": "integer"
	                },
	                "Capabilities": {
	                  "shape": "Si"
	                },
	                "Outputs": {
	                  "type": "list",
	                  "member": {
	                    "type": "structure",
	                    "members": {
	                      "OutputKey": {},
	                      "OutputValue": {},
	                      "Description": {}
	                    }
	                  }
	                },
	                "RoleARN": {},
	                "Tags": {
	                  "shape": "So"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "EstimateTemplateCost": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "TemplateBody": {},
	          "TemplateURL": {},
	          "Parameters": {
	            "shape": "Sd"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "EstimateTemplateCostResult",
	        "type": "structure",
	        "members": {
	          "Url": {}
	        }
	      }
	    },
	    "ExecuteChangeSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ChangeSetName"
	        ],
	        "members": {
	          "ChangeSetName": {},
	          "StackName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ExecuteChangeSetResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "GetStackPolicy": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StackName"
	        ],
	        "members": {
	          "StackName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "GetStackPolicyResult",
	        "type": "structure",
	        "members": {
	          "StackPolicyBody": {}
	        }
	      }
	    },
	    "GetTemplate": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "StackName": {},
	          "ChangeSetName": {},
	          "TemplateStage": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "GetTemplateResult",
	        "type": "structure",
	        "members": {
	          "TemplateBody": {},
	          "StagesAvailable": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      }
	    },
	    "GetTemplateSummary": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "TemplateBody": {},
	          "TemplateURL": {},
	          "StackName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "GetTemplateSummaryResult",
	        "type": "structure",
	        "members": {
	          "Parameters": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "ParameterKey": {},
	                "DefaultValue": {},
	                "ParameterType": {},
	                "NoEcho": {
	                  "type": "boolean"
	                },
	                "Description": {},
	                "ParameterConstraints": {
	                  "type": "structure",
	                  "members": {
	                    "AllowedValues": {
	                      "type": "list",
	                      "member": {}
	                    }
	                  }
	                }
	              }
	            }
	          },
	          "Description": {},
	          "Capabilities": {
	            "shape": "Si"
	          },
	          "CapabilitiesReason": {},
	          "ResourceTypes": {
	            "shape": "Sk"
	          },
	          "Version": {},
	          "Metadata": {},
	          "DeclaredTransforms": {
	            "shape": "S3k"
	          }
	        }
	      }
	    },
	    "ListChangeSets": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StackName"
	        ],
	        "members": {
	          "StackName": {},
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ListChangeSetsResult",
	        "type": "structure",
	        "members": {
	          "Summaries": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "StackId": {},
	                "StackName": {},
	                "ChangeSetId": {},
	                "ChangeSetName": {},
	                "ExecutionStatus": {},
	                "Status": {},
	                "StatusReason": {},
	                "CreationTime": {
	                  "type": "timestamp"
	                },
	                "Description": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListExports": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ListExportsResult",
	        "type": "structure",
	        "members": {
	          "Exports": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "ExportingStackId": {},
	                "Name": {},
	                "Value": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListImports": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ExportName"
	        ],
	        "members": {
	          "ExportName": {},
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ListImportsResult",
	        "type": "structure",
	        "members": {
	          "Imports": {
	            "type": "list",
	            "member": {}
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListStackResources": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StackName"
	        ],
	        "members": {
	          "StackName": {},
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ListStackResourcesResult",
	        "type": "structure",
	        "members": {
	          "StackResourceSummaries": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "LogicalResourceId",
	                "ResourceType",
	                "LastUpdatedTimestamp",
	                "ResourceStatus"
	              ],
	              "members": {
	                "LogicalResourceId": {},
	                "PhysicalResourceId": {},
	                "ResourceType": {},
	                "LastUpdatedTimestamp": {
	                  "type": "timestamp"
	                },
	                "ResourceStatus": {},
	                "ResourceStatusReason": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListStacks": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "NextToken": {},
	          "StackStatusFilter": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ListStacksResult",
	        "type": "structure",
	        "members": {
	          "StackSummaries": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "StackName",
	                "CreationTime",
	                "StackStatus"
	              ],
	              "members": {
	                "StackId": {},
	                "StackName": {},
	                "TemplateDescription": {},
	                "CreationTime": {
	                  "type": "timestamp"
	                },
	                "LastUpdatedTime": {
	                  "type": "timestamp"
	                },
	                "DeletionTime": {
	                  "type": "timestamp"
	                },
	                "StackStatus": {},
	                "StackStatusReason": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "SetStackPolicy": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StackName"
	        ],
	        "members": {
	          "StackName": {},
	          "StackPolicyBody": {},
	          "StackPolicyURL": {}
	        }
	      }
	    },
	    "SignalResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StackName",
	          "LogicalResourceId",
	          "UniqueId",
	          "Status"
	        ],
	        "members": {
	          "StackName": {},
	          "LogicalResourceId": {},
	          "UniqueId": {},
	          "Status": {}
	        }
	      }
	    },
	    "UpdateStack": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StackName"
	        ],
	        "members": {
	          "StackName": {},
	          "TemplateBody": {},
	          "TemplateURL": {},
	          "UsePreviousTemplate": {
	            "type": "boolean"
	          },
	          "StackPolicyDuringUpdateBody": {},
	          "StackPolicyDuringUpdateURL": {},
	          "Parameters": {
	            "shape": "Sd"
	          },
	          "Capabilities": {
	            "shape": "Si"
	          },
	          "ResourceTypes": {
	            "shape": "Sk"
	          },
	          "RoleARN": {},
	          "StackPolicyBody": {},
	          "StackPolicyURL": {},
	          "NotificationARNs": {
	            "shape": "Sm"
	          },
	          "Tags": {
	            "shape": "So"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "UpdateStackResult",
	        "type": "structure",
	        "members": {
	          "StackId": {}
	        }
	      }
	    },
	    "ValidateTemplate": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "TemplateBody": {},
	          "TemplateURL": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ValidateTemplateResult",
	        "type": "structure",
	        "members": {
	          "Parameters": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "ParameterKey": {},
	                "DefaultValue": {},
	                "NoEcho": {
	                  "type": "boolean"
	                },
	                "Description": {}
	              }
	            }
	          },
	          "Description": {},
	          "Capabilities": {
	            "shape": "Si"
	          },
	          "CapabilitiesReason": {},
	          "DeclaredTransforms": {
	            "shape": "S3k"
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "Sd": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "ParameterKey": {},
	          "ParameterValue": {},
	          "UsePreviousValue": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "Si": {
	      "type": "list",
	      "member": {}
	    },
	    "Sk": {
	      "type": "list",
	      "member": {}
	    },
	    "Sm": {
	      "type": "list",
	      "member": {}
	    },
	    "So": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "Key": {},
	          "Value": {}
	        }
	      }
	    },
	    "S3k": {
	      "type": "list",
	      "member": {}
	    }
	  }
	}
	},{}],10:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "DescribeStackEvents": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "result_key": "StackEvents"
	    },
	    "DescribeStackResources": {
	      "result_key": "StackResources"
	    },
	    "DescribeStacks": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "result_key": "Stacks"
	    },
	    "ListStackResources": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "result_key": "StackResourceSummaries"
	    },
	    "ListStacks": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "result_key": "StackSummaries"
	    }
	  }
	}
	
	},{}],11:[function(require,module,exports){
	module.exports={
	  "version": 2,
	  "waiters": {
	    "StackExists": {
	      "delay": 5,
	      "operation": "DescribeStacks",
	      "maxAttempts": 20,
	      "acceptors": [
	        {
	          "matcher": "status",
	          "expected": 200,
	          "state": "success"
	        },
	        {
	          "matcher": "error",
	          "expected": "ValidationError",
	          "state": "retry"
	        }
	      ]
	    },
	    "StackCreateComplete": {
	      "delay": 30,
	      "operation": "DescribeStacks",
	      "maxAttempts": 120,
	      "description": "Wait until stack status is CREATE_COMPLETE.",
	      "acceptors": [
	        {
	          "argument": "Stacks[].StackStatus",
	          "expected": "CREATE_COMPLETE",
	          "matcher": "pathAll",
	          "state": "success"
	        },
	        {
	          "argument": "Stacks[].StackStatus",
	          "expected": "CREATE_FAILED",
	          "matcher": "pathAny",
	          "state": "failure"
	        },
	        {
	          "argument": "Stacks[].StackStatus",
	          "expected": "DELETE_COMPLETE",
	          "matcher": "pathAny",
	          "state": "failure"
	        },
	        {
	          "argument": "Stacks[].StackStatus",
	          "expected": "DELETE_FAILED",
	          "matcher": "pathAny",
	          "state": "failure"
	        },
	        {
	          "argument": "Stacks[].StackStatus",
	          "expected": "ROLLBACK_FAILED",
	          "matcher": "pathAny",
	          "state": "failure"
	        },
	        {
	          "argument": "Stacks[].StackStatus",
	          "expected": "ROLLBACK_COMPLETE",
	          "matcher": "pathAny",
	          "state": "failure"
	        },
	        {
	          "expected": "ValidationError",
	          "matcher": "error",
	          "state": "failure"
	        }
	      ]
	    },
	    "StackDeleteComplete": {
	      "delay": 30,
	      "operation": "DescribeStacks",
	      "maxAttempts": 120,
	      "description": "Wait until stack status is DELETE_COMPLETE.",
	      "acceptors": [
	        {
	          "argument": "Stacks[].StackStatus",
	          "expected": "DELETE_COMPLETE",
	          "matcher": "pathAll",
	          "state": "success"
	        },
	        {
	          "expected": "ValidationError",
	          "matcher": "error",
	          "state": "success"
	        },
	        {
	          "argument": "Stacks[].StackStatus",
	          "expected": "DELETE_FAILED",
	          "matcher": "pathAny",
	          "state": "failure"
	        },
	        {
	          "argument": "Stacks[].StackStatus",
	          "expected": "CREATE_FAILED",
	          "matcher": "pathAny",
	          "state": "failure"
	        },
	        {
	          "argument": "Stacks[].StackStatus",
	          "expected": "ROLLBACK_FAILED",
	          "matcher": "pathAny",
	          "state": "failure"
	        },
	        {
	          "argument": "Stacks[].StackStatus",
	          "expected": "UPDATE_ROLLBACK_FAILED",
	          "matcher": "pathAny",
	          "state": "failure"
	        },
	        {
	          "argument": "Stacks[].StackStatus",
	          "expected": "UPDATE_ROLLBACK_IN_PROGRESS",
	          "matcher": "pathAny",
	          "state": "failure"
	        }
	      ]
	    },
	    "StackUpdateComplete": {
	      "delay": 30,
	      "maxAttempts": 120,
	      "operation": "DescribeStacks",
	      "description": "Wait until stack status is UPDATE_COMPLETE.",
	      "acceptors": [
	        {
	          "argument": "Stacks[].StackStatus",
	          "expected": "UPDATE_COMPLETE",
	          "matcher": "pathAll",
	          "state": "success"
	        },
	        {
	          "expected": "UPDATE_FAILED",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Stacks[].StackStatus"
	        },
	        {
	          "argument": "Stacks[].StackStatus",
	          "expected": "UPDATE_ROLLBACK_FAILED",
	          "matcher": "pathAny",
	          "state": "failure"
	        },
	        {
	          "expected": "UPDATE_ROLLBACK_COMPLETE",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Stacks[].StackStatus"
	        },
	        {
	          "expected": "ValidationError",
	          "matcher": "error",
	          "state": "failure"
	        }
	      ]
	    }
	  }
	}
	
	},{}],12:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2016-11-25",
	    "endpointPrefix": "cloudfront",
	    "globalEndpoint": "cloudfront.amazonaws.com",
	    "protocol": "rest-xml",
	    "serviceAbbreviation": "CloudFront",
	    "serviceFullName": "Amazon CloudFront",
	    "signatureVersion": "v4",
	    "uid": "cloudfront-2016-11-25"
	  },
	  "operations": {
	    "CreateCloudFrontOriginAccessIdentity": {
	      "http": {
	        "requestUri": "/2016-11-25/origin-access-identity/cloudfront",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "CloudFrontOriginAccessIdentityConfig"
	        ],
	        "members": {
	          "CloudFrontOriginAccessIdentityConfig": {
	            "shape": "S2",
	            "locationName": "CloudFrontOriginAccessIdentityConfig",
	            "xmlNamespace": {
	              "uri": "http://cloudfront.amazonaws.com/doc/2016-11-25/"
	            }
	          }
	        },
	        "payload": "CloudFrontOriginAccessIdentityConfig"
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "CloudFrontOriginAccessIdentity": {
	            "shape": "S5"
	          },
	          "Location": {
	            "location": "header",
	            "locationName": "Location"
	          },
	          "ETag": {
	            "location": "header",
	            "locationName": "ETag"
	          }
	        },
	        "payload": "CloudFrontOriginAccessIdentity"
	      }
	    },
	    "CreateDistribution": {
	      "http": {
	        "requestUri": "/2016-11-25/distribution",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "DistributionConfig"
	        ],
	        "members": {
	          "DistributionConfig": {
	            "shape": "S7",
	            "locationName": "DistributionConfig",
	            "xmlNamespace": {
	              "uri": "http://cloudfront.amazonaws.com/doc/2016-11-25/"
	            }
	          }
	        },
	        "payload": "DistributionConfig"
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Distribution": {
	            "shape": "S1s"
	          },
	          "Location": {
	            "location": "header",
	            "locationName": "Location"
	          },
	          "ETag": {
	            "location": "header",
	            "locationName": "ETag"
	          }
	        },
	        "payload": "Distribution"
	      }
	    },
	    "CreateDistributionWithTags": {
	      "http": {
	        "requestUri": "/2016-11-25/distribution?WithTags",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "DistributionConfigWithTags"
	        ],
	        "members": {
	          "DistributionConfigWithTags": {
	            "locationName": "DistributionConfigWithTags",
	            "xmlNamespace": {
	              "uri": "http://cloudfront.amazonaws.com/doc/2016-11-25/"
	            },
	            "type": "structure",
	            "required": [
	              "DistributionConfig",
	              "Tags"
	            ],
	            "members": {
	              "DistributionConfig": {
	                "shape": "S7"
	              },
	              "Tags": {
	                "shape": "S21"
	              }
	            }
	          }
	        },
	        "payload": "DistributionConfigWithTags"
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Distribution": {
	            "shape": "S1s"
	          },
	          "Location": {
	            "location": "header",
	            "locationName": "Location"
	          },
	          "ETag": {
	            "location": "header",
	            "locationName": "ETag"
	          }
	        },
	        "payload": "Distribution"
	      }
	    },
	    "CreateInvalidation": {
	      "http": {
	        "requestUri": "/2016-11-25/distribution/{DistributionId}/invalidation",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "DistributionId",
	          "InvalidationBatch"
	        ],
	        "members": {
	          "DistributionId": {
	            "location": "uri",
	            "locationName": "DistributionId"
	          },
	          "InvalidationBatch": {
	            "shape": "S28",
	            "locationName": "InvalidationBatch",
	            "xmlNamespace": {
	              "uri": "http://cloudfront.amazonaws.com/doc/2016-11-25/"
	            }
	          }
	        },
	        "payload": "InvalidationBatch"
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Location": {
	            "location": "header",
	            "locationName": "Location"
	          },
	          "Invalidation": {
	            "shape": "S2c"
	          }
	        },
	        "payload": "Invalidation"
	      }
	    },
	    "CreateStreamingDistribution": {
	      "http": {
	        "requestUri": "/2016-11-25/streaming-distribution",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "StreamingDistributionConfig"
	        ],
	        "members": {
	          "StreamingDistributionConfig": {
	            "shape": "S2e",
	            "locationName": "StreamingDistributionConfig",
	            "xmlNamespace": {
	              "uri": "http://cloudfront.amazonaws.com/doc/2016-11-25/"
	            }
	          }
	        },
	        "payload": "StreamingDistributionConfig"
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "StreamingDistribution": {
	            "shape": "S2i"
	          },
	          "Location": {
	            "location": "header",
	            "locationName": "Location"
	          },
	          "ETag": {
	            "location": "header",
	            "locationName": "ETag"
	          }
	        },
	        "payload": "StreamingDistribution"
	      }
	    },
	    "CreateStreamingDistributionWithTags": {
	      "http": {
	        "requestUri": "/2016-11-25/streaming-distribution?WithTags",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "StreamingDistributionConfigWithTags"
	        ],
	        "members": {
	          "StreamingDistributionConfigWithTags": {
	            "locationName": "StreamingDistributionConfigWithTags",
	            "xmlNamespace": {
	              "uri": "http://cloudfront.amazonaws.com/doc/2016-11-25/"
	            },
	            "type": "structure",
	            "required": [
	              "StreamingDistributionConfig",
	              "Tags"
	            ],
	            "members": {
	              "StreamingDistributionConfig": {
	                "shape": "S2e"
	              },
	              "Tags": {
	                "shape": "S21"
	              }
	            }
	          }
	        },
	        "payload": "StreamingDistributionConfigWithTags"
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "StreamingDistribution": {
	            "shape": "S2i"
	          },
	          "Location": {
	            "location": "header",
	            "locationName": "Location"
	          },
	          "ETag": {
	            "location": "header",
	            "locationName": "ETag"
	          }
	        },
	        "payload": "StreamingDistribution"
	      }
	    },
	    "DeleteCloudFrontOriginAccessIdentity": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/2016-11-25/origin-access-identity/cloudfront/{Id}",
	        "responseCode": 204
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          },
	          "IfMatch": {
	            "location": "header",
	            "locationName": "If-Match"
	          }
	        }
	      }
	    },
	    "DeleteDistribution": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/2016-11-25/distribution/{Id}",
	        "responseCode": 204
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          },
	          "IfMatch": {
	            "location": "header",
	            "locationName": "If-Match"
	          }
	        }
	      }
	    },
	    "DeleteStreamingDistribution": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/2016-11-25/streaming-distribution/{Id}",
	        "responseCode": 204
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          },
	          "IfMatch": {
	            "location": "header",
	            "locationName": "If-Match"
	          }
	        }
	      }
	    },
	    "GetCloudFrontOriginAccessIdentity": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2016-11-25/origin-access-identity/cloudfront/{Id}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "CloudFrontOriginAccessIdentity": {
	            "shape": "S5"
	          },
	          "ETag": {
	            "location": "header",
	            "locationName": "ETag"
	          }
	        },
	        "payload": "CloudFrontOriginAccessIdentity"
	      }
	    },
	    "GetCloudFrontOriginAccessIdentityConfig": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2016-11-25/origin-access-identity/cloudfront/{Id}/config"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "CloudFrontOriginAccessIdentityConfig": {
	            "shape": "S2"
	          },
	          "ETag": {
	            "location": "header",
	            "locationName": "ETag"
	          }
	        },
	        "payload": "CloudFrontOriginAccessIdentityConfig"
	      }
	    },
	    "GetDistribution": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2016-11-25/distribution/{Id}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Distribution": {
	            "shape": "S1s"
	          },
	          "ETag": {
	            "location": "header",
	            "locationName": "ETag"
	          }
	        },
	        "payload": "Distribution"
	      }
	    },
	    "GetDistributionConfig": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2016-11-25/distribution/{Id}/config"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "DistributionConfig": {
	            "shape": "S7"
	          },
	          "ETag": {
	            "location": "header",
	            "locationName": "ETag"
	          }
	        },
	        "payload": "DistributionConfig"
	      }
	    },
	    "GetInvalidation": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2016-11-25/distribution/{DistributionId}/invalidation/{Id}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "DistributionId",
	          "Id"
	        ],
	        "members": {
	          "DistributionId": {
	            "location": "uri",
	            "locationName": "DistributionId"
	          },
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Invalidation": {
	            "shape": "S2c"
	          }
	        },
	        "payload": "Invalidation"
	      }
	    },
	    "GetStreamingDistribution": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2016-11-25/streaming-distribution/{Id}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "StreamingDistribution": {
	            "shape": "S2i"
	          },
	          "ETag": {
	            "location": "header",
	            "locationName": "ETag"
	          }
	        },
	        "payload": "StreamingDistribution"
	      }
	    },
	    "GetStreamingDistributionConfig": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2016-11-25/streaming-distribution/{Id}/config"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "StreamingDistributionConfig": {
	            "shape": "S2e"
	          },
	          "ETag": {
	            "location": "header",
	            "locationName": "ETag"
	          }
	        },
	        "payload": "StreamingDistributionConfig"
	      }
	    },
	    "ListCloudFrontOriginAccessIdentities": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2016-11-25/origin-access-identity/cloudfront"
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "Marker": {
	            "location": "querystring",
	            "locationName": "Marker"
	          },
	          "MaxItems": {
	            "location": "querystring",
	            "locationName": "MaxItems"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "CloudFrontOriginAccessIdentityList": {
	            "type": "structure",
	            "required": [
	              "Marker",
	              "MaxItems",
	              "IsTruncated",
	              "Quantity"
	            ],
	            "members": {
	              "Marker": {},
	              "NextMarker": {},
	              "MaxItems": {
	                "type": "integer"
	              },
	              "IsTruncated": {
	                "type": "boolean"
	              },
	              "Quantity": {
	                "type": "integer"
	              },
	              "Items": {
	                "type": "list",
	                "member": {
	                  "locationName": "CloudFrontOriginAccessIdentitySummary",
	                  "type": "structure",
	                  "required": [
	                    "Id",
	                    "S3CanonicalUserId",
	                    "Comment"
	                  ],
	                  "members": {
	                    "Id": {},
	                    "S3CanonicalUserId": {},
	                    "Comment": {}
	                  }
	                }
	              }
	            }
	          }
	        },
	        "payload": "CloudFrontOriginAccessIdentityList"
	      }
	    },
	    "ListDistributions": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2016-11-25/distribution"
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "Marker": {
	            "location": "querystring",
	            "locationName": "Marker"
	          },
	          "MaxItems": {
	            "location": "querystring",
	            "locationName": "MaxItems"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "DistributionList": {
	            "shape": "S3a"
	          }
	        },
	        "payload": "DistributionList"
	      }
	    },
	    "ListDistributionsByWebACLId": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2016-11-25/distributionsByWebACLId/{WebACLId}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "WebACLId"
	        ],
	        "members": {
	          "Marker": {
	            "location": "querystring",
	            "locationName": "Marker"
	          },
	          "MaxItems": {
	            "location": "querystring",
	            "locationName": "MaxItems"
	          },
	          "WebACLId": {
	            "location": "uri",
	            "locationName": "WebACLId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "DistributionList": {
	            "shape": "S3a"
	          }
	        },
	        "payload": "DistributionList"
	      }
	    },
	    "ListInvalidations": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2016-11-25/distribution/{DistributionId}/invalidation"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "DistributionId"
	        ],
	        "members": {
	          "DistributionId": {
	            "location": "uri",
	            "locationName": "DistributionId"
	          },
	          "Marker": {
	            "location": "querystring",
	            "locationName": "Marker"
	          },
	          "MaxItems": {
	            "location": "querystring",
	            "locationName": "MaxItems"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "InvalidationList": {
	            "type": "structure",
	            "required": [
	              "Marker",
	              "MaxItems",
	              "IsTruncated",
	              "Quantity"
	            ],
	            "members": {
	              "Marker": {},
	              "NextMarker": {},
	              "MaxItems": {
	                "type": "integer"
	              },
	              "IsTruncated": {
	                "type": "boolean"
	              },
	              "Quantity": {
	                "type": "integer"
	              },
	              "Items": {
	                "type": "list",
	                "member": {
	                  "locationName": "InvalidationSummary",
	                  "type": "structure",
	                  "required": [
	                    "Id",
	                    "CreateTime",
	                    "Status"
	                  ],
	                  "members": {
	                    "Id": {},
	                    "CreateTime": {
	                      "type": "timestamp"
	                    },
	                    "Status": {}
	                  }
	                }
	              }
	            }
	          }
	        },
	        "payload": "InvalidationList"
	      }
	    },
	    "ListStreamingDistributions": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2016-11-25/streaming-distribution"
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "Marker": {
	            "location": "querystring",
	            "locationName": "Marker"
	          },
	          "MaxItems": {
	            "location": "querystring",
	            "locationName": "MaxItems"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "StreamingDistributionList": {
	            "type": "structure",
	            "required": [
	              "Marker",
	              "MaxItems",
	              "IsTruncated",
	              "Quantity"
	            ],
	            "members": {
	              "Marker": {},
	              "NextMarker": {},
	              "MaxItems": {
	                "type": "integer"
	              },
	              "IsTruncated": {
	                "type": "boolean"
	              },
	              "Quantity": {
	                "type": "integer"
	              },
	              "Items": {
	                "type": "list",
	                "member": {
	                  "locationName": "StreamingDistributionSummary",
	                  "type": "structure",
	                  "required": [
	                    "Id",
	                    "ARN",
	                    "Status",
	                    "LastModifiedTime",
	                    "DomainName",
	                    "S3Origin",
	                    "Aliases",
	                    "TrustedSigners",
	                    "Comment",
	                    "PriceClass",
	                    "Enabled"
	                  ],
	                  "members": {
	                    "Id": {},
	                    "ARN": {},
	                    "Status": {},
	                    "LastModifiedTime": {
	                      "type": "timestamp"
	                    },
	                    "DomainName": {},
	                    "S3Origin": {
	                      "shape": "S2f"
	                    },
	                    "Aliases": {
	                      "shape": "S8"
	                    },
	                    "TrustedSigners": {
	                      "shape": "Sy"
	                    },
	                    "Comment": {},
	                    "PriceClass": {},
	                    "Enabled": {
	                      "type": "boolean"
	                    }
	                  }
	                }
	              }
	            }
	          }
	        },
	        "payload": "StreamingDistributionList"
	      }
	    },
	    "ListTagsForResource": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2016-11-25/tagging"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Resource"
	        ],
	        "members": {
	          "Resource": {
	            "location": "querystring",
	            "locationName": "Resource"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "Tags"
	        ],
	        "members": {
	          "Tags": {
	            "shape": "S21"
	          }
	        },
	        "payload": "Tags"
	      }
	    },
	    "TagResource": {
	      "http": {
	        "requestUri": "/2016-11-25/tagging?Operation=Tag",
	        "responseCode": 204
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Resource",
	          "Tags"
	        ],
	        "members": {
	          "Resource": {
	            "location": "querystring",
	            "locationName": "Resource"
	          },
	          "Tags": {
	            "shape": "S21",
	            "locationName": "Tags",
	            "xmlNamespace": {
	              "uri": "http://cloudfront.amazonaws.com/doc/2016-11-25/"
	            }
	          }
	        },
	        "payload": "Tags"
	      }
	    },
	    "UntagResource": {
	      "http": {
	        "requestUri": "/2016-11-25/tagging?Operation=Untag",
	        "responseCode": 204
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Resource",
	          "TagKeys"
	        ],
	        "members": {
	          "Resource": {
	            "location": "querystring",
	            "locationName": "Resource"
	          },
	          "TagKeys": {
	            "locationName": "TagKeys",
	            "xmlNamespace": {
	              "uri": "http://cloudfront.amazonaws.com/doc/2016-11-25/"
	            },
	            "type": "structure",
	            "members": {
	              "Items": {
	                "type": "list",
	                "member": {
	                  "locationName": "Key"
	                }
	              }
	            }
	          }
	        },
	        "payload": "TagKeys"
	      }
	    },
	    "UpdateCloudFrontOriginAccessIdentity": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/2016-11-25/origin-access-identity/cloudfront/{Id}/config"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "CloudFrontOriginAccessIdentityConfig",
	          "Id"
	        ],
	        "members": {
	          "CloudFrontOriginAccessIdentityConfig": {
	            "shape": "S2",
	            "locationName": "CloudFrontOriginAccessIdentityConfig",
	            "xmlNamespace": {
	              "uri": "http://cloudfront.amazonaws.com/doc/2016-11-25/"
	            }
	          },
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          },
	          "IfMatch": {
	            "location": "header",
	            "locationName": "If-Match"
	          }
	        },
	        "payload": "CloudFrontOriginAccessIdentityConfig"
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "CloudFrontOriginAccessIdentity": {
	            "shape": "S5"
	          },
	          "ETag": {
	            "location": "header",
	            "locationName": "ETag"
	          }
	        },
	        "payload": "CloudFrontOriginAccessIdentity"
	      }
	    },
	    "UpdateDistribution": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/2016-11-25/distribution/{Id}/config"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "DistributionConfig",
	          "Id"
	        ],
	        "members": {
	          "DistributionConfig": {
	            "shape": "S7",
	            "locationName": "DistributionConfig",
	            "xmlNamespace": {
	              "uri": "http://cloudfront.amazonaws.com/doc/2016-11-25/"
	            }
	          },
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          },
	          "IfMatch": {
	            "location": "header",
	            "locationName": "If-Match"
	          }
	        },
	        "payload": "DistributionConfig"
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Distribution": {
	            "shape": "S1s"
	          },
	          "ETag": {
	            "location": "header",
	            "locationName": "ETag"
	          }
	        },
	        "payload": "Distribution"
	      }
	    },
	    "UpdateStreamingDistribution": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/2016-11-25/streaming-distribution/{Id}/config"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "StreamingDistributionConfig",
	          "Id"
	        ],
	        "members": {
	          "StreamingDistributionConfig": {
	            "shape": "S2e",
	            "locationName": "StreamingDistributionConfig",
	            "xmlNamespace": {
	              "uri": "http://cloudfront.amazonaws.com/doc/2016-11-25/"
	            }
	          },
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          },
	          "IfMatch": {
	            "location": "header",
	            "locationName": "If-Match"
	          }
	        },
	        "payload": "StreamingDistributionConfig"
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "StreamingDistribution": {
	            "shape": "S2i"
	          },
	          "ETag": {
	            "location": "header",
	            "locationName": "ETag"
	          }
	        },
	        "payload": "StreamingDistribution"
	      }
	    }
	  },
	  "shapes": {
	    "S2": {
	      "type": "structure",
	      "required": [
	        "CallerReference",
	        "Comment"
	      ],
	      "members": {
	        "CallerReference": {},
	        "Comment": {}
	      }
	    },
	    "S5": {
	      "type": "structure",
	      "required": [
	        "Id",
	        "S3CanonicalUserId"
	      ],
	      "members": {
	        "Id": {},
	        "S3CanonicalUserId": {},
	        "CloudFrontOriginAccessIdentityConfig": {
	          "shape": "S2"
	        }
	      }
	    },
	    "S7": {
	      "type": "structure",
	      "required": [
	        "CallerReference",
	        "Origins",
	        "DefaultCacheBehavior",
	        "Comment",
	        "Enabled"
	      ],
	      "members": {
	        "CallerReference": {},
	        "Aliases": {
	          "shape": "S8"
	        },
	        "DefaultRootObject": {},
	        "Origins": {
	          "shape": "Sb"
	        },
	        "DefaultCacheBehavior": {
	          "shape": "Sn"
	        },
	        "CacheBehaviors": {
	          "shape": "S1a"
	        },
	        "CustomErrorResponses": {
	          "shape": "S1d"
	        },
	        "Comment": {},
	        "Logging": {
	          "type": "structure",
	          "required": [
	            "Enabled",
	            "IncludeCookies",
	            "Bucket",
	            "Prefix"
	          ],
	          "members": {
	            "Enabled": {
	              "type": "boolean"
	            },
	            "IncludeCookies": {
	              "type": "boolean"
	            },
	            "Bucket": {},
	            "Prefix": {}
	          }
	        },
	        "PriceClass": {},
	        "Enabled": {
	          "type": "boolean"
	        },
	        "ViewerCertificate": {
	          "shape": "S1i"
	        },
	        "Restrictions": {
	          "shape": "S1m"
	        },
	        "WebACLId": {},
	        "HttpVersion": {},
	        "IsIPV6Enabled": {
	          "type": "boolean"
	        }
	      }
	    },
	    "S8": {
	      "type": "structure",
	      "required": [
	        "Quantity"
	      ],
	      "members": {
	        "Quantity": {
	          "type": "integer"
	        },
	        "Items": {
	          "type": "list",
	          "member": {
	            "locationName": "CNAME"
	          }
	        }
	      }
	    },
	    "Sb": {
	      "type": "structure",
	      "required": [
	        "Quantity"
	      ],
	      "members": {
	        "Quantity": {
	          "type": "integer"
	        },
	        "Items": {
	          "type": "list",
	          "member": {
	            "locationName": "Origin",
	            "type": "structure",
	            "required": [
	              "Id",
	              "DomainName"
	            ],
	            "members": {
	              "Id": {},
	              "DomainName": {},
	              "OriginPath": {},
	              "CustomHeaders": {
	                "type": "structure",
	                "required": [
	                  "Quantity"
	                ],
	                "members": {
	                  "Quantity": {
	                    "type": "integer"
	                  },
	                  "Items": {
	                    "type": "list",
	                    "member": {
	                      "locationName": "OriginCustomHeader",
	                      "type": "structure",
	                      "required": [
	                        "HeaderName",
	                        "HeaderValue"
	                      ],
	                      "members": {
	                        "HeaderName": {},
	                        "HeaderValue": {}
	                      }
	                    }
	                  }
	                }
	              },
	              "S3OriginConfig": {
	                "type": "structure",
	                "required": [
	                  "OriginAccessIdentity"
	                ],
	                "members": {
	                  "OriginAccessIdentity": {}
	                }
	              },
	              "CustomOriginConfig": {
	                "type": "structure",
	                "required": [
	                  "HTTPPort",
	                  "HTTPSPort",
	                  "OriginProtocolPolicy"
	                ],
	                "members": {
	                  "HTTPPort": {
	                    "type": "integer"
	                  },
	                  "HTTPSPort": {
	                    "type": "integer"
	                  },
	                  "OriginProtocolPolicy": {},
	                  "OriginSslProtocols": {
	                    "type": "structure",
	                    "required": [
	                      "Quantity",
	                      "Items"
	                    ],
	                    "members": {
	                      "Quantity": {
	                        "type": "integer"
	                      },
	                      "Items": {
	                        "type": "list",
	                        "member": {
	                          "locationName": "SslProtocol"
	                        }
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "Sn": {
	      "type": "structure",
	      "required": [
	        "TargetOriginId",
	        "ForwardedValues",
	        "TrustedSigners",
	        "ViewerProtocolPolicy",
	        "MinTTL"
	      ],
	      "members": {
	        "TargetOriginId": {},
	        "ForwardedValues": {
	          "shape": "So"
	        },
	        "TrustedSigners": {
	          "shape": "Sy"
	        },
	        "ViewerProtocolPolicy": {},
	        "MinTTL": {
	          "type": "long"
	        },
	        "AllowedMethods": {
	          "shape": "S12"
	        },
	        "SmoothStreaming": {
	          "type": "boolean"
	        },
	        "DefaultTTL": {
	          "type": "long"
	        },
	        "MaxTTL": {
	          "type": "long"
	        },
	        "Compress": {
	          "type": "boolean"
	        },
	        "LambdaFunctionAssociations": {
	          "shape": "S16"
	        }
	      }
	    },
	    "So": {
	      "type": "structure",
	      "required": [
	        "QueryString",
	        "Cookies"
	      ],
	      "members": {
	        "QueryString": {
	          "type": "boolean"
	        },
	        "Cookies": {
	          "type": "structure",
	          "required": [
	            "Forward"
	          ],
	          "members": {
	            "Forward": {},
	            "WhitelistedNames": {
	              "type": "structure",
	              "required": [
	                "Quantity"
	              ],
	              "members": {
	                "Quantity": {
	                  "type": "integer"
	                },
	                "Items": {
	                  "type": "list",
	                  "member": {
	                    "locationName": "Name"
	                  }
	                }
	              }
	            }
	          }
	        },
	        "Headers": {
	          "type": "structure",
	          "required": [
	            "Quantity"
	          ],
	          "members": {
	            "Quantity": {
	              "type": "integer"
	            },
	            "Items": {
	              "type": "list",
	              "member": {
	                "locationName": "Name"
	              }
	            }
	          }
	        },
	        "QueryStringCacheKeys": {
	          "type": "structure",
	          "required": [
	            "Quantity"
	          ],
	          "members": {
	            "Quantity": {
	              "type": "integer"
	            },
	            "Items": {
	              "type": "list",
	              "member": {
	                "locationName": "Name"
	              }
	            }
	          }
	        }
	      }
	    },
	    "Sy": {
	      "type": "structure",
	      "required": [
	        "Enabled",
	        "Quantity"
	      ],
	      "members": {
	        "Enabled": {
	          "type": "boolean"
	        },
	        "Quantity": {
	          "type": "integer"
	        },
	        "Items": {
	          "type": "list",
	          "member": {
	            "locationName": "AwsAccountNumber"
	          }
	        }
	      }
	    },
	    "S12": {
	      "type": "structure",
	      "required": [
	        "Quantity",
	        "Items"
	      ],
	      "members": {
	        "Quantity": {
	          "type": "integer"
	        },
	        "Items": {
	          "shape": "S13"
	        },
	        "CachedMethods": {
	          "type": "structure",
	          "required": [
	            "Quantity",
	            "Items"
	          ],
	          "members": {
	            "Quantity": {
	              "type": "integer"
	            },
	            "Items": {
	              "shape": "S13"
	            }
	          }
	        }
	      }
	    },
	    "S13": {
	      "type": "list",
	      "member": {
	        "locationName": "Method"
	      }
	    },
	    "S16": {
	      "type": "structure",
	      "required": [
	        "Quantity"
	      ],
	      "members": {
	        "Quantity": {
	          "type": "integer"
	        },
	        "Items": {
	          "type": "list",
	          "member": {
	            "locationName": "LambdaFunctionAssociation",
	            "type": "structure",
	            "members": {
	              "LambdaFunctionARN": {},
	              "EventType": {}
	            }
	          }
	        }
	      }
	    },
	    "S1a": {
	      "type": "structure",
	      "required": [
	        "Quantity"
	      ],
	      "members": {
	        "Quantity": {
	          "type": "integer"
	        },
	        "Items": {
	          "type": "list",
	          "member": {
	            "locationName": "CacheBehavior",
	            "type": "structure",
	            "required": [
	              "PathPattern",
	              "TargetOriginId",
	              "ForwardedValues",
	              "TrustedSigners",
	              "ViewerProtocolPolicy",
	              "MinTTL"
	            ],
	            "members": {
	              "PathPattern": {},
	              "TargetOriginId": {},
	              "ForwardedValues": {
	                "shape": "So"
	              },
	              "TrustedSigners": {
	                "shape": "Sy"
	              },
	              "ViewerProtocolPolicy": {},
	              "MinTTL": {
	                "type": "long"
	              },
	              "AllowedMethods": {
	                "shape": "S12"
	              },
	              "SmoothStreaming": {
	                "type": "boolean"
	              },
	              "DefaultTTL": {
	                "type": "long"
	              },
	              "MaxTTL": {
	                "type": "long"
	              },
	              "Compress": {
	                "type": "boolean"
	              },
	              "LambdaFunctionAssociations": {
	                "shape": "S16"
	              }
	            }
	          }
	        }
	      }
	    },
	    "S1d": {
	      "type": "structure",
	      "required": [
	        "Quantity"
	      ],
	      "members": {
	        "Quantity": {
	          "type": "integer"
	        },
	        "Items": {
	          "type": "list",
	          "member": {
	            "locationName": "CustomErrorResponse",
	            "type": "structure",
	            "required": [
	              "ErrorCode"
	            ],
	            "members": {
	              "ErrorCode": {
	                "type": "integer"
	              },
	              "ResponsePagePath": {},
	              "ResponseCode": {},
	              "ErrorCachingMinTTL": {
	                "type": "long"
	              }
	            }
	          }
	        }
	      }
	    },
	    "S1i": {
	      "type": "structure",
	      "members": {
	        "CloudFrontDefaultCertificate": {
	          "type": "boolean"
	        },
	        "IAMCertificateId": {},
	        "ACMCertificateArn": {},
	        "SSLSupportMethod": {},
	        "MinimumProtocolVersion": {},
	        "Certificate": {
	          "deprecated": true
	        },
	        "CertificateSource": {
	          "deprecated": true
	        }
	      }
	    },
	    "S1m": {
	      "type": "structure",
	      "required": [
	        "GeoRestriction"
	      ],
	      "members": {
	        "GeoRestriction": {
	          "type": "structure",
	          "required": [
	            "RestrictionType",
	            "Quantity"
	          ],
	          "members": {
	            "RestrictionType": {},
	            "Quantity": {
	              "type": "integer"
	            },
	            "Items": {
	              "type": "list",
	              "member": {
	                "locationName": "Location"
	              }
	            }
	          }
	        }
	      }
	    },
	    "S1s": {
	      "type": "structure",
	      "required": [
	        "Id",
	        "ARN",
	        "Status",
	        "LastModifiedTime",
	        "InProgressInvalidationBatches",
	        "DomainName",
	        "ActiveTrustedSigners",
	        "DistributionConfig"
	      ],
	      "members": {
	        "Id": {},
	        "ARN": {},
	        "Status": {},
	        "LastModifiedTime": {
	          "type": "timestamp"
	        },
	        "InProgressInvalidationBatches": {
	          "type": "integer"
	        },
	        "DomainName": {},
	        "ActiveTrustedSigners": {
	          "shape": "S1u"
	        },
	        "DistributionConfig": {
	          "shape": "S7"
	        }
	      }
	    },
	    "S1u": {
	      "type": "structure",
	      "required": [
	        "Enabled",
	        "Quantity"
	      ],
	      "members": {
	        "Enabled": {
	          "type": "boolean"
	        },
	        "Quantity": {
	          "type": "integer"
	        },
	        "Items": {
	          "type": "list",
	          "member": {
	            "locationName": "Signer",
	            "type": "structure",
	            "members": {
	              "AwsAccountNumber": {},
	              "KeyPairIds": {
	                "type": "structure",
	                "required": [
	                  "Quantity"
	                ],
	                "members": {
	                  "Quantity": {
	                    "type": "integer"
	                  },
	                  "Items": {
	                    "type": "list",
	                    "member": {
	                      "locationName": "KeyPairId"
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "S21": {
	      "type": "structure",
	      "members": {
	        "Items": {
	          "type": "list",
	          "member": {
	            "locationName": "Tag",
	            "type": "structure",
	            "required": [
	              "Key"
	            ],
	            "members": {
	              "Key": {},
	              "Value": {}
	            }
	          }
	        }
	      }
	    },
	    "S28": {
	      "type": "structure",
	      "required": [
	        "Paths",
	        "CallerReference"
	      ],
	      "members": {
	        "Paths": {
	          "type": "structure",
	          "required": [
	            "Quantity"
	          ],
	          "members": {
	            "Quantity": {
	              "type": "integer"
	            },
	            "Items": {
	              "type": "list",
	              "member": {
	                "locationName": "Path"
	              }
	            }
	          }
	        },
	        "CallerReference": {}
	      }
	    },
	    "S2c": {
	      "type": "structure",
	      "required": [
	        "Id",
	        "Status",
	        "CreateTime",
	        "InvalidationBatch"
	      ],
	      "members": {
	        "Id": {},
	        "Status": {},
	        "CreateTime": {
	          "type": "timestamp"
	        },
	        "InvalidationBatch": {
	          "shape": "S28"
	        }
	      }
	    },
	    "S2e": {
	      "type": "structure",
	      "required": [
	        "CallerReference",
	        "S3Origin",
	        "Comment",
	        "TrustedSigners",
	        "Enabled"
	      ],
	      "members": {
	        "CallerReference": {},
	        "S3Origin": {
	          "shape": "S2f"
	        },
	        "Aliases": {
	          "shape": "S8"
	        },
	        "Comment": {},
	        "Logging": {
	          "type": "structure",
	          "required": [
	            "Enabled",
	            "Bucket",
	            "Prefix"
	          ],
	          "members": {
	            "Enabled": {
	              "type": "boolean"
	            },
	            "Bucket": {},
	            "Prefix": {}
	          }
	        },
	        "TrustedSigners": {
	          "shape": "Sy"
	        },
	        "PriceClass": {},
	        "Enabled": {
	          "type": "boolean"
	        }
	      }
	    },
	    "S2f": {
	      "type": "structure",
	      "required": [
	        "DomainName",
	        "OriginAccessIdentity"
	      ],
	      "members": {
	        "DomainName": {},
	        "OriginAccessIdentity": {}
	      }
	    },
	    "S2i": {
	      "type": "structure",
	      "required": [
	        "Id",
	        "ARN",
	        "Status",
	        "DomainName",
	        "ActiveTrustedSigners",
	        "StreamingDistributionConfig"
	      ],
	      "members": {
	        "Id": {},
	        "ARN": {},
	        "Status": {},
	        "LastModifiedTime": {
	          "type": "timestamp"
	        },
	        "DomainName": {},
	        "ActiveTrustedSigners": {
	          "shape": "S1u"
	        },
	        "StreamingDistributionConfig": {
	          "shape": "S2e"
	        }
	      }
	    },
	    "S3a": {
	      "type": "structure",
	      "required": [
	        "Marker",
	        "MaxItems",
	        "IsTruncated",
	        "Quantity"
	      ],
	      "members": {
	        "Marker": {},
	        "NextMarker": {},
	        "MaxItems": {
	          "type": "integer"
	        },
	        "IsTruncated": {
	          "type": "boolean"
	        },
	        "Quantity": {
	          "type": "integer"
	        },
	        "Items": {
	          "type": "list",
	          "member": {
	            "locationName": "DistributionSummary",
	            "type": "structure",
	            "required": [
	              "Id",
	              "ARN",
	              "Status",
	              "LastModifiedTime",
	              "DomainName",
	              "Aliases",
	              "Origins",
	              "DefaultCacheBehavior",
	              "CacheBehaviors",
	              "CustomErrorResponses",
	              "Comment",
	              "PriceClass",
	              "Enabled",
	              "ViewerCertificate",
	              "Restrictions",
	              "WebACLId",
	              "HttpVersion",
	              "IsIPV6Enabled"
	            ],
	            "members": {
	              "Id": {},
	              "ARN": {},
	              "Status": {},
	              "LastModifiedTime": {
	                "type": "timestamp"
	              },
	              "DomainName": {},
	              "Aliases": {
	                "shape": "S8"
	              },
	              "Origins": {
	                "shape": "Sb"
	              },
	              "DefaultCacheBehavior": {
	                "shape": "Sn"
	              },
	              "CacheBehaviors": {
	                "shape": "S1a"
	              },
	              "CustomErrorResponses": {
	                "shape": "S1d"
	              },
	              "Comment": {},
	              "PriceClass": {},
	              "Enabled": {
	                "type": "boolean"
	              },
	              "ViewerCertificate": {
	                "shape": "S1i"
	              },
	              "Restrictions": {
	                "shape": "S1m"
	              },
	              "WebACLId": {},
	              "HttpVersion": {},
	              "IsIPV6Enabled": {
	                "type": "boolean"
	              }
	            }
	          }
	        }
	      }
	    }
	  }
	}
	},{}],13:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "ListCloudFrontOriginAccessIdentities": {
	      "input_token": "Marker",
	      "output_token": "CloudFrontOriginAccessIdentityList.NextMarker",
	      "limit_key": "MaxItems",
	      "more_results": "CloudFrontOriginAccessIdentityList.IsTruncated",
	      "result_key": "CloudFrontOriginAccessIdentityList.Items"
	    },
	    "ListDistributions": {
	      "input_token": "Marker",
	      "output_token": "DistributionList.NextMarker",
	      "limit_key": "MaxItems",
	      "more_results": "DistributionList.IsTruncated",
	      "result_key": "DistributionList.Items"
	    },
	    "ListInvalidations": {
	      "input_token": "Marker",
	      "output_token": "InvalidationList.NextMarker",
	      "limit_key": "MaxItems",
	      "more_results": "InvalidationList.IsTruncated",
	      "result_key": "InvalidationList.Items"
	    },
	    "ListStreamingDistributions": {
	      "input_token": "Marker",
	      "output_token": "StreamingDistributionList.NextMarker",
	      "limit_key": "MaxItems",
	      "more_results": "StreamingDistributionList.IsTruncated",
	      "result_key": "StreamingDistributionList.Items"
	    }
	  }
	}
	
	},{}],14:[function(require,module,exports){
	module.exports={
	  "version": 2,
	  "waiters": {
	    "DistributionDeployed": {
	      "delay": 60,
	      "operation": "GetDistribution",
	      "maxAttempts": 25,
	      "description": "Wait until a distribution is deployed.",
	      "acceptors": [
	        {
	          "expected": "Deployed",
	          "matcher": "path",
	          "state": "success",
	          "argument": "Distribution.Status"
	        }
	      ]
	    },
	    "InvalidationCompleted": {
	      "delay": 20,
	      "operation": "GetInvalidation",
	      "maxAttempts": 30,
	      "description": "Wait until an invalidation has completed.",
	      "acceptors": [
	        {
	          "expected": "Completed",
	          "matcher": "path",
	          "state": "success",
	          "argument": "Invalidation.Status"
	        }
	      ]
	    },
	    "StreamingDistributionDeployed": {
	      "delay": 60,
	      "operation": "GetStreamingDistribution",
	      "maxAttempts": 25,
	      "description": "Wait until a streaming distribution is deployed.",
	      "acceptors": [
	        {
	          "expected": "Deployed",
	          "matcher": "path",
	          "state": "success",
	          "argument": "StreamingDistribution.Status"
	        }
	      ]
	    }
	  }
	}
	
	},{}],15:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2014-05-30",
	    "endpointPrefix": "cloudhsm",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceAbbreviation": "CloudHSM",
	    "serviceFullName": "Amazon CloudHSM",
	    "signatureVersion": "v4",
	    "targetPrefix": "CloudHsmFrontendService",
	    "uid": "cloudhsm-2014-05-30"
	  },
	  "operations": {
	    "AddTagsToResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceArn",
	          "TagList"
	        ],
	        "members": {
	          "ResourceArn": {},
	          "TagList": {
	            "shape": "S3"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "Status"
	        ],
	        "members": {
	          "Status": {}
	        }
	      }
	    },
	    "CreateHapg": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Label"
	        ],
	        "members": {
	          "Label": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "HapgArn": {}
	        }
	      }
	    },
	    "CreateHsm": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubnetId",
	          "SshKey",
	          "IamRoleArn",
	          "SubscriptionType"
	        ],
	        "members": {
	          "SubnetId": {
	            "locationName": "SubnetId"
	          },
	          "SshKey": {
	            "locationName": "SshKey"
	          },
	          "EniIp": {
	            "locationName": "EniIp"
	          },
	          "IamRoleArn": {
	            "locationName": "IamRoleArn"
	          },
	          "ExternalId": {
	            "locationName": "ExternalId"
	          },
	          "SubscriptionType": {
	            "locationName": "SubscriptionType"
	          },
	          "ClientToken": {
	            "locationName": "ClientToken"
	          },
	          "SyslogIp": {
	            "locationName": "SyslogIp"
	          }
	        },
	        "locationName": "CreateHsmRequest"
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "HsmArn": {}
	        }
	      }
	    },
	    "CreateLunaClient": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Certificate"
	        ],
	        "members": {
	          "Label": {},
	          "Certificate": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ClientArn": {}
	        }
	      }
	    },
	    "DeleteHapg": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "HapgArn"
	        ],
	        "members": {
	          "HapgArn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "Status"
	        ],
	        "members": {
	          "Status": {}
	        }
	      }
	    },
	    "DeleteHsm": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "HsmArn"
	        ],
	        "members": {
	          "HsmArn": {
	            "locationName": "HsmArn"
	          }
	        },
	        "locationName": "DeleteHsmRequest"
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "Status"
	        ],
	        "members": {
	          "Status": {}
	        }
	      }
	    },
	    "DeleteLunaClient": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClientArn"
	        ],
	        "members": {
	          "ClientArn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "Status"
	        ],
	        "members": {
	          "Status": {}
	        }
	      }
	    },
	    "DescribeHapg": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "HapgArn"
	        ],
	        "members": {
	          "HapgArn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "HapgArn": {},
	          "HapgSerial": {},
	          "HsmsLastActionFailed": {
	            "shape": "Sz"
	          },
	          "HsmsPendingDeletion": {
	            "shape": "Sz"
	          },
	          "HsmsPendingRegistration": {
	            "shape": "Sz"
	          },
	          "Label": {},
	          "LastModifiedTimestamp": {},
	          "PartitionSerialList": {
	            "shape": "S11"
	          },
	          "State": {}
	        }
	      }
	    },
	    "DescribeHsm": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "HsmArn": {},
	          "HsmSerialNumber": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "HsmArn": {},
	          "Status": {},
	          "StatusDetails": {},
	          "AvailabilityZone": {},
	          "EniId": {},
	          "EniIp": {},
	          "SubscriptionType": {},
	          "SubscriptionStartDate": {},
	          "SubscriptionEndDate": {},
	          "VpcId": {},
	          "SubnetId": {},
	          "IamRoleArn": {},
	          "SerialNumber": {},
	          "VendorName": {},
	          "HsmType": {},
	          "SoftwareVersion": {},
	          "SshPublicKey": {},
	          "SshKeyLastUpdated": {},
	          "ServerCertUri": {},
	          "ServerCertLastUpdated": {},
	          "Partitions": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      }
	    },
	    "DescribeLunaClient": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ClientArn": {},
	          "CertificateFingerprint": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ClientArn": {},
	          "Certificate": {},
	          "CertificateFingerprint": {},
	          "LastModifiedTimestamp": {},
	          "Label": {}
	        }
	      }
	    },
	    "GetConfig": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClientArn",
	          "ClientVersion",
	          "HapgList"
	        ],
	        "members": {
	          "ClientArn": {},
	          "ClientVersion": {},
	          "HapgList": {
	            "shape": "S1i"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ConfigType": {},
	          "ConfigFile": {},
	          "ConfigCred": {}
	        }
	      }
	    },
	    "ListAvailableZones": {
	      "input": {
	        "type": "structure",
	        "members": {}
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "AZList": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      }
	    },
	    "ListHapgs": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "HapgList"
	        ],
	        "members": {
	          "HapgList": {
	            "shape": "S1i"
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListHsms": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "HsmList": {
	            "shape": "Sz"
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListLunaClients": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "ClientList"
	        ],
	        "members": {
	          "ClientList": {
	            "type": "list",
	            "member": {}
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListTagsForResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceArn"
	        ],
	        "members": {
	          "ResourceArn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "TagList"
	        ],
	        "members": {
	          "TagList": {
	            "shape": "S3"
	          }
	        }
	      }
	    },
	    "ModifyHapg": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "HapgArn"
	        ],
	        "members": {
	          "HapgArn": {},
	          "Label": {},
	          "PartitionSerialList": {
	            "shape": "S11"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "HapgArn": {}
	        }
	      }
	    },
	    "ModifyHsm": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "HsmArn"
	        ],
	        "members": {
	          "HsmArn": {
	            "locationName": "HsmArn"
	          },
	          "SubnetId": {
	            "locationName": "SubnetId"
	          },
	          "EniIp": {
	            "locationName": "EniIp"
	          },
	          "IamRoleArn": {
	            "locationName": "IamRoleArn"
	          },
	          "ExternalId": {
	            "locationName": "ExternalId"
	          },
	          "SyslogIp": {
	            "locationName": "SyslogIp"
	          }
	        },
	        "locationName": "ModifyHsmRequest"
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "HsmArn": {}
	        }
	      }
	    },
	    "ModifyLunaClient": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClientArn",
	          "Certificate"
	        ],
	        "members": {
	          "ClientArn": {},
	          "Certificate": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ClientArn": {}
	        }
	      }
	    },
	    "RemoveTagsFromResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceArn",
	          "TagKeyList"
	        ],
	        "members": {
	          "ResourceArn": {},
	          "TagKeyList": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "Status"
	        ],
	        "members": {
	          "Status": {}
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S3": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "Key",
	          "Value"
	        ],
	        "members": {
	          "Key": {},
	          "Value": {}
	        }
	      }
	    },
	    "Sz": {
	      "type": "list",
	      "member": {}
	    },
	    "S11": {
	      "type": "list",
	      "member": {}
	    },
	    "S1i": {
	      "type": "list",
	      "member": {}
	    }
	  }
	}
	},{}],16:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2013-11-01",
	    "endpointPrefix": "cloudtrail",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceAbbreviation": "CloudTrail",
	    "serviceFullName": "AWS CloudTrail",
	    "signatureVersion": "v4",
	    "targetPrefix": "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101",
	    "uid": "cloudtrail-2013-11-01"
	  },
	  "operations": {
	    "AddTags": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceId"
	        ],
	        "members": {
	          "ResourceId": {},
	          "TagsList": {
	            "shape": "S3"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      },
	      "idempotent": true
	    },
	    "CreateTrail": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "S3BucketName"
	        ],
	        "members": {
	          "Name": {},
	          "S3BucketName": {},
	          "S3KeyPrefix": {},
	          "SnsTopicName": {},
	          "IncludeGlobalServiceEvents": {
	            "type": "boolean"
	          },
	          "IsMultiRegionTrail": {
	            "type": "boolean"
	          },
	          "EnableLogFileValidation": {
	            "type": "boolean"
	          },
	          "CloudWatchLogsLogGroupArn": {},
	          "CloudWatchLogsRoleArn": {},
	          "KmsKeyId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Name": {},
	          "S3BucketName": {},
	          "S3KeyPrefix": {},
	          "SnsTopicName": {
	            "deprecated": true
	          },
	          "SnsTopicARN": {},
	          "IncludeGlobalServiceEvents": {
	            "type": "boolean"
	          },
	          "IsMultiRegionTrail": {
	            "type": "boolean"
	          },
	          "TrailARN": {},
	          "LogFileValidationEnabled": {
	            "type": "boolean"
	          },
	          "CloudWatchLogsLogGroupArn": {},
	          "CloudWatchLogsRoleArn": {},
	          "KmsKeyId": {}
	        }
	      },
	      "idempotent": true
	    },
	    "DeleteTrail": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name"
	        ],
	        "members": {
	          "Name": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      },
	      "idempotent": true
	    },
	    "DescribeTrails": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "trailNameList": {
	            "type": "list",
	            "member": {}
	          },
	          "includeShadowTrails": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "trailList": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Name": {},
	                "S3BucketName": {},
	                "S3KeyPrefix": {},
	                "SnsTopicName": {
	                  "deprecated": true
	                },
	                "SnsTopicARN": {},
	                "IncludeGlobalServiceEvents": {
	                  "type": "boolean"
	                },
	                "IsMultiRegionTrail": {
	                  "type": "boolean"
	                },
	                "HomeRegion": {},
	                "TrailARN": {},
	                "LogFileValidationEnabled": {
	                  "type": "boolean"
	                },
	                "CloudWatchLogsLogGroupArn": {},
	                "CloudWatchLogsRoleArn": {},
	                "KmsKeyId": {},
	                "HasCustomEventSelectors": {
	                  "type": "boolean"
	                }
	              }
	            }
	          }
	        }
	      },
	      "idempotent": true
	    },
	    "GetEventSelectors": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "TrailName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "TrailARN": {},
	          "EventSelectors": {
	            "shape": "Si"
	          }
	        }
	      },
	      "idempotent": true
	    },
	    "GetTrailStatus": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name"
	        ],
	        "members": {
	          "Name": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "IsLogging": {
	            "type": "boolean"
	          },
	          "LatestDeliveryError": {},
	          "LatestNotificationError": {},
	          "LatestDeliveryTime": {
	            "type": "timestamp"
	          },
	          "LatestNotificationTime": {
	            "type": "timestamp"
	          },
	          "StartLoggingTime": {
	            "type": "timestamp"
	          },
	          "StopLoggingTime": {
	            "type": "timestamp"
	          },
	          "LatestCloudWatchLogsDeliveryError": {},
	          "LatestCloudWatchLogsDeliveryTime": {
	            "type": "timestamp"
	          },
	          "LatestDigestDeliveryTime": {
	            "type": "timestamp"
	          },
	          "LatestDigestDeliveryError": {},
	          "LatestDeliveryAttemptTime": {},
	          "LatestNotificationAttemptTime": {},
	          "LatestNotificationAttemptSucceeded": {},
	          "LatestDeliveryAttemptSucceeded": {},
	          "TimeLoggingStarted": {},
	          "TimeLoggingStopped": {}
	        }
	      },
	      "idempotent": true
	    },
	    "ListPublicKeys": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "StartTime": {
	            "type": "timestamp"
	          },
	          "EndTime": {
	            "type": "timestamp"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "PublicKeyList": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Value": {
	                  "type": "blob"
	                },
	                "ValidityStartTime": {
	                  "type": "timestamp"
	                },
	                "ValidityEndTime": {
	                  "type": "timestamp"
	                },
	                "Fingerprint": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      },
	      "idempotent": true
	    },
	    "ListTags": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceIdList"
	        ],
	        "members": {
	          "ResourceIdList": {
	            "type": "list",
	            "member": {}
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ResourceTagList": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "ResourceId": {},
	                "TagsList": {
	                  "shape": "S3"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      },
	      "idempotent": true
	    },
	    "LookupEvents": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "LookupAttributes": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "AttributeKey",
	                "AttributeValue"
	              ],
	              "members": {
	                "AttributeKey": {},
	                "AttributeValue": {}
	              }
	            }
	          },
	          "StartTime": {
	            "type": "timestamp"
	          },
	          "EndTime": {
	            "type": "timestamp"
	          },
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Events": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "EventId": {},
	                "EventName": {},
	                "EventTime": {
	                  "type": "timestamp"
	                },
	                "EventSource": {},
	                "Username": {},
	                "Resources": {
	                  "type": "list",
	                  "member": {
	                    "type": "structure",
	                    "members": {
	                      "ResourceType": {},
	                      "ResourceName": {}
	                    }
	                  }
	                },
	                "CloudTrailEvent": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      },
	      "idempotent": true
	    },
	    "PutEventSelectors": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "TrailName": {},
	          "EventSelectors": {
	            "shape": "Si"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "TrailARN": {},
	          "EventSelectors": {
	            "shape": "Si"
	          }
	        }
	      },
	      "idempotent": true
	    },
	    "RemoveTags": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceId"
	        ],
	        "members": {
	          "ResourceId": {},
	          "TagsList": {
	            "shape": "S3"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      },
	      "idempotent": true
	    },
	    "StartLogging": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name"
	        ],
	        "members": {
	          "Name": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      },
	      "idempotent": true
	    },
	    "StopLogging": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name"
	        ],
	        "members": {
	          "Name": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      },
	      "idempotent": true
	    },
	    "UpdateTrail": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name"
	        ],
	        "members": {
	          "Name": {},
	          "S3BucketName": {},
	          "S3KeyPrefix": {},
	          "SnsTopicName": {},
	          "IncludeGlobalServiceEvents": {
	            "type": "boolean"
	          },
	          "IsMultiRegionTrail": {
	            "type": "boolean"
	          },
	          "EnableLogFileValidation": {
	            "type": "boolean"
	          },
	          "CloudWatchLogsLogGroupArn": {},
	          "CloudWatchLogsRoleArn": {},
	          "KmsKeyId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Name": {},
	          "S3BucketName": {},
	          "S3KeyPrefix": {},
	          "SnsTopicName": {
	            "deprecated": true
	          },
	          "SnsTopicARN": {},
	          "IncludeGlobalServiceEvents": {
	            "type": "boolean"
	          },
	          "IsMultiRegionTrail": {
	            "type": "boolean"
	          },
	          "TrailARN": {},
	          "LogFileValidationEnabled": {
	            "type": "boolean"
	          },
	          "CloudWatchLogsLogGroupArn": {},
	          "CloudWatchLogsRoleArn": {},
	          "KmsKeyId": {}
	        }
	      },
	      "idempotent": true
	    }
	  },
	  "shapes": {
	    "S3": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "Key"
	        ],
	        "members": {
	          "Key": {},
	          "Value": {}
	        }
	      }
	    },
	    "Si": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "ReadWriteType": {},
	          "IncludeManagementEvents": {
	            "type": "boolean"
	          },
	          "DataResources": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Type": {},
	                "Values": {
	                  "type": "list",
	                  "member": {}
	                }
	              }
	            }
	          }
	        }
	      }
	    }
	  }
	}
	},{}],17:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "DescribeTrails": {
	      "result_key": "trailList"
	    },
	    "LookupEvents": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "limit_key": "MaxResults",
	      "result_key": "Events"
	    }
	  }
	}
	
	},{}],18:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2015-04-13",
	    "endpointPrefix": "codecommit",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceAbbreviation": "CodeCommit",
	    "serviceFullName": "AWS CodeCommit",
	    "signatureVersion": "v4",
	    "targetPrefix": "CodeCommit_20150413",
	    "uid": "codecommit-2015-04-13"
	  },
	  "operations": {
	    "BatchGetRepositories": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "repositoryNames"
	        ],
	        "members": {
	          "repositoryNames": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "repositories": {
	            "type": "list",
	            "member": {
	              "shape": "S6"
	            }
	          },
	          "repositoriesNotFound": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      }
	    },
	    "CreateBranch": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "repositoryName",
	          "branchName",
	          "commitId"
	        ],
	        "members": {
	          "repositoryName": {},
	          "branchName": {},
	          "commitId": {}
	        }
	      }
	    },
	    "CreateRepository": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "repositoryName"
	        ],
	        "members": {
	          "repositoryName": {},
	          "repositoryDescription": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "repositoryMetadata": {
	            "shape": "S6"
	          }
	        }
	      }
	    },
	    "DeleteRepository": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "repositoryName"
	        ],
	        "members": {
	          "repositoryName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "repositoryId": {}
	        }
	      }
	    },
	    "GetBlob": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "repositoryName",
	          "blobId"
	        ],
	        "members": {
	          "repositoryName": {},
	          "blobId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "content"
	        ],
	        "members": {
	          "content": {
	            "type": "blob"
	          }
	        }
	      }
	    },
	    "GetBranch": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "repositoryName": {},
	          "branchName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "branch": {
	            "type": "structure",
	            "members": {
	              "branchName": {},
	              "commitId": {}
	            }
	          }
	        }
	      }
	    },
	    "GetCommit": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "repositoryName",
	          "commitId"
	        ],
	        "members": {
	          "repositoryName": {},
	          "commitId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "commit"
	        ],
	        "members": {
	          "commit": {
	            "type": "structure",
	            "members": {
	              "treeId": {},
	              "parents": {
	                "type": "list",
	                "member": {}
	              },
	              "message": {},
	              "author": {
	                "shape": "Sz"
	              },
	              "committer": {
	                "shape": "Sz"
	              },
	              "additionalData": {}
	            }
	          }
	        }
	      }
	    },
	    "GetDifferences": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "repositoryName",
	          "afterCommitSpecifier"
	        ],
	        "members": {
	          "repositoryName": {},
	          "beforeCommitSpecifier": {},
	          "afterCommitSpecifier": {},
	          "beforePath": {},
	          "afterPath": {},
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "differences": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "beforeBlob": {
	                  "shape": "S1c"
	                },
	                "afterBlob": {
	                  "shape": "S1c"
	                },
	                "changeType": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "GetRepository": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "repositoryName"
	        ],
	        "members": {
	          "repositoryName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "repositoryMetadata": {
	            "shape": "S6"
	          }
	        }
	      }
	    },
	    "GetRepositoryTriggers": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "repositoryName"
	        ],
	        "members": {
	          "repositoryName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "configurationId": {},
	          "triggers": {
	            "shape": "S1k"
	          }
	        }
	      }
	    },
	    "ListBranches": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "repositoryName"
	        ],
	        "members": {
	          "repositoryName": {},
	          "nextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "branches": {
	            "shape": "S1o"
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListRepositories": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "nextToken": {},
	          "sortBy": {},
	          "order": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "repositories": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "repositoryName": {},
	                "repositoryId": {}
	              }
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "PutRepositoryTriggers": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "repositoryName",
	          "triggers"
	        ],
	        "members": {
	          "repositoryName": {},
	          "triggers": {
	            "shape": "S1k"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "configurationId": {}
	        }
	      }
	    },
	    "TestRepositoryTriggers": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "repositoryName",
	          "triggers"
	        ],
	        "members": {
	          "repositoryName": {},
	          "triggers": {
	            "shape": "S1k"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "successfulExecutions": {
	            "type": "list",
	            "member": {}
	          },
	          "failedExecutions": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "trigger": {},
	                "failureMessage": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "UpdateDefaultBranch": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "repositoryName",
	          "defaultBranchName"
	        ],
	        "members": {
	          "repositoryName": {},
	          "defaultBranchName": {}
	        }
	      }
	    },
	    "UpdateRepositoryDescription": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "repositoryName"
	        ],
	        "members": {
	          "repositoryName": {},
	          "repositoryDescription": {}
	        }
	      }
	    },
	    "UpdateRepositoryName": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "oldName",
	          "newName"
	        ],
	        "members": {
	          "oldName": {},
	          "newName": {}
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S6": {
	      "type": "structure",
	      "members": {
	        "accountId": {},
	        "repositoryId": {},
	        "repositoryName": {},
	        "repositoryDescription": {},
	        "defaultBranch": {},
	        "lastModifiedDate": {
	          "type": "timestamp"
	        },
	        "creationDate": {
	          "type": "timestamp"
	        },
	        "cloneUrlHttp": {},
	        "cloneUrlSsh": {},
	        "Arn": {}
	      }
	    },
	    "Sz": {
	      "type": "structure",
	      "members": {
	        "name": {},
	        "email": {},
	        "date": {}
	      }
	    },
	    "S1c": {
	      "type": "structure",
	      "members": {
	        "blobId": {},
	        "path": {},
	        "mode": {}
	      }
	    },
	    "S1k": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "name",
	          "destinationArn",
	          "events"
	        ],
	        "members": {
	          "name": {},
	          "destinationArn": {},
	          "customData": {},
	          "branches": {
	            "shape": "S1o"
	          },
	          "events": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      }
	    },
	    "S1o": {
	      "type": "list",
	      "member": {}
	    }
	  }
	}
	},{}],19:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "GetDifferences": {
	      "input_token": "NextToken",
	      "limit_key": "MaxResults",
	      "output_token": "NextToken"
	    },
	    "ListBranches": {
	      "input_token": "nextToken",
	      "output_token": "nextToken",
	      "result_key": "branches"
	    },
	    "ListRepositories": {
	      "input_token": "nextToken",
	      "output_token": "nextToken",
	      "result_key": "repositories"
	    }
	  }
	}
	},{}],20:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2014-10-06",
	    "endpointPrefix": "codedeploy",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceAbbreviation": "CodeDeploy",
	    "serviceFullName": "AWS CodeDeploy",
	    "signatureVersion": "v4",
	    "targetPrefix": "CodeDeploy_20141006",
	    "timestampFormat": "unixTimestamp",
	    "uid": "codedeploy-2014-10-06"
	  },
	  "operations": {
	    "AddTagsToOnPremisesInstances": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "tags",
	          "instanceNames"
	        ],
	        "members": {
	          "tags": {
	            "shape": "S2"
	          },
	          "instanceNames": {
	            "shape": "S6"
	          }
	        }
	      }
	    },
	    "BatchGetApplicationRevisions": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "applicationName",
	          "revisions"
	        ],
	        "members": {
	          "applicationName": {},
	          "revisions": {
	            "shape": "Sa"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "applicationName": {},
	          "errorMessage": {},
	          "revisions": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "revisionLocation": {
	                  "shape": "Sb"
	                },
	                "genericRevisionInfo": {
	                  "shape": "Sq"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "BatchGetApplications": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "applicationNames": {
	            "shape": "Sw"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "applicationsInfo": {
	            "type": "list",
	            "member": {
	              "shape": "Sz"
	            }
	          }
	        }
	      }
	    },
	    "BatchGetDeploymentGroups": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "applicationName",
	          "deploymentGroupNames"
	        ],
	        "members": {
	          "applicationName": {},
	          "deploymentGroupNames": {
	            "shape": "Ss"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "deploymentGroupsInfo": {
	            "type": "list",
	            "member": {
	              "shape": "S15"
	            }
	          },
	          "errorMessage": {}
	        }
	      }
	    },
	    "BatchGetDeploymentInstances": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "deploymentId",
	          "instanceIds"
	        ],
	        "members": {
	          "deploymentId": {},
	          "instanceIds": {
	            "shape": "S2d"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "instancesSummary": {
	            "type": "list",
	            "member": {
	              "shape": "S2h"
	            }
	          },
	          "errorMessage": {}
	        }
	      }
	    },
	    "BatchGetDeployments": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "deploymentIds": {
	            "shape": "S2u"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "deploymentsInfo": {
	            "type": "list",
	            "member": {
	              "shape": "S2x"
	            }
	          }
	        }
	      }
	    },
	    "BatchGetOnPremisesInstances": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "instanceNames": {
	            "shape": "S6"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "instanceInfos": {
	            "type": "list",
	            "member": {
	              "shape": "S3b"
	            }
	          }
	        }
	      }
	    },
	    "ContinueDeployment": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "deploymentId": {}
	        }
	      }
	    },
	    "CreateApplication": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "applicationName"
	        ],
	        "members": {
	          "applicationName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "applicationId": {}
	        }
	      }
	    },
	    "CreateDeployment": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "applicationName"
	        ],
	        "members": {
	          "applicationName": {},
	          "deploymentGroupName": {},
	          "revision": {
	            "shape": "Sb"
	          },
	          "deploymentConfigName": {},
	          "description": {},
	          "ignoreApplicationStopFailures": {
	            "type": "boolean"
	          },
	          "targetInstances": {
	            "shape": "S35"
	          },
	          "autoRollbackConfiguration": {
	            "shape": "S1t"
	          },
	          "updateOutdatedInstancesOnly": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "deploymentId": {}
	        }
	      }
	    },
	    "CreateDeploymentConfig": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "deploymentConfigName"
	        ],
	        "members": {
	          "deploymentConfigName": {},
	          "minimumHealthyHosts": {
	            "shape": "S3l"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "deploymentConfigId": {}
	        }
	      }
	    },
	    "CreateDeploymentGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "applicationName",
	          "deploymentGroupName",
	          "serviceRoleArn"
	        ],
	        "members": {
	          "applicationName": {},
	          "deploymentGroupName": {},
	          "deploymentConfigName": {},
	          "ec2TagFilters": {
	            "shape": "S18"
	          },
	          "onPremisesInstanceTagFilters": {
	            "shape": "S1b"
	          },
	          "autoScalingGroups": {
	            "shape": "S36"
	          },
	          "serviceRoleArn": {},
	          "triggerConfigurations": {
	            "shape": "S1j"
	          },
	          "alarmConfiguration": {
	            "shape": "S1p"
	          },
	          "autoRollbackConfiguration": {
	            "shape": "S1t"
	          },
	          "deploymentStyle": {
	            "shape": "S1w"
	          },
	          "blueGreenDeploymentConfiguration": {
	            "shape": "S1z"
	          },
	          "loadBalancerInfo": {
	            "shape": "S27"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "deploymentGroupId": {}
	        }
	      }
	    },
	    "DeleteApplication": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "applicationName"
	        ],
	        "members": {
	          "applicationName": {}
	        }
	      }
	    },
	    "DeleteDeploymentConfig": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "deploymentConfigName"
	        ],
	        "members": {
	          "deploymentConfigName": {}
	        }
	      }
	    },
	    "DeleteDeploymentGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "applicationName",
	          "deploymentGroupName"
	        ],
	        "members": {
	          "applicationName": {},
	          "deploymentGroupName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "hooksNotCleanedUp": {
	            "shape": "S1e"
	          }
	        }
	      }
	    },
	    "DeregisterOnPremisesInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "instanceName"
	        ],
	        "members": {
	          "instanceName": {}
	        }
	      }
	    },
	    "GetApplication": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "applicationName"
	        ],
	        "members": {
	          "applicationName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "application": {
	            "shape": "Sz"
	          }
	        }
	      }
	    },
	    "GetApplicationRevision": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "applicationName",
	          "revision"
	        ],
	        "members": {
	          "applicationName": {},
	          "revision": {
	            "shape": "Sb"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "applicationName": {},
	          "revision": {
	            "shape": "Sb"
	          },
	          "revisionInfo": {
	            "shape": "Sq"
	          }
	        }
	      }
	    },
	    "GetDeployment": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "deploymentId"
	        ],
	        "members": {
	          "deploymentId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "deploymentInfo": {
	            "shape": "S2x"
	          }
	        }
	      }
	    },
	    "GetDeploymentConfig": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "deploymentConfigName"
	        ],
	        "members": {
	          "deploymentConfigName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "deploymentConfigInfo": {
	            "type": "structure",
	            "members": {
	              "deploymentConfigId": {},
	              "deploymentConfigName": {},
	              "minimumHealthyHosts": {
	                "shape": "S3l"
	              },
	              "createTime": {
	                "type": "timestamp"
	              }
	            }
	          }
	        }
	      }
	    },
	    "GetDeploymentGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "applicationName",
	          "deploymentGroupName"
	        ],
	        "members": {
	          "applicationName": {},
	          "deploymentGroupName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "deploymentGroupInfo": {
	            "shape": "S15"
	          }
	        }
	      }
	    },
	    "GetDeploymentInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "deploymentId",
	          "instanceId"
	        ],
	        "members": {
	          "deploymentId": {},
	          "instanceId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "instanceSummary": {
	            "shape": "S2h"
	          }
	        }
	      }
	    },
	    "GetOnPremisesInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "instanceName"
	        ],
	        "members": {
	          "instanceName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "instanceInfo": {
	            "shape": "S3b"
	          }
	        }
	      }
	    },
	    "ListApplicationRevisions": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "applicationName"
	        ],
	        "members": {
	          "applicationName": {},
	          "sortBy": {},
	          "sortOrder": {},
	          "s3Bucket": {},
	          "s3KeyPrefix": {},
	          "deployed": {},
	          "nextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "revisions": {
	            "shape": "Sa"
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListApplications": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "nextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "applications": {
	            "shape": "Sw"
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListDeploymentConfigs": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "nextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "deploymentConfigsList": {
	            "type": "list",
	            "member": {}
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListDeploymentGroups": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "applicationName"
	        ],
	        "members": {
	          "applicationName": {},
	          "nextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "applicationName": {},
	          "deploymentGroups": {
	            "shape": "Ss"
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListDeploymentInstances": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "deploymentId"
	        ],
	        "members": {
	          "deploymentId": {},
	          "nextToken": {},
	          "instanceStatusFilter": {
	            "type": "list",
	            "member": {}
	          },
	          "instanceTypeFilter": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "instancesList": {
	            "shape": "S2d"
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListDeployments": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "applicationName": {},
	          "deploymentGroupName": {},
	          "includeOnlyStatuses": {
	            "type": "list",
	            "member": {}
	          },
	          "createTimeRange": {
	            "type": "structure",
	            "members": {
	              "start": {
	                "type": "timestamp"
	              },
	              "end": {
	                "type": "timestamp"
	              }
	            }
	          },
	          "nextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "deployments": {
	            "shape": "S2u"
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListOnPremisesInstances": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "registrationStatus": {},
	          "tagFilters": {
	            "shape": "S1b"
	          },
	          "nextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "instanceNames": {
	            "shape": "S6"
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "RegisterApplicationRevision": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "applicationName",
	          "revision"
	        ],
	        "members": {
	          "applicationName": {},
	          "description": {},
	          "revision": {
	            "shape": "Sb"
	          }
	        }
	      }
	    },
	    "RegisterOnPremisesInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "instanceName"
	        ],
	        "members": {
	          "instanceName": {},
	          "iamSessionArn": {},
	          "iamUserArn": {}
	        }
	      }
	    },
	    "RemoveTagsFromOnPremisesInstances": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "tags",
	          "instanceNames"
	        ],
	        "members": {
	          "tags": {
	            "shape": "S2"
	          },
	          "instanceNames": {
	            "shape": "S6"
	          }
	        }
	      }
	    },
	    "SkipWaitTimeForInstanceTermination": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "deploymentId": {}
	        }
	      }
	    },
	    "StopDeployment": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "deploymentId"
	        ],
	        "members": {
	          "deploymentId": {},
	          "autoRollbackEnabled": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "status": {},
	          "statusMessage": {}
	        }
	      }
	    },
	    "UpdateApplication": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "applicationName": {},
	          "newApplicationName": {}
	        }
	      }
	    },
	    "UpdateDeploymentGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "applicationName",
	          "currentDeploymentGroupName"
	        ],
	        "members": {
	          "applicationName": {},
	          "currentDeploymentGroupName": {},
	          "newDeploymentGroupName": {},
	          "deploymentConfigName": {},
	          "ec2TagFilters": {
	            "shape": "S18"
	          },
	          "onPremisesInstanceTagFilters": {
	            "shape": "S1b"
	          },
	          "autoScalingGroups": {
	            "shape": "S36"
	          },
	          "serviceRoleArn": {},
	          "triggerConfigurations": {
	            "shape": "S1j"
	          },
	          "alarmConfiguration": {
	            "shape": "S1p"
	          },
	          "autoRollbackConfiguration": {
	            "shape": "S1t"
	          },
	          "deploymentStyle": {
	            "shape": "S1w"
	          },
	          "blueGreenDeploymentConfiguration": {
	            "shape": "S1z"
	          },
	          "loadBalancerInfo": {
	            "shape": "S27"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "hooksNotCleanedUp": {
	            "shape": "S1e"
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S2": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "Key": {},
	          "Value": {}
	        }
	      }
	    },
	    "S6": {
	      "type": "list",
	      "member": {}
	    },
	    "Sa": {
	      "type": "list",
	      "member": {
	        "shape": "Sb"
	      }
	    },
	    "Sb": {
	      "type": "structure",
	      "members": {
	        "revisionType": {},
	        "s3Location": {
	          "type": "structure",
	          "members": {
	            "bucket": {},
	            "key": {},
	            "bundleType": {},
	            "version": {},
	            "eTag": {}
	          }
	        },
	        "gitHubLocation": {
	          "type": "structure",
	          "members": {
	            "repository": {},
	            "commitId": {}
	          }
	        }
	      }
	    },
	    "Sq": {
	      "type": "structure",
	      "members": {
	        "description": {},
	        "deploymentGroups": {
	          "shape": "Ss"
	        },
	        "firstUsedTime": {
	          "type": "timestamp"
	        },
	        "lastUsedTime": {
	          "type": "timestamp"
	        },
	        "registerTime": {
	          "type": "timestamp"
	        }
	      }
	    },
	    "Ss": {
	      "type": "list",
	      "member": {}
	    },
	    "Sw": {
	      "type": "list",
	      "member": {}
	    },
	    "Sz": {
	      "type": "structure",
	      "members": {
	        "applicationId": {},
	        "applicationName": {},
	        "createTime": {
	          "type": "timestamp"
	        },
	        "linkedToGitHub": {
	          "type": "boolean"
	        }
	      }
	    },
	    "S15": {
	      "type": "structure",
	      "members": {
	        "applicationName": {},
	        "deploymentGroupId": {},
	        "deploymentGroupName": {},
	        "deploymentConfigName": {},
	        "ec2TagFilters": {
	          "shape": "S18"
	        },
	        "onPremisesInstanceTagFilters": {
	          "shape": "S1b"
	        },
	        "autoScalingGroups": {
	          "shape": "S1e"
	        },
	        "serviceRoleArn": {},
	        "targetRevision": {
	          "shape": "Sb"
	        },
	        "triggerConfigurations": {
	          "shape": "S1j"
	        },
	        "alarmConfiguration": {
	          "shape": "S1p"
	        },
	        "autoRollbackConfiguration": {
	          "shape": "S1t"
	        },
	        "deploymentStyle": {
	          "shape": "S1w"
	        },
	        "blueGreenDeploymentConfiguration": {
	          "shape": "S1z"
	        },
	        "loadBalancerInfo": {
	          "shape": "S27"
	        }
	      }
	    },
	    "S18": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "Key": {},
	          "Value": {},
	          "Type": {}
	        }
	      }
	    },
	    "S1b": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "Key": {},
	          "Value": {},
	          "Type": {}
	        }
	      }
	    },
	    "S1e": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "name": {},
	          "hook": {}
	        }
	      }
	    },
	    "S1j": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "triggerName": {},
	          "triggerTargetArn": {},
	          "triggerEvents": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      }
	    },
	    "S1p": {
	      "type": "structure",
	      "members": {
	        "enabled": {
	          "type": "boolean"
	        },
	        "ignorePollAlarmFailure": {
	          "type": "boolean"
	        },
	        "alarms": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "members": {
	              "name": {}
	            }
	          }
	        }
	      }
	    },
	    "S1t": {
	      "type": "structure",
	      "members": {
	        "enabled": {
	          "type": "boolean"
	        },
	        "events": {
	          "type": "list",
	          "member": {}
	        }
	      }
	    },
	    "S1w": {
	      "type": "structure",
	      "members": {
	        "deploymentType": {},
	        "deploymentOption": {}
	      }
	    },
	    "S1z": {
	      "type": "structure",
	      "members": {
	        "terminateBlueInstancesOnDeploymentSuccess": {
	          "type": "structure",
	          "members": {
	            "action": {},
	            "terminationWaitTimeInMinutes": {
	              "type": "integer"
	            }
	          }
	        },
	        "deploymentReadyOption": {
	          "type": "structure",
	          "members": {
	            "actionOnTimeout": {},
	            "waitTimeInMinutes": {
	              "type": "integer"
	            }
	          }
	        },
	        "greenFleetProvisioningOption": {
	          "type": "structure",
	          "members": {
	            "action": {}
	          }
	        }
	      }
	    },
	    "S27": {
	      "type": "structure",
	      "members": {
	        "elbInfoList": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "members": {
	              "name": {}
	            }
	          }
	        }
	      }
	    },
	    "S2d": {
	      "type": "list",
	      "member": {}
	    },
	    "S2h": {
	      "type": "structure",
	      "members": {
	        "deploymentId": {},
	        "instanceId": {},
	        "status": {},
	        "lastUpdatedAt": {
	          "type": "timestamp"
	        },
	        "lifecycleEvents": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "members": {
	              "lifecycleEventName": {},
	              "diagnostics": {
	                "type": "structure",
	                "members": {
	                  "errorCode": {},
	                  "scriptName": {},
	                  "message": {},
	                  "logTail": {}
	                }
	              },
	              "startTime": {
	                "type": "timestamp"
	              },
	              "endTime": {
	                "type": "timestamp"
	              },
	              "status": {}
	            }
	          }
	        },
	        "instanceType": {}
	      }
	    },
	    "S2u": {
	      "type": "list",
	      "member": {}
	    },
	    "S2x": {
	      "type": "structure",
	      "members": {
	        "applicationName": {},
	        "deploymentGroupName": {},
	        "deploymentConfigName": {},
	        "deploymentId": {},
	        "revision": {
	          "shape": "Sb"
	        },
	        "status": {},
	        "errorInformation": {
	          "type": "structure",
	          "members": {
	            "code": {},
	            "message": {}
	          }
	        },
	        "createTime": {
	          "type": "timestamp"
	        },
	        "startTime": {
	          "type": "timestamp"
	        },
	        "completeTime": {
	          "type": "timestamp"
	        },
	        "deploymentOverview": {
	          "type": "structure",
	          "members": {
	            "Pending": {
	              "type": "long"
	            },
	            "InProgress": {
	              "type": "long"
	            },
	            "Succeeded": {
	              "type": "long"
	            },
	            "Failed": {
	              "type": "long"
	            },
	            "Skipped": {
	              "type": "long"
	            },
	            "Ready": {
	              "type": "long"
	            }
	          }
	        },
	        "description": {},
	        "creator": {},
	        "ignoreApplicationStopFailures": {
	          "type": "boolean"
	        },
	        "autoRollbackConfiguration": {
	          "shape": "S1t"
	        },
	        "updateOutdatedInstancesOnly": {
	          "type": "boolean"
	        },
	        "rollbackInfo": {
	          "type": "structure",
	          "members": {
	            "rollbackDeploymentId": {},
	            "rollbackTriggeringDeploymentId": {},
	            "rollbackMessage": {}
	          }
	        },
	        "deploymentStyle": {
	          "shape": "S1w"
	        },
	        "targetInstances": {
	          "shape": "S35"
	        },
	        "instanceTerminationWaitTimeStarted": {
	          "type": "boolean"
	        },
	        "blueGreenDeploymentConfiguration": {
	          "shape": "S1z"
	        },
	        "loadBalancerInfo": {
	          "shape": "S27"
	        },
	        "additionalDeploymentStatusInfo": {}
	      }
	    },
	    "S35": {
	      "type": "structure",
	      "members": {
	        "tagFilters": {
	          "shape": "S18"
	        },
	        "autoScalingGroups": {
	          "shape": "S36"
	        }
	      }
	    },
	    "S36": {
	      "type": "list",
	      "member": {}
	    },
	    "S3b": {
	      "type": "structure",
	      "members": {
	        "instanceName": {},
	        "iamSessionArn": {},
	        "iamUserArn": {},
	        "instanceArn": {},
	        "registerTime": {
	          "type": "timestamp"
	        },
	        "deregisterTime": {
	          "type": "timestamp"
	        },
	        "tags": {
	          "shape": "S2"
	        }
	      }
	    },
	    "S3l": {
	      "type": "structure",
	      "members": {
	        "value": {
	          "type": "integer"
	        },
	        "type": {}
	      }
	    }
	  }
	}
	},{}],21:[function(require,module,exports){
	module.exports={
	  "pagination": {
	  }
	}
	
	},{}],22:[function(require,module,exports){
	module.exports={
	  "version": 2,
	  "waiters": {
	    "DeploymentSuccessful": {
	      "delay": 15,
	      "operation": "GetDeployment",
	      "maxAttempts": 120,
	      "acceptors": [
	        {
	          "expected": "Succeeded",
	          "matcher": "path",
	          "state": "success",
	          "argument": "deploymentInfo.status"
	        },
	        {
	          "expected": "Failed",
	          "matcher": "path",
	          "state": "failure",
	          "argument": "deploymentInfo.status"
	        },
	        {
	          "expected": "Stopped",
	          "matcher": "path",
	          "state": "failure",
	          "argument": "deploymentInfo.status"
	        }
	      ]
	    }
	  }
	}
	
	},{}],23:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2015-07-09",
	    "endpointPrefix": "codepipeline",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceAbbreviation": "CodePipeline",
	    "serviceFullName": "AWS CodePipeline",
	    "signatureVersion": "v4",
	    "targetPrefix": "CodePipeline_20150709",
	    "uid": "codepipeline-2015-07-09"
	  },
	  "operations": {
	    "AcknowledgeJob": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "jobId",
	          "nonce"
	        ],
	        "members": {
	          "jobId": {},
	          "nonce": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "status": {}
	        }
	      }
	    },
	    "AcknowledgeThirdPartyJob": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "jobId",
	          "nonce",
	          "clientToken"
	        ],
	        "members": {
	          "jobId": {},
	          "nonce": {},
	          "clientToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "status": {}
	        }
	      }
	    },
	    "CreateCustomActionType": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "category",
	          "provider",
	          "version",
	          "inputArtifactDetails",
	          "outputArtifactDetails"
	        ],
	        "members": {
	          "category": {},
	          "provider": {},
	          "version": {},
	          "settings": {
	            "shape": "Se"
	          },
	          "configurationProperties": {
	            "shape": "Sh"
	          },
	          "inputArtifactDetails": {
	            "shape": "Sn"
	          },
	          "outputArtifactDetails": {
	            "shape": "Sn"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "actionType"
	        ],
	        "members": {
	          "actionType": {
	            "shape": "Sr"
	          }
	        }
	      }
	    },
	    "CreatePipeline": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "pipeline"
	        ],
	        "members": {
	          "pipeline": {
	            "shape": "Sv"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "pipeline": {
	            "shape": "Sv"
	          }
	        }
	      }
	    },
	    "DeleteCustomActionType": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "category",
	          "provider",
	          "version"
	        ],
	        "members": {
	          "category": {},
	          "provider": {},
	          "version": {}
	        }
	      }
	    },
	    "DeletePipeline": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "name"
	        ],
	        "members": {
	          "name": {}
	        }
	      }
	    },
	    "DisableStageTransition": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "pipelineName",
	          "stageName",
	          "transitionType",
	          "reason"
	        ],
	        "members": {
	          "pipelineName": {},
	          "stageName": {},
	          "transitionType": {},
	          "reason": {}
	        }
	      }
	    },
	    "EnableStageTransition": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "pipelineName",
	          "stageName",
	          "transitionType"
	        ],
	        "members": {
	          "pipelineName": {},
	          "stageName": {},
	          "transitionType": {}
	        }
	      }
	    },
	    "GetJobDetails": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "jobId"
	        ],
	        "members": {
	          "jobId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "jobDetails": {
	            "type": "structure",
	            "members": {
	              "id": {},
	              "data": {
	                "shape": "S1x"
	              },
	              "accountId": {}
	            }
	          }
	        }
	      }
	    },
	    "GetPipeline": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "name"
	        ],
	        "members": {
	          "name": {},
	          "version": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "pipeline": {
	            "shape": "Sv"
	          }
	        }
	      }
	    },
	    "GetPipelineExecution": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "pipelineName",
	          "pipelineExecutionId"
	        ],
	        "members": {
	          "pipelineName": {},
	          "pipelineExecutionId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "pipelineExecution": {
	            "type": "structure",
	            "members": {
	              "pipelineName": {},
	              "pipelineVersion": {
	                "type": "integer"
	              },
	              "pipelineExecutionId": {},
	              "status": {},
	              "artifactRevisions": {
	                "type": "list",
	                "member": {
	                  "type": "structure",
	                  "members": {
	                    "name": {},
	                    "revisionId": {},
	                    "revisionChangeIdentifier": {},
	                    "revisionSummary": {},
	                    "created": {
	                      "type": "timestamp"
	                    },
	                    "revisionUrl": {}
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "GetPipelineState": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "name"
	        ],
	        "members": {
	          "name": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "pipelineName": {},
	          "pipelineVersion": {
	            "type": "integer"
	          },
	          "stageStates": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "stageName": {},
	                "inboundTransitionState": {
	                  "type": "structure",
	                  "members": {
	                    "enabled": {
	                      "type": "boolean"
	                    },
	                    "lastChangedBy": {},
	                    "lastChangedAt": {
	                      "type": "timestamp"
	                    },
	                    "disabledReason": {}
	                  }
	                },
	                "actionStates": {
	                  "type": "list",
	                  "member": {
	                    "type": "structure",
	                    "members": {
	                      "actionName": {},
	                      "currentRevision": {
	                        "shape": "S32"
	                      },
	                      "latestExecution": {
	                        "type": "structure",
	                        "members": {
	                          "status": {},
	                          "summary": {},
	                          "lastStatusChange": {
	                            "type": "timestamp"
	                          },
	                          "token": {},
	                          "lastUpdatedBy": {},
	                          "externalExecutionId": {},
	                          "externalExecutionUrl": {},
	                          "percentComplete": {
	                            "type": "integer"
	                          },
	                          "errorDetails": {
	                            "type": "structure",
	                            "members": {
	                              "code": {},
	                              "message": {}
	                            }
	                          }
	                        }
	                      },
	                      "entityUrl": {},
	                      "revisionUrl": {}
	                    }
	                  }
	                },
	                "latestExecution": {
	                  "type": "structure",
	                  "required": [
	                    "pipelineExecutionId",
	                    "status"
	                  ],
	                  "members": {
	                    "pipelineExecutionId": {},
	                    "status": {}
	                  }
	                }
	              }
	            }
	          },
	          "created": {
	            "type": "timestamp"
	          },
	          "updated": {
	            "type": "timestamp"
	          }
	        }
	      }
	    },
	    "GetThirdPartyJobDetails": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "jobId",
	          "clientToken"
	        ],
	        "members": {
	          "jobId": {},
	          "clientToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "jobDetails": {
	            "type": "structure",
	            "members": {
	              "id": {},
	              "data": {
	                "type": "structure",
	                "members": {
	                  "actionTypeId": {
	                    "shape": "Ss"
	                  },
	                  "actionConfiguration": {
	                    "shape": "S1y"
	                  },
	                  "pipelineContext": {
	                    "shape": "S1z"
	                  },
	                  "inputArtifacts": {
	                    "shape": "S22"
	                  },
	                  "outputArtifacts": {
	                    "shape": "S22"
	                  },
	                  "artifactCredentials": {
	                    "shape": "S2a"
	                  },
	                  "continuationToken": {},
	                  "encryptionKey": {
	                    "shape": "S11"
	                  }
	                }
	              },
	              "nonce": {}
	            }
	          }
	        }
	      }
	    },
	    "ListActionTypes": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "actionOwnerFilter": {},
	          "nextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "actionTypes"
	        ],
	        "members": {
	          "actionTypes": {
	            "type": "list",
	            "member": {
	              "shape": "Sr"
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListPipelines": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "nextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "pipelines": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "name": {},
	                "version": {
	                  "type": "integer"
	                },
	                "created": {
	                  "type": "timestamp"
	                },
	                "updated": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "PollForJobs": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "actionTypeId"
	        ],
	        "members": {
	          "actionTypeId": {
	            "shape": "Ss"
	          },
	          "maxBatchSize": {
	            "type": "integer"
	          },
	          "queryParam": {
	            "type": "map",
	            "key": {},
	            "value": {}
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "jobs": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "id": {},
	                "data": {
	                  "shape": "S1x"
	                },
	                "nonce": {},
	                "accountId": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "PollForThirdPartyJobs": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "actionTypeId"
	        ],
	        "members": {
	          "actionTypeId": {
	            "shape": "Ss"
	          },
	          "maxBatchSize": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "jobs": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "clientId": {},
	                "jobId": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "PutActionRevision": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "pipelineName",
	          "stageName",
	          "actionName",
	          "actionRevision"
	        ],
	        "members": {
	          "pipelineName": {},
	          "stageName": {},
	          "actionName": {},
	          "actionRevision": {
	            "shape": "S32"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "newRevision": {
	            "type": "boolean"
	          },
	          "pipelineExecutionId": {}
	        }
	      }
	    },
	    "PutApprovalResult": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "pipelineName",
	          "stageName",
	          "actionName",
	          "result",
	          "token"
	        ],
	        "members": {
	          "pipelineName": {},
	          "stageName": {},
	          "actionName": {},
	          "result": {
	            "type": "structure",
	            "required": [
	              "summary",
	              "status"
	            ],
	            "members": {
	              "summary": {},
	              "status": {}
	            }
	          },
	          "token": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "approvedAt": {
	            "type": "timestamp"
	          }
	        }
	      }
	    },
	    "PutJobFailureResult": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "jobId",
	          "failureDetails"
	        ],
	        "members": {
	          "jobId": {},
	          "failureDetails": {
	            "shape": "S4c"
	          }
	        }
	      }
	    },
	    "PutJobSuccessResult": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "jobId"
	        ],
	        "members": {
	          "jobId": {},
	          "currentRevision": {
	            "shape": "S4f"
	          },
	          "continuationToken": {},
	          "executionDetails": {
	            "shape": "S4h"
	          }
	        }
	      }
	    },
	    "PutThirdPartyJobFailureResult": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "jobId",
	          "clientToken",
	          "failureDetails"
	        ],
	        "members": {
	          "jobId": {},
	          "clientToken": {},
	          "failureDetails": {
	            "shape": "S4c"
	          }
	        }
	      }
	    },
	    "PutThirdPartyJobSuccessResult": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "jobId",
	          "clientToken"
	        ],
	        "members": {
	          "jobId": {},
	          "clientToken": {},
	          "currentRevision": {
	            "shape": "S4f"
	          },
	          "continuationToken": {},
	          "executionDetails": {
	            "shape": "S4h"
	          }
	        }
	      }
	    },
	    "RetryStageExecution": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "pipelineName",
	          "stageName",
	          "pipelineExecutionId",
	          "retryMode"
	        ],
	        "members": {
	          "pipelineName": {},
	          "stageName": {},
	          "pipelineExecutionId": {},
	          "retryMode": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "pipelineExecutionId": {}
	        }
	      }
	    },
	    "StartPipelineExecution": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "name"
	        ],
	        "members": {
	          "name": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "pipelineExecutionId": {}
	        }
	      }
	    },
	    "UpdatePipeline": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "pipeline"
	        ],
	        "members": {
	          "pipeline": {
	            "shape": "Sv"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "pipeline": {
	            "shape": "Sv"
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "Se": {
	      "type": "structure",
	      "members": {
	        "thirdPartyConfigurationUrl": {},
	        "entityUrlTemplate": {},
	        "executionUrlTemplate": {},
	        "revisionUrlTemplate": {}
	      }
	    },
	    "Sh": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "name",
	          "required",
	          "key",
	          "secret"
	        ],
	        "members": {
	          "name": {},
	          "required": {
	            "type": "boolean"
	          },
	          "key": {
	            "type": "boolean"
	          },
	          "secret": {
	            "type": "boolean"
	          },
	          "queryable": {
	            "type": "boolean"
	          },
	          "description": {},
	          "type": {}
	        }
	      }
	    },
	    "Sn": {
	      "type": "structure",
	      "required": [
	        "minimumCount",
	        "maximumCount"
	      ],
	      "members": {
	        "minimumCount": {
	          "type": "integer"
	        },
	        "maximumCount": {
	          "type": "integer"
	        }
	      }
	    },
	    "Sr": {
	      "type": "structure",
	      "required": [
	        "id",
	        "inputArtifactDetails",
	        "outputArtifactDetails"
	      ],
	      "members": {
	        "id": {
	          "shape": "Ss"
	        },
	        "settings": {
	          "shape": "Se"
	        },
	        "actionConfigurationProperties": {
	          "shape": "Sh"
	        },
	        "inputArtifactDetails": {
	          "shape": "Sn"
	        },
	        "outputArtifactDetails": {
	          "shape": "Sn"
	        }
	      }
	    },
	    "Ss": {
	      "type": "structure",
	      "required": [
	        "category",
	        "owner",
	        "provider",
	        "version"
	      ],
	      "members": {
	        "category": {},
	        "owner": {},
	        "provider": {},
	        "version": {}
	      }
	    },
	    "Sv": {
	      "type": "structure",
	      "required": [
	        "name",
	        "roleArn",
	        "artifactStore",
	        "stages"
	      ],
	      "members": {
	        "name": {},
	        "roleArn": {},
	        "artifactStore": {
	          "type": "structure",
	          "required": [
	            "type",
	            "location"
	          ],
	          "members": {
	            "type": {},
	            "location": {},
	            "encryptionKey": {
	              "shape": "S11"
	            }
	          }
	        },
	        "stages": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "required": [
	              "name",
	              "actions"
	            ],
	            "members": {
	              "name": {},
	              "blockers": {
	                "type": "list",
	                "member": {
	                  "type": "structure",
	                  "required": [
	                    "name",
	                    "type"
	                  ],
	                  "members": {
	                    "name": {},
	                    "type": {}
	                  }
	                }
	              },
	              "actions": {
	                "type": "list",
	                "member": {
	                  "type": "structure",
	                  "required": [
	                    "name",
	                    "actionTypeId"
	                  ],
	                  "members": {
	                    "name": {},
	                    "actionTypeId": {
	                      "shape": "Ss"
	                    },
	                    "runOrder": {
	                      "type": "integer"
	                    },
	                    "configuration": {
	                      "shape": "S1f"
	                    },
	                    "outputArtifacts": {
	                      "type": "list",
	                      "member": {
	                        "type": "structure",
	                        "required": [
	                          "name"
	                        ],
	                        "members": {
	                          "name": {}
	                        }
	                      }
	                    },
	                    "inputArtifacts": {
	                      "type": "list",
	                      "member": {
	                        "type": "structure",
	                        "required": [
	                          "name"
	                        ],
	                        "members": {
	                          "name": {}
	                        }
	                      }
	                    },
	                    "roleArn": {}
	                  }
	                }
	              }
	            }
	          }
	        },
	        "version": {
	          "type": "integer"
	        }
	      }
	    },
	    "S11": {
	      "type": "structure",
	      "required": [
	        "id",
	        "type"
	      ],
	      "members": {
	        "id": {},
	        "type": {}
	      }
	    },
	    "S1f": {
	      "type": "map",
	      "key": {},
	      "value": {}
	    },
	    "S1x": {
	      "type": "structure",
	      "members": {
	        "actionTypeId": {
	          "shape": "Ss"
	        },
	        "actionConfiguration": {
	          "shape": "S1y"
	        },
	        "pipelineContext": {
	          "shape": "S1z"
	        },
	        "inputArtifacts": {
	          "shape": "S22"
	        },
	        "outputArtifacts": {
	          "shape": "S22"
	        },
	        "artifactCredentials": {
	          "shape": "S2a"
	        },
	        "continuationToken": {},
	        "encryptionKey": {
	          "shape": "S11"
	        }
	      }
	    },
	    "S1y": {
	      "type": "structure",
	      "members": {
	        "configuration": {
	          "shape": "S1f"
	        }
	      }
	    },
	    "S1z": {
	      "type": "structure",
	      "members": {
	        "pipelineName": {},
	        "stage": {
	          "type": "structure",
	          "members": {
	            "name": {}
	          }
	        },
	        "action": {
	          "type": "structure",
	          "members": {
	            "name": {}
	          }
	        }
	      }
	    },
	    "S22": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "name": {},
	          "revision": {},
	          "location": {
	            "type": "structure",
	            "members": {
	              "type": {},
	              "s3Location": {
	                "type": "structure",
	                "required": [
	                  "bucketName",
	                  "objectKey"
	                ],
	                "members": {
	                  "bucketName": {},
	                  "objectKey": {}
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "S2a": {
	      "type": "structure",
	      "required": [
	        "accessKeyId",
	        "secretAccessKey",
	        "sessionToken"
	      ],
	      "members": {
	        "accessKeyId": {},
	        "secretAccessKey": {},
	        "sessionToken": {}
	      },
	      "sensitive": true
	    },
	    "S32": {
	      "type": "structure",
	      "required": [
	        "revisionId",
	        "revisionChangeId",
	        "created"
	      ],
	      "members": {
	        "revisionId": {},
	        "revisionChangeId": {},
	        "created": {
	          "type": "timestamp"
	        }
	      }
	    },
	    "S4c": {
	      "type": "structure",
	      "required": [
	        "type",
	        "message"
	      ],
	      "members": {
	        "type": {},
	        "message": {},
	        "externalExecutionId": {}
	      }
	    },
	    "S4f": {
	      "type": "structure",
	      "required": [
	        "revision",
	        "changeIdentifier"
	      ],
	      "members": {
	        "revision": {},
	        "changeIdentifier": {},
	        "created": {
	          "type": "timestamp"
	        },
	        "revisionSummary": {}
	      }
	    },
	    "S4h": {
	      "type": "structure",
	      "members": {
	        "summary": {},
	        "externalExecutionId": {},
	        "percentComplete": {
	          "type": "integer"
	        }
	      }
	    }
	  }
	}
	},{}],24:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2014-06-30",
	    "endpointPrefix": "cognito-identity",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceFullName": "Amazon Cognito Identity",
	    "signatureVersion": "v4",
	    "targetPrefix": "AWSCognitoIdentityService",
	    "uid": "cognito-identity-2014-06-30"
	  },
	  "operations": {
	    "CreateIdentityPool": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityPoolName",
	          "AllowUnauthenticatedIdentities"
	        ],
	        "members": {
	          "IdentityPoolName": {},
	          "AllowUnauthenticatedIdentities": {
	            "type": "boolean"
	          },
	          "SupportedLoginProviders": {
	            "shape": "S4"
	          },
	          "DeveloperProviderName": {},
	          "OpenIdConnectProviderARNs": {
	            "shape": "S8"
	          },
	          "CognitoIdentityProviders": {
	            "shape": "Sa"
	          },
	          "SamlProviderARNs": {
	            "shape": "Sf"
	          }
	        }
	      },
	      "output": {
	        "shape": "Sg"
	      }
	    },
	    "DeleteIdentities": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityIdsToDelete"
	        ],
	        "members": {
	          "IdentityIdsToDelete": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "UnprocessedIdentityIds": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "IdentityId": {},
	                "ErrorCode": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "DeleteIdentityPool": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityPoolId"
	        ],
	        "members": {
	          "IdentityPoolId": {}
	        }
	      }
	    },
	    "DescribeIdentity": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityId"
	        ],
	        "members": {
	          "IdentityId": {}
	        }
	      },
	      "output": {
	        "shape": "Sr"
	      }
	    },
	    "DescribeIdentityPool": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityPoolId"
	        ],
	        "members": {
	          "IdentityPoolId": {}
	        }
	      },
	      "output": {
	        "shape": "Sg"
	      }
	    },
	    "GetCredentialsForIdentity": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityId"
	        ],
	        "members": {
	          "IdentityId": {},
	          "Logins": {
	            "shape": "Sw"
	          },
	          "CustomRoleArn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "IdentityId": {},
	          "Credentials": {
	            "type": "structure",
	            "members": {
	              "AccessKeyId": {},
	              "SecretKey": {},
	              "SessionToken": {},
	              "Expiration": {
	                "type": "timestamp"
	              }
	            }
	          }
	        }
	      }
	    },
	    "GetId": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityPoolId"
	        ],
	        "members": {
	          "AccountId": {},
	          "IdentityPoolId": {},
	          "Logins": {
	            "shape": "Sw"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "IdentityId": {}
	        }
	      }
	    },
	    "GetIdentityPoolRoles": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityPoolId"
	        ],
	        "members": {
	          "IdentityPoolId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "IdentityPoolId": {},
	          "Roles": {
	            "shape": "S18"
	          },
	          "RoleMappings": {
	            "shape": "S1a"
	          }
	        }
	      }
	    },
	    "GetOpenIdToken": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityId"
	        ],
	        "members": {
	          "IdentityId": {},
	          "Logins": {
	            "shape": "Sw"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "IdentityId": {},
	          "Token": {}
	        }
	      }
	    },
	    "GetOpenIdTokenForDeveloperIdentity": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityPoolId",
	          "Logins"
	        ],
	        "members": {
	          "IdentityPoolId": {},
	          "IdentityId": {},
	          "Logins": {
	            "shape": "Sw"
	          },
	          "TokenDuration": {
	            "type": "long"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "IdentityId": {},
	          "Token": {}
	        }
	      }
	    },
	    "ListIdentities": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityPoolId",
	          "MaxResults"
	        ],
	        "members": {
	          "IdentityPoolId": {},
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {},
	          "HideDisabled": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "IdentityPoolId": {},
	          "Identities": {
	            "type": "list",
	            "member": {
	              "shape": "Sr"
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListIdentityPools": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "MaxResults"
	        ],
	        "members": {
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "IdentityPools": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "IdentityPoolId": {},
	                "IdentityPoolName": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "LookupDeveloperIdentity": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityPoolId"
	        ],
	        "members": {
	          "IdentityPoolId": {},
	          "IdentityId": {},
	          "DeveloperUserIdentifier": {},
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "IdentityId": {},
	          "DeveloperUserIdentifierList": {
	            "type": "list",
	            "member": {}
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "MergeDeveloperIdentities": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SourceUserIdentifier",
	          "DestinationUserIdentifier",
	          "DeveloperProviderName",
	          "IdentityPoolId"
	        ],
	        "members": {
	          "SourceUserIdentifier": {},
	          "DestinationUserIdentifier": {},
	          "DeveloperProviderName": {},
	          "IdentityPoolId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "IdentityId": {}
	        }
	      }
	    },
	    "SetIdentityPoolRoles": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityPoolId",
	          "Roles"
	        ],
	        "members": {
	          "IdentityPoolId": {},
	          "Roles": {
	            "shape": "S18"
	          },
	          "RoleMappings": {
	            "shape": "S1a"
	          }
	        }
	      }
	    },
	    "UnlinkDeveloperIdentity": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityId",
	          "IdentityPoolId",
	          "DeveloperProviderName",
	          "DeveloperUserIdentifier"
	        ],
	        "members": {
	          "IdentityId": {},
	          "IdentityPoolId": {},
	          "DeveloperProviderName": {},
	          "DeveloperUserIdentifier": {}
	        }
	      }
	    },
	    "UnlinkIdentity": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityId",
	          "Logins",
	          "LoginsToRemove"
	        ],
	        "members": {
	          "IdentityId": {},
	          "Logins": {
	            "shape": "Sw"
	          },
	          "LoginsToRemove": {
	            "shape": "Ss"
	          }
	        }
	      }
	    },
	    "UpdateIdentityPool": {
	      "input": {
	        "shape": "Sg"
	      },
	      "output": {
	        "shape": "Sg"
	      }
	    }
	  },
	  "shapes": {
	    "S4": {
	      "type": "map",
	      "key": {},
	      "value": {}
	    },
	    "S8": {
	      "type": "list",
	      "member": {}
	    },
	    "Sa": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "ProviderName": {},
	          "ClientId": {},
	          "ServerSideTokenCheck": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "Sf": {
	      "type": "list",
	      "member": {}
	    },
	    "Sg": {
	      "type": "structure",
	      "required": [
	        "IdentityPoolId",
	        "IdentityPoolName",
	        "AllowUnauthenticatedIdentities"
	      ],
	      "members": {
	        "IdentityPoolId": {},
	        "IdentityPoolName": {},
	        "AllowUnauthenticatedIdentities": {
	          "type": "boolean"
	        },
	        "SupportedLoginProviders": {
	          "shape": "S4"
	        },
	        "DeveloperProviderName": {},
	        "OpenIdConnectProviderARNs": {
	          "shape": "S8"
	        },
	        "CognitoIdentityProviders": {
	          "shape": "Sa"
	        },
	        "SamlProviderARNs": {
	          "shape": "Sf"
	        }
	      }
	    },
	    "Sr": {
	      "type": "structure",
	      "members": {
	        "IdentityId": {},
	        "Logins": {
	          "shape": "Ss"
	        },
	        "CreationDate": {
	          "type": "timestamp"
	        },
	        "LastModifiedDate": {
	          "type": "timestamp"
	        }
	      }
	    },
	    "Ss": {
	      "type": "list",
	      "member": {}
	    },
	    "Sw": {
	      "type": "map",
	      "key": {},
	      "value": {}
	    },
	    "S18": {
	      "type": "map",
	      "key": {},
	      "value": {}
	    },
	    "S1a": {
	      "type": "map",
	      "key": {},
	      "value": {
	        "type": "structure",
	        "required": [
	          "Type"
	        ],
	        "members": {
	          "Type": {},
	          "AmbiguousRoleResolution": {},
	          "RulesConfiguration": {
	            "type": "structure",
	            "required": [
	              "Rules"
	            ],
	            "members": {
	              "Rules": {
	                "type": "list",
	                "member": {
	                  "type": "structure",
	                  "required": [
	                    "Claim",
	                    "MatchType",
	                    "Value",
	                    "RoleARN"
	                  ],
	                  "members": {
	                    "Claim": {},
	                    "MatchType": {},
	                    "Value": {},
	                    "RoleARN": {}
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    }
	  }
	}
	},{}],25:[function(require,module,exports){
	arguments[4][21][0].apply(exports,arguments)
	},{"dup":21}],26:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2016-04-18",
	    "endpointPrefix": "cognito-idp",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceFullName": "Amazon Cognito Identity Provider",
	    "signatureVersion": "v4",
	    "targetPrefix": "AWSCognitoIdentityProviderService",
	    "uid": "cognito-idp-2016-04-18"
	  },
	  "operations": {
	    "AddCustomAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId",
	          "CustomAttributes"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "CustomAttributes": {
	            "type": "list",
	            "member": {
	              "shape": "S4"
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "AdminAddUserToGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId",
	          "Username",
	          "GroupName"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "Username": {
	            "shape": "Sd"
	          },
	          "GroupName": {}
	        }
	      }
	    },
	    "AdminConfirmSignUp": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId",
	          "Username"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "Username": {
	            "shape": "Sd"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "AdminCreateUser": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId",
	          "Username"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "Username": {
	            "shape": "Sd"
	          },
	          "UserAttributes": {
	            "shape": "Si"
	          },
	          "ValidationData": {
	            "shape": "Si"
	          },
	          "TemporaryPassword": {
	            "shape": "Sm"
	          },
	          "ForceAliasCreation": {
	            "type": "boolean"
	          },
	          "MessageAction": {},
	          "DesiredDeliveryMediums": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "User": {
	            "shape": "Ss"
	          }
	        }
	      }
	    },
	    "AdminDeleteUser": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId",
	          "Username"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "Username": {
	            "shape": "Sd"
	          }
	        }
	      }
	    },
	    "AdminDeleteUserAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId",
	          "Username",
	          "UserAttributeNames"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "Username": {
	            "shape": "Sd"
	          },
	          "UserAttributeNames": {
	            "shape": "Sz"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "AdminDisableUser": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId",
	          "Username"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "Username": {
	            "shape": "Sd"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "AdminEnableUser": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId",
	          "Username"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "Username": {
	            "shape": "Sd"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "AdminForgetDevice": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId",
	          "Username",
	          "DeviceKey"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "Username": {
	            "shape": "Sd"
	          },
	          "DeviceKey": {}
	        }
	      }
	    },
	    "AdminGetDevice": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DeviceKey",
	          "UserPoolId",
	          "Username"
	        ],
	        "members": {
	          "DeviceKey": {},
	          "UserPoolId": {},
	          "Username": {
	            "shape": "Sd"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "Device"
	        ],
	        "members": {
	          "Device": {
	            "shape": "S19"
	          }
	        }
	      }
	    },
	    "AdminGetUser": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId",
	          "Username"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "Username": {
	            "shape": "Sd"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "Username"
	        ],
	        "members": {
	          "Username": {
	            "shape": "Sd"
	          },
	          "UserAttributes": {
	            "shape": "Si"
	          },
	          "UserCreateDate": {
	            "type": "timestamp"
	          },
	          "UserLastModifiedDate": {
	            "type": "timestamp"
	          },
	          "Enabled": {
	            "type": "boolean"
	          },
	          "UserStatus": {},
	          "MFAOptions": {
	            "shape": "Sv"
	          }
	        }
	      }
	    },
	    "AdminInitiateAuth": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId",
	          "ClientId",
	          "AuthFlow"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "ClientId": {
	            "shape": "S1d"
	          },
	          "AuthFlow": {},
	          "AuthParameters": {
	            "shape": "S1f"
	          },
	          "ClientMetadata": {
	            "shape": "S1g"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ChallengeName": {},
	          "Session": {},
	          "ChallengeParameters": {
	            "shape": "S1k"
	          },
	          "AuthenticationResult": {
	            "shape": "S1l"
	          }
	        }
	      }
	    },
	    "AdminListDevices": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId",
	          "Username"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "Username": {
	            "shape": "Sd"
	          },
	          "Limit": {
	            "type": "integer"
	          },
	          "PaginationToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Devices": {
	            "shape": "S1t"
	          },
	          "PaginationToken": {}
	        }
	      }
	    },
	    "AdminListGroupsForUser": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Username",
	          "UserPoolId"
	        ],
	        "members": {
	          "Username": {
	            "shape": "Sd"
	          },
	          "UserPoolId": {},
	          "Limit": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Groups": {
	            "shape": "S1x"
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "AdminRemoveUserFromGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId",
	          "Username",
	          "GroupName"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "Username": {
	            "shape": "Sd"
	          },
	          "GroupName": {}
	        }
	      }
	    },
	    "AdminResetUserPassword": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId",
	          "Username"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "Username": {
	            "shape": "Sd"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "AdminRespondToAuthChallenge": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId",
	          "ClientId",
	          "ChallengeName"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "ClientId": {
	            "shape": "S1d"
	          },
	          "ChallengeName": {},
	          "ChallengeResponses": {
	            "shape": "S26"
	          },
	          "Session": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ChallengeName": {},
	          "Session": {},
	          "ChallengeParameters": {
	            "shape": "S1k"
	          },
	          "AuthenticationResult": {
	            "shape": "S1l"
	          }
	        }
	      }
	    },
	    "AdminSetUserSettings": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId",
	          "Username",
	          "MFAOptions"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "Username": {
	            "shape": "Sd"
	          },
	          "MFAOptions": {
	            "shape": "Sv"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "AdminUpdateDeviceStatus": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId",
	          "Username",
	          "DeviceKey"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "Username": {
	            "shape": "Sd"
	          },
	          "DeviceKey": {},
	          "DeviceRememberedStatus": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "AdminUpdateUserAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId",
	          "Username",
	          "UserAttributes"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "Username": {
	            "shape": "Sd"
	          },
	          "UserAttributes": {
	            "shape": "Si"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "AdminUserGlobalSignOut": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId",
	          "Username"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "Username": {
	            "shape": "Sd"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "ChangePassword": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "PreviousPassword",
	          "ProposedPassword"
	        ],
	        "members": {
	          "PreviousPassword": {
	            "shape": "Sm"
	          },
	          "ProposedPassword": {
	            "shape": "Sm"
	          },
	          "AccessToken": {
	            "shape": "S1m"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      },
	      "authtype": "none"
	    },
	    "ConfirmDevice": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AccessToken",
	          "DeviceKey"
	        ],
	        "members": {
	          "AccessToken": {
	            "shape": "S1m"
	          },
	          "DeviceKey": {},
	          "DeviceSecretVerifierConfig": {
	            "type": "structure",
	            "members": {
	              "PasswordVerifier": {},
	              "Salt": {}
	            }
	          },
	          "DeviceName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "UserConfirmationNecessary": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "ConfirmForgotPassword": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClientId",
	          "Username",
	          "ConfirmationCode",
	          "Password"
	        ],
	        "members": {
	          "ClientId": {
	            "shape": "S1d"
	          },
	          "SecretHash": {
	            "shape": "S2o"
	          },
	          "Username": {
	            "shape": "Sd"
	          },
	          "ConfirmationCode": {},
	          "Password": {
	            "shape": "Sm"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      },
	      "authtype": "none"
	    },
	    "ConfirmSignUp": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClientId",
	          "Username",
	          "ConfirmationCode"
	        ],
	        "members": {
	          "ClientId": {
	            "shape": "S1d"
	          },
	          "SecretHash": {
	            "shape": "S2o"
	          },
	          "Username": {
	            "shape": "Sd"
	          },
	          "ConfirmationCode": {},
	          "ForceAliasCreation": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      },
	      "authtype": "none"
	    },
	    "CreateGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GroupName",
	          "UserPoolId"
	        ],
	        "members": {
	          "GroupName": {},
	          "UserPoolId": {},
	          "Description": {},
	          "RoleArn": {},
	          "Precedence": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Group": {
	            "shape": "S1y"
	          }
	        }
	      }
	    },
	    "CreateUserImportJob": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "JobName",
	          "UserPoolId",
	          "CloudWatchLogsRoleArn"
	        ],
	        "members": {
	          "JobName": {},
	          "UserPoolId": {},
	          "CloudWatchLogsRoleArn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "UserImportJob": {
	            "shape": "S2y"
	          }
	        }
	      }
	    },
	    "CreateUserPool": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "PoolName"
	        ],
	        "members": {
	          "PoolName": {},
	          "Policies": {
	            "shape": "S36"
	          },
	          "LambdaConfig": {
	            "shape": "S39"
	          },
	          "AutoVerifiedAttributes": {
	            "shape": "S3a"
	          },
	          "AliasAttributes": {
	            "shape": "S3c"
	          },
	          "SmsVerificationMessage": {},
	          "EmailVerificationMessage": {},
	          "EmailVerificationSubject": {},
	          "SmsAuthenticationMessage": {},
	          "MfaConfiguration": {},
	          "DeviceConfiguration": {
	            "shape": "S3i"
	          },
	          "EmailConfiguration": {
	            "shape": "S3j"
	          },
	          "SmsConfiguration": {
	            "shape": "S3l"
	          },
	          "UserPoolTags": {
	            "shape": "S3m"
	          },
	          "AdminCreateUserConfig": {
	            "shape": "S3n"
	          },
	          "Schema": {
	            "shape": "S3q"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "UserPool": {
	            "shape": "S3s"
	          }
	        }
	      }
	    },
	    "CreateUserPoolClient": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId",
	          "ClientName"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "ClientName": {},
	          "GenerateSecret": {
	            "type": "boolean"
	          },
	          "RefreshTokenValidity": {
	            "type": "integer"
	          },
	          "ReadAttributes": {
	            "shape": "S3y"
	          },
	          "WriteAttributes": {
	            "shape": "S3y"
	          },
	          "ExplicitAuthFlows": {
	            "shape": "S40"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "UserPoolClient": {
	            "shape": "S43"
	          }
	        }
	      }
	    },
	    "DeleteGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GroupName",
	          "UserPoolId"
	        ],
	        "members": {
	          "GroupName": {},
	          "UserPoolId": {}
	        }
	      }
	    },
	    "DeleteUser": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "AccessToken": {
	            "shape": "S1m"
	          }
	        }
	      },
	      "authtype": "none"
	    },
	    "DeleteUserAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserAttributeNames"
	        ],
	        "members": {
	          "UserAttributeNames": {
	            "shape": "Sz"
	          },
	          "AccessToken": {
	            "shape": "S1m"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      },
	      "authtype": "none"
	    },
	    "DeleteUserPool": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId"
	        ],
	        "members": {
	          "UserPoolId": {}
	        }
	      }
	    },
	    "DeleteUserPoolClient": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId",
	          "ClientId"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "ClientId": {
	            "shape": "S1d"
	          }
	        }
	      }
	    },
	    "DescribeUserImportJob": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId",
	          "JobId"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "JobId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "UserImportJob": {
	            "shape": "S2y"
	          }
	        }
	      }
	    },
	    "DescribeUserPool": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId"
	        ],
	        "members": {
	          "UserPoolId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "UserPool": {
	            "shape": "S3s"
	          }
	        }
	      }
	    },
	    "DescribeUserPoolClient": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId",
	          "ClientId"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "ClientId": {
	            "shape": "S1d"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "UserPoolClient": {
	            "shape": "S43"
	          }
	        }
	      }
	    },
	    "ForgetDevice": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DeviceKey"
	        ],
	        "members": {
	          "AccessToken": {
	            "shape": "S1m"
	          },
	          "DeviceKey": {}
	        }
	      }
	    },
	    "ForgotPassword": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClientId",
	          "Username"
	        ],
	        "members": {
	          "ClientId": {
	            "shape": "S1d"
	          },
	          "SecretHash": {
	            "shape": "S2o"
	          },
	          "Username": {
	            "shape": "Sd"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "CodeDeliveryDetails": {
	            "shape": "S4k"
	          }
	        }
	      },
	      "authtype": "none"
	    },
	    "GetCSVHeader": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId"
	        ],
	        "members": {
	          "UserPoolId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "UserPoolId": {},
	          "CSVHeader": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      }
	    },
	    "GetDevice": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DeviceKey"
	        ],
	        "members": {
	          "DeviceKey": {},
	          "AccessToken": {
	            "shape": "S1m"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "Device"
	        ],
	        "members": {
	          "Device": {
	            "shape": "S19"
	          }
	        }
	      }
	    },
	    "GetGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GroupName",
	          "UserPoolId"
	        ],
	        "members": {
	          "GroupName": {},
	          "UserPoolId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Group": {
	            "shape": "S1y"
	          }
	        }
	      }
	    },
	    "GetUser": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "AccessToken": {
	            "shape": "S1m"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "Username",
	          "UserAttributes"
	        ],
	        "members": {
	          "Username": {
	            "shape": "Sd"
	          },
	          "UserAttributes": {
	            "shape": "Si"
	          },
	          "MFAOptions": {
	            "shape": "Sv"
	          }
	        }
	      },
	      "authtype": "none"
	    },
	    "GetUserAttributeVerificationCode": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AttributeName"
	        ],
	        "members": {
	          "AccessToken": {
	            "shape": "S1m"
	          },
	          "AttributeName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "CodeDeliveryDetails": {
	            "shape": "S4k"
	          }
	        }
	      },
	      "authtype": "none"
	    },
	    "GlobalSignOut": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "AccessToken": {
	            "shape": "S1m"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "InitiateAuth": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AuthFlow",
	          "ClientId"
	        ],
	        "members": {
	          "AuthFlow": {},
	          "AuthParameters": {
	            "shape": "S1f"
	          },
	          "ClientMetadata": {
	            "shape": "S1g"
	          },
	          "ClientId": {
	            "shape": "S1d"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ChallengeName": {},
	          "Session": {},
	          "ChallengeParameters": {
	            "shape": "S1k"
	          },
	          "AuthenticationResult": {
	            "shape": "S1l"
	          }
	        }
	      }
	    },
	    "ListDevices": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AccessToken"
	        ],
	        "members": {
	          "AccessToken": {
	            "shape": "S1m"
	          },
	          "Limit": {
	            "type": "integer"
	          },
	          "PaginationToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Devices": {
	            "shape": "S1t"
	          },
	          "PaginationToken": {}
	        }
	      }
	    },
	    "ListGroups": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "Limit": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Groups": {
	            "shape": "S1x"
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListUserImportJobs": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId",
	          "MaxResults"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "MaxResults": {
	            "type": "integer"
	          },
	          "PaginationToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "UserImportJobs": {
	            "type": "list",
	            "member": {
	              "shape": "S2y"
	            }
	          },
	          "PaginationToken": {}
	        }
	      }
	    },
	    "ListUserPoolClients": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "UserPoolClients": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "ClientId": {
	                  "shape": "S1d"
	                },
	                "UserPoolId": {},
	                "ClientName": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListUserPools": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "MaxResults"
	        ],
	        "members": {
	          "NextToken": {},
	          "MaxResults": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "UserPools": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Id": {},
	                "Name": {},
	                "LambdaConfig": {
	                  "shape": "S39"
	                },
	                "Status": {},
	                "LastModifiedDate": {
	                  "type": "timestamp"
	                },
	                "CreationDate": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListUsers": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "AttributesToGet": {
	            "type": "list",
	            "member": {}
	          },
	          "Limit": {
	            "type": "integer"
	          },
	          "PaginationToken": {},
	          "Filter": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Users": {
	            "shape": "S5m"
	          },
	          "PaginationToken": {}
	        }
	      }
	    },
	    "ListUsersInGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId",
	          "GroupName"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "GroupName": {},
	          "Limit": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Users": {
	            "shape": "S5m"
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ResendConfirmationCode": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClientId",
	          "Username"
	        ],
	        "members": {
	          "ClientId": {
	            "shape": "S1d"
	          },
	          "SecretHash": {
	            "shape": "S2o"
	          },
	          "Username": {
	            "shape": "Sd"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "CodeDeliveryDetails": {
	            "shape": "S4k"
	          }
	        }
	      },
	      "authtype": "none"
	    },
	    "RespondToAuthChallenge": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClientId",
	          "ChallengeName"
	        ],
	        "members": {
	          "ClientId": {
	            "shape": "S1d"
	          },
	          "ChallengeName": {},
	          "Session": {},
	          "ChallengeResponses": {
	            "shape": "S26"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ChallengeName": {},
	          "Session": {},
	          "ChallengeParameters": {
	            "shape": "S1k"
	          },
	          "AuthenticationResult": {
	            "shape": "S1l"
	          }
	        }
	      }
	    },
	    "SetUserSettings": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AccessToken",
	          "MFAOptions"
	        ],
	        "members": {
	          "AccessToken": {
	            "shape": "S1m"
	          },
	          "MFAOptions": {
	            "shape": "Sv"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      },
	      "authtype": "none"
	    },
	    "SignUp": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClientId",
	          "Username",
	          "Password"
	        ],
	        "members": {
	          "ClientId": {
	            "shape": "S1d"
	          },
	          "SecretHash": {
	            "shape": "S2o"
	          },
	          "Username": {
	            "shape": "Sd"
	          },
	          "Password": {
	            "shape": "Sm"
	          },
	          "UserAttributes": {
	            "shape": "Si"
	          },
	          "ValidationData": {
	            "shape": "Si"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "UserConfirmed": {
	            "type": "boolean"
	          },
	          "CodeDeliveryDetails": {
	            "shape": "S4k"
	          }
	        }
	      },
	      "authtype": "none"
	    },
	    "StartUserImportJob": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId",
	          "JobId"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "JobId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "UserImportJob": {
	            "shape": "S2y"
	          }
	        }
	      }
	    },
	    "StopUserImportJob": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId",
	          "JobId"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "JobId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "UserImportJob": {
	            "shape": "S2y"
	          }
	        }
	      }
	    },
	    "UpdateDeviceStatus": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AccessToken",
	          "DeviceKey"
	        ],
	        "members": {
	          "AccessToken": {
	            "shape": "S1m"
	          },
	          "DeviceKey": {},
	          "DeviceRememberedStatus": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "UpdateGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GroupName",
	          "UserPoolId"
	        ],
	        "members": {
	          "GroupName": {},
	          "UserPoolId": {},
	          "Description": {},
	          "RoleArn": {},
	          "Precedence": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Group": {
	            "shape": "S1y"
	          }
	        }
	      }
	    },
	    "UpdateUserAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserAttributes"
	        ],
	        "members": {
	          "UserAttributes": {
	            "shape": "Si"
	          },
	          "AccessToken": {
	            "shape": "S1m"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "CodeDeliveryDetailsList": {
	            "type": "list",
	            "member": {
	              "shape": "S4k"
	            }
	          }
	        }
	      },
	      "authtype": "none"
	    },
	    "UpdateUserPool": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "Policies": {
	            "shape": "S36"
	          },
	          "LambdaConfig": {
	            "shape": "S39"
	          },
	          "AutoVerifiedAttributes": {
	            "shape": "S3a"
	          },
	          "SmsVerificationMessage": {},
	          "EmailVerificationMessage": {},
	          "EmailVerificationSubject": {},
	          "SmsAuthenticationMessage": {},
	          "MfaConfiguration": {},
	          "DeviceConfiguration": {
	            "shape": "S3i"
	          },
	          "EmailConfiguration": {
	            "shape": "S3j"
	          },
	          "SmsConfiguration": {
	            "shape": "S3l"
	          },
	          "UserPoolTags": {
	            "shape": "S3m"
	          },
	          "AdminCreateUserConfig": {
	            "shape": "S3n"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "UpdateUserPoolClient": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UserPoolId",
	          "ClientId"
	        ],
	        "members": {
	          "UserPoolId": {},
	          "ClientId": {
	            "shape": "S1d"
	          },
	          "ClientName": {},
	          "RefreshTokenValidity": {
	            "type": "integer"
	          },
	          "ReadAttributes": {
	            "shape": "S3y"
	          },
	          "WriteAttributes": {
	            "shape": "S3y"
	          },
	          "ExplicitAuthFlows": {
	            "shape": "S40"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "UserPoolClient": {
	            "shape": "S43"
	          }
	        }
	      }
	    },
	    "VerifyUserAttribute": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AttributeName",
	          "Code"
	        ],
	        "members": {
	          "AccessToken": {
	            "shape": "S1m"
	          },
	          "AttributeName": {},
	          "Code": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      },
	      "authtype": "none"
	    }
	  },
	  "shapes": {
	    "S4": {
	      "type": "structure",
	      "members": {
	        "Name": {},
	        "AttributeDataType": {},
	        "DeveloperOnlyAttribute": {
	          "type": "boolean"
	        },
	        "Mutable": {
	          "type": "boolean"
	        },
	        "Required": {
	          "type": "boolean"
	        },
	        "NumberAttributeConstraints": {
	          "type": "structure",
	          "members": {
	            "MinValue": {},
	            "MaxValue": {}
	          }
	        },
	        "StringAttributeConstraints": {
	          "type": "structure",
	          "members": {
	            "MinLength": {},
	            "MaxLength": {}
	          }
	        }
	      }
	    },
	    "Sd": {
	      "type": "string",
	      "sensitive": true
	    },
	    "Si": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "Name"
	        ],
	        "members": {
	          "Name": {},
	          "Value": {
	            "type": "string",
	            "sensitive": true
	          }
	        }
	      }
	    },
	    "Sm": {
	      "type": "string",
	      "sensitive": true
	    },
	    "Ss": {
	      "type": "structure",
	      "members": {
	        "Username": {
	          "shape": "Sd"
	        },
	        "Attributes": {
	          "shape": "Si"
	        },
	        "UserCreateDate": {
	          "type": "timestamp"
	        },
	        "UserLastModifiedDate": {
	          "type": "timestamp"
	        },
	        "Enabled": {
	          "type": "boolean"
	        },
	        "UserStatus": {},
	        "MFAOptions": {
	          "shape": "Sv"
	        }
	      }
	    },
	    "Sv": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "DeliveryMedium": {},
	          "AttributeName": {}
	        }
	      }
	    },
	    "Sz": {
	      "type": "list",
	      "member": {}
	    },
	    "S19": {
	      "type": "structure",
	      "members": {
	        "DeviceKey": {},
	        "DeviceAttributes": {
	          "shape": "Si"
	        },
	        "DeviceCreateDate": {
	          "type": "timestamp"
	        },
	        "DeviceLastModifiedDate": {
	          "type": "timestamp"
	        },
	        "DeviceLastAuthenticatedDate": {
	          "type": "timestamp"
	        }
	      }
	    },
	    "S1d": {
	      "type": "string",
	      "sensitive": true
	    },
	    "S1f": {
	      "type": "map",
	      "key": {},
	      "value": {}
	    },
	    "S1g": {
	      "type": "map",
	      "key": {},
	      "value": {}
	    },
	    "S1k": {
	      "type": "map",
	      "key": {},
	      "value": {}
	    },
	    "S1l": {
	      "type": "structure",
	      "members": {
	        "AccessToken": {
	          "shape": "S1m"
	        },
	        "ExpiresIn": {
	          "type": "integer"
	        },
	        "TokenType": {},
	        "RefreshToken": {
	          "shape": "S1m"
	        },
	        "IdToken": {
	          "shape": "S1m"
	        },
	        "NewDeviceMetadata": {
	          "type": "structure",
	          "members": {
	            "DeviceKey": {},
	            "DeviceGroupKey": {}
	          }
	        }
	      }
	    },
	    "S1m": {
	      "type": "string",
	      "sensitive": true
	    },
	    "S1t": {
	      "type": "list",
	      "member": {
	        "shape": "S19"
	      }
	    },
	    "S1x": {
	      "type": "list",
	      "member": {
	        "shape": "S1y"
	      }
	    },
	    "S1y": {
	      "type": "structure",
	      "members": {
	        "GroupName": {},
	        "UserPoolId": {},
	        "Description": {},
	        "RoleArn": {},
	        "Precedence": {
	          "type": "integer"
	        },
	        "LastModifiedDate": {
	          "type": "timestamp"
	        },
	        "CreationDate": {
	          "type": "timestamp"
	        }
	      }
	    },
	    "S26": {
	      "type": "map",
	      "key": {},
	      "value": {}
	    },
	    "S2o": {
	      "type": "string",
	      "sensitive": true
	    },
	    "S2y": {
	      "type": "structure",
	      "members": {
	        "JobName": {},
	        "JobId": {},
	        "UserPoolId": {},
	        "PreSignedUrl": {},
	        "CreationDate": {
	          "type": "timestamp"
	        },
	        "StartDate": {
	          "type": "timestamp"
	        },
	        "CompletionDate": {
	          "type": "timestamp"
	        },
	        "Status": {},
	        "CloudWatchLogsRoleArn": {},
	        "ImportedUsers": {
	          "type": "long"
	        },
	        "SkippedUsers": {
	          "type": "long"
	        },
	        "FailedUsers": {
	          "type": "long"
	        },
	        "CompletionMessage": {}
	      }
	    },
	    "S36": {
	      "type": "structure",
	      "members": {
	        "PasswordPolicy": {
	          "type": "structure",
	          "members": {
	            "MinimumLength": {
	              "type": "integer"
	            },
	            "RequireUppercase": {
	              "type": "boolean"
	            },
	            "RequireLowercase": {
	              "type": "boolean"
	            },
	            "RequireNumbers": {
	              "type": "boolean"
	            },
	            "RequireSymbols": {
	              "type": "boolean"
	            }
	          }
	        }
	      }
	    },
	    "S39": {
	      "type": "structure",
	      "members": {
	        "PreSignUp": {},
	        "CustomMessage": {},
	        "PostConfirmation": {},
	        "PreAuthentication": {},
	        "PostAuthentication": {},
	        "DefineAuthChallenge": {},
	        "CreateAuthChallenge": {},
	        "VerifyAuthChallengeResponse": {}
	      }
	    },
	    "S3a": {
	      "type": "list",
	      "member": {}
	    },
	    "S3c": {
	      "type": "list",
	      "member": {}
	    },
	    "S3i": {
	      "type": "structure",
	      "members": {
	        "ChallengeRequiredOnNewDevice": {
	          "type": "boolean"
	        },
	        "DeviceOnlyRememberedOnUserPrompt": {
	          "type": "boolean"
	        }
	      }
	    },
	    "S3j": {
	      "type": "structure",
	      "members": {
	        "SourceArn": {},
	        "ReplyToEmailAddress": {}
	      }
	    },
	    "S3l": {
	      "type": "structure",
	      "required": [
	        "SnsCallerArn"
	      ],
	      "members": {
	        "SnsCallerArn": {},
	        "ExternalId": {}
	      }
	    },
	    "S3m": {
	      "type": "map",
	      "key": {},
	      "value": {}
	    },
	    "S3n": {
	      "type": "structure",
	      "members": {
	        "AllowAdminCreateUserOnly": {
	          "type": "boolean"
	        },
	        "UnusedAccountValidityDays": {
	          "type": "integer"
	        },
	        "InviteMessageTemplate": {
	          "type": "structure",
	          "members": {
	            "SMSMessage": {},
	            "EmailMessage": {},
	            "EmailSubject": {}
	          }
	        }
	      }
	    },
	    "S3q": {
	      "type": "list",
	      "member": {
	        "shape": "S4"
	      }
	    },
	    "S3s": {
	      "type": "structure",
	      "members": {
	        "Id": {},
	        "Name": {},
	        "Policies": {
	          "shape": "S36"
	        },
	        "LambdaConfig": {
	          "shape": "S39"
	        },
	        "Status": {},
	        "LastModifiedDate": {
	          "type": "timestamp"
	        },
	        "CreationDate": {
	          "type": "timestamp"
	        },
	        "SchemaAttributes": {
	          "shape": "S3q"
	        },
	        "AutoVerifiedAttributes": {
	          "shape": "S3a"
	        },
	        "AliasAttributes": {
	          "shape": "S3c"
	        },
	        "SmsVerificationMessage": {},
	        "EmailVerificationMessage": {},
	        "EmailVerificationSubject": {},
	        "SmsAuthenticationMessage": {},
	        "MfaConfiguration": {},
	        "DeviceConfiguration": {
	          "shape": "S3i"
	        },
	        "EstimatedNumberOfUsers": {
	          "type": "integer"
	        },
	        "EmailConfiguration": {
	          "shape": "S3j"
	        },
	        "SmsConfiguration": {
	          "shape": "S3l"
	        },
	        "UserPoolTags": {
	          "shape": "S3m"
	        },
	        "SmsConfigurationFailure": {},
	        "EmailConfigurationFailure": {},
	        "AdminCreateUserConfig": {
	          "shape": "S3n"
	        }
	      }
	    },
	    "S3y": {
	      "type": "list",
	      "member": {}
	    },
	    "S40": {
	      "type": "list",
	      "member": {}
	    },
	    "S43": {
	      "type": "structure",
	      "members": {
	        "UserPoolId": {},
	        "ClientName": {},
	        "ClientId": {
	          "shape": "S1d"
	        },
	        "ClientSecret": {
	          "type": "string",
	          "sensitive": true
	        },
	        "LastModifiedDate": {
	          "type": "timestamp"
	        },
	        "CreationDate": {
	          "type": "timestamp"
	        },
	        "RefreshTokenValidity": {
	          "type": "integer"
	        },
	        "ReadAttributes": {
	          "shape": "S3y"
	        },
	        "WriteAttributes": {
	          "shape": "S3y"
	        },
	        "ExplicitAuthFlows": {
	          "shape": "S40"
	        }
	      }
	    },
	    "S4k": {
	      "type": "structure",
	      "members": {
	        "Destination": {},
	        "DeliveryMedium": {},
	        "AttributeName": {}
	      }
	    },
	    "S5m": {
	      "type": "list",
	      "member": {
	        "shape": "Ss"
	      }
	    }
	  }
	}
	},{}],27:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2014-06-30",
	    "endpointPrefix": "cognito-sync",
	    "jsonVersion": "1.1",
	    "serviceFullName": "Amazon Cognito Sync",
	    "signatureVersion": "v4",
	    "protocol": "rest-json",
	    "uid": "cognito-sync-2014-06-30"
	  },
	  "operations": {
	    "BulkPublish": {
	      "http": {
	        "requestUri": "/identitypools/{IdentityPoolId}/bulkpublish",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityPoolId"
	        ],
	        "members": {
	          "IdentityPoolId": {
	            "location": "uri",
	            "locationName": "IdentityPoolId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "IdentityPoolId": {}
	        }
	      }
	    },
	    "DeleteDataset": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityPoolId",
	          "IdentityId",
	          "DatasetName"
	        ],
	        "members": {
	          "IdentityPoolId": {
	            "location": "uri",
	            "locationName": "IdentityPoolId"
	          },
	          "IdentityId": {
	            "location": "uri",
	            "locationName": "IdentityId"
	          },
	          "DatasetName": {
	            "location": "uri",
	            "locationName": "DatasetName"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Dataset": {
	            "shape": "S8"
	          }
	        }
	      }
	    },
	    "DescribeDataset": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityPoolId",
	          "IdentityId",
	          "DatasetName"
	        ],
	        "members": {
	          "IdentityPoolId": {
	            "location": "uri",
	            "locationName": "IdentityPoolId"
	          },
	          "IdentityId": {
	            "location": "uri",
	            "locationName": "IdentityId"
	          },
	          "DatasetName": {
	            "location": "uri",
	            "locationName": "DatasetName"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Dataset": {
	            "shape": "S8"
	          }
	        }
	      }
	    },
	    "DescribeIdentityPoolUsage": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/identitypools/{IdentityPoolId}",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityPoolId"
	        ],
	        "members": {
	          "IdentityPoolId": {
	            "location": "uri",
	            "locationName": "IdentityPoolId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "IdentityPoolUsage": {
	            "shape": "Sg"
	          }
	        }
	      }
	    },
	    "DescribeIdentityUsage": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/identitypools/{IdentityPoolId}/identities/{IdentityId}",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityPoolId",
	          "IdentityId"
	        ],
	        "members": {
	          "IdentityPoolId": {
	            "location": "uri",
	            "locationName": "IdentityPoolId"
	          },
	          "IdentityId": {
	            "location": "uri",
	            "locationName": "IdentityId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "IdentityUsage": {
	            "type": "structure",
	            "members": {
	              "IdentityId": {},
	              "IdentityPoolId": {},
	              "LastModifiedDate": {
	                "type": "timestamp"
	              },
	              "DatasetCount": {
	                "type": "integer"
	              },
	              "DataStorage": {
	                "type": "long"
	              }
	            }
	          }
	        }
	      }
	    },
	    "GetBulkPublishDetails": {
	      "http": {
	        "requestUri": "/identitypools/{IdentityPoolId}/getBulkPublishDetails",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityPoolId"
	        ],
	        "members": {
	          "IdentityPoolId": {
	            "location": "uri",
	            "locationName": "IdentityPoolId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "IdentityPoolId": {},
	          "BulkPublishStartTime": {
	            "type": "timestamp"
	          },
	          "BulkPublishCompleteTime": {
	            "type": "timestamp"
	          },
	          "BulkPublishStatus": {},
	          "FailureMessage": {}
	        }
	      }
	    },
	    "GetCognitoEvents": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/identitypools/{IdentityPoolId}/events",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityPoolId"
	        ],
	        "members": {
	          "IdentityPoolId": {
	            "location": "uri",
	            "locationName": "IdentityPoolId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Events": {
	            "shape": "Sq"
	          }
	        }
	      }
	    },
	    "GetIdentityPoolConfiguration": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/identitypools/{IdentityPoolId}/configuration",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityPoolId"
	        ],
	        "members": {
	          "IdentityPoolId": {
	            "location": "uri",
	            "locationName": "IdentityPoolId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "IdentityPoolId": {},
	          "PushSync": {
	            "shape": "Sv"
	          },
	          "CognitoStreams": {
	            "shape": "Sz"
	          }
	        }
	      }
	    },
	    "ListDatasets": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityId",
	          "IdentityPoolId"
	        ],
	        "members": {
	          "IdentityPoolId": {
	            "location": "uri",
	            "locationName": "IdentityPoolId"
	          },
	          "IdentityId": {
	            "location": "uri",
	            "locationName": "IdentityId"
	          },
	          "NextToken": {
	            "location": "querystring",
	            "locationName": "nextToken"
	          },
	          "MaxResults": {
	            "location": "querystring",
	            "locationName": "maxResults",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Datasets": {
	            "type": "list",
	            "member": {
	              "shape": "S8"
	            }
	          },
	          "Count": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListIdentityPoolUsage": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/identitypools",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "NextToken": {
	            "location": "querystring",
	            "locationName": "nextToken"
	          },
	          "MaxResults": {
	            "location": "querystring",
	            "locationName": "maxResults",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "IdentityPoolUsages": {
	            "type": "list",
	            "member": {
	              "shape": "Sg"
	            }
	          },
	          "MaxResults": {
	            "type": "integer"
	          },
	          "Count": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListRecords": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/records",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityPoolId",
	          "IdentityId",
	          "DatasetName"
	        ],
	        "members": {
	          "IdentityPoolId": {
	            "location": "uri",
	            "locationName": "IdentityPoolId"
	          },
	          "IdentityId": {
	            "location": "uri",
	            "locationName": "IdentityId"
	          },
	          "DatasetName": {
	            "location": "uri",
	            "locationName": "DatasetName"
	          },
	          "LastSyncCount": {
	            "location": "querystring",
	            "locationName": "lastSyncCount",
	            "type": "long"
	          },
	          "NextToken": {
	            "location": "querystring",
	            "locationName": "nextToken"
	          },
	          "MaxResults": {
	            "location": "querystring",
	            "locationName": "maxResults",
	            "type": "integer"
	          },
	          "SyncSessionToken": {
	            "location": "querystring",
	            "locationName": "syncSessionToken"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Records": {
	            "shape": "S1c"
	          },
	          "NextToken": {},
	          "Count": {
	            "type": "integer"
	          },
	          "DatasetSyncCount": {
	            "type": "long"
	          },
	          "LastModifiedBy": {},
	          "MergedDatasetNames": {
	            "type": "list",
	            "member": {}
	          },
	          "DatasetExists": {
	            "type": "boolean"
	          },
	          "DatasetDeletedAfterRequestedSyncCount": {
	            "type": "boolean"
	          },
	          "SyncSessionToken": {}
	        }
	      }
	    },
	    "RegisterDevice": {
	      "http": {
	        "requestUri": "/identitypools/{IdentityPoolId}/identity/{IdentityId}/device",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityPoolId",
	          "IdentityId",
	          "Platform",
	          "Token"
	        ],
	        "members": {
	          "IdentityPoolId": {
	            "location": "uri",
	            "locationName": "IdentityPoolId"
	          },
	          "IdentityId": {
	            "location": "uri",
	            "locationName": "IdentityId"
	          },
	          "Platform": {},
	          "Token": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "DeviceId": {}
	        }
	      }
	    },
	    "SetCognitoEvents": {
	      "http": {
	        "requestUri": "/identitypools/{IdentityPoolId}/events",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityPoolId",
	          "Events"
	        ],
	        "members": {
	          "IdentityPoolId": {
	            "location": "uri",
	            "locationName": "IdentityPoolId"
	          },
	          "Events": {
	            "shape": "Sq"
	          }
	        }
	      }
	    },
	    "SetIdentityPoolConfiguration": {
	      "http": {
	        "requestUri": "/identitypools/{IdentityPoolId}/configuration",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityPoolId"
	        ],
	        "members": {
	          "IdentityPoolId": {
	            "location": "uri",
	            "locationName": "IdentityPoolId"
	          },
	          "PushSync": {
	            "shape": "Sv"
	          },
	          "CognitoStreams": {
	            "shape": "Sz"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "IdentityPoolId": {},
	          "PushSync": {
	            "shape": "Sv"
	          },
	          "CognitoStreams": {
	            "shape": "Sz"
	          }
	        }
	      }
	    },
	    "SubscribeToDataset": {
	      "http": {
	        "requestUri": "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityPoolId",
	          "IdentityId",
	          "DatasetName",
	          "DeviceId"
	        ],
	        "members": {
	          "IdentityPoolId": {
	            "location": "uri",
	            "locationName": "IdentityPoolId"
	          },
	          "IdentityId": {
	            "location": "uri",
	            "locationName": "IdentityId"
	          },
	          "DatasetName": {
	            "location": "uri",
	            "locationName": "DatasetName"
	          },
	          "DeviceId": {
	            "location": "uri",
	            "locationName": "DeviceId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "UnsubscribeFromDataset": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityPoolId",
	          "IdentityId",
	          "DatasetName",
	          "DeviceId"
	        ],
	        "members": {
	          "IdentityPoolId": {
	            "location": "uri",
	            "locationName": "IdentityPoolId"
	          },
	          "IdentityId": {
	            "location": "uri",
	            "locationName": "IdentityId"
	          },
	          "DatasetName": {
	            "location": "uri",
	            "locationName": "DatasetName"
	          },
	          "DeviceId": {
	            "location": "uri",
	            "locationName": "DeviceId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "UpdateRecords": {
	      "http": {
	        "requestUri": "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "IdentityPoolId",
	          "IdentityId",
	          "DatasetName",
	          "SyncSessionToken"
	        ],
	        "members": {
	          "IdentityPoolId": {
	            "location": "uri",
	            "locationName": "IdentityPoolId"
	          },
	          "IdentityId": {
	            "location": "uri",
	            "locationName": "IdentityId"
	          },
	          "DatasetName": {
	            "location": "uri",
	            "locationName": "DatasetName"
	          },
	          "DeviceId": {},
	          "RecordPatches": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "Op",
	                "Key",
	                "SyncCount"
	              ],
	              "members": {
	                "Op": {},
	                "Key": {},
	                "Value": {},
	                "SyncCount": {
	                  "type": "long"
	                },
	                "DeviceLastModifiedDate": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          },
	          "SyncSessionToken": {},
	          "ClientContext": {
	            "location": "header",
	            "locationName": "x-amz-Client-Context"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Records": {
	            "shape": "S1c"
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S8": {
	      "type": "structure",
	      "members": {
	        "IdentityId": {},
	        "DatasetName": {},
	        "CreationDate": {
	          "type": "timestamp"
	        },
	        "LastModifiedDate": {
	          "type": "timestamp"
	        },
	        "LastModifiedBy": {},
	        "DataStorage": {
	          "type": "long"
	        },
	        "NumRecords": {
	          "type": "long"
	        }
	      }
	    },
	    "Sg": {
	      "type": "structure",
	      "members": {
	        "IdentityPoolId": {},
	        "SyncSessionsCount": {
	          "type": "long"
	        },
	        "DataStorage": {
	          "type": "long"
	        },
	        "LastModifiedDate": {
	          "type": "timestamp"
	        }
	      }
	    },
	    "Sq": {
	      "type": "map",
	      "key": {},
	      "value": {}
	    },
	    "Sv": {
	      "type": "structure",
	      "members": {
	        "ApplicationArns": {
	          "type": "list",
	          "member": {}
	        },
	        "RoleArn": {}
	      }
	    },
	    "Sz": {
	      "type": "structure",
	      "members": {
	        "StreamName": {},
	        "RoleArn": {},
	        "StreamingStatus": {}
	      }
	    },
	    "S1c": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "Key": {},
	          "Value": {},
	          "SyncCount": {
	            "type": "long"
	          },
	          "LastModifiedDate": {
	            "type": "timestamp"
	          },
	          "LastModifiedBy": {},
	          "DeviceLastModifiedDate": {
	            "type": "timestamp"
	          }
	        }
	      }
	    }
	  },
	  "examples": {}
	}
	},{}],28:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2014-11-12",
	    "endpointPrefix": "config",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceAbbreviation": "Config Service",
	    "serviceFullName": "AWS Config",
	    "signatureVersion": "v4",
	    "targetPrefix": "StarlingDoveService",
	    "uid": "config-2014-11-12"
	  },
	  "operations": {
	    "DeleteConfigRule": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ConfigRuleName"
	        ],
	        "members": {
	          "ConfigRuleName": {}
	        }
	      }
	    },
	    "DeleteConfigurationRecorder": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ConfigurationRecorderName"
	        ],
	        "members": {
	          "ConfigurationRecorderName": {}
	        }
	      }
	    },
	    "DeleteDeliveryChannel": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DeliveryChannelName"
	        ],
	        "members": {
	          "DeliveryChannelName": {}
	        }
	      }
	    },
	    "DeleteEvaluationResults": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ConfigRuleName"
	        ],
	        "members": {
	          "ConfigRuleName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeliverConfigSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "deliveryChannelName"
	        ],
	        "members": {
	          "deliveryChannelName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "configSnapshotId": {}
	        }
	      }
	    },
	    "DescribeComplianceByConfigRule": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ConfigRuleNames": {
	            "shape": "Sd"
	          },
	          "ComplianceTypes": {
	            "shape": "Se"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ComplianceByConfigRules": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "ConfigRuleName": {},
	                "Compliance": {
	                  "shape": "Sj"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeComplianceByResource": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ResourceType": {},
	          "ResourceId": {},
	          "ComplianceTypes": {
	            "shape": "Se"
	          },
	          "Limit": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ComplianceByResources": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "ResourceType": {},
	                "ResourceId": {},
	                "Compliance": {
	                  "shape": "Sj"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeConfigRuleEvaluationStatus": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ConfigRuleNames": {
	            "shape": "Sd"
	          },
	          "NextToken": {},
	          "Limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ConfigRulesEvaluationStatus": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "ConfigRuleName": {},
	                "ConfigRuleArn": {},
	                "ConfigRuleId": {},
	                "LastSuccessfulInvocationTime": {
	                  "type": "timestamp"
	                },
	                "LastFailedInvocationTime": {
	                  "type": "timestamp"
	                },
	                "LastSuccessfulEvaluationTime": {
	                  "type": "timestamp"
	                },
	                "LastFailedEvaluationTime": {
	                  "type": "timestamp"
	                },
	                "FirstActivatedTime": {
	                  "type": "timestamp"
	                },
	                "LastErrorCode": {},
	                "LastErrorMessage": {},
	                "FirstEvaluationStarted": {
	                  "type": "boolean"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeConfigRules": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ConfigRuleNames": {
	            "shape": "Sd"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ConfigRules": {
	            "type": "list",
	            "member": {
	              "shape": "S13"
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeConfigurationRecorderStatus": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ConfigurationRecorderNames": {
	            "shape": "S1i"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ConfigurationRecordersStatus": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "name": {},
	                "lastStartTime": {
	                  "type": "timestamp"
	                },
	                "lastStopTime": {
	                  "type": "timestamp"
	                },
	                "recording": {
	                  "type": "boolean"
	                },
	                "lastStatus": {},
	                "lastErrorCode": {},
	                "lastErrorMessage": {},
	                "lastStatusChangeTime": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeConfigurationRecorders": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ConfigurationRecorderNames": {
	            "shape": "S1i"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ConfigurationRecorders": {
	            "type": "list",
	            "member": {
	              "shape": "S1q"
	            }
	          }
	        }
	      }
	    },
	    "DescribeDeliveryChannelStatus": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DeliveryChannelNames": {
	            "shape": "S1x"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "DeliveryChannelsStatus": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "name": {},
	                "configSnapshotDeliveryInfo": {
	                  "shape": "S21"
	                },
	                "configHistoryDeliveryInfo": {
	                  "shape": "S21"
	                },
	                "configStreamDeliveryInfo": {
	                  "type": "structure",
	                  "members": {
	                    "lastStatus": {},
	                    "lastErrorCode": {},
	                    "lastErrorMessage": {},
	                    "lastStatusChangeTime": {
	                      "type": "timestamp"
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeDeliveryChannels": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DeliveryChannelNames": {
	            "shape": "S1x"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "DeliveryChannels": {
	            "type": "list",
	            "member": {
	              "shape": "S27"
	            }
	          }
	        }
	      }
	    },
	    "GetComplianceDetailsByConfigRule": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ConfigRuleName"
	        ],
	        "members": {
	          "ConfigRuleName": {},
	          "ComplianceTypes": {
	            "shape": "Se"
	          },
	          "Limit": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "EvaluationResults": {
	            "shape": "S2b"
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "GetComplianceDetailsByResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceType",
	          "ResourceId"
	        ],
	        "members": {
	          "ResourceType": {},
	          "ResourceId": {},
	          "ComplianceTypes": {
	            "shape": "Se"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "EvaluationResults": {
	            "shape": "S2b"
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "GetComplianceSummaryByConfigRule": {
	      "output": {
	        "type": "structure",
	        "members": {
	          "ComplianceSummary": {
	            "shape": "S2i"
	          }
	        }
	      }
	    },
	    "GetComplianceSummaryByResourceType": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ResourceTypes": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ComplianceSummariesByResourceType": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "ResourceType": {},
	                "ComplianceSummary": {
	                  "shape": "S2i"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "GetResourceConfigHistory": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "resourceType",
	          "resourceId"
	        ],
	        "members": {
	          "resourceType": {},
	          "resourceId": {},
	          "laterTime": {
	            "type": "timestamp"
	          },
	          "earlierTime": {
	            "type": "timestamp"
	          },
	          "chronologicalOrder": {},
	          "limit": {
	            "type": "integer"
	          },
	          "nextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "configurationItems": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "version": {},
	                "accountId": {},
	                "configurationItemCaptureTime": {
	                  "type": "timestamp"
	                },
	                "configurationItemStatus": {},
	                "configurationStateId": {},
	                "configurationItemMD5Hash": {},
	                "arn": {},
	                "resourceType": {},
	                "resourceId": {},
	                "resourceName": {},
	                "awsRegion": {},
	                "availabilityZone": {},
	                "resourceCreationTime": {
	                  "type": "timestamp"
	                },
	                "tags": {
	                  "type": "map",
	                  "key": {},
	                  "value": {}
	                },
	                "relatedEvents": {
	                  "type": "list",
	                  "member": {}
	                },
	                "relationships": {
	                  "type": "list",
	                  "member": {
	                    "type": "structure",
	                    "members": {
	                      "resourceType": {},
	                      "resourceId": {},
	                      "resourceName": {},
	                      "relationshipName": {}
	                    }
	                  }
	                },
	                "configuration": {},
	                "supplementaryConfiguration": {
	                  "type": "map",
	                  "key": {},
	                  "value": {}
	                }
	              }
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListDiscoveredResources": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "resourceType"
	        ],
	        "members": {
	          "resourceType": {},
	          "resourceIds": {
	            "type": "list",
	            "member": {}
	          },
	          "resourceName": {},
	          "limit": {
	            "type": "integer"
	          },
	          "includeDeletedResources": {
	            "type": "boolean"
	          },
	          "nextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "resourceIdentifiers": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "resourceType": {},
	                "resourceId": {},
	                "resourceName": {},
	                "resourceDeletionTime": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "PutConfigRule": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ConfigRule"
	        ],
	        "members": {
	          "ConfigRule": {
	            "shape": "S13"
	          }
	        }
	      }
	    },
	    "PutConfigurationRecorder": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ConfigurationRecorder"
	        ],
	        "members": {
	          "ConfigurationRecorder": {
	            "shape": "S1q"
	          }
	        }
	      }
	    },
	    "PutDeliveryChannel": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DeliveryChannel"
	        ],
	        "members": {
	          "DeliveryChannel": {
	            "shape": "S27"
	          }
	        }
	      }
	    },
	    "PutEvaluations": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResultToken"
	        ],
	        "members": {
	          "Evaluations": {
	            "shape": "S3t"
	          },
	          "ResultToken": {},
	          "TestMode": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "FailedEvaluations": {
	            "shape": "S3t"
	          }
	        }
	      }
	    },
	    "StartConfigRulesEvaluation": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ConfigRuleNames": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "StartConfigurationRecorder": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ConfigurationRecorderName"
	        ],
	        "members": {
	          "ConfigurationRecorderName": {}
	        }
	      }
	    },
	    "StopConfigurationRecorder": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ConfigurationRecorderName"
	        ],
	        "members": {
	          "ConfigurationRecorderName": {}
	        }
	      }
	    }
	  },
	  "shapes": {
	    "Sd": {
	      "type": "list",
	      "member": {}
	    },
	    "Se": {
	      "type": "list",
	      "member": {}
	    },
	    "Sj": {
	      "type": "structure",
	      "members": {
	        "ComplianceType": {},
	        "ComplianceContributorCount": {
	          "shape": "Sk"
	        }
	      }
	    },
	    "Sk": {
	      "type": "structure",
	      "members": {
	        "CappedCount": {
	          "type": "integer"
	        },
	        "CapExceeded": {
	          "type": "boolean"
	        }
	      }
	    },
	    "S13": {
	      "type": "structure",
	      "required": [
	        "Source"
	      ],
	      "members": {
	        "ConfigRuleName": {},
	        "ConfigRuleArn": {},
	        "ConfigRuleId": {},
	        "Description": {},
	        "Scope": {
	          "type": "structure",
	          "members": {
	            "ComplianceResourceTypes": {
	              "type": "list",
	              "member": {}
	            },
	            "TagKey": {},
	            "TagValue": {},
	            "ComplianceResourceId": {}
	          }
	        },
	        "Source": {
	          "type": "structure",
	          "required": [
	            "Owner",
	            "SourceIdentifier"
	          ],
	          "members": {
	            "Owner": {},
	            "SourceIdentifier": {},
	            "SourceDetails": {
	              "type": "list",
	              "member": {
	                "type": "structure",
	                "members": {
	                  "EventSource": {},
	                  "MessageType": {},
	                  "MaximumExecutionFrequency": {}
	                }
	              }
	            }
	          }
	        },
	        "InputParameters": {},
	        "MaximumExecutionFrequency": {},
	        "ConfigRuleState": {}
	      }
	    },
	    "S1i": {
	      "type": "list",
	      "member": {}
	    },
	    "S1q": {
	      "type": "structure",
	      "members": {
	        "name": {},
	        "roleARN": {},
	        "recordingGroup": {
	          "type": "structure",
	          "members": {
	            "allSupported": {
	              "type": "boolean"
	            },
	            "includeGlobalResourceTypes": {
	              "type": "boolean"
	            },
	            "resourceTypes": {
	              "type": "list",
	              "member": {}
	            }
	          }
	        }
	      }
	    },
	    "S1x": {
	      "type": "list",
	      "member": {}
	    },
	    "S21": {
	      "type": "structure",
	      "members": {
	        "lastStatus": {},
	        "lastErrorCode": {},
	        "lastErrorMessage": {},
	        "lastAttemptTime": {
	          "type": "timestamp"
	        },
	        "lastSuccessfulTime": {
	          "type": "timestamp"
	        },
	        "nextDeliveryTime": {
	          "type": "timestamp"
	        }
	      }
	    },
	    "S27": {
	      "type": "structure",
	      "members": {
	        "name": {},
	        "s3BucketName": {},
	        "s3KeyPrefix": {},
	        "snsTopicARN": {},
	        "configSnapshotDeliveryProperties": {
	          "type": "structure",
	          "members": {
	            "deliveryFrequency": {}
	          }
	        }
	      }
	    },
	    "S2b": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "EvaluationResultIdentifier": {
	            "type": "structure",
	            "members": {
	              "EvaluationResultQualifier": {
	                "type": "structure",
	                "members": {
	                  "ConfigRuleName": {},
	                  "ResourceType": {},
	                  "ResourceId": {}
	                }
	              },
	              "OrderingTimestamp": {
	                "type": "timestamp"
	              }
	            }
	          },
	          "ComplianceType": {},
	          "ResultRecordedTime": {
	            "type": "timestamp"
	          },
	          "ConfigRuleInvokedTime": {
	            "type": "timestamp"
	          },
	          "Annotation": {},
	          "ResultToken": {}
	        }
	      }
	    },
	    "S2i": {
	      "type": "structure",
	      "members": {
	        "CompliantResourceCount": {
	          "shape": "Sk"
	        },
	        "NonCompliantResourceCount": {
	          "shape": "Sk"
	        },
	        "ComplianceSummaryTimestamp": {
	          "type": "timestamp"
	        }
	      }
	    },
	    "S3t": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "ComplianceResourceType",
	          "ComplianceResourceId",
	          "ComplianceType",
	          "OrderingTimestamp"
	        ],
	        "members": {
	          "ComplianceResourceType": {},
	          "ComplianceResourceId": {},
	          "ComplianceType": {},
	          "Annotation": {},
	          "OrderingTimestamp": {
	            "type": "timestamp"
	          }
	        }
	      }
	    }
	  }
	}
	},{}],29:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "GetResourceConfigHistory": {
	      "input_token": "nextToken",
	      "limit_key": "limit",
	      "output_token": "nextToken",
	      "result_key": "configurationItems"
	    }
	  }
	}
	},{}],30:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2017-01-06",
	    "endpointPrefix": "cur",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceFullName": "AWS Cost and Usage Report Service",
	    "signatureVersion": "v4",
	    "signingName": "cur",
	    "targetPrefix": "AWSOrigamiServiceGatewayService",
	    "uid": "cur-2017-01-06"
	  },
	  "operations": {
	    "DeleteReportDefinition": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ReportName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ResponseMessage": {}
	        }
	      }
	    },
	    "DescribeReportDefinitions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ReportDefinitions": {
	            "type": "list",
	            "member": {
	              "shape": "Sa"
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "PutReportDefinition": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ReportDefinition"
	        ],
	        "members": {
	          "ReportDefinition": {
	            "shape": "Sa"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    }
	  },
	  "shapes": {
	    "Sa": {
	      "type": "structure",
	      "required": [
	        "ReportName",
	        "TimeUnit",
	        "Format",
	        "Compression",
	        "AdditionalSchemaElements",
	        "S3Bucket",
	        "S3Prefix",
	        "S3Region"
	      ],
	      "members": {
	        "ReportName": {},
	        "TimeUnit": {},
	        "Format": {},
	        "Compression": {},
	        "AdditionalSchemaElements": {
	          "type": "list",
	          "member": {}
	        },
	        "S3Bucket": {},
	        "S3Prefix": {},
	        "S3Region": {},
	        "AdditionalArtifacts": {
	          "type": "list",
	          "member": {}
	        }
	      }
	    }
	  }
	}
	},{}],31:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "DescribeReportDefinitions": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "limit_key": "MaxResults"
	    }
	  }
	}
	
	},{}],32:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2015-06-23",
	    "endpointPrefix": "devicefarm",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceFullName": "AWS Device Farm",
	    "signatureVersion": "v4",
	    "targetPrefix": "DeviceFarm_20150623",
	    "uid": "devicefarm-2015-06-23"
	  },
	  "operations": {
	    "CreateDevicePool": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "projectArn",
	          "name",
	          "rules"
	        ],
	        "members": {
	          "projectArn": {},
	          "name": {},
	          "description": {},
	          "rules": {
	            "shape": "S5"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "devicePool": {
	            "shape": "Sb"
	          }
	        }
	      }
	    },
	    "CreateProject": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "name"
	        ],
	        "members": {
	          "name": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "project": {
	            "shape": "Sf"
	          }
	        }
	      }
	    },
	    "CreateRemoteAccessSession": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "projectArn",
	          "deviceArn"
	        ],
	        "members": {
	          "projectArn": {},
	          "deviceArn": {},
	          "name": {},
	          "configuration": {
	            "type": "structure",
	            "members": {
	              "billingMethod": {}
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "remoteAccessSession": {
	            "shape": "Sl"
	          }
	        }
	      }
	    },
	    "CreateUpload": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "projectArn",
	          "name",
	          "type"
	        ],
	        "members": {
	          "projectArn": {},
	          "name": {},
	          "type": {},
	          "contentType": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "upload": {
	            "shape": "S12"
	          }
	        }
	      }
	    },
	    "DeleteDevicePool": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "arn"
	        ],
	        "members": {
	          "arn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteProject": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "arn"
	        ],
	        "members": {
	          "arn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteRemoteAccessSession": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "arn"
	        ],
	        "members": {
	          "arn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteRun": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "arn"
	        ],
	        "members": {
	          "arn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteUpload": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "arn"
	        ],
	        "members": {
	          "arn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "GetAccountSettings": {
	      "input": {
	        "type": "structure",
	        "members": {}
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "accountSettings": {
	            "type": "structure",
	            "members": {
	              "awsAccountNumber": {},
	              "unmeteredDevices": {
	                "shape": "S1k"
	              },
	              "unmeteredRemoteAccessDevices": {
	                "shape": "S1k"
	              }
	            }
	          }
	        }
	      }
	    },
	    "GetDevice": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "arn"
	        ],
	        "members": {
	          "arn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "device": {
	            "shape": "So"
	          }
	        }
	      }
	    },
	    "GetDevicePool": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "arn"
	        ],
	        "members": {
	          "arn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "devicePool": {
	            "shape": "Sb"
	          }
	        }
	      }
	    },
	    "GetDevicePoolCompatibility": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "devicePoolArn"
	        ],
	        "members": {
	          "devicePoolArn": {},
	          "appArn": {},
	          "testType": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "compatibleDevices": {
	            "shape": "S1s"
	          },
	          "incompatibleDevices": {
	            "shape": "S1s"
	          }
	        }
	      }
	    },
	    "GetJob": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "arn"
	        ],
	        "members": {
	          "arn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "job": {
	            "shape": "S1y"
	          }
	        }
	      }
	    },
	    "GetOfferingStatus": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "nextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "current": {
	            "shape": "S23"
	          },
	          "nextPeriod": {
	            "shape": "S23"
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "GetProject": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "arn"
	        ],
	        "members": {
	          "arn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "project": {
	            "shape": "Sf"
	          }
	        }
	      }
	    },
	    "GetRemoteAccessSession": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "arn"
	        ],
	        "members": {
	          "arn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "remoteAccessSession": {
	            "shape": "Sl"
	          }
	        }
	      }
	    },
	    "GetRun": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "arn"
	        ],
	        "members": {
	          "arn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "run": {
	            "shape": "S2k"
	          }
	        }
	      }
	    },
	    "GetSuite": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "arn"
	        ],
	        "members": {
	          "arn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "suite": {
	            "shape": "S2n"
	          }
	        }
	      }
	    },
	    "GetTest": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "arn"
	        ],
	        "members": {
	          "arn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "test": {
	            "shape": "S2q"
	          }
	        }
	      }
	    },
	    "GetUpload": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "arn"
	        ],
	        "members": {
	          "arn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "upload": {
	            "shape": "S12"
	          }
	        }
	      }
	    },
	    "InstallToRemoteAccessSession": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "remoteAccessSessionArn",
	          "appArn"
	        ],
	        "members": {
	          "remoteAccessSessionArn": {},
	          "appArn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "appUpload": {
	            "shape": "S12"
	          }
	        }
	      }
	    },
	    "ListArtifacts": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "arn",
	          "type"
	        ],
	        "members": {
	          "arn": {},
	          "type": {},
	          "nextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "artifacts": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "arn": {},
	                "name": {},
	                "type": {},
	                "extension": {},
	                "url": {}
	              }
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListDevicePools": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "arn"
	        ],
	        "members": {
	          "arn": {},
	          "type": {},
	          "nextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "devicePools": {
	            "type": "list",
	            "member": {
	              "shape": "Sb"
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListDevices": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "arn": {},
	          "nextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "devices": {
	            "type": "list",
	            "member": {
	              "shape": "So"
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListJobs": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "arn"
	        ],
	        "members": {
	          "arn": {},
	          "nextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "jobs": {
	            "type": "list",
	            "member": {
	              "shape": "S1y"
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListOfferingTransactions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "nextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "offeringTransactions": {
	            "type": "list",
	            "member": {
	              "shape": "S3d"
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListOfferings": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "nextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "offerings": {
	            "type": "list",
	            "member": {
	              "shape": "S27"
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListProjects": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "arn": {},
	          "nextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "projects": {
	            "type": "list",
	            "member": {
	              "shape": "Sf"
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListRemoteAccessSessions": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "arn"
	        ],
	        "members": {
	          "arn": {},
	          "nextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "remoteAccessSessions": {
	            "type": "list",
	            "member": {
	              "shape": "Sl"
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListRuns": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "arn"
	        ],
	        "members": {
	          "arn": {},
	          "nextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "runs": {
	            "type": "list",
	            "member": {
	              "shape": "S2k"
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListSamples": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "arn"
	        ],
	        "members": {
	          "arn": {},
	          "nextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "samples": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "arn": {},
	                "type": {},
	                "url": {}
	              }
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListSuites": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "arn"
	        ],
	        "members": {
	          "arn": {},
	          "nextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "suites": {
	            "type": "list",
	            "member": {
	              "shape": "S2n"
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListTests": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "arn"
	        ],
	        "members": {
	          "arn": {},
	          "nextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "tests": {
	            "type": "list",
	            "member": {
	              "shape": "S2q"
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListUniqueProblems": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "arn"
	        ],
	        "members": {
	          "arn": {},
	          "nextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "uniqueProblems": {
	            "type": "map",
	            "key": {},
	            "value": {
	              "type": "list",
	              "member": {
	                "type": "structure",
	                "members": {
	                  "message": {},
	                  "problems": {
	                    "type": "list",
	                    "member": {
	                      "type": "structure",
	                      "members": {
	                        "run": {
	                          "shape": "S49"
	                        },
	                        "job": {
	                          "shape": "S49"
	                        },
	                        "suite": {
	                          "shape": "S49"
	                        },
	                        "test": {
	                          "shape": "S49"
	                        },
	                        "device": {
	                          "shape": "So"
	                        },
	                        "result": {},
	                        "message": {}
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListUploads": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "arn"
	        ],
	        "members": {
	          "arn": {},
	          "nextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "uploads": {
	            "type": "list",
	            "member": {
	              "shape": "S12"
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "PurchaseOffering": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "offeringId": {},
	          "quantity": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "offeringTransaction": {
	            "shape": "S3d"
	          }
	        }
	      }
	    },
	    "RenewOffering": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "offeringId": {},
	          "quantity": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "offeringTransaction": {
	            "shape": "S3d"
	          }
	        }
	      }
	    },
	    "ScheduleRun": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "projectArn",
	          "devicePoolArn",
	          "test"
	        ],
	        "members": {
	          "projectArn": {},
	          "appArn": {},
	          "devicePoolArn": {},
	          "name": {},
	          "test": {
	            "type": "structure",
	            "required": [
	              "type"
	            ],
	            "members": {
	              "type": {},
	              "testPackageArn": {},
	              "filter": {},
	              "parameters": {
	                "type": "map",
	                "key": {},
	                "value": {}
	              }
	            }
	          },
	          "configuration": {
	            "type": "structure",
	            "members": {
	              "extraDataPackageArn": {},
	              "networkProfileArn": {},
	              "locale": {},
	              "location": {
	                "type": "structure",
	                "required": [
	                  "latitude",
	                  "longitude"
	                ],
	                "members": {
	                  "latitude": {
	                    "type": "double"
	                  },
	                  "longitude": {
	                    "type": "double"
	                  }
	                }
	              },
	              "radios": {
	                "type": "structure",
	                "members": {
	                  "wifi": {
	                    "type": "boolean"
	                  },
	                  "bluetooth": {
	                    "type": "boolean"
	                  },
	                  "nfc": {
	                    "type": "boolean"
	                  },
	                  "gps": {
	                    "type": "boolean"
	                  }
	                }
	              },
	              "auxiliaryApps": {
	                "type": "list",
	                "member": {}
	              },
	              "billingMethod": {}
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "run": {
	            "shape": "S2k"
	          }
	        }
	      }
	    },
	    "StopRemoteAccessSession": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "arn"
	        ],
	        "members": {
	          "arn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "remoteAccessSession": {
	            "shape": "Sl"
	          }
	        }
	      }
	    },
	    "StopRun": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "arn"
	        ],
	        "members": {
	          "arn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "run": {
	            "shape": "S2k"
	          }
	        }
	      }
	    },
	    "UpdateDevicePool": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "arn"
	        ],
	        "members": {
	          "arn": {},
	          "name": {},
	          "description": {},
	          "rules": {
	            "shape": "S5"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "devicePool": {
	            "shape": "Sb"
	          }
	        }
	      }
	    },
	    "UpdateProject": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "arn"
	        ],
	        "members": {
	          "arn": {},
	          "name": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "project": {
	            "shape": "Sf"
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S5": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "attribute": {},
	          "operator": {},
	          "value": {}
	        }
	      }
	    },
	    "Sb": {
	      "type": "structure",
	      "members": {
	        "arn": {},
	        "name": {},
	        "description": {},
	        "type": {},
	        "rules": {
	          "shape": "S5"
	        }
	      }
	    },
	    "Sf": {
	      "type": "structure",
	      "members": {
	        "arn": {},
	        "name": {},
	        "created": {
	          "type": "timestamp"
	        }
	      }
	    },
	    "Sl": {
	      "type": "structure",
	      "members": {
	        "arn": {},
	        "name": {},
	        "created": {
	          "type": "timestamp"
	        },
	        "status": {},
	        "result": {},
	        "message": {},
	        "started": {
	          "type": "timestamp"
	        },
	        "stopped": {
	          "type": "timestamp"
	        },
	        "device": {
	          "shape": "So"
	        },
	        "billingMethod": {},
	        "deviceMinutes": {
	          "shape": "Sx"
	        },
	        "endpoint": {}
	      }
	    },
	    "So": {
	      "type": "structure",
	      "members": {
	        "arn": {},
	        "name": {},
	        "manufacturer": {},
	        "model": {},
	        "formFactor": {},
	        "platform": {},
	        "os": {},
	        "cpu": {
	          "type": "structure",
	          "members": {
	            "frequency": {},
	            "architecture": {},
	            "clock": {
	              "type": "double"
	            }
	          }
	        },
	        "resolution": {
	          "type": "structure",
	          "members": {
	            "width": {
	              "type": "integer"
	            },
	            "height": {
	              "type": "integer"
	            }
	          }
	        },
	        "heapSize": {
	          "type": "long"
	        },
	        "memory": {
	          "type": "long"
	        },
	        "image": {},
	        "carrier": {},
	        "radio": {},
	        "remoteAccessEnabled": {
	          "type": "boolean"
	        },
	        "fleetType": {},
	        "fleetName": {}
	      }
	    },
	    "Sx": {
	      "type": "structure",
	      "members": {
	        "total": {
	          "type": "double"
	        },
	        "metered": {
	          "type": "double"
	        },
	        "unmetered": {
	          "type": "double"
	        }
	      }
	    },
	    "S12": {
	      "type": "structure",
	      "members": {
	        "arn": {},
	        "name": {},
	        "created": {
	          "type": "timestamp"
	        },
	        "type": {},
	        "status": {},
	        "url": {},
	        "metadata": {},
	        "contentType": {},
	        "message": {}
	      }
	    },
	    "S1k": {
	      "type": "map",
	      "key": {},
	      "value": {
	        "type": "integer"
	      }
	    },
	    "S1s": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "device": {
	            "shape": "So"
	          },
	          "compatible": {
	            "type": "boolean"
	          },
	          "incompatibilityMessages": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "message": {},
	                "type": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "S1y": {
	      "type": "structure",
	      "members": {
	        "arn": {},
	        "name": {},
	        "type": {},
	        "created": {
	          "type": "timestamp"
	        },
	        "status": {},
	        "result": {},
	        "started": {
	          "type": "timestamp"
	        },
	        "stopped": {
	          "type": "timestamp"
	        },
	        "counters": {
	          "shape": "S1z"
	        },
	        "message": {},
	        "device": {
	          "shape": "So"
	        },
	        "deviceMinutes": {
	          "shape": "Sx"
	        }
	      }
	    },
	    "S1z": {
	      "type": "structure",
	      "members": {
	        "total": {
	          "type": "integer"
	        },
	        "passed": {
	          "type": "integer"
	        },
	        "failed": {
	          "type": "integer"
	        },
	        "warned": {
	          "type": "integer"
	        },
	        "errored": {
	          "type": "integer"
	        },
	        "stopped": {
	          "type": "integer"
	        },
	        "skipped": {
	          "type": "integer"
	        }
	      }
	    },
	    "S23": {
	      "type": "map",
	      "key": {},
	      "value": {
	        "shape": "S25"
	      }
	    },
	    "S25": {
	      "type": "structure",
	      "members": {
	        "type": {},
	        "offering": {
	          "shape": "S27"
	        },
	        "quantity": {
	          "type": "integer"
	        },
	        "effectiveOn": {
	          "type": "timestamp"
	        }
	      }
	    },
	    "S27": {
	      "type": "structure",
	      "members": {
	        "id": {},
	        "description": {},
	        "type": {},
	        "platform": {},
	        "recurringCharges": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "members": {
	              "cost": {
	                "shape": "S2b"
	              },
	              "frequency": {}
	            }
	          }
	        }
	      }
	    },
	    "S2b": {
	      "type": "structure",
	      "members": {
	        "amount": {
	          "type": "double"
	        },
	        "currencyCode": {}
	      }
	    },
	    "S2k": {
	      "type": "structure",
	      "members": {
	        "arn": {},
	        "name": {},
	        "type": {},
	        "platform": {},
	        "created": {
	          "type": "timestamp"
	        },
	        "status": {},
	        "result": {},
	        "started": {
	          "type": "timestamp"
	        },
	        "stopped": {
	          "type": "timestamp"
	        },
	        "counters": {
	          "shape": "S1z"
	        },
	        "message": {},
	        "totalJobs": {
	          "type": "integer"
	        },
	        "completedJobs": {
	          "type": "integer"
	        },
	        "billingMethod": {},
	        "deviceMinutes": {
	          "shape": "Sx"
	        }
	      }
	    },
	    "S2n": {
	      "type": "structure",
	      "members": {
	        "arn": {},
	        "name": {},
	        "type": {},
	        "created": {
	          "type": "timestamp"
	        },
	        "status": {},
	        "result": {},
	        "started": {
	          "type": "timestamp"
	        },
	        "stopped": {
	          "type": "timestamp"
	        },
	        "counters": {
	          "shape": "S1z"
	        },
	        "message": {},
	        "deviceMinutes": {
	          "shape": "Sx"
	        }
	      }
	    },
	    "S2q": {
	      "type": "structure",
	      "members": {
	        "arn": {},
	        "name": {},
	        "type": {},
	        "created": {
	          "type": "timestamp"
	        },
	        "status": {},
	        "result": {},
	        "started": {
	          "type": "timestamp"
	        },
	        "stopped": {
	          "type": "timestamp"
	        },
	        "counters": {
	          "shape": "S1z"
	        },
	        "message": {},
	        "deviceMinutes": {
	          "shape": "Sx"
	        }
	      }
	    },
	    "S3d": {
	      "type": "structure",
	      "members": {
	        "offeringStatus": {
	          "shape": "S25"
	        },
	        "transactionId": {},
	        "createdOn": {
	          "type": "timestamp"
	        },
	        "cost": {
	          "shape": "S2b"
	        }
	      }
	    },
	    "S49": {
	      "type": "structure",
	      "members": {
	        "arn": {},
	        "name": {}
	      }
	    }
	  }
	}
	},{}],33:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "GetOfferingStatus": {
	      "input_token": "nextToken",
	      "output_token": "nextToken",
	      "result_key": ["current","nextPeriod"]
	    },
	    "ListArtifacts": {
	      "input_token": "nextToken",
	      "output_token": "nextToken",
	      "result_key": "artifacts"
	    },
	    "ListDevicePools": {
	      "input_token": "nextToken",
	      "output_token": "nextToken",
	      "result_key": "devicePools"
	    },
	    "ListDevices": {
	      "input_token": "nextToken",
	      "output_token": "nextToken",
	      "result_key": "devices"
	    },
	    "ListJobs": {
	      "input_token": "nextToken",
	      "output_token": "nextToken",
	      "result_key": "jobs"
	    },
	    "ListOfferingTransactions": {
	      "input_token": "nextToken",
	      "output_token": "nextToken",
	      "result_key": "offeringTransactions"
	    },
	    "ListOfferings": {
	      "input_token": "nextToken",
	      "output_token": "nextToken",
	      "result_key": "offerings"
	    },
	    "ListProjects": {
	      "input_token": "nextToken",
	      "output_token": "nextToken",
	      "result_key": "projects"
	    },
	    "ListRuns": {
	      "input_token": "nextToken",
	      "output_token": "nextToken",
	      "result_key": "runs"
	    },
	    "ListSamples": {
	      "input_token": "nextToken",
	      "output_token": "nextToken",
	      "result_key": "samples"
	    },
	    "ListSuites": {
	      "input_token": "nextToken",
	      "output_token": "nextToken",
	      "result_key": "suites"
	    },
	    "ListTests": {
	      "input_token": "nextToken",
	      "output_token": "nextToken",
	      "result_key": "tests"
	    },
	    "ListUniqueProblems": {
	      "input_token": "nextToken",
	      "output_token": "nextToken",
	      "result_key": "uniqueProblems"
	    },
	    "ListUploads": {
	      "input_token": "nextToken",
	      "output_token": "nextToken",
	      "result_key": "uploads"
	    }
	  }
	}
	
	},{}],34:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2012-10-25",
	    "endpointPrefix": "directconnect",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceFullName": "AWS Direct Connect",
	    "signatureVersion": "v4",
	    "targetPrefix": "OvertureService",
	    "uid": "directconnect-2012-10-25"
	  },
	  "operations": {
	    "AllocateConnectionOnInterconnect": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "bandwidth",
	          "connectionName",
	          "ownerAccount",
	          "interconnectId",
	          "vlan"
	        ],
	        "members": {
	          "bandwidth": {},
	          "connectionName": {},
	          "ownerAccount": {},
	          "interconnectId": {},
	          "vlan": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "shape": "S7"
	      }
	    },
	    "AllocateHostedConnection": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "connectionId",
	          "ownerAccount",
	          "bandwidth",
	          "connectionName",
	          "vlan"
	        ],
	        "members": {
	          "connectionId": {},
	          "ownerAccount": {},
	          "bandwidth": {},
	          "connectionName": {},
	          "vlan": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "shape": "S7"
	      }
	    },
	    "AllocatePrivateVirtualInterface": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "connectionId",
	          "ownerAccount",
	          "newPrivateVirtualInterfaceAllocation"
	        ],
	        "members": {
	          "connectionId": {},
	          "ownerAccount": {},
	          "newPrivateVirtualInterfaceAllocation": {
	            "type": "structure",
	            "required": [
	              "virtualInterfaceName",
	              "vlan",
	              "asn"
	            ],
	            "members": {
	              "virtualInterfaceName": {},
	              "vlan": {
	                "type": "integer"
	              },
	              "asn": {
	                "type": "integer"
	              },
	              "authKey": {},
	              "amazonAddress": {},
	              "addressFamily": {},
	              "customerAddress": {}
	            }
	          }
	        }
	      },
	      "output": {
	        "shape": "Sp"
	      }
	    },
	    "AllocatePublicVirtualInterface": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "connectionId",
	          "ownerAccount",
	          "newPublicVirtualInterfaceAllocation"
	        ],
	        "members": {
	          "connectionId": {},
	          "ownerAccount": {},
	          "newPublicVirtualInterfaceAllocation": {
	            "type": "structure",
	            "required": [
	              "virtualInterfaceName",
	              "vlan",
	              "asn"
	            ],
	            "members": {
	              "virtualInterfaceName": {},
	              "vlan": {
	                "type": "integer"
	              },
	              "asn": {
	                "type": "integer"
	              },
	              "authKey": {},
	              "amazonAddress": {},
	              "customerAddress": {},
	              "addressFamily": {},
	              "routeFilterPrefixes": {
	                "shape": "Sv"
	              }
	            }
	          }
	        }
	      },
	      "output": {
	        "shape": "Sp"
	      }
	    },
	    "AssociateConnectionWithLag": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "connectionId",
	          "lagId"
	        ],
	        "members": {
	          "connectionId": {},
	          "lagId": {}
	        }
	      },
	      "output": {
	        "shape": "S7"
	      }
	    },
	    "AssociateHostedConnection": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "connectionId",
	          "parentConnectionId"
	        ],
	        "members": {
	          "connectionId": {},
	          "parentConnectionId": {}
	        }
	      },
	      "output": {
	        "shape": "S7"
	      }
	    },
	    "AssociateVirtualInterface": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "virtualInterfaceId",
	          "connectionId"
	        ],
	        "members": {
	          "virtualInterfaceId": {},
	          "connectionId": {}
	        }
	      },
	      "output": {
	        "shape": "Sp"
	      }
	    },
	    "ConfirmConnection": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "connectionId"
	        ],
	        "members": {
	          "connectionId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "connectionState": {}
	        }
	      }
	    },
	    "ConfirmPrivateVirtualInterface": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "virtualInterfaceId",
	          "virtualGatewayId"
	        ],
	        "members": {
	          "virtualInterfaceId": {},
	          "virtualGatewayId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "virtualInterfaceState": {}
	        }
	      }
	    },
	    "ConfirmPublicVirtualInterface": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "virtualInterfaceId"
	        ],
	        "members": {
	          "virtualInterfaceId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "virtualInterfaceState": {}
	        }
	      }
	    },
	    "CreateBGPPeer": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "virtualInterfaceId": {},
	          "newBGPPeer": {
	            "type": "structure",
	            "members": {
	              "asn": {
	                "type": "integer"
	              },
	              "authKey": {},
	              "addressFamily": {},
	              "amazonAddress": {},
	              "customerAddress": {}
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "virtualInterface": {
	            "shape": "Sp"
	          }
	        }
	      }
	    },
	    "CreateConnection": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "location",
	          "bandwidth",
	          "connectionName"
	        ],
	        "members": {
	          "location": {},
	          "bandwidth": {},
	          "connectionName": {},
	          "lagId": {}
	        }
	      },
	      "output": {
	        "shape": "S7"
	      }
	    },
	    "CreateInterconnect": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "interconnectName",
	          "bandwidth",
	          "location"
	        ],
	        "members": {
	          "interconnectName": {},
	          "bandwidth": {},
	          "location": {},
	          "lagId": {}
	        }
	      },
	      "output": {
	        "shape": "S1j"
	      }
	    },
	    "CreateLag": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "numberOfConnections",
	          "location",
	          "connectionsBandwidth",
	          "lagName"
	        ],
	        "members": {
	          "numberOfConnections": {
	            "type": "integer"
	          },
	          "location": {},
	          "connectionsBandwidth": {},
	          "lagName": {},
	          "connectionId": {}
	        }
	      },
	      "output": {
	        "shape": "S1o"
	      }
	    },
	    "CreatePrivateVirtualInterface": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "connectionId",
	          "newPrivateVirtualInterface"
	        ],
	        "members": {
	          "connectionId": {},
	          "newPrivateVirtualInterface": {
	            "type": "structure",
	            "required": [
	              "virtualInterfaceName",
	              "vlan",
	              "asn",
	              "virtualGatewayId"
	            ],
	            "members": {
	              "virtualInterfaceName": {},
	              "vlan": {
	                "type": "integer"
	              },
	              "asn": {
	                "type": "integer"
	              },
	              "authKey": {},
	              "amazonAddress": {},
	              "customerAddress": {},
	              "addressFamily": {},
	              "virtualGatewayId": {}
	            }
	          }
	        }
	      },
	      "output": {
	        "shape": "Sp"
	      }
	    },
	    "CreatePublicVirtualInterface": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "connectionId",
	          "newPublicVirtualInterface"
	        ],
	        "members": {
	          "connectionId": {},
	          "newPublicVirtualInterface": {
	            "type": "structure",
	            "required": [
	              "virtualInterfaceName",
	              "vlan",
	              "asn"
	            ],
	            "members": {
	              "virtualInterfaceName": {},
	              "vlan": {
	                "type": "integer"
	              },
	              "asn": {
	                "type": "integer"
	              },
	              "authKey": {},
	              "amazonAddress": {},
	              "customerAddress": {},
	              "addressFamily": {},
	              "routeFilterPrefixes": {
	                "shape": "Sv"
	              }
	            }
	          }
	        }
	      },
	      "output": {
	        "shape": "Sp"
	      }
	    },
	    "DeleteBGPPeer": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "virtualInterfaceId": {},
	          "asn": {
	            "type": "integer"
	          },
	          "customerAddress": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "virtualInterface": {
	            "shape": "Sp"
	          }
	        }
	      }
	    },
	    "DeleteConnection": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "connectionId"
	        ],
	        "members": {
	          "connectionId": {}
	        }
	      },
	      "output": {
	        "shape": "S7"
	      }
	    },
	    "DeleteInterconnect": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "interconnectId"
	        ],
	        "members": {
	          "interconnectId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "interconnectState": {}
	        }
	      }
	    },
	    "DeleteLag": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "lagId"
	        ],
	        "members": {
	          "lagId": {}
	        }
	      },
	      "output": {
	        "shape": "S1o"
	      }
	    },
	    "DeleteVirtualInterface": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "virtualInterfaceId"
	        ],
	        "members": {
	          "virtualInterfaceId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "virtualInterfaceState": {}
	        }
	      }
	    },
	    "DescribeConnectionLoa": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "connectionId"
	        ],
	        "members": {
	          "connectionId": {},
	          "providerName": {},
	          "loaContentType": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "loa": {
	            "shape": "S28"
	          }
	        }
	      }
	    },
	    "DescribeConnections": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "connectionId": {}
	        }
	      },
	      "output": {
	        "shape": "S2b"
	      }
	    },
	    "DescribeConnectionsOnInterconnect": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "interconnectId"
	        ],
	        "members": {
	          "interconnectId": {}
	        }
	      },
	      "output": {
	        "shape": "S2b"
	      }
	    },
	    "DescribeHostedConnections": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "connectionId"
	        ],
	        "members": {
	          "connectionId": {}
	        }
	      },
	      "output": {
	        "shape": "S2b"
	      }
	    },
	    "DescribeInterconnectLoa": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "interconnectId"
	        ],
	        "members": {
	          "interconnectId": {},
	          "providerName": {},
	          "loaContentType": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "loa": {
	            "shape": "S28"
	          }
	        }
	      }
	    },
	    "DescribeInterconnects": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "interconnectId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "interconnects": {
	            "type": "list",
	            "member": {
	              "shape": "S1j"
	            }
	          }
	        }
	      }
	    },
	    "DescribeLags": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "lagId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "lags": {
	            "type": "list",
	            "member": {
	              "shape": "S1o"
	            }
	          }
	        }
	      }
	    },
	    "DescribeLoa": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "connectionId"
	        ],
	        "members": {
	          "connectionId": {},
	          "providerName": {},
	          "loaContentType": {}
	        }
	      },
	      "output": {
	        "shape": "S28"
	      }
	    },
	    "DescribeLocations": {
	      "output": {
	        "type": "structure",
	        "members": {
	          "locations": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "locationCode": {},
	                "locationName": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeTags": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "resourceArns"
	        ],
	        "members": {
	          "resourceArns": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "resourceTags": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "resourceArn": {},
	                "tags": {
	                  "shape": "S2x"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeVirtualGateways": {
	      "output": {
	        "type": "structure",
	        "members": {
	          "virtualGateways": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "virtualGatewayId": {},
	                "virtualGatewayState": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeVirtualInterfaces": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "connectionId": {},
	          "virtualInterfaceId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "virtualInterfaces": {
	            "type": "list",
	            "member": {
	              "shape": "Sp"
	            }
	          }
	        }
	      }
	    },
	    "DisassociateConnectionFromLag": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "connectionId",
	          "lagId"
	        ],
	        "members": {
	          "connectionId": {},
	          "lagId": {}
	        }
	      },
	      "output": {
	        "shape": "S7"
	      }
	    },
	    "TagResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "resourceArn",
	          "tags"
	        ],
	        "members": {
	          "resourceArn": {},
	          "tags": {
	            "shape": "S2x"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "UntagResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "resourceArn",
	          "tagKeys"
	        ],
	        "members": {
	          "resourceArn": {},
	          "tagKeys": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "UpdateLag": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "lagId"
	        ],
	        "members": {
	          "lagId": {},
	          "lagName": {},
	          "minimumLinks": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "shape": "S1o"
	      }
	    }
	  },
	  "shapes": {
	    "S7": {
	      "type": "structure",
	      "members": {
	        "ownerAccount": {},
	        "connectionId": {},
	        "connectionName": {},
	        "connectionState": {},
	        "region": {},
	        "location": {},
	        "bandwidth": {},
	        "vlan": {
	          "type": "integer"
	        },
	        "partnerName": {},
	        "loaIssueTime": {
	          "type": "timestamp"
	        },
	        "lagId": {},
	        "awsDevice": {}
	      }
	    },
	    "Sp": {
	      "type": "structure",
	      "members": {
	        "ownerAccount": {},
	        "virtualInterfaceId": {},
	        "location": {},
	        "connectionId": {},
	        "virtualInterfaceType": {},
	        "virtualInterfaceName": {},
	        "vlan": {
	          "type": "integer"
	        },
	        "asn": {
	          "type": "integer"
	        },
	        "authKey": {},
	        "amazonAddress": {},
	        "customerAddress": {},
	        "addressFamily": {},
	        "virtualInterfaceState": {},
	        "customerRouterConfig": {},
	        "virtualGatewayId": {},
	        "routeFilterPrefixes": {
	          "shape": "Sv"
	        },
	        "bgpPeers": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "members": {
	              "asn": {
	                "type": "integer"
	              },
	              "authKey": {},
	              "addressFamily": {},
	              "amazonAddress": {},
	              "customerAddress": {},
	              "bgpPeerState": {},
	              "bgpStatus": {}
	            }
	          }
	        }
	      }
	    },
	    "Sv": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "cidr": {}
	        }
	      }
	    },
	    "S1j": {
	      "type": "structure",
	      "members": {
	        "interconnectId": {},
	        "interconnectName": {},
	        "interconnectState": {},
	        "region": {},
	        "location": {},
	        "bandwidth": {},
	        "loaIssueTime": {
	          "type": "timestamp"
	        },
	        "lagId": {},
	        "awsDevice": {}
	      }
	    },
	    "S1o": {
	      "type": "structure",
	      "members": {
	        "connectionsBandwidth": {},
	        "numberOfConnections": {
	          "type": "integer"
	        },
	        "lagId": {},
	        "ownerAccount": {},
	        "lagName": {},
	        "lagState": {},
	        "location": {},
	        "region": {},
	        "minimumLinks": {
	          "type": "integer"
	        },
	        "awsDevice": {},
	        "connections": {
	          "shape": "S1q"
	        },
	        "allowsHostedConnections": {
	          "type": "boolean"
	        }
	      }
	    },
	    "S1q": {
	      "type": "list",
	      "member": {
	        "shape": "S7"
	      }
	    },
	    "S28": {
	      "type": "structure",
	      "members": {
	        "loaContent": {
	          "type": "blob"
	        },
	        "loaContentType": {}
	      }
	    },
	    "S2b": {
	      "type": "structure",
	      "members": {
	        "connections": {
	          "shape": "S1q"
	        }
	      }
	    },
	    "S2x": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "key"
	        ],
	        "members": {
	          "key": {},
	          "value": {}
	        }
	      }
	    }
	  }
	}
	},{}],35:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "DescribeConnections": {
	      "result_key": "connections"
	    },
	    "DescribeConnectionsOnInterconnect": {
	      "result_key": "connections"
	    },
	    "DescribeInterconnects": {
	      "result_key": "interconnects"
	    },
	    "DescribeLocations": {
	      "result_key": "locations"
	    },
	    "DescribeVirtualGateways": {
	      "result_key": "virtualGateways"
	    },
	    "DescribeVirtualInterfaces": {
	      "result_key": "virtualInterfaces"
	    }
	  }
	}
	},{}],36:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2011-12-05",
	    "endpointPrefix": "dynamodb",
	    "jsonVersion": "1.0",
	    "protocol": "json",
	    "serviceAbbreviation": "DynamoDB",
	    "serviceFullName": "Amazon DynamoDB",
	    "signatureVersion": "v4",
	    "targetPrefix": "DynamoDB_20111205",
	    "uid": "dynamodb-2011-12-05"
	  },
	  "operations": {
	    "BatchGetItem": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RequestItems"
	        ],
	        "members": {
	          "RequestItems": {
	            "shape": "S2"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Responses": {
	            "type": "map",
	            "key": {},
	            "value": {
	              "type": "structure",
	              "members": {
	                "Items": {
	                  "shape": "Sk"
	                },
	                "ConsumedCapacityUnits": {
	                  "type": "double"
	                }
	              }
	            }
	          },
	          "UnprocessedKeys": {
	            "shape": "S2"
	          }
	        }
	      }
	    },
	    "BatchWriteItem": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RequestItems"
	        ],
	        "members": {
	          "RequestItems": {
	            "shape": "So"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Responses": {
	            "type": "map",
	            "key": {},
	            "value": {
	              "type": "structure",
	              "members": {
	                "ConsumedCapacityUnits": {
	                  "type": "double"
	                }
	              }
	            }
	          },
	          "UnprocessedItems": {
	            "shape": "So"
	          }
	        }
	      }
	    },
	    "CreateTable": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TableName",
	          "KeySchema",
	          "ProvisionedThroughput"
	        ],
	        "members": {
	          "TableName": {},
	          "KeySchema": {
	            "shape": "Sy"
	          },
	          "ProvisionedThroughput": {
	            "shape": "S12"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "TableDescription": {
	            "shape": "S15"
	          }
	        }
	      }
	    },
	    "DeleteItem": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TableName",
	          "Key"
	        ],
	        "members": {
	          "TableName": {},
	          "Key": {
	            "shape": "S6"
	          },
	          "Expected": {
	            "shape": "S1b"
	          },
	          "ReturnValues": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Attributes": {
	            "shape": "Sl"
	          },
	          "ConsumedCapacityUnits": {
	            "type": "double"
	          }
	        }
	      }
	    },
	    "DeleteTable": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TableName"
	        ],
	        "members": {
	          "TableName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "TableDescription": {
	            "shape": "S15"
	          }
	        }
	      }
	    },
	    "DescribeTable": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TableName"
	        ],
	        "members": {
	          "TableName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Table": {
	            "shape": "S15"
	          }
	        }
	      }
	    },
	    "GetItem": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TableName",
	          "Key"
	        ],
	        "members": {
	          "TableName": {},
	          "Key": {
	            "shape": "S6"
	          },
	          "AttributesToGet": {
	            "shape": "Se"
	          },
	          "ConsistentRead": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Item": {
	            "shape": "Sl"
	          },
	          "ConsumedCapacityUnits": {
	            "type": "double"
	          }
	        }
	      }
	    },
	    "ListTables": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ExclusiveStartTableName": {},
	          "Limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "TableNames": {
	            "type": "list",
	            "member": {}
	          },
	          "LastEvaluatedTableName": {}
	        }
	      }
	    },
	    "PutItem": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TableName",
	          "Item"
	        ],
	        "members": {
	          "TableName": {},
	          "Item": {
	            "shape": "Ss"
	          },
	          "Expected": {
	            "shape": "S1b"
	          },
	          "ReturnValues": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Attributes": {
	            "shape": "Sl"
	          },
	          "ConsumedCapacityUnits": {
	            "type": "double"
	          }
	        }
	      }
	    },
	    "Query": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TableName",
	          "HashKeyValue"
	        ],
	        "members": {
	          "TableName": {},
	          "AttributesToGet": {
	            "shape": "Se"
	          },
	          "Limit": {
	            "type": "integer"
	          },
	          "ConsistentRead": {
	            "type": "boolean"
	          },
	          "Count": {
	            "type": "boolean"
	          },
	          "HashKeyValue": {
	            "shape": "S7"
	          },
	          "RangeKeyCondition": {
	            "shape": "S1u"
	          },
	          "ScanIndexForward": {
	            "type": "boolean"
	          },
	          "ExclusiveStartKey": {
	            "shape": "S6"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Items": {
	            "shape": "Sk"
	          },
	          "Count": {
	            "type": "integer"
	          },
	          "LastEvaluatedKey": {
	            "shape": "S6"
	          },
	          "ConsumedCapacityUnits": {
	            "type": "double"
	          }
	        }
	      }
	    },
	    "Scan": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TableName"
	        ],
	        "members": {
	          "TableName": {},
	          "AttributesToGet": {
	            "shape": "Se"
	          },
	          "Limit": {
	            "type": "integer"
	          },
	          "Count": {
	            "type": "boolean"
	          },
	          "ScanFilter": {
	            "type": "map",
	            "key": {},
	            "value": {
	              "shape": "S1u"
	            }
	          },
	          "ExclusiveStartKey": {
	            "shape": "S6"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Items": {
	            "shape": "Sk"
	          },
	          "Count": {
	            "type": "integer"
	          },
	          "ScannedCount": {
	            "type": "integer"
	          },
	          "LastEvaluatedKey": {
	            "shape": "S6"
	          },
	          "ConsumedCapacityUnits": {
	            "type": "double"
	          }
	        }
	      }
	    },
	    "UpdateItem": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TableName",
	          "Key",
	          "AttributeUpdates"
	        ],
	        "members": {
	          "TableName": {},
	          "Key": {
	            "shape": "S6"
	          },
	          "AttributeUpdates": {
	            "type": "map",
	            "key": {},
	            "value": {
	              "type": "structure",
	              "members": {
	                "Value": {
	                  "shape": "S7"
	                },
	                "Action": {}
	              }
	            }
	          },
	          "Expected": {
	            "shape": "S1b"
	          },
	          "ReturnValues": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Attributes": {
	            "shape": "Sl"
	          },
	          "ConsumedCapacityUnits": {
	            "type": "double"
	          }
	        }
	      }
	    },
	    "UpdateTable": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TableName",
	          "ProvisionedThroughput"
	        ],
	        "members": {
	          "TableName": {},
	          "ProvisionedThroughput": {
	            "shape": "S12"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "TableDescription": {
	            "shape": "S15"
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S2": {
	      "type": "map",
	      "key": {},
	      "value": {
	        "type": "structure",
	        "required": [
	          "Keys"
	        ],
	        "members": {
	          "Keys": {
	            "type": "list",
	            "member": {
	              "shape": "S6"
	            }
	          },
	          "AttributesToGet": {
	            "shape": "Se"
	          },
	          "ConsistentRead": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "S6": {
	      "type": "structure",
	      "required": [
	        "HashKeyElement"
	      ],
	      "members": {
	        "HashKeyElement": {
	          "shape": "S7"
	        },
	        "RangeKeyElement": {
	          "shape": "S7"
	        }
	      }
	    },
	    "S7": {
	      "type": "structure",
	      "members": {
	        "S": {},
	        "N": {},
	        "B": {
	          "type": "blob"
	        },
	        "SS": {
	          "type": "list",
	          "member": {}
	        },
	        "NS": {
	          "type": "list",
	          "member": {}
	        },
	        "BS": {
	          "type": "list",
	          "member": {
	            "type": "blob"
	          }
	        }
	      }
	    },
	    "Se": {
	      "type": "list",
	      "member": {}
	    },
	    "Sk": {
	      "type": "list",
	      "member": {
	        "shape": "Sl"
	      }
	    },
	    "Sl": {
	      "type": "map",
	      "key": {},
	      "value": {
	        "shape": "S7"
	      }
	    },
	    "So": {
	      "type": "map",
	      "key": {},
	      "value": {
	        "type": "list",
	        "member": {
	          "type": "structure",
	          "members": {
	            "PutRequest": {
	              "type": "structure",
	              "required": [
	                "Item"
	              ],
	              "members": {
	                "Item": {
	                  "shape": "Ss"
	                }
	              }
	            },
	            "DeleteRequest": {
	              "type": "structure",
	              "required": [
	                "Key"
	              ],
	              "members": {
	                "Key": {
	                  "shape": "S6"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "Ss": {
	      "type": "map",
	      "key": {},
	      "value": {
	        "shape": "S7"
	      }
	    },
	    "Sy": {
	      "type": "structure",
	      "required": [
	        "HashKeyElement"
	      ],
	      "members": {
	        "HashKeyElement": {
	          "shape": "Sz"
	        },
	        "RangeKeyElement": {
	          "shape": "Sz"
	        }
	      }
	    },
	    "Sz": {
	      "type": "structure",
	      "required": [
	        "AttributeName",
	        "AttributeType"
	      ],
	      "members": {
	        "AttributeName": {},
	        "AttributeType": {}
	      }
	    },
	    "S12": {
	      "type": "structure",
	      "required": [
	        "ReadCapacityUnits",
	        "WriteCapacityUnits"
	      ],
	      "members": {
	        "ReadCapacityUnits": {
	          "type": "long"
	        },
	        "WriteCapacityUnits": {
	          "type": "long"
	        }
	      }
	    },
	    "S15": {
	      "type": "structure",
	      "members": {
	        "TableName": {},
	        "KeySchema": {
	          "shape": "Sy"
	        },
	        "TableStatus": {},
	        "CreationDateTime": {
	          "type": "timestamp"
	        },
	        "ProvisionedThroughput": {
	          "type": "structure",
	          "members": {
	            "LastIncreaseDateTime": {
	              "type": "timestamp"
	            },
	            "LastDecreaseDateTime": {
	              "type": "timestamp"
	            },
	            "NumberOfDecreasesToday": {
	              "type": "long"
	            },
	            "ReadCapacityUnits": {
	              "type": "long"
	            },
	            "WriteCapacityUnits": {
	              "type": "long"
	            }
	          }
	        },
	        "TableSizeBytes": {
	          "type": "long"
	        },
	        "ItemCount": {
	          "type": "long"
	        }
	      }
	    },
	    "S1b": {
	      "type": "map",
	      "key": {},
	      "value": {
	        "type": "structure",
	        "members": {
	          "Value": {
	            "shape": "S7"
	          },
	          "Exists": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "S1u": {
	      "type": "structure",
	      "required": [
	        "ComparisonOperator"
	      ],
	      "members": {
	        "AttributeValueList": {
	          "type": "list",
	          "member": {
	            "shape": "S7"
	          }
	        },
	        "ComparisonOperator": {}
	      }
	    }
	  }
	}
	},{}],37:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "BatchGetItem": {
	      "input_token": "RequestItems",
	      "output_token": "UnprocessedKeys"
	    },
	    "ListTables": {
	      "input_token": "ExclusiveStartTableName",
	      "limit_key": "Limit",
	      "output_token": "LastEvaluatedTableName",
	      "result_key": "TableNames"
	    },
	    "Query": {
	      "input_token": "ExclusiveStartKey",
	      "limit_key": "Limit",
	      "output_token": "LastEvaluatedKey",
	      "result_key": "Items"
	    },
	    "Scan": {
	      "input_token": "ExclusiveStartKey",
	      "limit_key": "Limit",
	      "output_token": "LastEvaluatedKey",
	      "result_key": "Items"
	    }
	  }
	}
	},{}],38:[function(require,module,exports){
	module.exports={
	  "version": 2,
	  "waiters": {
	    "TableExists": {
	      "delay": 20,
	      "operation": "DescribeTable",
	      "maxAttempts": 25,
	      "acceptors": [
	        {
	          "expected": "ACTIVE",
	          "matcher": "path",
	          "state": "success",
	          "argument": "Table.TableStatus"
	        },
	        {
	          "expected": "ResourceNotFoundException",
	          "matcher": "error",
	          "state": "retry"
	        }
	      ]
	    },
	    "TableNotExists": {
	      "delay": 20,
	      "operation": "DescribeTable",
	      "maxAttempts": 25,
	      "acceptors": [
	        {
	          "expected": "ResourceNotFoundException",
	          "matcher": "error",
	          "state": "success"
	        }
	      ]
	    }
	  }
	}
	
	},{}],39:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2012-08-10",
	    "endpointPrefix": "dynamodb",
	    "jsonVersion": "1.0",
	    "protocol": "json",
	    "serviceAbbreviation": "DynamoDB",
	    "serviceFullName": "Amazon DynamoDB",
	    "signatureVersion": "v4",
	    "targetPrefix": "DynamoDB_20120810",
	    "uid": "dynamodb-2012-08-10"
	  },
	  "operations": {
	    "BatchGetItem": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RequestItems"
	        ],
	        "members": {
	          "RequestItems": {
	            "shape": "S2"
	          },
	          "ReturnConsumedCapacity": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Responses": {
	            "type": "map",
	            "key": {},
	            "value": {
	              "shape": "Sr"
	            }
	          },
	          "UnprocessedKeys": {
	            "shape": "S2"
	          },
	          "ConsumedCapacity": {
	            "shape": "St"
	          }
	        }
	      }
	    },
	    "BatchWriteItem": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RequestItems"
	        ],
	        "members": {
	          "RequestItems": {
	            "shape": "S10"
	          },
	          "ReturnConsumedCapacity": {},
	          "ReturnItemCollectionMetrics": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "UnprocessedItems": {
	            "shape": "S10"
	          },
	          "ItemCollectionMetrics": {
	            "type": "map",
	            "key": {},
	            "value": {
	              "type": "list",
	              "member": {
	                "shape": "S1a"
	              }
	            }
	          },
	          "ConsumedCapacity": {
	            "shape": "St"
	          }
	        }
	      }
	    },
	    "CreateTable": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AttributeDefinitions",
	          "TableName",
	          "KeySchema",
	          "ProvisionedThroughput"
	        ],
	        "members": {
	          "AttributeDefinitions": {
	            "shape": "S1f"
	          },
	          "TableName": {},
	          "KeySchema": {
	            "shape": "S1j"
	          },
	          "LocalSecondaryIndexes": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "IndexName",
	                "KeySchema",
	                "Projection"
	              ],
	              "members": {
	                "IndexName": {},
	                "KeySchema": {
	                  "shape": "S1j"
	                },
	                "Projection": {
	                  "shape": "S1o"
	                }
	              }
	            }
	          },
	          "GlobalSecondaryIndexes": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "IndexName",
	                "KeySchema",
	                "Projection",
	                "ProvisionedThroughput"
	              ],
	              "members": {
	                "IndexName": {},
	                "KeySchema": {
	                  "shape": "S1j"
	                },
	                "Projection": {
	                  "shape": "S1o"
	                },
	                "ProvisionedThroughput": {
	                  "shape": "S1u"
	                }
	              }
	            }
	          },
	          "ProvisionedThroughput": {
	            "shape": "S1u"
	          },
	          "StreamSpecification": {
	            "shape": "S1w"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "TableDescription": {
	            "shape": "S20"
	          }
	        }
	      }
	    },
	    "DeleteItem": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TableName",
	          "Key"
	        ],
	        "members": {
	          "TableName": {},
	          "Key": {
	            "shape": "S6"
	          },
	          "Expected": {
	            "shape": "S2e"
	          },
	          "ConditionalOperator": {},
	          "ReturnValues": {},
	          "ReturnConsumedCapacity": {},
	          "ReturnItemCollectionMetrics": {},
	          "ConditionExpression": {},
	          "ExpressionAttributeNames": {
	            "shape": "Sm"
	          },
	          "ExpressionAttributeValues": {
	            "shape": "S2m"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Attributes": {
	            "shape": "Ss"
	          },
	          "ConsumedCapacity": {
	            "shape": "Su"
	          },
	          "ItemCollectionMetrics": {
	            "shape": "S1a"
	          }
	        }
	      }
	    },
	    "DeleteTable": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TableName"
	        ],
	        "members": {
	          "TableName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "TableDescription": {
	            "shape": "S20"
	          }
	        }
	      }
	    },
	    "DescribeLimits": {
	      "input": {
	        "type": "structure",
	        "members": {}
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "AccountMaxReadCapacityUnits": {
	            "type": "long"
	          },
	          "AccountMaxWriteCapacityUnits": {
	            "type": "long"
	          },
	          "TableMaxReadCapacityUnits": {
	            "type": "long"
	          },
	          "TableMaxWriteCapacityUnits": {
	            "type": "long"
	          }
	        }
	      }
	    },
	    "DescribeTable": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TableName"
	        ],
	        "members": {
	          "TableName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Table": {
	            "shape": "S20"
	          }
	        }
	      }
	    },
	    "GetItem": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TableName",
	          "Key"
	        ],
	        "members": {
	          "TableName": {},
	          "Key": {
	            "shape": "S6"
	          },
	          "AttributesToGet": {
	            "shape": "Sj"
	          },
	          "ConsistentRead": {
	            "type": "boolean"
	          },
	          "ReturnConsumedCapacity": {},
	          "ProjectionExpression": {},
	          "ExpressionAttributeNames": {
	            "shape": "Sm"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Item": {
	            "shape": "Ss"
	          },
	          "ConsumedCapacity": {
	            "shape": "Su"
	          }
	        }
	      }
	    },
	    "ListTables": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ExclusiveStartTableName": {},
	          "Limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "TableNames": {
	            "type": "list",
	            "member": {}
	          },
	          "LastEvaluatedTableName": {}
	        }
	      }
	    },
	    "ListTagsOfResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceArn"
	        ],
	        "members": {
	          "ResourceArn": {},
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Tags": {
	            "shape": "S35"
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "PutItem": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TableName",
	          "Item"
	        ],
	        "members": {
	          "TableName": {},
	          "Item": {
	            "shape": "S14"
	          },
	          "Expected": {
	            "shape": "S2e"
	          },
	          "ReturnValues": {},
	          "ReturnConsumedCapacity": {},
	          "ReturnItemCollectionMetrics": {},
	          "ConditionalOperator": {},
	          "ConditionExpression": {},
	          "ExpressionAttributeNames": {
	            "shape": "Sm"
	          },
	          "ExpressionAttributeValues": {
	            "shape": "S2m"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Attributes": {
	            "shape": "Ss"
	          },
	          "ConsumedCapacity": {
	            "shape": "Su"
	          },
	          "ItemCollectionMetrics": {
	            "shape": "S1a"
	          }
	        }
	      }
	    },
	    "Query": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TableName"
	        ],
	        "members": {
	          "TableName": {},
	          "IndexName": {},
	          "Select": {},
	          "AttributesToGet": {
	            "shape": "Sj"
	          },
	          "Limit": {
	            "type": "integer"
	          },
	          "ConsistentRead": {
	            "type": "boolean"
	          },
	          "KeyConditions": {
	            "type": "map",
	            "key": {},
	            "value": {
	              "shape": "S3f"
	            }
	          },
	          "QueryFilter": {
	            "shape": "S3g"
	          },
	          "ConditionalOperator": {},
	          "ScanIndexForward": {
	            "type": "boolean"
	          },
	          "ExclusiveStartKey": {
	            "shape": "S6"
	          },
	          "ReturnConsumedCapacity": {},
	          "ProjectionExpression": {},
	          "FilterExpression": {},
	          "KeyConditionExpression": {},
	          "ExpressionAttributeNames": {
	            "shape": "Sm"
	          },
	          "ExpressionAttributeValues": {
	            "shape": "S2m"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Items": {
	            "shape": "Sr"
	          },
	          "Count": {
	            "type": "integer"
	          },
	          "ScannedCount": {
	            "type": "integer"
	          },
	          "LastEvaluatedKey": {
	            "shape": "S6"
	          },
	          "ConsumedCapacity": {
	            "shape": "Su"
	          }
	        }
	      }
	    },
	    "Scan": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TableName"
	        ],
	        "members": {
	          "TableName": {},
	          "IndexName": {},
	          "AttributesToGet": {
	            "shape": "Sj"
	          },
	          "Limit": {
	            "type": "integer"
	          },
	          "Select": {},
	          "ScanFilter": {
	            "shape": "S3g"
	          },
	          "ConditionalOperator": {},
	          "ExclusiveStartKey": {
	            "shape": "S6"
	          },
	          "ReturnConsumedCapacity": {},
	          "TotalSegments": {
	            "type": "integer"
	          },
	          "Segment": {
	            "type": "integer"
	          },
	          "ProjectionExpression": {},
	          "FilterExpression": {},
	          "ExpressionAttributeNames": {
	            "shape": "Sm"
	          },
	          "ExpressionAttributeValues": {
	            "shape": "S2m"
	          },
	          "ConsistentRead": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Items": {
	            "shape": "Sr"
	          },
	          "Count": {
	            "type": "integer"
	          },
	          "ScannedCount": {
	            "type": "integer"
	          },
	          "LastEvaluatedKey": {
	            "shape": "S6"
	          },
	          "ConsumedCapacity": {
	            "shape": "Su"
	          }
	        }
	      }
	    },
	    "TagResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceArn",
	          "Tags"
	        ],
	        "members": {
	          "ResourceArn": {},
	          "Tags": {
	            "shape": "S35"
	          }
	        }
	      }
	    },
	    "UntagResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceArn",
	          "TagKeys"
	        ],
	        "members": {
	          "ResourceArn": {},
	          "TagKeys": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      }
	    },
	    "UpdateItem": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TableName",
	          "Key"
	        ],
	        "members": {
	          "TableName": {},
	          "Key": {
	            "shape": "S6"
	          },
	          "AttributeUpdates": {
	            "type": "map",
	            "key": {},
	            "value": {
	              "type": "structure",
	              "members": {
	                "Value": {
	                  "shape": "S8"
	                },
	                "Action": {}
	              }
	            }
	          },
	          "Expected": {
	            "shape": "S2e"
	          },
	          "ConditionalOperator": {},
	          "ReturnValues": {},
	          "ReturnConsumedCapacity": {},
	          "ReturnItemCollectionMetrics": {},
	          "UpdateExpression": {},
	          "ConditionExpression": {},
	          "ExpressionAttributeNames": {
	            "shape": "Sm"
	          },
	          "ExpressionAttributeValues": {
	            "shape": "S2m"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Attributes": {
	            "shape": "Ss"
	          },
	          "ConsumedCapacity": {
	            "shape": "Su"
	          },
	          "ItemCollectionMetrics": {
	            "shape": "S1a"
	          }
	        }
	      }
	    },
	    "UpdateTable": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TableName"
	        ],
	        "members": {
	          "AttributeDefinitions": {
	            "shape": "S1f"
	          },
	          "TableName": {},
	          "ProvisionedThroughput": {
	            "shape": "S1u"
	          },
	          "GlobalSecondaryIndexUpdates": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Update": {
	                  "type": "structure",
	                  "required": [
	                    "IndexName",
	                    "ProvisionedThroughput"
	                  ],
	                  "members": {
	                    "IndexName": {},
	                    "ProvisionedThroughput": {
	                      "shape": "S1u"
	                    }
	                  }
	                },
	                "Create": {
	                  "type": "structure",
	                  "required": [
	                    "IndexName",
	                    "KeySchema",
	                    "Projection",
	                    "ProvisionedThroughput"
	                  ],
	                  "members": {
	                    "IndexName": {},
	                    "KeySchema": {
	                      "shape": "S1j"
	                    },
	                    "Projection": {
	                      "shape": "S1o"
	                    },
	                    "ProvisionedThroughput": {
	                      "shape": "S1u"
	                    }
	                  }
	                },
	                "Delete": {
	                  "type": "structure",
	                  "required": [
	                    "IndexName"
	                  ],
	                  "members": {
	                    "IndexName": {}
	                  }
	                }
	              }
	            }
	          },
	          "StreamSpecification": {
	            "shape": "S1w"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "TableDescription": {
	            "shape": "S20"
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S2": {
	      "type": "map",
	      "key": {},
	      "value": {
	        "type": "structure",
	        "required": [
	          "Keys"
	        ],
	        "members": {
	          "Keys": {
	            "type": "list",
	            "member": {
	              "shape": "S6"
	            }
	          },
	          "AttributesToGet": {
	            "shape": "Sj"
	          },
	          "ConsistentRead": {
	            "type": "boolean"
	          },
	          "ProjectionExpression": {},
	          "ExpressionAttributeNames": {
	            "shape": "Sm"
	          }
	        }
	      }
	    },
	    "S6": {
	      "type": "map",
	      "key": {},
	      "value": {
	        "shape": "S8"
	      }
	    },
	    "S8": {
	      "type": "structure",
	      "members": {
	        "S": {},
	        "N": {},
	        "B": {
	          "type": "blob"
	        },
	        "SS": {
	          "type": "list",
	          "member": {}
	        },
	        "NS": {
	          "type": "list",
	          "member": {}
	        },
	        "BS": {
	          "type": "list",
	          "member": {
	            "type": "blob"
	          }
	        },
	        "M": {
	          "type": "map",
	          "key": {},
	          "value": {
	            "shape": "S8"
	          }
	        },
	        "L": {
	          "type": "list",
	          "member": {
	            "shape": "S8"
	          }
	        },
	        "NULL": {
	          "type": "boolean"
	        },
	        "BOOL": {
	          "type": "boolean"
	        }
	      }
	    },
	    "Sj": {
	      "type": "list",
	      "member": {}
	    },
	    "Sm": {
	      "type": "map",
	      "key": {},
	      "value": {}
	    },
	    "Sr": {
	      "type": "list",
	      "member": {
	        "shape": "Ss"
	      }
	    },
	    "Ss": {
	      "type": "map",
	      "key": {},
	      "value": {
	        "shape": "S8"
	      }
	    },
	    "St": {
	      "type": "list",
	      "member": {
	        "shape": "Su"
	      }
	    },
	    "Su": {
	      "type": "structure",
	      "members": {
	        "TableName": {},
	        "CapacityUnits": {
	          "type": "double"
	        },
	        "Table": {
	          "shape": "Sw"
	        },
	        "LocalSecondaryIndexes": {
	          "shape": "Sx"
	        },
	        "GlobalSecondaryIndexes": {
	          "shape": "Sx"
	        }
	      }
	    },
	    "Sw": {
	      "type": "structure",
	      "members": {
	        "CapacityUnits": {
	          "type": "double"
	        }
	      }
	    },
	    "Sx": {
	      "type": "map",
	      "key": {},
	      "value": {
	        "shape": "Sw"
	      }
	    },
	    "S10": {
	      "type": "map",
	      "key": {},
	      "value": {
	        "type": "list",
	        "member": {
	          "type": "structure",
	          "members": {
	            "PutRequest": {
	              "type": "structure",
	              "required": [
	                "Item"
	              ],
	              "members": {
	                "Item": {
	                  "shape": "S14"
	                }
	              }
	            },
	            "DeleteRequest": {
	              "type": "structure",
	              "required": [
	                "Key"
	              ],
	              "members": {
	                "Key": {
	                  "shape": "S6"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "S14": {
	      "type": "map",
	      "key": {},
	      "value": {
	        "shape": "S8"
	      }
	    },
	    "S1a": {
	      "type": "structure",
	      "members": {
	        "ItemCollectionKey": {
	          "type": "map",
	          "key": {},
	          "value": {
	            "shape": "S8"
	          }
	        },
	        "SizeEstimateRangeGB": {
	          "type": "list",
	          "member": {
	            "type": "double"
	          }
	        }
	      }
	    },
	    "S1f": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "AttributeName",
	          "AttributeType"
	        ],
	        "members": {
	          "AttributeName": {},
	          "AttributeType": {}
	        }
	      }
	    },
	    "S1j": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "AttributeName",
	          "KeyType"
	        ],
	        "members": {
	          "AttributeName": {},
	          "KeyType": {}
	        }
	      }
	    },
	    "S1o": {
	      "type": "structure",
	      "members": {
	        "ProjectionType": {},
	        "NonKeyAttributes": {
	          "type": "list",
	          "member": {}
	        }
	      }
	    },
	    "S1u": {
	      "type": "structure",
	      "required": [
	        "ReadCapacityUnits",
	        "WriteCapacityUnits"
	      ],
	      "members": {
	        "ReadCapacityUnits": {
	          "type": "long"
	        },
	        "WriteCapacityUnits": {
	          "type": "long"
	        }
	      }
	    },
	    "S1w": {
	      "type": "structure",
	      "members": {
	        "StreamEnabled": {
	          "type": "boolean"
	        },
	        "StreamViewType": {}
	      }
	    },
	    "S20": {
	      "type": "structure",
	      "members": {
	        "AttributeDefinitions": {
	          "shape": "S1f"
	        },
	        "TableName": {},
	        "KeySchema": {
	          "shape": "S1j"
	        },
	        "TableStatus": {},
	        "CreationDateTime": {
	          "type": "timestamp"
	        },
	        "ProvisionedThroughput": {
	          "shape": "S23"
	        },
	        "TableSizeBytes": {
	          "type": "long"
	        },
	        "ItemCount": {
	          "type": "long"
	        },
	        "TableArn": {},
	        "LocalSecondaryIndexes": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "members": {
	              "IndexName": {},
	              "KeySchema": {
	                "shape": "S1j"
	              },
	              "Projection": {
	                "shape": "S1o"
	              },
	              "IndexSizeBytes": {
	                "type": "long"
	              },
	              "ItemCount": {
	                "type": "long"
	              },
	              "IndexArn": {}
	            }
	          }
	        },
	        "GlobalSecondaryIndexes": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "members": {
	              "IndexName": {},
	              "KeySchema": {
	                "shape": "S1j"
	              },
	              "Projection": {
	                "shape": "S1o"
	              },
	              "IndexStatus": {},
	              "Backfilling": {
	                "type": "boolean"
	              },
	              "ProvisionedThroughput": {
	                "shape": "S23"
	              },
	              "IndexSizeBytes": {
	                "type": "long"
	              },
	              "ItemCount": {
	                "type": "long"
	              },
	              "IndexArn": {}
	            }
	          }
	        },
	        "StreamSpecification": {
	          "shape": "S1w"
	        },
	        "LatestStreamLabel": {},
	        "LatestStreamArn": {}
	      }
	    },
	    "S23": {
	      "type": "structure",
	      "members": {
	        "LastIncreaseDateTime": {
	          "type": "timestamp"
	        },
	        "LastDecreaseDateTime": {
	          "type": "timestamp"
	        },
	        "NumberOfDecreasesToday": {
	          "type": "long"
	        },
	        "ReadCapacityUnits": {
	          "type": "long"
	        },
	        "WriteCapacityUnits": {
	          "type": "long"
	        }
	      }
	    },
	    "S2e": {
	      "type": "map",
	      "key": {},
	      "value": {
	        "type": "structure",
	        "members": {
	          "Value": {
	            "shape": "S8"
	          },
	          "Exists": {
	            "type": "boolean"
	          },
	          "ComparisonOperator": {},
	          "AttributeValueList": {
	            "shape": "S2i"
	          }
	        }
	      }
	    },
	    "S2i": {
	      "type": "list",
	      "member": {
	        "shape": "S8"
	      }
	    },
	    "S2m": {
	      "type": "map",
	      "key": {},
	      "value": {
	        "shape": "S8"
	      }
	    },
	    "S35": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "Key",
	          "Value"
	        ],
	        "members": {
	          "Key": {},
	          "Value": {}
	        }
	      }
	    },
	    "S3f": {
	      "type": "structure",
	      "required": [
	        "ComparisonOperator"
	      ],
	      "members": {
	        "AttributeValueList": {
	          "shape": "S2i"
	        },
	        "ComparisonOperator": {}
	      }
	    },
	    "S3g": {
	      "type": "map",
	      "key": {},
	      "value": {
	        "shape": "S3f"
	      }
	    }
	  }
	}
	},{}],40:[function(require,module,exports){
	arguments[4][37][0].apply(exports,arguments)
	},{"dup":37}],41:[function(require,module,exports){
	arguments[4][38][0].apply(exports,arguments)
	},{"dup":38}],42:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2016-11-15",
	    "endpointPrefix": "ec2",
	    "protocol": "ec2",
	    "serviceAbbreviation": "Amazon EC2",
	    "serviceFullName": "Amazon Elastic Compute Cloud",
	    "signatureVersion": "v4",
	    "uid": "ec2-2016-11-15",
	    "xmlNamespace": "http://ec2.amazonaws.com/doc/2016-11-15"
	  },
	  "operations": {
	    "AcceptReservedInstancesExchangeQuote": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ReservedInstanceIds"
	        ],
	        "members": {
	          "DryRun": {
	            "type": "boolean"
	          },
	          "ReservedInstanceIds": {
	            "shape": "S3",
	            "locationName": "ReservedInstanceId"
	          },
	          "TargetConfigurations": {
	            "shape": "S5",
	            "locationName": "TargetConfiguration"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ExchangeId": {
	            "locationName": "exchangeId"
	          }
	        }
	      }
	    },
	    "AcceptVpcPeeringConnection": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "VpcPeeringConnectionId": {
	            "locationName": "vpcPeeringConnectionId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "VpcPeeringConnection": {
	            "shape": "Sb",
	            "locationName": "vpcPeeringConnection"
	          }
	        }
	      }
	    },
	    "AllocateAddress": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "Domain": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "PublicIp": {
	            "locationName": "publicIp"
	          },
	          "Domain": {
	            "locationName": "domain"
	          },
	          "AllocationId": {
	            "locationName": "allocationId"
	          }
	        }
	      }
	    },
	    "AllocateHosts": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceType",
	          "Quantity",
	          "AvailabilityZone"
	        ],
	        "members": {
	          "AutoPlacement": {
	            "locationName": "autoPlacement"
	          },
	          "ClientToken": {
	            "locationName": "clientToken"
	          },
	          "InstanceType": {
	            "locationName": "instanceType"
	          },
	          "Quantity": {
	            "locationName": "quantity",
	            "type": "integer"
	          },
	          "AvailabilityZone": {
	            "locationName": "availabilityZone"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "HostIds": {
	            "shape": "Sr",
	            "locationName": "hostIdSet"
	          }
	        }
	      }
	    },
	    "AssignIpv6Addresses": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "NetworkInterfaceId"
	        ],
	        "members": {
	          "NetworkInterfaceId": {
	            "locationName": "networkInterfaceId"
	          },
	          "Ipv6Addresses": {
	            "shape": "St",
	            "locationName": "ipv6Addresses"
	          },
	          "Ipv6AddressCount": {
	            "locationName": "ipv6AddressCount",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NetworkInterfaceId": {
	            "locationName": "networkInterfaceId"
	          },
	          "AssignedIpv6Addresses": {
	            "shape": "St",
	            "locationName": "assignedIpv6Addresses"
	          }
	        }
	      }
	    },
	    "AssignPrivateIpAddresses": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "NetworkInterfaceId"
	        ],
	        "members": {
	          "NetworkInterfaceId": {
	            "locationName": "networkInterfaceId"
	          },
	          "PrivateIpAddresses": {
	            "shape": "Sw",
	            "locationName": "privateIpAddress"
	          },
	          "SecondaryPrivateIpAddressCount": {
	            "locationName": "secondaryPrivateIpAddressCount",
	            "type": "integer"
	          },
	          "AllowReassignment": {
	            "locationName": "allowReassignment",
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "AssociateAddress": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "InstanceId": {},
	          "PublicIp": {},
	          "AllocationId": {},
	          "NetworkInterfaceId": {
	            "locationName": "networkInterfaceId"
	          },
	          "PrivateIpAddress": {
	            "locationName": "privateIpAddress"
	          },
	          "AllowReassociation": {
	            "locationName": "allowReassociation",
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "AssociationId": {
	            "locationName": "associationId"
	          }
	        }
	      }
	    },
	    "AssociateDhcpOptions": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DhcpOptionsId",
	          "VpcId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "DhcpOptionsId": {},
	          "VpcId": {}
	        }
	      }
	    },
	    "AssociateIamInstanceProfile": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "IamInstanceProfile",
	          "InstanceId"
	        ],
	        "members": {
	          "IamInstanceProfile": {
	            "shape": "S11"
	          },
	          "InstanceId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "IamInstanceProfileAssociation": {
	            "shape": "S13",
	            "locationName": "iamInstanceProfileAssociation"
	          }
	        }
	      }
	    },
	    "AssociateRouteTable": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubnetId",
	          "RouteTableId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "SubnetId": {
	            "locationName": "subnetId"
	          },
	          "RouteTableId": {
	            "locationName": "routeTableId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "AssociationId": {
	            "locationName": "associationId"
	          }
	        }
	      }
	    },
	    "AssociateSubnetCidrBlock": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubnetId",
	          "Ipv6CidrBlock"
	        ],
	        "members": {
	          "SubnetId": {
	            "locationName": "subnetId"
	          },
	          "Ipv6CidrBlock": {
	            "locationName": "ipv6CidrBlock"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "SubnetId": {
	            "locationName": "subnetId"
	          },
	          "Ipv6CidrBlockAssociation": {
	            "shape": "S1a",
	            "locationName": "ipv6CidrBlockAssociation"
	          }
	        }
	      }
	    },
	    "AssociateVpcCidrBlock": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VpcId"
	        ],
	        "members": {
	          "VpcId": {
	            "locationName": "vpcId"
	          },
	          "AmazonProvidedIpv6CidrBlock": {
	            "locationName": "amazonProvidedIpv6CidrBlock",
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "VpcId": {
	            "locationName": "vpcId"
	          },
	          "Ipv6CidrBlockAssociation": {
	            "shape": "S1f",
	            "locationName": "ipv6CidrBlockAssociation"
	          }
	        }
	      }
	    },
	    "AttachClassicLinkVpc": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId",
	          "VpcId",
	          "Groups"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "InstanceId": {
	            "locationName": "instanceId"
	          },
	          "VpcId": {
	            "locationName": "vpcId"
	          },
	          "Groups": {
	            "shape": "S1j",
	            "locationName": "SecurityGroupId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Return": {
	            "locationName": "return",
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "AttachInternetGateway": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InternetGatewayId",
	          "VpcId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "InternetGatewayId": {
	            "locationName": "internetGatewayId"
	          },
	          "VpcId": {
	            "locationName": "vpcId"
	          }
	        }
	      }
	    },
	    "AttachNetworkInterface": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "NetworkInterfaceId",
	          "InstanceId",
	          "DeviceIndex"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "NetworkInterfaceId": {
	            "locationName": "networkInterfaceId"
	          },
	          "InstanceId": {
	            "locationName": "instanceId"
	          },
	          "DeviceIndex": {
	            "locationName": "deviceIndex",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "AttachmentId": {
	            "locationName": "attachmentId"
	          }
	        }
	      }
	    },
	    "AttachVolume": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VolumeId",
	          "InstanceId",
	          "Device"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "VolumeId": {},
	          "InstanceId": {},
	          "Device": {}
	        }
	      },
	      "output": {
	        "shape": "S1p"
	      }
	    },
	    "AttachVpnGateway": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VpnGatewayId",
	          "VpcId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "VpnGatewayId": {},
	          "VpcId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "VpcAttachment": {
	            "shape": "S1t",
	            "locationName": "attachment"
	          }
	        }
	      }
	    },
	    "AuthorizeSecurityGroupEgress": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GroupId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "GroupId": {
	            "locationName": "groupId"
	          },
	          "SourceSecurityGroupName": {
	            "locationName": "sourceSecurityGroupName"
	          },
	          "SourceSecurityGroupOwnerId": {
	            "locationName": "sourceSecurityGroupOwnerId"
	          },
	          "IpProtocol": {
	            "locationName": "ipProtocol"
	          },
	          "FromPort": {
	            "locationName": "fromPort",
	            "type": "integer"
	          },
	          "ToPort": {
	            "locationName": "toPort",
	            "type": "integer"
	          },
	          "CidrIp": {
	            "locationName": "cidrIp"
	          },
	          "IpPermissions": {
	            "shape": "S1w",
	            "locationName": "ipPermissions"
	          }
	        }
	      }
	    },
	    "AuthorizeSecurityGroupIngress": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "GroupName": {},
	          "GroupId": {},
	          "SourceSecurityGroupName": {},
	          "SourceSecurityGroupOwnerId": {},
	          "IpProtocol": {},
	          "FromPort": {
	            "type": "integer"
	          },
	          "ToPort": {
	            "type": "integer"
	          },
	          "CidrIp": {},
	          "IpPermissions": {
	            "shape": "S1w"
	          }
	        }
	      }
	    },
	    "BundleInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId",
	          "Storage"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "InstanceId": {},
	          "Storage": {
	            "shape": "S28"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "BundleTask": {
	            "shape": "S2c",
	            "locationName": "bundleInstanceTask"
	          }
	        }
	      }
	    },
	    "CancelBundleTask": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "BundleId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "BundleId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "BundleTask": {
	            "shape": "S2c",
	            "locationName": "bundleInstanceTask"
	          }
	        }
	      }
	    },
	    "CancelConversionTask": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ConversionTaskId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "ConversionTaskId": {
	            "locationName": "conversionTaskId"
	          },
	          "ReasonMessage": {
	            "locationName": "reasonMessage"
	          }
	        }
	      }
	    },
	    "CancelExportTask": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ExportTaskId"
	        ],
	        "members": {
	          "ExportTaskId": {
	            "locationName": "exportTaskId"
	          }
	        }
	      }
	    },
	    "CancelImportTask": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "type": "boolean"
	          },
	          "ImportTaskId": {},
	          "CancelReason": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ImportTaskId": {
	            "locationName": "importTaskId"
	          },
	          "State": {
	            "locationName": "state"
	          },
	          "PreviousState": {
	            "locationName": "previousState"
	          }
	        }
	      }
	    },
	    "CancelReservedInstancesListing": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ReservedInstancesListingId"
	        ],
	        "members": {
	          "ReservedInstancesListingId": {
	            "locationName": "reservedInstancesListingId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ReservedInstancesListings": {
	            "shape": "S2n",
	            "locationName": "reservedInstancesListingsSet"
	          }
	        }
	      }
	    },
	    "CancelSpotFleetRequests": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SpotFleetRequestIds",
	          "TerminateInstances"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "SpotFleetRequestIds": {
	            "shape": "S2z",
	            "locationName": "spotFleetRequestId"
	          },
	          "TerminateInstances": {
	            "locationName": "terminateInstances",
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "UnsuccessfulFleetRequests": {
	            "locationName": "unsuccessfulFleetRequestSet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "required": [
	                "SpotFleetRequestId",
	                "Error"
	              ],
	              "members": {
	                "SpotFleetRequestId": {
	                  "locationName": "spotFleetRequestId"
	                },
	                "Error": {
	                  "locationName": "error",
	                  "type": "structure",
	                  "required": [
	                    "Code",
	                    "Message"
	                  ],
	                  "members": {
	                    "Code": {
	                      "locationName": "code"
	                    },
	                    "Message": {
	                      "locationName": "message"
	                    }
	                  }
	                }
	              }
	            }
	          },
	          "SuccessfulFleetRequests": {
	            "locationName": "successfulFleetRequestSet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "required": [
	                "SpotFleetRequestId",
	                "CurrentSpotFleetRequestState",
	                "PreviousSpotFleetRequestState"
	              ],
	              "members": {
	                "SpotFleetRequestId": {
	                  "locationName": "spotFleetRequestId"
	                },
	                "CurrentSpotFleetRequestState": {
	                  "locationName": "currentSpotFleetRequestState"
	                },
	                "PreviousSpotFleetRequestState": {
	                  "locationName": "previousSpotFleetRequestState"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "CancelSpotInstanceRequests": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SpotInstanceRequestIds"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "SpotInstanceRequestIds": {
	            "shape": "S39",
	            "locationName": "SpotInstanceRequestId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "CancelledSpotInstanceRequests": {
	            "locationName": "spotInstanceRequestSet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "SpotInstanceRequestId": {
	                  "locationName": "spotInstanceRequestId"
	                },
	                "State": {
	                  "locationName": "state"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "ConfirmProductInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ProductCode",
	          "InstanceId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "ProductCode": {},
	          "InstanceId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "OwnerId": {
	            "locationName": "ownerId"
	          },
	          "Return": {
	            "locationName": "return",
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "CopyImage": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SourceRegion",
	          "SourceImageId",
	          "Name"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "SourceRegion": {},
	          "SourceImageId": {},
	          "Name": {},
	          "Description": {},
	          "ClientToken": {},
	          "Encrypted": {
	            "locationName": "encrypted",
	            "type": "boolean"
	          },
	          "KmsKeyId": {
	            "locationName": "kmsKeyId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ImageId": {
	            "locationName": "imageId"
	          }
	        }
	      }
	    },
	    "CopySnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SourceRegion",
	          "SourceSnapshotId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "SourceRegion": {},
	          "SourceSnapshotId": {},
	          "Description": {},
	          "DestinationRegion": {
	            "locationName": "destinationRegion"
	          },
	          "PresignedUrl": {
	            "locationName": "presignedUrl"
	          },
	          "Encrypted": {
	            "locationName": "encrypted",
	            "type": "boolean"
	          },
	          "KmsKeyId": {
	            "locationName": "kmsKeyId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "SnapshotId": {
	            "locationName": "snapshotId"
	          }
	        }
	      }
	    },
	    "CreateCustomerGateway": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Type",
	          "PublicIp",
	          "BgpAsn"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "Type": {},
	          "PublicIp": {
	            "locationName": "IpAddress"
	          },
	          "BgpAsn": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "CustomerGateway": {
	            "shape": "S3n",
	            "locationName": "customerGateway"
	          }
	        }
	      }
	    },
	    "CreateDhcpOptions": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DhcpConfigurations"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "DhcpConfigurations": {
	            "locationName": "dhcpConfiguration",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "Key": {
	                  "locationName": "key"
	                },
	                "Values": {
	                  "shape": "S2z",
	                  "locationName": "Value"
	                }
	              }
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "DhcpOptions": {
	            "shape": "S3s",
	            "locationName": "dhcpOptions"
	          }
	        }
	      }
	    },
	    "CreateEgressOnlyInternetGateway": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VpcId"
	        ],
	        "members": {
	          "DryRun": {
	            "type": "boolean"
	          },
	          "VpcId": {},
	          "ClientToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "EgressOnlyInternetGateway": {
	            "shape": "S3z",
	            "locationName": "egressOnlyInternetGateway"
	          },
	          "ClientToken": {
	            "locationName": "clientToken"
	          }
	        }
	      }
	    },
	    "CreateFlowLogs": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceIds",
	          "ResourceType",
	          "TrafficType",
	          "LogGroupName",
	          "DeliverLogsPermissionArn"
	        ],
	        "members": {
	          "ResourceIds": {
	            "shape": "S2z",
	            "locationName": "ResourceId"
	          },
	          "ResourceType": {},
	          "TrafficType": {},
	          "LogGroupName": {},
	          "DeliverLogsPermissionArn": {},
	          "ClientToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "FlowLogIds": {
	            "shape": "S2z",
	            "locationName": "flowLogIdSet"
	          },
	          "ClientToken": {
	            "locationName": "clientToken"
	          },
	          "Unsuccessful": {
	            "shape": "S47",
	            "locationName": "unsuccessful"
	          }
	        }
	      }
	    },
	    "CreateImage": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId",
	          "Name"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "InstanceId": {
	            "locationName": "instanceId"
	          },
	          "Name": {
	            "locationName": "name"
	          },
	          "Description": {
	            "locationName": "description"
	          },
	          "NoReboot": {
	            "locationName": "noReboot",
	            "type": "boolean"
	          },
	          "BlockDeviceMappings": {
	            "shape": "S4b",
	            "locationName": "blockDeviceMapping"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ImageId": {
	            "locationName": "imageId"
	          }
	        }
	      }
	    },
	    "CreateInstanceExportTask": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId"
	        ],
	        "members": {
	          "Description": {
	            "locationName": "description"
	          },
	          "InstanceId": {
	            "locationName": "instanceId"
	          },
	          "TargetEnvironment": {
	            "locationName": "targetEnvironment"
	          },
	          "ExportToS3Task": {
	            "locationName": "exportToS3",
	            "type": "structure",
	            "members": {
	              "DiskImageFormat": {
	                "locationName": "diskImageFormat"
	              },
	              "ContainerFormat": {
	                "locationName": "containerFormat"
	              },
	              "S3Bucket": {
	                "locationName": "s3Bucket"
	              },
	              "S3Prefix": {
	                "locationName": "s3Prefix"
	              }
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ExportTask": {
	            "shape": "S4m",
	            "locationName": "exportTask"
	          }
	        }
	      }
	    },
	    "CreateInternetGateway": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "InternetGateway": {
	            "shape": "S4s",
	            "locationName": "internetGateway"
	          }
	        }
	      }
	    },
	    "CreateKeyPair": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "KeyName"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "KeyName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "KeyName": {
	            "locationName": "keyName"
	          },
	          "KeyFingerprint": {
	            "locationName": "keyFingerprint"
	          },
	          "KeyMaterial": {
	            "locationName": "keyMaterial"
	          }
	        }
	      }
	    },
	    "CreateNatGateway": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubnetId",
	          "AllocationId"
	        ],
	        "members": {
	          "SubnetId": {},
	          "AllocationId": {},
	          "ClientToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NatGateway": {
	            "shape": "S4x",
	            "locationName": "natGateway"
	          },
	          "ClientToken": {
	            "locationName": "clientToken"
	          }
	        }
	      }
	    },
	    "CreateNetworkAcl": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VpcId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "VpcId": {
	            "locationName": "vpcId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NetworkAcl": {
	            "shape": "S54",
	            "locationName": "networkAcl"
	          }
	        }
	      }
	    },
	    "CreateNetworkAclEntry": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "NetworkAclId",
	          "RuleNumber",
	          "Protocol",
	          "RuleAction",
	          "Egress"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "NetworkAclId": {
	            "locationName": "networkAclId"
	          },
	          "RuleNumber": {
	            "locationName": "ruleNumber",
	            "type": "integer"
	          },
	          "Protocol": {
	            "locationName": "protocol"
	          },
	          "RuleAction": {
	            "locationName": "ruleAction"
	          },
	          "Egress": {
	            "locationName": "egress",
	            "type": "boolean"
	          },
	          "CidrBlock": {
	            "locationName": "cidrBlock"
	          },
	          "Ipv6CidrBlock": {
	            "locationName": "ipv6CidrBlock"
	          },
	          "IcmpTypeCode": {
	            "shape": "S58",
	            "locationName": "Icmp"
	          },
	          "PortRange": {
	            "shape": "S59",
	            "locationName": "portRange"
	          }
	        }
	      }
	    },
	    "CreateNetworkInterface": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubnetId"
	        ],
	        "members": {
	          "SubnetId": {
	            "locationName": "subnetId"
	          },
	          "Description": {
	            "locationName": "description"
	          },
	          "PrivateIpAddress": {
	            "locationName": "privateIpAddress"
	          },
	          "Groups": {
	            "shape": "S5e",
	            "locationName": "SecurityGroupId"
	          },
	          "PrivateIpAddresses": {
	            "shape": "S5f",
	            "locationName": "privateIpAddresses"
	          },
	          "SecondaryPrivateIpAddressCount": {
	            "locationName": "secondaryPrivateIpAddressCount",
	            "type": "integer"
	          },
	          "Ipv6Addresses": {
	            "shape": "S5h",
	            "locationName": "ipv6Addresses"
	          },
	          "Ipv6AddressCount": {
	            "locationName": "ipv6AddressCount",
	            "type": "integer"
	          },
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NetworkInterface": {
	            "shape": "S5k",
	            "locationName": "networkInterface"
	          }
	        }
	      }
	    },
	    "CreatePlacementGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GroupName",
	          "Strategy"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "GroupName": {
	            "locationName": "groupName"
	          },
	          "Strategy": {
	            "locationName": "strategy"
	          }
	        }
	      }
	    },
	    "CreateReservedInstancesListing": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ReservedInstancesId",
	          "InstanceCount",
	          "PriceSchedules",
	          "ClientToken"
	        ],
	        "members": {
	          "ReservedInstancesId": {
	            "locationName": "reservedInstancesId"
	          },
	          "InstanceCount": {
	            "locationName": "instanceCount",
	            "type": "integer"
	          },
	          "PriceSchedules": {
	            "locationName": "priceSchedules",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "Term": {
	                  "locationName": "term",
	                  "type": "long"
	                },
	                "Price": {
	                  "locationName": "price",
	                  "type": "double"
	                },
	                "CurrencyCode": {
	                  "locationName": "currencyCode"
	                }
	              }
	            }
	          },
	          "ClientToken": {
	            "locationName": "clientToken"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ReservedInstancesListings": {
	            "shape": "S2n",
	            "locationName": "reservedInstancesListingsSet"
	          }
	        }
	      }
	    },
	    "CreateRoute": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RouteTableId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "RouteTableId": {
	            "locationName": "routeTableId"
	          },
	          "DestinationCidrBlock": {
	            "locationName": "destinationCidrBlock"
	          },
	          "GatewayId": {
	            "locationName": "gatewayId"
	          },
	          "DestinationIpv6CidrBlock": {
	            "locationName": "destinationIpv6CidrBlock"
	          },
	          "EgressOnlyInternetGatewayId": {
	            "locationName": "egressOnlyInternetGatewayId"
	          },
	          "InstanceId": {
	            "locationName": "instanceId"
	          },
	          "NetworkInterfaceId": {
	            "locationName": "networkInterfaceId"
	          },
	          "VpcPeeringConnectionId": {
	            "locationName": "vpcPeeringConnectionId"
	          },
	          "NatGatewayId": {
	            "locationName": "natGatewayId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Return": {
	            "locationName": "return",
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "CreateRouteTable": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VpcId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "VpcId": {
	            "locationName": "vpcId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "RouteTable": {
	            "shape": "S65",
	            "locationName": "routeTable"
	          }
	        }
	      }
	    },
	    "CreateSecurityGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GroupName",
	          "Description"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "GroupName": {},
	          "Description": {
	            "locationName": "GroupDescription"
	          },
	          "VpcId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GroupId": {
	            "locationName": "groupId"
	          }
	        }
	      }
	    },
	    "CreateSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VolumeId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "VolumeId": {},
	          "Description": {}
	        }
	      },
	      "output": {
	        "shape": "S6h"
	      }
	    },
	    "CreateSpotDatafeedSubscription": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "Bucket": {
	            "locationName": "bucket"
	          },
	          "Prefix": {
	            "locationName": "prefix"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "SpotDatafeedSubscription": {
	            "shape": "S6l",
	            "locationName": "spotDatafeedSubscription"
	          }
	        }
	      }
	    },
	    "CreateSubnet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VpcId",
	          "CidrBlock"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "VpcId": {},
	          "CidrBlock": {},
	          "Ipv6CidrBlock": {},
	          "AvailabilityZone": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Subnet": {
	            "shape": "S6q",
	            "locationName": "subnet"
	          }
	        }
	      }
	    },
	    "CreateTags": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Resources",
	          "Tags"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "Resources": {
	            "shape": "S6u",
	            "locationName": "ResourceId"
	          },
	          "Tags": {
	            "shape": "Sj",
	            "locationName": "Tag"
	          }
	        }
	      }
	    },
	    "CreateVolume": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AvailabilityZone"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "Size": {
	            "type": "integer"
	          },
	          "SnapshotId": {},
	          "AvailabilityZone": {},
	          "VolumeType": {},
	          "Iops": {
	            "type": "integer"
	          },
	          "Encrypted": {
	            "locationName": "encrypted",
	            "type": "boolean"
	          },
	          "KmsKeyId": {}
	        }
	      },
	      "output": {
	        "shape": "S6w"
	      }
	    },
	    "CreateVpc": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CidrBlock"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "CidrBlock": {},
	          "InstanceTenancy": {
	            "locationName": "instanceTenancy"
	          },
	          "AmazonProvidedIpv6CidrBlock": {
	            "locationName": "amazonProvidedIpv6CidrBlock",
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Vpc": {
	            "shape": "S72",
	            "locationName": "vpc"
	          }
	        }
	      }
	    },
	    "CreateVpcEndpoint": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VpcId",
	          "ServiceName"
	        ],
	        "members": {
	          "DryRun": {
	            "type": "boolean"
	          },
	          "VpcId": {},
	          "ServiceName": {},
	          "PolicyDocument": {},
	          "RouteTableIds": {
	            "shape": "S2z",
	            "locationName": "RouteTableId"
	          },
	          "ClientToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "VpcEndpoint": {
	            "shape": "S77",
	            "locationName": "vpcEndpoint"
	          },
	          "ClientToken": {
	            "locationName": "clientToken"
	          }
	        }
	      }
	    },
	    "CreateVpcPeeringConnection": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "VpcId": {
	            "locationName": "vpcId"
	          },
	          "PeerVpcId": {
	            "locationName": "peerVpcId"
	          },
	          "PeerOwnerId": {
	            "locationName": "peerOwnerId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "VpcPeeringConnection": {
	            "shape": "Sb",
	            "locationName": "vpcPeeringConnection"
	          }
	        }
	      }
	    },
	    "CreateVpnConnection": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Type",
	          "CustomerGatewayId",
	          "VpnGatewayId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "Type": {},
	          "CustomerGatewayId": {},
	          "VpnGatewayId": {},
	          "Options": {
	            "locationName": "options",
	            "type": "structure",
	            "members": {
	              "StaticRoutesOnly": {
	                "locationName": "staticRoutesOnly",
	                "type": "boolean"
	              }
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "VpnConnection": {
	            "shape": "S7e",
	            "locationName": "vpnConnection"
	          }
	        }
	      }
	    },
	    "CreateVpnConnectionRoute": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VpnConnectionId",
	          "DestinationCidrBlock"
	        ],
	        "members": {
	          "VpnConnectionId": {},
	          "DestinationCidrBlock": {}
	        }
	      }
	    },
	    "CreateVpnGateway": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Type"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "Type": {},
	          "AvailabilityZone": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "VpnGateway": {
	            "shape": "S7q",
	            "locationName": "vpnGateway"
	          }
	        }
	      }
	    },
	    "DeleteCustomerGateway": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CustomerGatewayId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "CustomerGatewayId": {}
	        }
	      }
	    },
	    "DeleteDhcpOptions": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DhcpOptionsId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "DhcpOptionsId": {}
	        }
	      }
	    },
	    "DeleteEgressOnlyInternetGateway": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "EgressOnlyInternetGatewayId"
	        ],
	        "members": {
	          "DryRun": {
	            "type": "boolean"
	          },
	          "EgressOnlyInternetGatewayId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ReturnCode": {
	            "locationName": "returnCode",
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "DeleteFlowLogs": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "FlowLogIds"
	        ],
	        "members": {
	          "FlowLogIds": {
	            "shape": "S2z",
	            "locationName": "FlowLogId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Unsuccessful": {
	            "shape": "S47",
	            "locationName": "unsuccessful"
	          }
	        }
	      }
	    },
	    "DeleteInternetGateway": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InternetGatewayId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "InternetGatewayId": {
	            "locationName": "internetGatewayId"
	          }
	        }
	      }
	    },
	    "DeleteKeyPair": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "KeyName"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "KeyName": {}
	        }
	      }
	    },
	    "DeleteNatGateway": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "NatGatewayId"
	        ],
	        "members": {
	          "NatGatewayId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NatGatewayId": {
	            "locationName": "natGatewayId"
	          }
	        }
	      }
	    },
	    "DeleteNetworkAcl": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "NetworkAclId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "NetworkAclId": {
	            "locationName": "networkAclId"
	          }
	        }
	      }
	    },
	    "DeleteNetworkAclEntry": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "NetworkAclId",
	          "RuleNumber",
	          "Egress"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "NetworkAclId": {
	            "locationName": "networkAclId"
	          },
	          "RuleNumber": {
	            "locationName": "ruleNumber",
	            "type": "integer"
	          },
	          "Egress": {
	            "locationName": "egress",
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "DeleteNetworkInterface": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "NetworkInterfaceId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "NetworkInterfaceId": {
	            "locationName": "networkInterfaceId"
	          }
	        }
	      }
	    },
	    "DeletePlacementGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GroupName"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "GroupName": {
	            "locationName": "groupName"
	          }
	        }
	      }
	    },
	    "DeleteRoute": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RouteTableId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "RouteTableId": {
	            "locationName": "routeTableId"
	          },
	          "DestinationCidrBlock": {
	            "locationName": "destinationCidrBlock"
	          },
	          "DestinationIpv6CidrBlock": {
	            "locationName": "destinationIpv6CidrBlock"
	          }
	        }
	      }
	    },
	    "DeleteRouteTable": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RouteTableId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "RouteTableId": {
	            "locationName": "routeTableId"
	          }
	        }
	      }
	    },
	    "DeleteSecurityGroup": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "GroupName": {},
	          "GroupId": {}
	        }
	      }
	    },
	    "DeleteSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SnapshotId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "SnapshotId": {}
	        }
	      }
	    },
	    "DeleteSpotDatafeedSubscription": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "DeleteSubnet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubnetId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "SubnetId": {}
	        }
	      }
	    },
	    "DeleteTags": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Resources"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "Resources": {
	            "shape": "S6u",
	            "locationName": "resourceId"
	          },
	          "Tags": {
	            "shape": "Sj",
	            "locationName": "tag"
	          }
	        }
	      }
	    },
	    "DeleteVolume": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VolumeId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "VolumeId": {}
	        }
	      }
	    },
	    "DeleteVpc": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VpcId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "VpcId": {}
	        }
	      }
	    },
	    "DeleteVpcEndpoints": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VpcEndpointIds"
	        ],
	        "members": {
	          "DryRun": {
	            "type": "boolean"
	          },
	          "VpcEndpointIds": {
	            "shape": "S2z",
	            "locationName": "VpcEndpointId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Unsuccessful": {
	            "shape": "S47",
	            "locationName": "unsuccessful"
	          }
	        }
	      }
	    },
	    "DeleteVpcPeeringConnection": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VpcPeeringConnectionId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "VpcPeeringConnectionId": {
	            "locationName": "vpcPeeringConnectionId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Return": {
	            "locationName": "return",
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "DeleteVpnConnection": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VpnConnectionId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "VpnConnectionId": {}
	        }
	      }
	    },
	    "DeleteVpnConnectionRoute": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VpnConnectionId",
	          "DestinationCidrBlock"
	        ],
	        "members": {
	          "VpnConnectionId": {},
	          "DestinationCidrBlock": {}
	        }
	      }
	    },
	    "DeleteVpnGateway": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VpnGatewayId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "VpnGatewayId": {}
	        }
	      }
	    },
	    "DeregisterImage": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ImageId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "ImageId": {}
	        }
	      }
	    },
	    "DescribeAccountAttributes": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "AttributeNames": {
	            "locationName": "attributeName",
	            "type": "list",
	            "member": {
	              "locationName": "attributeName"
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "AccountAttributes": {
	            "locationName": "accountAttributeSet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "AttributeName": {
	                  "locationName": "attributeName"
	                },
	                "AttributeValues": {
	                  "locationName": "attributeValueSet",
	                  "type": "list",
	                  "member": {
	                    "locationName": "item",
	                    "type": "structure",
	                    "members": {
	                      "AttributeValue": {
	                        "locationName": "attributeValue"
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeAddresses": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "PublicIps": {
	            "locationName": "PublicIp",
	            "type": "list",
	            "member": {
	              "locationName": "PublicIp"
	            }
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          },
	          "AllocationIds": {
	            "locationName": "AllocationId",
	            "type": "list",
	            "member": {
	              "locationName": "AllocationId"
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Addresses": {
	            "locationName": "addressesSet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "InstanceId": {
	                  "locationName": "instanceId"
	                },
	                "PublicIp": {
	                  "locationName": "publicIp"
	                },
	                "AllocationId": {
	                  "locationName": "allocationId"
	                },
	                "AssociationId": {
	                  "locationName": "associationId"
	                },
	                "Domain": {
	                  "locationName": "domain"
	                },
	                "NetworkInterfaceId": {
	                  "locationName": "networkInterfaceId"
	                },
	                "NetworkInterfaceOwnerId": {
	                  "locationName": "networkInterfaceOwnerId"
	                },
	                "PrivateIpAddress": {
	                  "locationName": "privateIpAddress"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeAvailabilityZones": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "ZoneNames": {
	            "locationName": "ZoneName",
	            "type": "list",
	            "member": {
	              "locationName": "ZoneName"
	            }
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "AvailabilityZones": {
	            "locationName": "availabilityZoneInfo",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "ZoneName": {
	                  "locationName": "zoneName"
	                },
	                "State": {
	                  "locationName": "zoneState"
	                },
	                "RegionName": {
	                  "locationName": "regionName"
	                },
	                "Messages": {
	                  "locationName": "messageSet",
	                  "type": "list",
	                  "member": {
	                    "locationName": "item",
	                    "type": "structure",
	                    "members": {
	                      "Message": {
	                        "locationName": "message"
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeBundleTasks": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "BundleIds": {
	            "locationName": "BundleId",
	            "type": "list",
	            "member": {
	              "locationName": "BundleId"
	            }
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "BundleTasks": {
	            "locationName": "bundleInstanceTasksSet",
	            "type": "list",
	            "member": {
	              "shape": "S2c",
	              "locationName": "item"
	            }
	          }
	        }
	      }
	    },
	    "DescribeClassicLinkInstances": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "InstanceIds": {
	            "shape": "S9g",
	            "locationName": "InstanceId"
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          },
	          "MaxResults": {
	            "locationName": "maxResults",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Instances": {
	            "locationName": "instancesSet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "InstanceId": {
	                  "locationName": "instanceId"
	                },
	                "VpcId": {
	                  "locationName": "vpcId"
	                },
	                "Groups": {
	                  "shape": "S5m",
	                  "locationName": "groupSet"
	                },
	                "Tags": {
	                  "shape": "Sj",
	                  "locationName": "tagSet"
	                }
	              }
	            }
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      }
	    },
	    "DescribeConversionTasks": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "ConversionTaskIds": {
	            "locationName": "conversionTaskId",
	            "type": "list",
	            "member": {
	              "locationName": "item"
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ConversionTasks": {
	            "locationName": "conversionTasks",
	            "type": "list",
	            "member": {
	              "shape": "S9o",
	              "locationName": "item"
	            }
	          }
	        }
	      }
	    },
	    "DescribeCustomerGateways": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "CustomerGatewayIds": {
	            "locationName": "CustomerGatewayId",
	            "type": "list",
	            "member": {
	              "locationName": "CustomerGatewayId"
	            }
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "CustomerGateways": {
	            "locationName": "customerGatewaySet",
	            "type": "list",
	            "member": {
	              "shape": "S3n",
	              "locationName": "item"
	            }
	          }
	        }
	      }
	    },
	    "DescribeDhcpOptions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "DhcpOptionsIds": {
	            "locationName": "DhcpOptionsId",
	            "type": "list",
	            "member": {
	              "locationName": "DhcpOptionsId"
	            }
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "DhcpOptions": {
	            "locationName": "dhcpOptionsSet",
	            "type": "list",
	            "member": {
	              "shape": "S3s",
	              "locationName": "item"
	            }
	          }
	        }
	      }
	    },
	    "DescribeEgressOnlyInternetGateways": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "type": "boolean"
	          },
	          "EgressOnlyInternetGatewayIds": {
	            "locationName": "EgressOnlyInternetGatewayId",
	            "type": "list",
	            "member": {
	              "locationName": "item"
	            }
	          },
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "EgressOnlyInternetGateways": {
	            "locationName": "egressOnlyInternetGatewaySet",
	            "type": "list",
	            "member": {
	              "shape": "S3z",
	              "locationName": "item"
	            }
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      }
	    },
	    "DescribeExportTasks": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ExportTaskIds": {
	            "locationName": "exportTaskId",
	            "type": "list",
	            "member": {
	              "locationName": "ExportTaskId"
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ExportTasks": {
	            "locationName": "exportTaskSet",
	            "type": "list",
	            "member": {
	              "shape": "S4m",
	              "locationName": "item"
	            }
	          }
	        }
	      }
	    },
	    "DescribeFlowLogs": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "FlowLogIds": {
	            "shape": "S2z",
	            "locationName": "FlowLogId"
	          },
	          "Filter": {
	            "shape": "S8x"
	          },
	          "NextToken": {},
	          "MaxResults": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "FlowLogs": {
	            "locationName": "flowLogSet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "CreationTime": {
	                  "locationName": "creationTime",
	                  "type": "timestamp"
	                },
	                "FlowLogId": {
	                  "locationName": "flowLogId"
	                },
	                "FlowLogStatus": {
	                  "locationName": "flowLogStatus"
	                },
	                "ResourceId": {
	                  "locationName": "resourceId"
	                },
	                "TrafficType": {
	                  "locationName": "trafficType"
	                },
	                "LogGroupName": {
	                  "locationName": "logGroupName"
	                },
	                "DeliverLogsStatus": {
	                  "locationName": "deliverLogsStatus"
	                },
	                "DeliverLogsErrorMessage": {
	                  "locationName": "deliverLogsErrorMessage"
	                },
	                "DeliverLogsPermissionArn": {
	                  "locationName": "deliverLogsPermissionArn"
	                }
	              }
	            }
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      }
	    },
	    "DescribeHostReservationOfferings": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "OfferingId": {},
	          "MinDuration": {
	            "type": "integer"
	          },
	          "MaxDuration": {
	            "type": "integer"
	          },
	          "Filter": {
	            "shape": "S8x"
	          },
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "OfferingSet": {
	            "locationName": "offeringSet",
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "OfferingId": {
	                  "locationName": "offeringId"
	                },
	                "InstanceFamily": {
	                  "locationName": "instanceFamily"
	                },
	                "PaymentOption": {
	                  "locationName": "paymentOption"
	                },
	                "UpfrontPrice": {
	                  "locationName": "upfrontPrice"
	                },
	                "HourlyPrice": {
	                  "locationName": "hourlyPrice"
	                },
	                "CurrencyCode": {
	                  "locationName": "currencyCode"
	                },
	                "Duration": {
	                  "locationName": "duration",
	                  "type": "integer"
	                }
	              }
	            }
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      }
	    },
	    "DescribeHostReservations": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "HostReservationIdSet": {
	            "type": "list",
	            "member": {
	              "locationName": "item"
	            }
	          },
	          "Filter": {
	            "shape": "S8x"
	          },
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "HostReservationSet": {
	            "locationName": "hostReservationSet",
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "HostReservationId": {
	                  "locationName": "hostReservationId"
	                },
	                "HostIdSet": {
	                  "shape": "Sar",
	                  "locationName": "hostIdSet"
	                },
	                "OfferingId": {
	                  "locationName": "offeringId"
	                },
	                "InstanceFamily": {
	                  "locationName": "instanceFamily"
	                },
	                "PaymentOption": {
	                  "locationName": "paymentOption"
	                },
	                "HourlyPrice": {
	                  "locationName": "hourlyPrice"
	                },
	                "UpfrontPrice": {
	                  "locationName": "upfrontPrice"
	                },
	                "CurrencyCode": {
	                  "locationName": "currencyCode"
	                },
	                "Count": {
	                  "locationName": "count",
	                  "type": "integer"
	                },
	                "Duration": {
	                  "locationName": "duration",
	                  "type": "integer"
	                },
	                "End": {
	                  "locationName": "end",
	                  "type": "timestamp"
	                },
	                "Start": {
	                  "locationName": "start",
	                  "type": "timestamp"
	                },
	                "State": {
	                  "locationName": "state"
	                }
	              }
	            }
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      }
	    },
	    "DescribeHosts": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "HostIds": {
	            "shape": "Sau",
	            "locationName": "hostId"
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          },
	          "MaxResults": {
	            "locationName": "maxResults",
	            "type": "integer"
	          },
	          "Filter": {
	            "shape": "S8x",
	            "locationName": "filter"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Hosts": {
	            "locationName": "hostSet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "HostId": {
	                  "locationName": "hostId"
	                },
	                "AutoPlacement": {
	                  "locationName": "autoPlacement"
	                },
	                "HostReservationId": {
	                  "locationName": "hostReservationId"
	                },
	                "ClientToken": {
	                  "locationName": "clientToken"
	                },
	                "HostProperties": {
	                  "locationName": "hostProperties",
	                  "type": "structure",
	                  "members": {
	                    "Sockets": {
	                      "locationName": "sockets",
	                      "type": "integer"
	                    },
	                    "Cores": {
	                      "locationName": "cores",
	                      "type": "integer"
	                    },
	                    "TotalVCpus": {
	                      "locationName": "totalVCpus",
	                      "type": "integer"
	                    },
	                    "InstanceType": {
	                      "locationName": "instanceType"
	                    }
	                  }
	                },
	                "State": {
	                  "locationName": "state"
	                },
	                "AvailabilityZone": {
	                  "locationName": "availabilityZone"
	                },
	                "Instances": {
	                  "locationName": "instances",
	                  "type": "list",
	                  "member": {
	                    "locationName": "item",
	                    "type": "structure",
	                    "members": {
	                      "InstanceId": {
	                        "locationName": "instanceId"
	                      },
	                      "InstanceType": {
	                        "locationName": "instanceType"
	                      }
	                    }
	                  }
	                },
	                "AvailableCapacity": {
	                  "locationName": "availableCapacity",
	                  "type": "structure",
	                  "members": {
	                    "AvailableInstanceCapacity": {
	                      "locationName": "availableInstanceCapacity",
	                      "type": "list",
	                      "member": {
	                        "locationName": "item",
	                        "type": "structure",
	                        "members": {
	                          "InstanceType": {
	                            "locationName": "instanceType"
	                          },
	                          "AvailableCapacity": {
	                            "locationName": "availableCapacity",
	                            "type": "integer"
	                          },
	                          "TotalCapacity": {
	                            "locationName": "totalCapacity",
	                            "type": "integer"
	                          }
	                        }
	                      }
	                    },
	                    "AvailableVCpus": {
	                      "locationName": "availableVCpus",
	                      "type": "integer"
	                    }
	                  }
	                }
	              }
	            }
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      }
	    },
	    "DescribeIamInstanceProfileAssociations": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "AssociationIds": {
	            "locationName": "AssociationId",
	            "type": "list",
	            "member": {
	              "locationName": "AssociationId"
	            }
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          },
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "IamInstanceProfileAssociations": {
	            "locationName": "iamInstanceProfileAssociationSet",
	            "type": "list",
	            "member": {
	              "shape": "S13",
	              "locationName": "item"
	            }
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      }
	    },
	    "DescribeIdFormat": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Resource": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Statuses": {
	            "shape": "Sbd",
	            "locationName": "statusSet"
	          }
	        }
	      }
	    },
	    "DescribeIdentityIdFormat": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "PrincipalArn"
	        ],
	        "members": {
	          "Resource": {
	            "locationName": "resource"
	          },
	          "PrincipalArn": {
	            "locationName": "principalArn"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Statuses": {
	            "shape": "Sbd",
	            "locationName": "statusSet"
	          }
	        }
	      }
	    },
	    "DescribeImageAttribute": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ImageId",
	          "Attribute"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "ImageId": {},
	          "Attribute": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ImageId": {
	            "locationName": "imageId"
	          },
	          "LaunchPermissions": {
	            "shape": "Sbk",
	            "locationName": "launchPermission"
	          },
	          "ProductCodes": {
	            "shape": "Sbn",
	            "locationName": "productCodes"
	          },
	          "KernelId": {
	            "shape": "S3w",
	            "locationName": "kernel"
	          },
	          "RamdiskId": {
	            "shape": "S3w",
	            "locationName": "ramdisk"
	          },
	          "Description": {
	            "shape": "S3w",
	            "locationName": "description"
	          },
	          "SriovNetSupport": {
	            "shape": "S3w",
	            "locationName": "sriovNetSupport"
	          },
	          "BlockDeviceMappings": {
	            "shape": "Sbq",
	            "locationName": "blockDeviceMapping"
	          }
	        }
	      }
	    },
	    "DescribeImages": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "ImageIds": {
	            "locationName": "ImageId",
	            "type": "list",
	            "member": {
	              "locationName": "ImageId"
	            }
	          },
	          "Owners": {
	            "shape": "Sbt",
	            "locationName": "Owner"
	          },
	          "ExecutableUsers": {
	            "locationName": "ExecutableBy",
	            "type": "list",
	            "member": {
	              "locationName": "ExecutableBy"
	            }
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Images": {
	            "locationName": "imagesSet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "ImageId": {
	                  "locationName": "imageId"
	                },
	                "ImageLocation": {
	                  "locationName": "imageLocation"
	                },
	                "State": {
	                  "locationName": "imageState"
	                },
	                "OwnerId": {
	                  "locationName": "imageOwnerId"
	                },
	                "CreationDate": {
	                  "locationName": "creationDate"
	                },
	                "Public": {
	                  "locationName": "isPublic",
	                  "type": "boolean"
	                },
	                "ProductCodes": {
	                  "shape": "Sbn",
	                  "locationName": "productCodes"
	                },
	                "Architecture": {
	                  "locationName": "architecture"
	                },
	                "ImageType": {
	                  "locationName": "imageType"
	                },
	                "KernelId": {
	                  "locationName": "kernelId"
	                },
	                "RamdiskId": {
	                  "locationName": "ramdiskId"
	                },
	                "Platform": {
	                  "locationName": "platform"
	                },
	                "SriovNetSupport": {
	                  "locationName": "sriovNetSupport"
	                },
	                "EnaSupport": {
	                  "locationName": "enaSupport",
	                  "type": "boolean"
	                },
	                "StateReason": {
	                  "shape": "Sc1",
	                  "locationName": "stateReason"
	                },
	                "ImageOwnerAlias": {
	                  "locationName": "imageOwnerAlias"
	                },
	                "Name": {
	                  "locationName": "name"
	                },
	                "Description": {
	                  "locationName": "description"
	                },
	                "RootDeviceType": {
	                  "locationName": "rootDeviceType"
	                },
	                "RootDeviceName": {
	                  "locationName": "rootDeviceName"
	                },
	                "BlockDeviceMappings": {
	                  "shape": "Sbq",
	                  "locationName": "blockDeviceMapping"
	                },
	                "VirtualizationType": {
	                  "locationName": "virtualizationType"
	                },
	                "Tags": {
	                  "shape": "Sj",
	                  "locationName": "tagSet"
	                },
	                "Hypervisor": {
	                  "locationName": "hypervisor"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeImportImageTasks": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "type": "boolean"
	          },
	          "ImportTaskIds": {
	            "shape": "Sc6",
	            "locationName": "ImportTaskId"
	          },
	          "NextToken": {},
	          "MaxResults": {
	            "type": "integer"
	          },
	          "Filters": {
	            "shape": "S8x"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ImportImageTasks": {
	            "locationName": "importImageTaskSet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "ImportTaskId": {
	                  "locationName": "importTaskId"
	                },
	                "Architecture": {
	                  "locationName": "architecture"
	                },
	                "LicenseType": {
	                  "locationName": "licenseType"
	                },
	                "Platform": {
	                  "locationName": "platform"
	                },
	                "Hypervisor": {
	                  "locationName": "hypervisor"
	                },
	                "Description": {
	                  "locationName": "description"
	                },
	                "SnapshotDetails": {
	                  "shape": "Sca",
	                  "locationName": "snapshotDetailSet"
	                },
	                "ImageId": {
	                  "locationName": "imageId"
	                },
	                "Progress": {
	                  "locationName": "progress"
	                },
	                "StatusMessage": {
	                  "locationName": "statusMessage"
	                },
	                "Status": {
	                  "locationName": "status"
	                }
	              }
	            }
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      }
	    },
	    "DescribeImportSnapshotTasks": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "type": "boolean"
	          },
	          "ImportTaskIds": {
	            "shape": "Sc6",
	            "locationName": "ImportTaskId"
	          },
	          "NextToken": {},
	          "MaxResults": {
	            "type": "integer"
	          },
	          "Filters": {
	            "shape": "S8x"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ImportSnapshotTasks": {
	            "locationName": "importSnapshotTaskSet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "ImportTaskId": {
	                  "locationName": "importTaskId"
	                },
	                "SnapshotTaskDetail": {
	                  "shape": "Sch",
	                  "locationName": "snapshotTaskDetail"
	                },
	                "Description": {
	                  "locationName": "description"
	                }
	              }
	            }
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      }
	    },
	    "DescribeInstanceAttribute": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId",
	          "Attribute"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "InstanceId": {
	            "locationName": "instanceId"
	          },
	          "Attribute": {
	            "locationName": "attribute"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "InstanceId": {
	            "locationName": "instanceId"
	          },
	          "InstanceType": {
	            "shape": "S3w",
	            "locationName": "instanceType"
	          },
	          "KernelId": {
	            "shape": "S3w",
	            "locationName": "kernel"
	          },
	          "RamdiskId": {
	            "shape": "S3w",
	            "locationName": "ramdisk"
	          },
	          "UserData": {
	            "shape": "S3w",
	            "locationName": "userData"
	          },
	          "DisableApiTermination": {
	            "shape": "Scl",
	            "locationName": "disableApiTermination"
	          },
	          "InstanceInitiatedShutdownBehavior": {
	            "shape": "S3w",
	            "locationName": "instanceInitiatedShutdownBehavior"
	          },
	          "RootDeviceName": {
	            "shape": "S3w",
	            "locationName": "rootDeviceName"
	          },
	          "BlockDeviceMappings": {
	            "shape": "Scm",
	            "locationName": "blockDeviceMapping"
	          },
	          "ProductCodes": {
	            "shape": "Sbn",
	            "locationName": "productCodes"
	          },
	          "EbsOptimized": {
	            "shape": "Scl",
	            "locationName": "ebsOptimized"
	          },
	          "SriovNetSupport": {
	            "shape": "S3w",
	            "locationName": "sriovNetSupport"
	          },
	          "EnaSupport": {
	            "shape": "Scl",
	            "locationName": "enaSupport"
	          },
	          "SourceDestCheck": {
	            "shape": "Scl",
	            "locationName": "sourceDestCheck"
	          },
	          "Groups": {
	            "shape": "S5m",
	            "locationName": "groupSet"
	          }
	        }
	      }
	    },
	    "DescribeInstanceStatus": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "InstanceIds": {
	            "shape": "S9g",
	            "locationName": "InstanceId"
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          },
	          "NextToken": {},
	          "MaxResults": {
	            "type": "integer"
	          },
	          "IncludeAllInstances": {
	            "locationName": "includeAllInstances",
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "InstanceStatuses": {
	            "locationName": "instanceStatusSet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "InstanceId": {
	                  "locationName": "instanceId"
	                },
	                "AvailabilityZone": {
	                  "locationName": "availabilityZone"
	                },
	                "Events": {
	                  "locationName": "eventsSet",
	                  "type": "list",
	                  "member": {
	                    "locationName": "item",
	                    "type": "structure",
	                    "members": {
	                      "Code": {
	                        "locationName": "code"
	                      },
	                      "Description": {
	                        "locationName": "description"
	                      },
	                      "NotBefore": {
	                        "locationName": "notBefore",
	                        "type": "timestamp"
	                      },
	                      "NotAfter": {
	                        "locationName": "notAfter",
	                        "type": "timestamp"
	                      }
	                    }
	                  }
	                },
	                "InstanceState": {
	                  "shape": "Scw",
	                  "locationName": "instanceState"
	                },
	                "SystemStatus": {
	                  "shape": "Scy",
	                  "locationName": "systemStatus"
	                },
	                "InstanceStatus": {
	                  "shape": "Scy",
	                  "locationName": "instanceStatus"
	                }
	              }
	            }
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      }
	    },
	    "DescribeInstances": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "InstanceIds": {
	            "shape": "S9g",
	            "locationName": "InstanceId"
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          },
	          "MaxResults": {
	            "locationName": "maxResults",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Reservations": {
	            "locationName": "reservationSet",
	            "type": "list",
	            "member": {
	              "shape": "Sd7",
	              "locationName": "item"
	            }
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      }
	    },
	    "DescribeInternetGateways": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "InternetGatewayIds": {
	            "shape": "S2z",
	            "locationName": "internetGatewayId"
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "InternetGateways": {
	            "locationName": "internetGatewaySet",
	            "type": "list",
	            "member": {
	              "shape": "S4s",
	              "locationName": "item"
	            }
	          }
	        }
	      }
	    },
	    "DescribeKeyPairs": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "KeyNames": {
	            "locationName": "KeyName",
	            "type": "list",
	            "member": {
	              "locationName": "KeyName"
	            }
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "KeyPairs": {
	            "locationName": "keySet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "KeyName": {
	                  "locationName": "keyName"
	                },
	                "KeyFingerprint": {
	                  "locationName": "keyFingerprint"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeMovingAddresses": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "PublicIps": {
	            "shape": "S2z",
	            "locationName": "publicIp"
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "filter"
	          },
	          "MaxResults": {
	            "locationName": "maxResults",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "MovingAddressStatuses": {
	            "locationName": "movingAddressStatusSet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "PublicIp": {
	                  "locationName": "publicIp"
	                },
	                "MoveStatus": {
	                  "locationName": "moveStatus"
	                }
	              }
	            }
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      }
	    },
	    "DescribeNatGateways": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "NatGatewayIds": {
	            "shape": "S2z",
	            "locationName": "NatGatewayId"
	          },
	          "Filter": {
	            "shape": "S8x"
	          },
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NatGateways": {
	            "locationName": "natGatewaySet",
	            "type": "list",
	            "member": {
	              "shape": "S4x",
	              "locationName": "item"
	            }
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      }
	    },
	    "DescribeNetworkAcls": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "NetworkAclIds": {
	            "shape": "S2z",
	            "locationName": "NetworkAclId"
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NetworkAcls": {
	            "locationName": "networkAclSet",
	            "type": "list",
	            "member": {
	              "shape": "S54",
	              "locationName": "item"
	            }
	          }
	        }
	      }
	    },
	    "DescribeNetworkInterfaceAttribute": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "NetworkInterfaceId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "NetworkInterfaceId": {
	            "locationName": "networkInterfaceId"
	          },
	          "Attribute": {
	            "locationName": "attribute"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NetworkInterfaceId": {
	            "locationName": "networkInterfaceId"
	          },
	          "Description": {
	            "shape": "S3w",
	            "locationName": "description"
	          },
	          "SourceDestCheck": {
	            "shape": "Scl",
	            "locationName": "sourceDestCheck"
	          },
	          "Groups": {
	            "shape": "S5m",
	            "locationName": "groupSet"
	          },
	          "Attachment": {
	            "shape": "S5o",
	            "locationName": "attachment"
	          }
	        }
	      }
	    },
	    "DescribeNetworkInterfaces": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "NetworkInterfaceIds": {
	            "locationName": "NetworkInterfaceId",
	            "type": "list",
	            "member": {
	              "locationName": "item"
	            }
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "filter"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NetworkInterfaces": {
	            "locationName": "networkInterfaceSet",
	            "type": "list",
	            "member": {
	              "shape": "S5k",
	              "locationName": "item"
	            }
	          }
	        }
	      }
	    },
	    "DescribePlacementGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "GroupNames": {
	            "locationName": "groupName",
	            "type": "list",
	            "member": {}
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "PlacementGroups": {
	            "locationName": "placementGroupSet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "GroupName": {
	                  "locationName": "groupName"
	                },
	                "Strategy": {
	                  "locationName": "strategy"
	                },
	                "State": {
	                  "locationName": "state"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribePrefixLists": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "type": "boolean"
	          },
	          "PrefixListIds": {
	            "shape": "S2z",
	            "locationName": "PrefixListId"
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          },
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "PrefixLists": {
	            "locationName": "prefixListSet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "PrefixListId": {
	                  "locationName": "prefixListId"
	                },
	                "PrefixListName": {
	                  "locationName": "prefixListName"
	                },
	                "Cidrs": {
	                  "shape": "S2z",
	                  "locationName": "cidrSet"
	                }
	              }
	            }
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      }
	    },
	    "DescribeRegions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "RegionNames": {
	            "locationName": "RegionName",
	            "type": "list",
	            "member": {
	              "locationName": "RegionName"
	            }
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Regions": {
	            "locationName": "regionInfo",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "RegionName": {
	                  "locationName": "regionName"
	                },
	                "Endpoint": {
	                  "locationName": "regionEndpoint"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeReservedInstances": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "ReservedInstancesIds": {
	            "shape": "Ser",
	            "locationName": "ReservedInstancesId"
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          },
	          "OfferingType": {
	            "locationName": "offeringType"
	          },
	          "OfferingClass": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ReservedInstances": {
	            "locationName": "reservedInstancesSet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "ReservedInstancesId": {
	                  "locationName": "reservedInstancesId"
	                },
	                "InstanceType": {
	                  "locationName": "instanceType"
	                },
	                "AvailabilityZone": {
	                  "locationName": "availabilityZone"
	                },
	                "Start": {
	                  "locationName": "start",
	                  "type": "timestamp"
	                },
	                "End": {
	                  "locationName": "end",
	                  "type": "timestamp"
	                },
	                "Duration": {
	                  "locationName": "duration",
	                  "type": "long"
	                },
	                "UsagePrice": {
	                  "locationName": "usagePrice",
	                  "type": "float"
	                },
	                "FixedPrice": {
	                  "locationName": "fixedPrice",
	                  "type": "float"
	                },
	                "InstanceCount": {
	                  "locationName": "instanceCount",
	                  "type": "integer"
	                },
	                "ProductDescription": {
	                  "locationName": "productDescription"
	                },
	                "State": {
	                  "locationName": "state"
	                },
	                "Tags": {
	                  "shape": "Sj",
	                  "locationName": "tagSet"
	                },
	                "InstanceTenancy": {
	                  "locationName": "instanceTenancy"
	                },
	                "CurrencyCode": {
	                  "locationName": "currencyCode"
	                },
	                "OfferingType": {
	                  "locationName": "offeringType"
	                },
	                "RecurringCharges": {
	                  "shape": "Sf0",
	                  "locationName": "recurringCharges"
	                },
	                "OfferingClass": {
	                  "locationName": "offeringClass"
	                },
	                "Scope": {
	                  "locationName": "scope"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeReservedInstancesListings": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ReservedInstancesId": {
	            "locationName": "reservedInstancesId"
	          },
	          "ReservedInstancesListingId": {
	            "locationName": "reservedInstancesListingId"
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ReservedInstancesListings": {
	            "shape": "S2n",
	            "locationName": "reservedInstancesListingsSet"
	          }
	        }
	      }
	    },
	    "DescribeReservedInstancesModifications": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ReservedInstancesModificationIds": {
	            "locationName": "ReservedInstancesModificationId",
	            "type": "list",
	            "member": {
	              "locationName": "ReservedInstancesModificationId"
	            }
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ReservedInstancesModifications": {
	            "locationName": "reservedInstancesModificationsSet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "ReservedInstancesModificationId": {
	                  "locationName": "reservedInstancesModificationId"
	                },
	                "ReservedInstancesIds": {
	                  "locationName": "reservedInstancesSet",
	                  "type": "list",
	                  "member": {
	                    "locationName": "item",
	                    "type": "structure",
	                    "members": {
	                      "ReservedInstancesId": {
	                        "locationName": "reservedInstancesId"
	                      }
	                    }
	                  }
	                },
	                "ModificationResults": {
	                  "locationName": "modificationResultSet",
	                  "type": "list",
	                  "member": {
	                    "locationName": "item",
	                    "type": "structure",
	                    "members": {
	                      "ReservedInstancesId": {
	                        "locationName": "reservedInstancesId"
	                      },
	                      "TargetConfiguration": {
	                        "shape": "Sff",
	                        "locationName": "targetConfiguration"
	                      }
	                    }
	                  }
	                },
	                "CreateDate": {
	                  "locationName": "createDate",
	                  "type": "timestamp"
	                },
	                "UpdateDate": {
	                  "locationName": "updateDate",
	                  "type": "timestamp"
	                },
	                "EffectiveDate": {
	                  "locationName": "effectiveDate",
	                  "type": "timestamp"
	                },
	                "Status": {
	                  "locationName": "status"
	                },
	                "StatusMessage": {
	                  "locationName": "statusMessage"
	                },
	                "ClientToken": {
	                  "locationName": "clientToken"
	                }
	              }
	            }
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      }
	    },
	    "DescribeReservedInstancesOfferings": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "ReservedInstancesOfferingIds": {
	            "locationName": "ReservedInstancesOfferingId",
	            "type": "list",
	            "member": {}
	          },
	          "InstanceType": {},
	          "AvailabilityZone": {},
	          "ProductDescription": {},
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          },
	          "InstanceTenancy": {
	            "locationName": "instanceTenancy"
	          },
	          "OfferingType": {
	            "locationName": "offeringType"
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          },
	          "MaxResults": {
	            "locationName": "maxResults",
	            "type": "integer"
	          },
	          "IncludeMarketplace": {
	            "type": "boolean"
	          },
	          "MinDuration": {
	            "type": "long"
	          },
	          "MaxDuration": {
	            "type": "long"
	          },
	          "MaxInstanceCount": {
	            "type": "integer"
	          },
	          "OfferingClass": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ReservedInstancesOfferings": {
	            "locationName": "reservedInstancesOfferingsSet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "ReservedInstancesOfferingId": {
	                  "locationName": "reservedInstancesOfferingId"
	                },
	                "InstanceType": {
	                  "locationName": "instanceType"
	                },
	                "AvailabilityZone": {
	                  "locationName": "availabilityZone"
	                },
	                "Duration": {
	                  "locationName": "duration",
	                  "type": "long"
	                },
	                "UsagePrice": {
	                  "locationName": "usagePrice",
	                  "type": "float"
	                },
	                "FixedPrice": {
	                  "locationName": "fixedPrice",
	                  "type": "float"
	                },
	                "ProductDescription": {
	                  "locationName": "productDescription"
	                },
	                "InstanceTenancy": {
	                  "locationName": "instanceTenancy"
	                },
	                "CurrencyCode": {
	                  "locationName": "currencyCode"
	                },
	                "OfferingType": {
	                  "locationName": "offeringType"
	                },
	                "RecurringCharges": {
	                  "shape": "Sf0",
	                  "locationName": "recurringCharges"
	                },
	                "Marketplace": {
	                  "locationName": "marketplace",
	                  "type": "boolean"
	                },
	                "PricingDetails": {
	                  "locationName": "pricingDetailsSet",
	                  "type": "list",
	                  "member": {
	                    "locationName": "item",
	                    "type": "structure",
	                    "members": {
	                      "Price": {
	                        "locationName": "price",
	                        "type": "double"
	                      },
	                      "Count": {
	                        "locationName": "count",
	                        "type": "integer"
	                      }
	                    }
	                  }
	                },
	                "OfferingClass": {
	                  "locationName": "offeringClass"
	                },
	                "Scope": {
	                  "locationName": "scope"
	                }
	              }
	            }
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      }
	    },
	    "DescribeRouteTables": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "RouteTableIds": {
	            "shape": "S2z",
	            "locationName": "RouteTableId"
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "RouteTables": {
	            "locationName": "routeTableSet",
	            "type": "list",
	            "member": {
	              "shape": "S65",
	              "locationName": "item"
	            }
	          }
	        }
	      }
	    },
	    "DescribeScheduledInstanceAvailability": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Recurrence",
	          "FirstSlotStartTimeRange"
	        ],
	        "members": {
	          "DryRun": {
	            "type": "boolean"
	          },
	          "Recurrence": {
	            "type": "structure",
	            "members": {
	              "Frequency": {},
	              "Interval": {
	                "type": "integer"
	              },
	              "OccurrenceDays": {
	                "locationName": "OccurrenceDay",
	                "type": "list",
	                "member": {
	                  "locationName": "OccurenceDay",
	                  "type": "integer"
	                }
	              },
	              "OccurrenceRelativeToEnd": {
	                "type": "boolean"
	              },
	              "OccurrenceUnit": {}
	            }
	          },
	          "FirstSlotStartTimeRange": {
	            "type": "structure",
	            "required": [
	              "EarliestTime",
	              "LatestTime"
	            ],
	            "members": {
	              "EarliestTime": {
	                "type": "timestamp"
	              },
	              "LatestTime": {
	                "type": "timestamp"
	              }
	            }
	          },
	          "MinSlotDurationInHours": {
	            "type": "integer"
	          },
	          "MaxSlotDurationInHours": {
	            "type": "integer"
	          },
	          "NextToken": {},
	          "MaxResults": {
	            "type": "integer"
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NextToken": {
	            "locationName": "nextToken"
	          },
	          "ScheduledInstanceAvailabilitySet": {
	            "locationName": "scheduledInstanceAvailabilitySet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "InstanceType": {
	                  "locationName": "instanceType"
	                },
	                "Platform": {
	                  "locationName": "platform"
	                },
	                "NetworkPlatform": {
	                  "locationName": "networkPlatform"
	                },
	                "AvailabilityZone": {
	                  "locationName": "availabilityZone"
	                },
	                "PurchaseToken": {
	                  "locationName": "purchaseToken"
	                },
	                "SlotDurationInHours": {
	                  "locationName": "slotDurationInHours",
	                  "type": "integer"
	                },
	                "Recurrence": {
	                  "shape": "Sfx",
	                  "locationName": "recurrence"
	                },
	                "FirstSlotStartTime": {
	                  "locationName": "firstSlotStartTime",
	                  "type": "timestamp"
	                },
	                "HourlyPrice": {
	                  "locationName": "hourlyPrice"
	                },
	                "TotalScheduledInstanceHours": {
	                  "locationName": "totalScheduledInstanceHours",
	                  "type": "integer"
	                },
	                "AvailableInstanceCount": {
	                  "locationName": "availableInstanceCount",
	                  "type": "integer"
	                },
	                "MinTermDurationInDays": {
	                  "locationName": "minTermDurationInDays",
	                  "type": "integer"
	                },
	                "MaxTermDurationInDays": {
	                  "locationName": "maxTermDurationInDays",
	                  "type": "integer"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeScheduledInstances": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "type": "boolean"
	          },
	          "ScheduledInstanceIds": {
	            "locationName": "ScheduledInstanceId",
	            "type": "list",
	            "member": {
	              "locationName": "ScheduledInstanceId"
	            }
	          },
	          "SlotStartTimeRange": {
	            "type": "structure",
	            "members": {
	              "EarliestTime": {
	                "type": "timestamp"
	              },
	              "LatestTime": {
	                "type": "timestamp"
	              }
	            }
	          },
	          "NextToken": {},
	          "MaxResults": {
	            "type": "integer"
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NextToken": {
	            "locationName": "nextToken"
	          },
	          "ScheduledInstanceSet": {
	            "locationName": "scheduledInstanceSet",
	            "type": "list",
	            "member": {
	              "shape": "Sg4",
	              "locationName": "item"
	            }
	          }
	        }
	      }
	    },
	    "DescribeSecurityGroupReferences": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GroupId"
	        ],
	        "members": {
	          "DryRun": {
	            "type": "boolean"
	          },
	          "GroupId": {
	            "type": "list",
	            "member": {
	              "locationName": "item"
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "SecurityGroupReferenceSet": {
	            "locationName": "securityGroupReferenceSet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "required": [
	                "GroupId",
	                "ReferencingVpcId"
	              ],
	              "members": {
	                "GroupId": {
	                  "locationName": "groupId"
	                },
	                "ReferencingVpcId": {
	                  "locationName": "referencingVpcId"
	                },
	                "VpcPeeringConnectionId": {
	                  "locationName": "vpcPeeringConnectionId"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeSecurityGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "GroupNames": {
	            "shape": "Sgb",
	            "locationName": "GroupName"
	          },
	          "GroupIds": {
	            "shape": "S1j",
	            "locationName": "GroupId"
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "SecurityGroups": {
	            "locationName": "securityGroupInfo",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "OwnerId": {
	                  "locationName": "ownerId"
	                },
	                "GroupName": {
	                  "locationName": "groupName"
	                },
	                "GroupId": {
	                  "locationName": "groupId"
	                },
	                "Description": {
	                  "locationName": "groupDescription"
	                },
	                "IpPermissions": {
	                  "shape": "S1w",
	                  "locationName": "ipPermissions"
	                },
	                "IpPermissionsEgress": {
	                  "shape": "S1w",
	                  "locationName": "ipPermissionsEgress"
	                },
	                "VpcId": {
	                  "locationName": "vpcId"
	                },
	                "Tags": {
	                  "shape": "Sj",
	                  "locationName": "tagSet"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeSnapshotAttribute": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SnapshotId",
	          "Attribute"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "SnapshotId": {},
	          "Attribute": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "SnapshotId": {
	            "locationName": "snapshotId"
	          },
	          "CreateVolumePermissions": {
	            "shape": "Sgi",
	            "locationName": "createVolumePermission"
	          },
	          "ProductCodes": {
	            "shape": "Sbn",
	            "locationName": "productCodes"
	          }
	        }
	      }
	    },
	    "DescribeSnapshots": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "SnapshotIds": {
	            "locationName": "SnapshotId",
	            "type": "list",
	            "member": {
	              "locationName": "SnapshotId"
	            }
	          },
	          "OwnerIds": {
	            "shape": "Sbt",
	            "locationName": "Owner"
	          },
	          "RestorableByUserIds": {
	            "locationName": "RestorableBy",
	            "type": "list",
	            "member": {}
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          },
	          "NextToken": {},
	          "MaxResults": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Snapshots": {
	            "locationName": "snapshotSet",
	            "type": "list",
	            "member": {
	              "shape": "S6h",
	              "locationName": "item"
	            }
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      }
	    },
	    "DescribeSpotDatafeedSubscription": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "SpotDatafeedSubscription": {
	            "shape": "S6l",
	            "locationName": "spotDatafeedSubscription"
	          }
	        }
	      }
	    },
	    "DescribeSpotFleetInstances": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SpotFleetRequestId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "SpotFleetRequestId": {
	            "locationName": "spotFleetRequestId"
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          },
	          "MaxResults": {
	            "locationName": "maxResults",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "SpotFleetRequestId",
	          "ActiveInstances"
	        ],
	        "members": {
	          "SpotFleetRequestId": {
	            "locationName": "spotFleetRequestId"
	          },
	          "ActiveInstances": {
	            "locationName": "activeInstanceSet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "InstanceType": {
	                  "locationName": "instanceType"
	                },
	                "InstanceId": {
	                  "locationName": "instanceId"
	                },
	                "SpotInstanceRequestId": {
	                  "locationName": "spotInstanceRequestId"
	                },
	                "InstanceHealth": {
	                  "locationName": "instanceHealth"
	                }
	              }
	            }
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      }
	    },
	    "DescribeSpotFleetRequestHistory": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SpotFleetRequestId",
	          "StartTime"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "SpotFleetRequestId": {
	            "locationName": "spotFleetRequestId"
	          },
	          "EventType": {
	            "locationName": "eventType"
	          },
	          "StartTime": {
	            "locationName": "startTime",
	            "type": "timestamp"
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          },
	          "MaxResults": {
	            "locationName": "maxResults",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "SpotFleetRequestId",
	          "StartTime",
	          "LastEvaluatedTime",
	          "HistoryRecords"
	        ],
	        "members": {
	          "SpotFleetRequestId": {
	            "locationName": "spotFleetRequestId"
	          },
	          "StartTime": {
	            "locationName": "startTime",
	            "type": "timestamp"
	          },
	          "LastEvaluatedTime": {
	            "locationName": "lastEvaluatedTime",
	            "type": "timestamp"
	          },
	          "HistoryRecords": {
	            "locationName": "historyRecordSet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "required": [
	                "Timestamp",
	                "EventType",
	                "EventInformation"
	              ],
	              "members": {
	                "Timestamp": {
	                  "locationName": "timestamp",
	                  "type": "timestamp"
	                },
	                "EventType": {
	                  "locationName": "eventType"
	                },
	                "EventInformation": {
	                  "locationName": "eventInformation",
	                  "type": "structure",
	                  "members": {
	                    "InstanceId": {
	                      "locationName": "instanceId"
	                    },
	                    "EventSubType": {
	                      "locationName": "eventSubType"
	                    },
	                    "EventDescription": {
	                      "locationName": "eventDescription"
	                    }
	                  }
	                }
	              }
	            }
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      }
	    },
	    "DescribeSpotFleetRequests": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "SpotFleetRequestIds": {
	            "shape": "S2z",
	            "locationName": "spotFleetRequestId"
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          },
	          "MaxResults": {
	            "locationName": "maxResults",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "SpotFleetRequestConfigs"
	        ],
	        "members": {
	          "SpotFleetRequestConfigs": {
	            "locationName": "spotFleetRequestConfigSet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "required": [
	                "SpotFleetRequestId",
	                "SpotFleetRequestState",
	                "SpotFleetRequestConfig",
	                "CreateTime"
	              ],
	              "members": {
	                "SpotFleetRequestId": {
	                  "locationName": "spotFleetRequestId"
	                },
	                "SpotFleetRequestState": {
	                  "locationName": "spotFleetRequestState"
	                },
	                "SpotFleetRequestConfig": {
	                  "shape": "Sh6",
	                  "locationName": "spotFleetRequestConfig"
	                },
	                "CreateTime": {
	                  "locationName": "createTime",
	                  "type": "timestamp"
	                },
	                "ActivityStatus": {
	                  "locationName": "activityStatus"
	                }
	              }
	            }
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      }
	    },
	    "DescribeSpotInstanceRequests": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "SpotInstanceRequestIds": {
	            "shape": "S39",
	            "locationName": "SpotInstanceRequestId"
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "SpotInstanceRequests": {
	            "shape": "Shj",
	            "locationName": "spotInstanceRequestSet"
	          }
	        }
	      }
	    },
	    "DescribeSpotPriceHistory": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "StartTime": {
	            "locationName": "startTime",
	            "type": "timestamp"
	          },
	          "EndTime": {
	            "locationName": "endTime",
	            "type": "timestamp"
	          },
	          "InstanceTypes": {
	            "locationName": "InstanceType",
	            "type": "list",
	            "member": {}
	          },
	          "ProductDescriptions": {
	            "locationName": "ProductDescription",
	            "type": "list",
	            "member": {}
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          },
	          "AvailabilityZone": {
	            "locationName": "availabilityZone"
	          },
	          "MaxResults": {
	            "locationName": "maxResults",
	            "type": "integer"
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "SpotPriceHistory": {
	            "locationName": "spotPriceHistorySet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "InstanceType": {
	                  "locationName": "instanceType"
	                },
	                "ProductDescription": {
	                  "locationName": "productDescription"
	                },
	                "SpotPrice": {
	                  "locationName": "spotPrice"
	                },
	                "Timestamp": {
	                  "locationName": "timestamp",
	                  "type": "timestamp"
	                },
	                "AvailabilityZone": {
	                  "locationName": "availabilityZone"
	                }
	              }
	            }
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      }
	    },
	    "DescribeStaleSecurityGroups": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VpcId"
	        ],
	        "members": {
	          "DryRun": {
	            "type": "boolean"
	          },
	          "VpcId": {},
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "StaleSecurityGroupSet": {
	            "locationName": "staleSecurityGroupSet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "required": [
	                "GroupId"
	              ],
	              "members": {
	                "GroupId": {
	                  "locationName": "groupId"
	                },
	                "GroupName": {
	                  "locationName": "groupName"
	                },
	                "Description": {
	                  "locationName": "description"
	                },
	                "VpcId": {
	                  "locationName": "vpcId"
	                },
	                "StaleIpPermissions": {
	                  "shape": "Si0",
	                  "locationName": "staleIpPermissions"
	                },
	                "StaleIpPermissionsEgress": {
	                  "shape": "Si0",
	                  "locationName": "staleIpPermissionsEgress"
	                }
	              }
	            }
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      }
	    },
	    "DescribeSubnets": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "SubnetIds": {
	            "locationName": "SubnetId",
	            "type": "list",
	            "member": {
	              "locationName": "SubnetId"
	            }
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Subnets": {
	            "locationName": "subnetSet",
	            "type": "list",
	            "member": {
	              "shape": "S6q",
	              "locationName": "item"
	            }
	          }
	        }
	      }
	    },
	    "DescribeTags": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          },
	          "MaxResults": {
	            "locationName": "maxResults",
	            "type": "integer"
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Tags": {
	            "locationName": "tagSet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "ResourceId": {
	                  "locationName": "resourceId"
	                },
	                "ResourceType": {
	                  "locationName": "resourceType"
	                },
	                "Key": {
	                  "locationName": "key"
	                },
	                "Value": {
	                  "locationName": "value"
	                }
	              }
	            }
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      }
	    },
	    "DescribeVolumeAttribute": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VolumeId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "VolumeId": {},
	          "Attribute": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "VolumeId": {
	            "locationName": "volumeId"
	          },
	          "AutoEnableIO": {
	            "shape": "Scl",
	            "locationName": "autoEnableIO"
	          },
	          "ProductCodes": {
	            "shape": "Sbn",
	            "locationName": "productCodes"
	          }
	        }
	      }
	    },
	    "DescribeVolumeStatus": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "VolumeIds": {
	            "shape": "Sii",
	            "locationName": "VolumeId"
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          },
	          "NextToken": {},
	          "MaxResults": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "VolumeStatuses": {
	            "locationName": "volumeStatusSet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "VolumeId": {
	                  "locationName": "volumeId"
	                },
	                "AvailabilityZone": {
	                  "locationName": "availabilityZone"
	                },
	                "VolumeStatus": {
	                  "locationName": "volumeStatus",
	                  "type": "structure",
	                  "members": {
	                    "Status": {
	                      "locationName": "status"
	                    },
	                    "Details": {
	                      "locationName": "details",
	                      "type": "list",
	                      "member": {
	                        "locationName": "item",
	                        "type": "structure",
	                        "members": {
	                          "Name": {
	                            "locationName": "name"
	                          },
	                          "Status": {
	                            "locationName": "status"
	                          }
	                        }
	                      }
	                    }
	                  }
	                },
	                "Events": {
	                  "locationName": "eventsSet",
	                  "type": "list",
	                  "member": {
	                    "locationName": "item",
	                    "type": "structure",
	                    "members": {
	                      "EventType": {
	                        "locationName": "eventType"
	                      },
	                      "Description": {
	                        "locationName": "description"
	                      },
	                      "NotBefore": {
	                        "locationName": "notBefore",
	                        "type": "timestamp"
	                      },
	                      "NotAfter": {
	                        "locationName": "notAfter",
	                        "type": "timestamp"
	                      },
	                      "EventId": {
	                        "locationName": "eventId"
	                      }
	                    }
	                  }
	                },
	                "Actions": {
	                  "locationName": "actionsSet",
	                  "type": "list",
	                  "member": {
	                    "locationName": "item",
	                    "type": "structure",
	                    "members": {
	                      "Code": {
	                        "locationName": "code"
	                      },
	                      "Description": {
	                        "locationName": "description"
	                      },
	                      "EventType": {
	                        "locationName": "eventType"
	                      },
	                      "EventId": {
	                        "locationName": "eventId"
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      }
	    },
	    "DescribeVolumes": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "VolumeIds": {
	            "shape": "Sii",
	            "locationName": "VolumeId"
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          },
	          "MaxResults": {
	            "locationName": "maxResults",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Volumes": {
	            "locationName": "volumeSet",
	            "type": "list",
	            "member": {
	              "shape": "S6w",
	              "locationName": "item"
	            }
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      }
	    },
	    "DescribeVolumesModifications": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "type": "boolean"
	          },
	          "VolumeIds": {
	            "shape": "Sii",
	            "locationName": "VolumeId"
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          },
	          "NextToken": {},
	          "MaxResults": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "VolumesModifications": {
	            "locationName": "volumeModificationSet",
	            "type": "list",
	            "member": {
	              "shape": "Sj1",
	              "locationName": "item"
	            }
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      }
	    },
	    "DescribeVpcAttribute": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VpcId",
	          "Attribute"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "VpcId": {},
	          "Attribute": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "VpcId": {
	            "locationName": "vpcId"
	          },
	          "EnableDnsSupport": {
	            "shape": "Scl",
	            "locationName": "enableDnsSupport"
	          },
	          "EnableDnsHostnames": {
	            "shape": "Scl",
	            "locationName": "enableDnsHostnames"
	          }
	        }
	      }
	    },
	    "DescribeVpcClassicLink": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "VpcIds": {
	            "shape": "Sj7",
	            "locationName": "VpcId"
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Vpcs": {
	            "locationName": "vpcSet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "VpcId": {
	                  "locationName": "vpcId"
	                },
	                "ClassicLinkEnabled": {
	                  "locationName": "classicLinkEnabled",
	                  "type": "boolean"
	                },
	                "Tags": {
	                  "shape": "Sj",
	                  "locationName": "tagSet"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeVpcClassicLinkDnsSupport": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "VpcIds": {
	            "shape": "Sj7"
	          },
	          "MaxResults": {
	            "locationName": "maxResults",
	            "type": "integer"
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Vpcs": {
	            "locationName": "vpcs",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "VpcId": {
	                  "locationName": "vpcId"
	                },
	                "ClassicLinkDnsSupported": {
	                  "locationName": "classicLinkDnsSupported",
	                  "type": "boolean"
	                }
	              }
	            }
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      }
	    },
	    "DescribeVpcEndpointServices": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "type": "boolean"
	          },
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ServiceNames": {
	            "shape": "S2z",
	            "locationName": "serviceNameSet"
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      }
	    },
	    "DescribeVpcEndpoints": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "type": "boolean"
	          },
	          "VpcEndpointIds": {
	            "shape": "S2z",
	            "locationName": "VpcEndpointId"
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          },
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "VpcEndpoints": {
	            "locationName": "vpcEndpointSet",
	            "type": "list",
	            "member": {
	              "shape": "S77",
	              "locationName": "item"
	            }
	          },
	          "NextToken": {
	            "locationName": "nextToken"
	          }
	        }
	      }
	    },
	    "DescribeVpcPeeringConnections": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "VpcPeeringConnectionIds": {
	            "shape": "S2z",
	            "locationName": "VpcPeeringConnectionId"
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "VpcPeeringConnections": {
	            "locationName": "vpcPeeringConnectionSet",
	            "type": "list",
	            "member": {
	              "shape": "Sb",
	              "locationName": "item"
	            }
	          }
	        }
	      }
	    },
	    "DescribeVpcs": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "VpcIds": {
	            "locationName": "VpcId",
	            "type": "list",
	            "member": {
	              "locationName": "VpcId"
	            }
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Vpcs": {
	            "locationName": "vpcSet",
	            "type": "list",
	            "member": {
	              "shape": "S72",
	              "locationName": "item"
	            }
	          }
	        }
	      }
	    },
	    "DescribeVpnConnections": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "VpnConnectionIds": {
	            "locationName": "VpnConnectionId",
	            "type": "list",
	            "member": {
	              "locationName": "VpnConnectionId"
	            }
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "VpnConnections": {
	            "locationName": "vpnConnectionSet",
	            "type": "list",
	            "member": {
	              "shape": "S7e",
	              "locationName": "item"
	            }
	          }
	        }
	      }
	    },
	    "DescribeVpnGateways": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "VpnGatewayIds": {
	            "locationName": "VpnGatewayId",
	            "type": "list",
	            "member": {
	              "locationName": "VpnGatewayId"
	            }
	          },
	          "Filters": {
	            "shape": "S8x",
	            "locationName": "Filter"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "VpnGateways": {
	            "locationName": "vpnGatewaySet",
	            "type": "list",
	            "member": {
	              "shape": "S7q",
	              "locationName": "item"
	            }
	          }
	        }
	      }
	    },
	    "DetachClassicLinkVpc": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId",
	          "VpcId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "InstanceId": {
	            "locationName": "instanceId"
	          },
	          "VpcId": {
	            "locationName": "vpcId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Return": {
	            "locationName": "return",
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "DetachInternetGateway": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InternetGatewayId",
	          "VpcId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "InternetGatewayId": {
	            "locationName": "internetGatewayId"
	          },
	          "VpcId": {
	            "locationName": "vpcId"
	          }
	        }
	      }
	    },
	    "DetachNetworkInterface": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AttachmentId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "AttachmentId": {
	            "locationName": "attachmentId"
	          },
	          "Force": {
	            "locationName": "force",
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "DetachVolume": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VolumeId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "VolumeId": {},
	          "InstanceId": {},
	          "Device": {},
	          "Force": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "shape": "S1p"
	      }
	    },
	    "DetachVpnGateway": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VpnGatewayId",
	          "VpcId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "VpnGatewayId": {},
	          "VpcId": {}
	        }
	      }
	    },
	    "DisableVgwRoutePropagation": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RouteTableId",
	          "GatewayId"
	        ],
	        "members": {
	          "RouteTableId": {},
	          "GatewayId": {}
	        }
	      }
	    },
	    "DisableVpcClassicLink": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VpcId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "VpcId": {
	            "locationName": "vpcId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Return": {
	            "locationName": "return",
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "DisableVpcClassicLinkDnsSupport": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "VpcId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Return": {
	            "locationName": "return",
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "DisassociateAddress": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "PublicIp": {},
	          "AssociationId": {}
	        }
	      }
	    },
	    "DisassociateIamInstanceProfile": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AssociationId"
	        ],
	        "members": {
	          "AssociationId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "IamInstanceProfileAssociation": {
	            "shape": "S13",
	            "locationName": "iamInstanceProfileAssociation"
	          }
	        }
	      }
	    },
	    "DisassociateRouteTable": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AssociationId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "AssociationId": {
	            "locationName": "associationId"
	          }
	        }
	      }
	    },
	    "DisassociateSubnetCidrBlock": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AssociationId"
	        ],
	        "members": {
	          "AssociationId": {
	            "locationName": "associationId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "SubnetId": {
	            "locationName": "subnetId"
	          },
	          "Ipv6CidrBlockAssociation": {
	            "shape": "S1a",
	            "locationName": "ipv6CidrBlockAssociation"
	          }
	        }
	      }
	    },
	    "DisassociateVpcCidrBlock": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AssociationId"
	        ],
	        "members": {
	          "AssociationId": {
	            "locationName": "associationId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "VpcId": {
	            "locationName": "vpcId"
	          },
	          "Ipv6CidrBlockAssociation": {
	            "shape": "S1f",
	            "locationName": "ipv6CidrBlockAssociation"
	          }
	        }
	      }
	    },
	    "EnableVgwRoutePropagation": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RouteTableId",
	          "GatewayId"
	        ],
	        "members": {
	          "RouteTableId": {},
	          "GatewayId": {}
	        }
	      }
	    },
	    "EnableVolumeIO": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VolumeId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "VolumeId": {
	            "locationName": "volumeId"
	          }
	        }
	      }
	    },
	    "EnableVpcClassicLink": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VpcId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "VpcId": {
	            "locationName": "vpcId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Return": {
	            "locationName": "return",
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "EnableVpcClassicLinkDnsSupport": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "VpcId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Return": {
	            "locationName": "return",
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "GetConsoleOutput": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "InstanceId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "InstanceId": {
	            "locationName": "instanceId"
	          },
	          "Timestamp": {
	            "locationName": "timestamp",
	            "type": "timestamp"
	          },
	          "Output": {
	            "locationName": "output"
	          }
	        }
	      }
	    },
	    "GetConsoleScreenshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId"
	        ],
	        "members": {
	          "DryRun": {
	            "type": "boolean"
	          },
	          "InstanceId": {},
	          "WakeUp": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "InstanceId": {
	            "locationName": "instanceId"
	          },
	          "ImageData": {
	            "locationName": "imageData"
	          }
	        }
	      }
	    },
	    "GetHostReservationPurchasePreview": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "OfferingId",
	          "HostIdSet"
	        ],
	        "members": {
	          "OfferingId": {},
	          "HostIdSet": {
	            "shape": "Skt"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Purchase": {
	            "shape": "Skv",
	            "locationName": "purchase"
	          },
	          "TotalUpfrontPrice": {
	            "locationName": "totalUpfrontPrice"
	          },
	          "TotalHourlyPrice": {
	            "locationName": "totalHourlyPrice"
	          },
	          "CurrencyCode": {
	            "locationName": "currencyCode"
	          }
	        }
	      }
	    },
	    "GetPasswordData": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "InstanceId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "InstanceId": {
	            "locationName": "instanceId"
	          },
	          "Timestamp": {
	            "locationName": "timestamp",
	            "type": "timestamp"
	          },
	          "PasswordData": {
	            "locationName": "passwordData"
	          }
	        }
	      }
	    },
	    "GetReservedInstancesExchangeQuote": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ReservedInstanceIds"
	        ],
	        "members": {
	          "DryRun": {
	            "type": "boolean"
	          },
	          "ReservedInstanceIds": {
	            "shape": "S3",
	            "locationName": "ReservedInstanceId"
	          },
	          "TargetConfigurations": {
	            "shape": "S5",
	            "locationName": "TargetConfiguration"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ReservedInstanceValueSet": {
	            "locationName": "reservedInstanceValueSet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "ReservedInstanceId": {
	                  "locationName": "reservedInstanceId"
	                },
	                "ReservationValue": {
	                  "shape": "Sl3",
	                  "locationName": "reservationValue"
	                }
	              }
	            }
	          },
	          "ReservedInstanceValueRollup": {
	            "shape": "Sl3",
	            "locationName": "reservedInstanceValueRollup"
	          },
	          "TargetConfigurationValueSet": {
	            "locationName": "targetConfigurationValueSet",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "TargetConfiguration": {
	                  "locationName": "targetConfiguration",
	                  "type": "structure",
	                  "members": {
	                    "OfferingId": {
	                      "locationName": "offeringId"
	                    },
	                    "InstanceCount": {
	                      "locationName": "instanceCount",
	                      "type": "integer"
	                    }
	                  }
	                },
	                "ReservationValue": {
	                  "shape": "Sl3",
	                  "locationName": "reservationValue"
	                }
	              }
	            }
	          },
	          "TargetConfigurationValueRollup": {
	            "shape": "Sl3",
	            "locationName": "targetConfigurationValueRollup"
	          },
	          "PaymentDue": {
	            "locationName": "paymentDue"
	          },
	          "CurrencyCode": {
	            "locationName": "currencyCode"
	          },
	          "OutputReservedInstancesWillExpireAt": {
	            "locationName": "outputReservedInstancesWillExpireAt",
	            "type": "timestamp"
	          },
	          "IsValidExchange": {
	            "locationName": "isValidExchange",
	            "type": "boolean"
	          },
	          "ValidationFailureReason": {
	            "locationName": "validationFailureReason"
	          }
	        }
	      }
	    },
	    "ImportImage": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "type": "boolean"
	          },
	          "Description": {},
	          "DiskContainers": {
	            "locationName": "DiskContainer",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "Description": {},
	                "Format": {},
	                "Url": {},
	                "UserBucket": {
	                  "shape": "Sla"
	                },
	                "DeviceName": {},
	                "SnapshotId": {}
	              }
	            }
	          },
	          "LicenseType": {},
	          "Hypervisor": {},
	          "Architecture": {},
	          "Platform": {},
	          "ClientData": {
	            "shape": "Slb"
	          },
	          "ClientToken": {},
	          "RoleName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ImportTaskId": {
	            "locationName": "importTaskId"
	          },
	          "Architecture": {
	            "locationName": "architecture"
	          },
	          "LicenseType": {
	            "locationName": "licenseType"
	          },
	          "Platform": {
	            "locationName": "platform"
	          },
	          "Hypervisor": {
	            "locationName": "hypervisor"
	          },
	          "Description": {
	            "locationName": "description"
	          },
	          "SnapshotDetails": {
	            "shape": "Sca",
	            "locationName": "snapshotDetailSet"
	          },
	          "ImageId": {
	            "locationName": "imageId"
	          },
	          "Progress": {
	            "locationName": "progress"
	          },
	          "StatusMessage": {
	            "locationName": "statusMessage"
	          },
	          "Status": {
	            "locationName": "status"
	          }
	        }
	      }
	    },
	    "ImportInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Platform"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "Description": {
	            "locationName": "description"
	          },
	          "LaunchSpecification": {
	            "locationName": "launchSpecification",
	            "type": "structure",
	            "members": {
	              "Architecture": {
	                "locationName": "architecture"
	              },
	              "GroupNames": {
	                "shape": "Slf",
	                "locationName": "GroupName"
	              },
	              "GroupIds": {
	                "shape": "S5e",
	                "locationName": "GroupId"
	              },
	              "AdditionalInfo": {
	                "locationName": "additionalInfo"
	              },
	              "UserData": {
	                "locationName": "userData",
	                "type": "structure",
	                "members": {
	                  "Data": {
	                    "locationName": "data"
	                  }
	                }
	              },
	              "InstanceType": {
	                "locationName": "instanceType"
	              },
	              "Placement": {
	                "shape": "Sdb",
	                "locationName": "placement"
	              },
	              "Monitoring": {
	                "locationName": "monitoring",
	                "type": "boolean"
	              },
	              "SubnetId": {
	                "locationName": "subnetId"
	              },
	              "InstanceInitiatedShutdownBehavior": {
	                "locationName": "instanceInitiatedShutdownBehavior"
	              },
	              "PrivateIpAddress": {
	                "locationName": "privateIpAddress"
	              }
	            }
	          },
	          "DiskImages": {
	            "locationName": "diskImage",
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Image": {
	                  "shape": "Slk"
	                },
	                "Description": {},
	                "Volume": {
	                  "shape": "Sll"
	                }
	              }
	            }
	          },
	          "Platform": {
	            "locationName": "platform"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ConversionTask": {
	            "shape": "S9o",
	            "locationName": "conversionTask"
	          }
	        }
	      }
	    },
	    "ImportKeyPair": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "KeyName",
	          "PublicKeyMaterial"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "KeyName": {
	            "locationName": "keyName"
	          },
	          "PublicKeyMaterial": {
	            "locationName": "publicKeyMaterial",
	            "type": "blob"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "KeyName": {
	            "locationName": "keyName"
	          },
	          "KeyFingerprint": {
	            "locationName": "keyFingerprint"
	          }
	        }
	      }
	    },
	    "ImportSnapshot": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "type": "boolean"
	          },
	          "Description": {},
	          "DiskContainer": {
	            "type": "structure",
	            "members": {
	              "Description": {},
	              "Format": {},
	              "Url": {},
	              "UserBucket": {
	                "shape": "Sla"
	              }
	            }
	          },
	          "ClientData": {
	            "shape": "Slb"
	          },
	          "ClientToken": {},
	          "RoleName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ImportTaskId": {
	            "locationName": "importTaskId"
	          },
	          "SnapshotTaskDetail": {
	            "shape": "Sch",
	            "locationName": "snapshotTaskDetail"
	          },
	          "Description": {
	            "locationName": "description"
	          }
	        }
	      }
	    },
	    "ImportVolume": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AvailabilityZone",
	          "Image",
	          "Volume"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "AvailabilityZone": {
	            "locationName": "availabilityZone"
	          },
	          "Image": {
	            "shape": "Slk",
	            "locationName": "image"
	          },
	          "Description": {
	            "locationName": "description"
	          },
	          "Volume": {
	            "shape": "Sll",
	            "locationName": "volume"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ConversionTask": {
	            "shape": "S9o",
	            "locationName": "conversionTask"
	          }
	        }
	      }
	    },
	    "ModifyHosts": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "HostIds",
	          "AutoPlacement"
	        ],
	        "members": {
	          "HostIds": {
	            "shape": "Sau",
	            "locationName": "hostId"
	          },
	          "AutoPlacement": {
	            "locationName": "autoPlacement"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Successful": {
	            "shape": "Sr",
	            "locationName": "successful"
	          },
	          "Unsuccessful": {
	            "shape": "Slw",
	            "locationName": "unsuccessful"
	          }
	        }
	      }
	    },
	    "ModifyIdFormat": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Resource",
	          "UseLongIds"
	        ],
	        "members": {
	          "Resource": {},
	          "UseLongIds": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "ModifyIdentityIdFormat": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Resource",
	          "UseLongIds",
	          "PrincipalArn"
	        ],
	        "members": {
	          "Resource": {
	            "locationName": "resource"
	          },
	          "UseLongIds": {
	            "locationName": "useLongIds",
	            "type": "boolean"
	          },
	          "PrincipalArn": {
	            "locationName": "principalArn"
	          }
	        }
	      }
	    },
	    "ModifyImageAttribute": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ImageId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "ImageId": {},
	          "Attribute": {},
	          "OperationType": {},
	          "UserIds": {
	            "shape": "Sm1",
	            "locationName": "UserId"
	          },
	          "UserGroups": {
	            "locationName": "UserGroup",
	            "type": "list",
	            "member": {
	              "locationName": "UserGroup"
	            }
	          },
	          "ProductCodes": {
	            "locationName": "ProductCode",
	            "type": "list",
	            "member": {
	              "locationName": "ProductCode"
	            }
	          },
	          "Value": {},
	          "LaunchPermission": {
	            "type": "structure",
	            "members": {
	              "Add": {
	                "shape": "Sbk"
	              },
	              "Remove": {
	                "shape": "Sbk"
	              }
	            }
	          },
	          "Description": {
	            "shape": "S3w"
	          }
	        }
	      }
	    },
	    "ModifyInstanceAttribute": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "InstanceId": {
	            "locationName": "instanceId"
	          },
	          "Attribute": {
	            "locationName": "attribute"
	          },
	          "Value": {
	            "locationName": "value"
	          },
	          "BlockDeviceMappings": {
	            "locationName": "blockDeviceMapping",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "DeviceName": {
	                  "locationName": "deviceName"
	                },
	                "Ebs": {
	                  "locationName": "ebs",
	                  "type": "structure",
	                  "members": {
	                    "VolumeId": {
	                      "locationName": "volumeId"
	                    },
	                    "DeleteOnTermination": {
	                      "locationName": "deleteOnTermination",
	                      "type": "boolean"
	                    }
	                  }
	                },
	                "VirtualName": {
	                  "locationName": "virtualName"
	                },
	                "NoDevice": {
	                  "locationName": "noDevice"
	                }
	              }
	            }
	          },
	          "SourceDestCheck": {
	            "shape": "Scl"
	          },
	          "DisableApiTermination": {
	            "shape": "Scl",
	            "locationName": "disableApiTermination"
	          },
	          "InstanceType": {
	            "shape": "S3w",
	            "locationName": "instanceType"
	          },
	          "Kernel": {
	            "shape": "S3w",
	            "locationName": "kernel"
	          },
	          "Ramdisk": {
	            "shape": "S3w",
	            "locationName": "ramdisk"
	          },
	          "UserData": {
	            "locationName": "userData",
	            "type": "structure",
	            "members": {
	              "Value": {
	                "locationName": "value",
	                "type": "blob"
	              }
	            }
	          },
	          "InstanceInitiatedShutdownBehavior": {
	            "shape": "S3w",
	            "locationName": "instanceInitiatedShutdownBehavior"
	          },
	          "Groups": {
	            "shape": "S1j",
	            "locationName": "GroupId"
	          },
	          "EbsOptimized": {
	            "shape": "Scl",
	            "locationName": "ebsOptimized"
	          },
	          "SriovNetSupport": {
	            "shape": "S3w",
	            "locationName": "sriovNetSupport"
	          },
	          "EnaSupport": {
	            "shape": "Scl",
	            "locationName": "enaSupport"
	          }
	        }
	      }
	    },
	    "ModifyInstancePlacement": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId"
	        ],
	        "members": {
	          "InstanceId": {
	            "locationName": "instanceId"
	          },
	          "Tenancy": {
	            "locationName": "tenancy"
	          },
	          "Affinity": {
	            "locationName": "affinity"
	          },
	          "HostId": {
	            "locationName": "hostId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Return": {
	            "locationName": "return",
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "ModifyNetworkInterfaceAttribute": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "NetworkInterfaceId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "NetworkInterfaceId": {
	            "locationName": "networkInterfaceId"
	          },
	          "Description": {
	            "shape": "S3w",
	            "locationName": "description"
	          },
	          "SourceDestCheck": {
	            "shape": "Scl",
	            "locationName": "sourceDestCheck"
	          },
	          "Groups": {
	            "shape": "S5e",
	            "locationName": "SecurityGroupId"
	          },
	          "Attachment": {
	            "locationName": "attachment",
	            "type": "structure",
	            "members": {
	              "AttachmentId": {
	                "locationName": "attachmentId"
	              },
	              "DeleteOnTermination": {
	                "locationName": "deleteOnTermination",
	                "type": "boolean"
	              }
	            }
	          }
	        }
	      }
	    },
	    "ModifyReservedInstances": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ReservedInstancesIds",
	          "TargetConfigurations"
	        ],
	        "members": {
	          "ClientToken": {
	            "locationName": "clientToken"
	          },
	          "ReservedInstancesIds": {
	            "shape": "Ser",
	            "locationName": "ReservedInstancesId"
	          },
	          "TargetConfigurations": {
	            "locationName": "ReservedInstancesConfigurationSetItemType",
	            "type": "list",
	            "member": {
	              "shape": "Sff",
	              "locationName": "item"
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ReservedInstancesModificationId": {
	            "locationName": "reservedInstancesModificationId"
	          }
	        }
	      }
	    },
	    "ModifySnapshotAttribute": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SnapshotId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "SnapshotId": {},
	          "Attribute": {},
	          "OperationType": {},
	          "UserIds": {
	            "shape": "Sm1",
	            "locationName": "UserId"
	          },
	          "GroupNames": {
	            "shape": "Sgb",
	            "locationName": "UserGroup"
	          },
	          "CreateVolumePermission": {
	            "type": "structure",
	            "members": {
	              "Add": {
	                "shape": "Sgi"
	              },
	              "Remove": {
	                "shape": "Sgi"
	              }
	            }
	          }
	        }
	      }
	    },
	    "ModifySpotFleetRequest": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SpotFleetRequestId"
	        ],
	        "members": {
	          "SpotFleetRequestId": {
	            "locationName": "spotFleetRequestId"
	          },
	          "TargetCapacity": {
	            "locationName": "targetCapacity",
	            "type": "integer"
	          },
	          "ExcessCapacityTerminationPolicy": {
	            "locationName": "excessCapacityTerminationPolicy"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Return": {
	            "locationName": "return",
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "ModifySubnetAttribute": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubnetId"
	        ],
	        "members": {
	          "SubnetId": {
	            "locationName": "subnetId"
	          },
	          "MapPublicIpOnLaunch": {
	            "shape": "Scl"
	          },
	          "AssignIpv6AddressOnCreation": {
	            "shape": "Scl"
	          }
	        }
	      }
	    },
	    "ModifyVolume": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VolumeId"
	        ],
	        "members": {
	          "DryRun": {
	            "type": "boolean"
	          },
	          "VolumeId": {},
	          "Size": {
	            "type": "integer"
	          },
	          "VolumeType": {},
	          "Iops": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "VolumeModification": {
	            "shape": "Sj1",
	            "locationName": "volumeModification"
	          }
	        }
	      }
	    },
	    "ModifyVolumeAttribute": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VolumeId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "VolumeId": {},
	          "AutoEnableIO": {
	            "shape": "Scl"
	          }
	        }
	      }
	    },
	    "ModifyVpcAttribute": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VpcId"
	        ],
	        "members": {
	          "VpcId": {
	            "locationName": "vpcId"
	          },
	          "EnableDnsSupport": {
	            "shape": "Scl"
	          },
	          "EnableDnsHostnames": {
	            "shape": "Scl"
	          }
	        }
	      }
	    },
	    "ModifyVpcEndpoint": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VpcEndpointId"
	        ],
	        "members": {
	          "DryRun": {
	            "type": "boolean"
	          },
	          "VpcEndpointId": {},
	          "ResetPolicy": {
	            "type": "boolean"
	          },
	          "PolicyDocument": {},
	          "AddRouteTableIds": {
	            "shape": "S2z",
	            "locationName": "AddRouteTableId"
	          },
	          "RemoveRouteTableIds": {
	            "shape": "S2z",
	            "locationName": "RemoveRouteTableId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Return": {
	            "locationName": "return",
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "ModifyVpcPeeringConnectionOptions": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VpcPeeringConnectionId"
	        ],
	        "members": {
	          "DryRun": {
	            "type": "boolean"
	          },
	          "VpcPeeringConnectionId": {},
	          "RequesterPeeringConnectionOptions": {
	            "shape": "Smv"
	          },
	          "AccepterPeeringConnectionOptions": {
	            "shape": "Smv"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "RequesterPeeringConnectionOptions": {
	            "shape": "Smx",
	            "locationName": "requesterPeeringConnectionOptions"
	          },
	          "AccepterPeeringConnectionOptions": {
	            "shape": "Smx",
	            "locationName": "accepterPeeringConnectionOptions"
	          }
	        }
	      }
	    },
	    "MonitorInstances": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceIds"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "InstanceIds": {
	            "shape": "S9g",
	            "locationName": "InstanceId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "InstanceMonitorings": {
	            "shape": "Sn0",
	            "locationName": "instancesSet"
	          }
	        }
	      }
	    },
	    "MoveAddressToVpc": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "PublicIp"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "PublicIp": {
	            "locationName": "publicIp"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "AllocationId": {
	            "locationName": "allocationId"
	          },
	          "Status": {
	            "locationName": "status"
	          }
	        }
	      }
	    },
	    "PurchaseHostReservation": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "OfferingId",
	          "HostIdSet"
	        ],
	        "members": {
	          "OfferingId": {},
	          "HostIdSet": {
	            "shape": "Skt"
	          },
	          "LimitPrice": {},
	          "CurrencyCode": {},
	          "ClientToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Purchase": {
	            "shape": "Skv",
	            "locationName": "purchase"
	          },
	          "TotalUpfrontPrice": {
	            "locationName": "totalUpfrontPrice"
	          },
	          "TotalHourlyPrice": {
	            "locationName": "totalHourlyPrice"
	          },
	          "CurrencyCode": {
	            "locationName": "currencyCode"
	          },
	          "ClientToken": {
	            "locationName": "clientToken"
	          }
	        }
	      }
	    },
	    "PurchaseReservedInstancesOffering": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ReservedInstancesOfferingId",
	          "InstanceCount"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "ReservedInstancesOfferingId": {},
	          "InstanceCount": {
	            "type": "integer"
	          },
	          "LimitPrice": {
	            "locationName": "limitPrice",
	            "type": "structure",
	            "members": {
	              "Amount": {
	                "locationName": "amount",
	                "type": "double"
	              },
	              "CurrencyCode": {
	                "locationName": "currencyCode"
	              }
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ReservedInstancesId": {
	            "locationName": "reservedInstancesId"
	          }
	        }
	      }
	    },
	    "PurchaseScheduledInstances": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "PurchaseRequests"
	        ],
	        "members": {
	          "DryRun": {
	            "type": "boolean"
	          },
	          "ClientToken": {
	            "idempotencyToken": true
	          },
	          "PurchaseRequests": {
	            "locationName": "PurchaseRequest",
	            "type": "list",
	            "member": {
	              "locationName": "PurchaseRequest",
	              "type": "structure",
	              "required": [
	                "PurchaseToken",
	                "InstanceCount"
	              ],
	              "members": {
	                "PurchaseToken": {},
	                "InstanceCount": {
	                  "type": "integer"
	                }
	              }
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ScheduledInstanceSet": {
	            "locationName": "scheduledInstanceSet",
	            "type": "list",
	            "member": {
	              "shape": "Sg4",
	              "locationName": "item"
	            }
	          }
	        }
	      }
	    },
	    "RebootInstances": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceIds"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "InstanceIds": {
	            "shape": "S9g",
	            "locationName": "InstanceId"
	          }
	        }
	      }
	    },
	    "RegisterImage": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "ImageLocation": {},
	          "Name": {
	            "locationName": "name"
	          },
	          "Description": {
	            "locationName": "description"
	          },
	          "Architecture": {
	            "locationName": "architecture"
	          },
	          "KernelId": {
	            "locationName": "kernelId"
	          },
	          "RamdiskId": {
	            "locationName": "ramdiskId"
	          },
	          "RootDeviceName": {
	            "locationName": "rootDeviceName"
	          },
	          "BlockDeviceMappings": {
	            "shape": "S4b",
	            "locationName": "BlockDeviceMapping"
	          },
	          "VirtualizationType": {
	            "locationName": "virtualizationType"
	          },
	          "SriovNetSupport": {
	            "locationName": "sriovNetSupport"
	          },
	          "EnaSupport": {
	            "locationName": "enaSupport",
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ImageId": {
	            "locationName": "imageId"
	          }
	        }
	      }
	    },
	    "RejectVpcPeeringConnection": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VpcPeeringConnectionId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "VpcPeeringConnectionId": {
	            "locationName": "vpcPeeringConnectionId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Return": {
	            "locationName": "return",
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "ReleaseAddress": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "PublicIp": {},
	          "AllocationId": {}
	        }
	      }
	    },
	    "ReleaseHosts": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "HostIds"
	        ],
	        "members": {
	          "HostIds": {
	            "shape": "Sau",
	            "locationName": "hostId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Successful": {
	            "shape": "Sr",
	            "locationName": "successful"
	          },
	          "Unsuccessful": {
	            "shape": "Slw",
	            "locationName": "unsuccessful"
	          }
	        }
	      }
	    },
	    "ReplaceIamInstanceProfileAssociation": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "IamInstanceProfile",
	          "AssociationId"
	        ],
	        "members": {
	          "IamInstanceProfile": {
	            "shape": "S11"
	          },
	          "AssociationId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "IamInstanceProfileAssociation": {
	            "shape": "S13",
	            "locationName": "iamInstanceProfileAssociation"
	          }
	        }
	      }
	    },
	    "ReplaceNetworkAclAssociation": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AssociationId",
	          "NetworkAclId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "AssociationId": {
	            "locationName": "associationId"
	          },
	          "NetworkAclId": {
	            "locationName": "networkAclId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NewAssociationId": {
	            "locationName": "newAssociationId"
	          }
	        }
	      }
	    },
	    "ReplaceNetworkAclEntry": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "NetworkAclId",
	          "RuleNumber",
	          "Protocol",
	          "RuleAction",
	          "Egress"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "NetworkAclId": {
	            "locationName": "networkAclId"
	          },
	          "RuleNumber": {
	            "locationName": "ruleNumber",
	            "type": "integer"
	          },
	          "Protocol": {
	            "locationName": "protocol"
	          },
	          "RuleAction": {
	            "locationName": "ruleAction"
	          },
	          "Egress": {
	            "locationName": "egress",
	            "type": "boolean"
	          },
	          "CidrBlock": {
	            "locationName": "cidrBlock"
	          },
	          "Ipv6CidrBlock": {
	            "locationName": "ipv6CidrBlock"
	          },
	          "IcmpTypeCode": {
	            "shape": "S58",
	            "locationName": "Icmp"
	          },
	          "PortRange": {
	            "shape": "S59",
	            "locationName": "portRange"
	          }
	        }
	      }
	    },
	    "ReplaceRoute": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RouteTableId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "RouteTableId": {
	            "locationName": "routeTableId"
	          },
	          "DestinationCidrBlock": {
	            "locationName": "destinationCidrBlock"
	          },
	          "GatewayId": {
	            "locationName": "gatewayId"
	          },
	          "DestinationIpv6CidrBlock": {
	            "locationName": "destinationIpv6CidrBlock"
	          },
	          "EgressOnlyInternetGatewayId": {
	            "locationName": "egressOnlyInternetGatewayId"
	          },
	          "InstanceId": {
	            "locationName": "instanceId"
	          },
	          "NetworkInterfaceId": {
	            "locationName": "networkInterfaceId"
	          },
	          "VpcPeeringConnectionId": {
	            "locationName": "vpcPeeringConnectionId"
	          },
	          "NatGatewayId": {
	            "locationName": "natGatewayId"
	          }
	        }
	      }
	    },
	    "ReplaceRouteTableAssociation": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AssociationId",
	          "RouteTableId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "AssociationId": {
	            "locationName": "associationId"
	          },
	          "RouteTableId": {
	            "locationName": "routeTableId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NewAssociationId": {
	            "locationName": "newAssociationId"
	          }
	        }
	      }
	    },
	    "ReportInstanceStatus": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Instances",
	          "Status",
	          "ReasonCodes"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "Instances": {
	            "shape": "S9g",
	            "locationName": "instanceId"
	          },
	          "Status": {
	            "locationName": "status"
	          },
	          "StartTime": {
	            "locationName": "startTime",
	            "type": "timestamp"
	          },
	          "EndTime": {
	            "locationName": "endTime",
	            "type": "timestamp"
	          },
	          "ReasonCodes": {
	            "locationName": "reasonCode",
	            "type": "list",
	            "member": {
	              "locationName": "item"
	            }
	          },
	          "Description": {
	            "locationName": "description"
	          }
	        }
	      }
	    },
	    "RequestSpotFleet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SpotFleetRequestConfig"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "SpotFleetRequestConfig": {
	            "shape": "Sh6",
	            "locationName": "spotFleetRequestConfig"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "SpotFleetRequestId"
	        ],
	        "members": {
	          "SpotFleetRequestId": {
	            "locationName": "spotFleetRequestId"
	          }
	        }
	      }
	    },
	    "RequestSpotInstances": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SpotPrice"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "SpotPrice": {
	            "locationName": "spotPrice"
	          },
	          "ClientToken": {
	            "locationName": "clientToken"
	          },
	          "InstanceCount": {
	            "locationName": "instanceCount",
	            "type": "integer"
	          },
	          "Type": {
	            "locationName": "type"
	          },
	          "ValidFrom": {
	            "locationName": "validFrom",
	            "type": "timestamp"
	          },
	          "ValidUntil": {
	            "locationName": "validUntil",
	            "type": "timestamp"
	          },
	          "LaunchGroup": {
	            "locationName": "launchGroup"
	          },
	          "AvailabilityZoneGroup": {
	            "locationName": "availabilityZoneGroup"
	          },
	          "BlockDurationMinutes": {
	            "locationName": "blockDurationMinutes",
	            "type": "integer"
	          },
	          "LaunchSpecification": {
	            "type": "structure",
	            "members": {
	              "ImageId": {
	                "locationName": "imageId"
	              },
	              "KeyName": {
	                "locationName": "keyName"
	              },
	              "SecurityGroups": {
	                "shape": "S2z",
	                "locationName": "SecurityGroup"
	              },
	              "UserData": {
	                "locationName": "userData"
	              },
	              "AddressingType": {
	                "locationName": "addressingType"
	              },
	              "InstanceType": {
	                "locationName": "instanceType"
	              },
	              "Placement": {
	                "shape": "Sh9",
	                "locationName": "placement"
	              },
	              "KernelId": {
	                "locationName": "kernelId"
	              },
	              "RamdiskId": {
	                "locationName": "ramdiskId"
	              },
	              "BlockDeviceMappings": {
	                "shape": "Sbq",
	                "locationName": "blockDeviceMapping"
	              },
	              "SubnetId": {
	                "locationName": "subnetId"
	              },
	              "NetworkInterfaces": {
	                "shape": "Shb",
	                "locationName": "NetworkInterface"
	              },
	              "IamInstanceProfile": {
	                "shape": "S11",
	                "locationName": "iamInstanceProfile"
	              },
	              "EbsOptimized": {
	                "locationName": "ebsOptimized",
	                "type": "boolean"
	              },
	              "Monitoring": {
	                "shape": "Shp",
	                "locationName": "monitoring"
	              },
	              "SecurityGroupIds": {
	                "shape": "S2z",
	                "locationName": "SecurityGroupId"
	              }
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "SpotInstanceRequests": {
	            "shape": "Shj",
	            "locationName": "spotInstanceRequestSet"
	          }
	        }
	      }
	    },
	    "ResetImageAttribute": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ImageId",
	          "Attribute"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "ImageId": {},
	          "Attribute": {}
	        }
	      }
	    },
	    "ResetInstanceAttribute": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId",
	          "Attribute"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "InstanceId": {
	            "locationName": "instanceId"
	          },
	          "Attribute": {
	            "locationName": "attribute"
	          }
	        }
	      }
	    },
	    "ResetNetworkInterfaceAttribute": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "NetworkInterfaceId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "NetworkInterfaceId": {
	            "locationName": "networkInterfaceId"
	          },
	          "SourceDestCheck": {
	            "locationName": "sourceDestCheck"
	          }
	        }
	      }
	    },
	    "ResetSnapshotAttribute": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SnapshotId",
	          "Attribute"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "SnapshotId": {},
	          "Attribute": {}
	        }
	      }
	    },
	    "RestoreAddressToClassic": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "PublicIp"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "PublicIp": {
	            "locationName": "publicIp"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Status": {
	            "locationName": "status"
	          },
	          "PublicIp": {
	            "locationName": "publicIp"
	          }
	        }
	      }
	    },
	    "RevokeSecurityGroupEgress": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GroupId"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "GroupId": {
	            "locationName": "groupId"
	          },
	          "SourceSecurityGroupName": {
	            "locationName": "sourceSecurityGroupName"
	          },
	          "SourceSecurityGroupOwnerId": {
	            "locationName": "sourceSecurityGroupOwnerId"
	          },
	          "IpProtocol": {
	            "locationName": "ipProtocol"
	          },
	          "FromPort": {
	            "locationName": "fromPort",
	            "type": "integer"
	          },
	          "ToPort": {
	            "locationName": "toPort",
	            "type": "integer"
	          },
	          "CidrIp": {
	            "locationName": "cidrIp"
	          },
	          "IpPermissions": {
	            "shape": "S1w",
	            "locationName": "ipPermissions"
	          }
	        }
	      }
	    },
	    "RevokeSecurityGroupIngress": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "GroupName": {},
	          "GroupId": {},
	          "SourceSecurityGroupName": {},
	          "SourceSecurityGroupOwnerId": {},
	          "IpProtocol": {},
	          "FromPort": {
	            "type": "integer"
	          },
	          "ToPort": {
	            "type": "integer"
	          },
	          "CidrIp": {},
	          "IpPermissions": {
	            "shape": "S1w"
	          }
	        }
	      }
	    },
	    "RunInstances": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ImageId",
	          "MinCount",
	          "MaxCount"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "ImageId": {},
	          "MinCount": {
	            "type": "integer"
	          },
	          "MaxCount": {
	            "type": "integer"
	          },
	          "KeyName": {},
	          "SecurityGroups": {
	            "shape": "Slf",
	            "locationName": "SecurityGroup"
	          },
	          "SecurityGroupIds": {
	            "shape": "S5e",
	            "locationName": "SecurityGroupId"
	          },
	          "UserData": {},
	          "InstanceType": {},
	          "Placement": {
	            "shape": "Sdb"
	          },
	          "KernelId": {},
	          "RamdiskId": {},
	          "BlockDeviceMappings": {
	            "shape": "S4b",
	            "locationName": "BlockDeviceMapping"
	          },
	          "Monitoring": {
	            "shape": "Shp"
	          },
	          "SubnetId": {},
	          "DisableApiTermination": {
	            "locationName": "disableApiTermination",
	            "type": "boolean"
	          },
	          "InstanceInitiatedShutdownBehavior": {
	            "locationName": "instanceInitiatedShutdownBehavior"
	          },
	          "PrivateIpAddress": {
	            "locationName": "privateIpAddress"
	          },
	          "Ipv6Addresses": {
	            "shape": "S5h",
	            "locationName": "Ipv6Address"
	          },
	          "Ipv6AddressCount": {
	            "type": "integer"
	          },
	          "ClientToken": {
	            "locationName": "clientToken"
	          },
	          "AdditionalInfo": {
	            "locationName": "additionalInfo"
	          },
	          "NetworkInterfaces": {
	            "shape": "Shb",
	            "locationName": "networkInterface"
	          },
	          "IamInstanceProfile": {
	            "shape": "S11",
	            "locationName": "iamInstanceProfile"
	          },
	          "EbsOptimized": {
	            "locationName": "ebsOptimized",
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "shape": "Sd7"
	      }
	    },
	    "RunScheduledInstances": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ScheduledInstanceId",
	          "LaunchSpecification"
	        ],
	        "members": {
	          "DryRun": {
	            "type": "boolean"
	          },
	          "ClientToken": {
	            "idempotencyToken": true
	          },
	          "InstanceCount": {
	            "type": "integer"
	          },
	          "ScheduledInstanceId": {},
	          "LaunchSpecification": {
	            "type": "structure",
	            "required": [
	              "ImageId"
	            ],
	            "members": {
	              "ImageId": {},
	              "KeyName": {},
	              "SecurityGroupIds": {
	                "shape": "Sog",
	                "locationName": "SecurityGroupId"
	              },
	              "UserData": {},
	              "Placement": {
	                "type": "structure",
	                "members": {
	                  "AvailabilityZone": {},
	                  "GroupName": {}
	                }
	              },
	              "KernelId": {},
	              "InstanceType": {},
	              "RamdiskId": {},
	              "BlockDeviceMappings": {
	                "locationName": "BlockDeviceMapping",
	                "type": "list",
	                "member": {
	                  "locationName": "BlockDeviceMapping",
	                  "type": "structure",
	                  "members": {
	                    "DeviceName": {},
	                    "NoDevice": {},
	                    "VirtualName": {},
	                    "Ebs": {
	                      "type": "structure",
	                      "members": {
	                        "SnapshotId": {},
	                        "VolumeSize": {
	                          "type": "integer"
	                        },
	                        "DeleteOnTermination": {
	                          "type": "boolean"
	                        },
	                        "VolumeType": {},
	                        "Iops": {
	                          "type": "integer"
	                        },
	                        "Encrypted": {
	                          "type": "boolean"
	                        }
	                      }
	                    }
	                  }
	                }
	              },
	              "Monitoring": {
	                "type": "structure",
	                "members": {
	                  "Enabled": {
	                    "type": "boolean"
	                  }
	                }
	              },
	              "SubnetId": {},
	              "NetworkInterfaces": {
	                "locationName": "NetworkInterface",
	                "type": "list",
	                "member": {
	                  "locationName": "NetworkInterface",
	                  "type": "structure",
	                  "members": {
	                    "NetworkInterfaceId": {},
	                    "DeviceIndex": {
	                      "type": "integer"
	                    },
	                    "SubnetId": {},
	                    "Description": {},
	                    "PrivateIpAddress": {},
	                    "PrivateIpAddressConfigs": {
	                      "locationName": "PrivateIpAddressConfig",
	                      "type": "list",
	                      "member": {
	                        "locationName": "PrivateIpAddressConfigSet",
	                        "type": "structure",
	                        "members": {
	                          "PrivateIpAddress": {},
	                          "Primary": {
	                            "type": "boolean"
	                          }
	                        }
	                      }
	                    },
	                    "SecondaryPrivateIpAddressCount": {
	                      "type": "integer"
	                    },
	                    "AssociatePublicIpAddress": {
	                      "type": "boolean"
	                    },
	                    "Groups": {
	                      "shape": "Sog",
	                      "locationName": "Group"
	                    },
	                    "DeleteOnTermination": {
	                      "type": "boolean"
	                    },
	                    "Ipv6Addresses": {
	                      "locationName": "Ipv6Address",
	                      "type": "list",
	                      "member": {
	                        "locationName": "Ipv6Address",
	                        "type": "structure",
	                        "members": {
	                          "Ipv6Address": {}
	                        }
	                      }
	                    },
	                    "Ipv6AddressCount": {
	                      "type": "integer"
	                    }
	                  }
	                }
	              },
	              "IamInstanceProfile": {
	                "type": "structure",
	                "members": {
	                  "Arn": {},
	                  "Name": {}
	                }
	              },
	              "EbsOptimized": {
	                "type": "boolean"
	              }
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "InstanceIdSet": {
	            "locationName": "instanceIdSet",
	            "type": "list",
	            "member": {
	              "locationName": "item"
	            }
	          }
	        }
	      }
	    },
	    "StartInstances": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceIds"
	        ],
	        "members": {
	          "InstanceIds": {
	            "shape": "S9g",
	            "locationName": "InstanceId"
	          },
	          "AdditionalInfo": {
	            "locationName": "additionalInfo"
	          },
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "StartingInstances": {
	            "shape": "Soy",
	            "locationName": "instancesSet"
	          }
	        }
	      }
	    },
	    "StopInstances": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceIds"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "InstanceIds": {
	            "shape": "S9g",
	            "locationName": "InstanceId"
	          },
	          "Force": {
	            "locationName": "force",
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "StoppingInstances": {
	            "shape": "Soy",
	            "locationName": "instancesSet"
	          }
	        }
	      }
	    },
	    "TerminateInstances": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceIds"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "InstanceIds": {
	            "shape": "S9g",
	            "locationName": "InstanceId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "TerminatingInstances": {
	            "shape": "Soy",
	            "locationName": "instancesSet"
	          }
	        }
	      }
	    },
	    "UnassignIpv6Addresses": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "NetworkInterfaceId",
	          "Ipv6Addresses"
	        ],
	        "members": {
	          "NetworkInterfaceId": {
	            "locationName": "networkInterfaceId"
	          },
	          "Ipv6Addresses": {
	            "shape": "St",
	            "locationName": "ipv6Addresses"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NetworkInterfaceId": {
	            "locationName": "networkInterfaceId"
	          },
	          "UnassignedIpv6Addresses": {
	            "shape": "St",
	            "locationName": "unassignedIpv6Addresses"
	          }
	        }
	      }
	    },
	    "UnassignPrivateIpAddresses": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "NetworkInterfaceId",
	          "PrivateIpAddresses"
	        ],
	        "members": {
	          "NetworkInterfaceId": {
	            "locationName": "networkInterfaceId"
	          },
	          "PrivateIpAddresses": {
	            "shape": "Sw",
	            "locationName": "privateIpAddress"
	          }
	        }
	      }
	    },
	    "UnmonitorInstances": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceIds"
	        ],
	        "members": {
	          "DryRun": {
	            "locationName": "dryRun",
	            "type": "boolean"
	          },
	          "InstanceIds": {
	            "shape": "S9g",
	            "locationName": "InstanceId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "InstanceMonitorings": {
	            "shape": "Sn0",
	            "locationName": "instancesSet"
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S3": {
	      "type": "list",
	      "member": {
	        "locationName": "ReservedInstanceId"
	      }
	    },
	    "S5": {
	      "type": "list",
	      "member": {
	        "locationName": "TargetConfigurationRequest",
	        "type": "structure",
	        "required": [
	          "OfferingId"
	        ],
	        "members": {
	          "OfferingId": {},
	          "InstanceCount": {
	            "type": "integer"
	          }
	        }
	      }
	    },
	    "Sb": {
	      "type": "structure",
	      "members": {
	        "AccepterVpcInfo": {
	          "shape": "Sc",
	          "locationName": "accepterVpcInfo"
	        },
	        "ExpirationTime": {
	          "locationName": "expirationTime",
	          "type": "timestamp"
	        },
	        "RequesterVpcInfo": {
	          "shape": "Sc",
	          "locationName": "requesterVpcInfo"
	        },
	        "Status": {
	          "locationName": "status",
	          "type": "structure",
	          "members": {
	            "Code": {
	              "locationName": "code"
	            },
	            "Message": {
	              "locationName": "message"
	            }
	          }
	        },
	        "Tags": {
	          "shape": "Sj",
	          "locationName": "tagSet"
	        },
	        "VpcPeeringConnectionId": {
	          "locationName": "vpcPeeringConnectionId"
	        }
	      }
	    },
	    "Sc": {
	      "type": "structure",
	      "members": {
	        "CidrBlock": {
	          "locationName": "cidrBlock"
	        },
	        "OwnerId": {
	          "locationName": "ownerId"
	        },
	        "VpcId": {
	          "locationName": "vpcId"
	        },
	        "Ipv6CidrBlockSet": {
	          "locationName": "ipv6CidrBlockSet",
	          "type": "list",
	          "member": {
	            "locationName": "item",
	            "type": "structure",
	            "members": {
	              "Ipv6CidrBlock": {
	                "locationName": "ipv6CidrBlock"
	              }
	            }
	          }
	        },
	        "PeeringOptions": {
	          "locationName": "peeringOptions",
	          "type": "structure",
	          "members": {
	            "AllowEgressFromLocalClassicLinkToRemoteVpc": {
	              "locationName": "allowEgressFromLocalClassicLinkToRemoteVpc",
	              "type": "boolean"
	            },
	            "AllowEgressFromLocalVpcToRemoteClassicLink": {
	              "locationName": "allowEgressFromLocalVpcToRemoteClassicLink",
	              "type": "boolean"
	            },
	            "AllowDnsResolutionFromRemoteVpc": {
	              "locationName": "allowDnsResolutionFromRemoteVpc",
	              "type": "boolean"
	            }
	          }
	        }
	      }
	    },
	    "Sj": {
	      "type": "list",
	      "member": {
	        "locationName": "item",
	        "type": "structure",
	        "members": {
	          "Key": {
	            "locationName": "key"
	          },
	          "Value": {
	            "locationName": "value"
	          }
	        }
	      }
	    },
	    "Sr": {
	      "type": "list",
	      "member": {
	        "locationName": "item"
	      }
	    },
	    "St": {
	      "type": "list",
	      "member": {
	        "locationName": "item"
	      }
	    },
	    "Sw": {
	      "type": "list",
	      "member": {
	        "locationName": "PrivateIpAddress"
	      }
	    },
	    "S11": {
	      "type": "structure",
	      "members": {
	        "Arn": {
	          "locationName": "arn"
	        },
	        "Name": {
	          "locationName": "name"
	        }
	      }
	    },
	    "S13": {
	      "type": "structure",
	      "members": {
	        "AssociationId": {
	          "locationName": "associationId"
	        },
	        "InstanceId": {
	          "locationName": "instanceId"
	        },
	        "IamInstanceProfile": {
	          "shape": "S14",
	          "locationName": "iamInstanceProfile"
	        },
	        "State": {
	          "locationName": "state"
	        },
	        "Timestamp": {
	          "locationName": "timestamp",
	          "type": "timestamp"
	        }
	      }
	    },
	    "S14": {
	      "type": "structure",
	      "members": {
	        "Arn": {
	          "locationName": "arn"
	        },
	        "Id": {
	          "locationName": "id"
	        }
	      }
	    },
	    "S1a": {
	      "type": "structure",
	      "members": {
	        "Ipv6CidrBlock": {
	          "locationName": "ipv6CidrBlock"
	        },
	        "Ipv6CidrBlockState": {
	          "locationName": "ipv6CidrBlockState",
	          "type": "structure",
	          "members": {
	            "State": {
	              "locationName": "state"
	            },
	            "StatusMessage": {
	              "locationName": "statusMessage"
	            }
	          }
	        },
	        "AssociationId": {
	          "locationName": "associationId"
	        }
	      }
	    },
	    "S1f": {
	      "type": "structure",
	      "members": {
	        "Ipv6CidrBlock": {
	          "locationName": "ipv6CidrBlock"
	        },
	        "Ipv6CidrBlockState": {
	          "locationName": "ipv6CidrBlockState",
	          "type": "structure",
	          "members": {
	            "State": {
	              "locationName": "state"
	            },
	            "StatusMessage": {
	              "locationName": "statusMessage"
	            }
	          }
	        },
	        "AssociationId": {
	          "locationName": "associationId"
	        }
	      }
	    },
	    "S1j": {
	      "type": "list",
	      "member": {
	        "locationName": "groupId"
	      }
	    },
	    "S1p": {
	      "type": "structure",
	      "members": {
	        "VolumeId": {
	          "locationName": "volumeId"
	        },
	        "InstanceId": {
	          "locationName": "instanceId"
	        },
	        "Device": {
	          "locationName": "device"
	        },
	        "State": {
	          "locationName": "status"
	        },
	        "AttachTime": {
	          "locationName": "attachTime",
	          "type": "timestamp"
	        },
	        "DeleteOnTermination": {
	          "locationName": "deleteOnTermination",
	          "type": "boolean"
	        }
	      }
	    },
	    "S1t": {
	      "type": "structure",
	      "members": {
	        "VpcId": {
	          "locationName": "vpcId"
	        },
	        "State": {
	          "locationName": "state"
	        }
	      }
	    },
	    "S1w": {
	      "type": "list",
	      "member": {
	        "locationName": "item",
	        "type": "structure",
	        "members": {
	          "IpProtocol": {
	            "locationName": "ipProtocol"
	          },
	          "FromPort": {
	            "locationName": "fromPort",
	            "type": "integer"
	          },
	          "ToPort": {
	            "locationName": "toPort",
	            "type": "integer"
	          },
	          "UserIdGroupPairs": {
	            "locationName": "groups",
	            "type": "list",
	            "member": {
	              "shape": "S1z",
	              "locationName": "item"
	            }
	          },
	          "IpRanges": {
	            "locationName": "ipRanges",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "CidrIp": {
	                  "locationName": "cidrIp"
	                }
	              }
	            }
	          },
	          "Ipv6Ranges": {
	            "locationName": "ipv6Ranges",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "CidrIpv6": {
	                  "locationName": "cidrIpv6"
	                }
	              }
	            }
	          },
	          "PrefixListIds": {
	            "locationName": "prefixListIds",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "PrefixListId": {
	                  "locationName": "prefixListId"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "S1z": {
	      "type": "structure",
	      "members": {
	        "UserId": {
	          "locationName": "userId"
	        },
	        "GroupName": {
	          "locationName": "groupName"
	        },
	        "GroupId": {
	          "locationName": "groupId"
	        },
	        "VpcId": {
	          "locationName": "vpcId"
	        },
	        "VpcPeeringConnectionId": {
	          "locationName": "vpcPeeringConnectionId"
	        },
	        "PeeringStatus": {
	          "locationName": "peeringStatus"
	        }
	      }
	    },
	    "S28": {
	      "type": "structure",
	      "members": {
	        "S3": {
	          "type": "structure",
	          "members": {
	            "Bucket": {
	              "locationName": "bucket"
	            },
	            "Prefix": {
	              "locationName": "prefix"
	            },
	            "AWSAccessKeyId": {},
	            "UploadPolicy": {
	              "locationName": "uploadPolicy",
	              "type": "blob"
	            },
	            "UploadPolicySignature": {
	              "locationName": "uploadPolicySignature"
	            }
	          }
	        }
	      }
	    },
	    "S2c": {
	      "type": "structure",
	      "members": {
	        "InstanceId": {
	          "locationName": "instanceId"
	        },
	        "BundleId": {
	          "locationName": "bundleId"
	        },
	        "State": {
	          "locationName": "state"
	        },
	        "StartTime": {
	          "locationName": "startTime",
	          "type": "timestamp"
	        },
	        "UpdateTime": {
	          "locationName": "updateTime",
	          "type": "timestamp"
	        },
	        "Storage": {
	          "shape": "S28",
	          "locationName": "storage"
	        },
	        "Progress": {
	          "locationName": "progress"
	        },
	        "BundleTaskError": {
	          "locationName": "error",
	          "type": "structure",
	          "members": {
	            "Code": {
	              "locationName": "code"
	            },
	            "Message": {
	              "locationName": "message"
	            }
	          }
	        }
	      }
	    },
	    "S2n": {
	      "type": "list",
	      "member": {
	        "locationName": "item",
	        "type": "structure",
	        "members": {
	          "ReservedInstancesListingId": {
	            "locationName": "reservedInstancesListingId"
	          },
	          "ReservedInstancesId": {
	            "locationName": "reservedInstancesId"
	          },
	          "CreateDate": {
	            "locationName": "createDate",
	            "type": "timestamp"
	          },
	          "UpdateDate": {
	            "locationName": "updateDate",
	            "type": "timestamp"
	          },
	          "Status": {
	            "locationName": "status"
	          },
	          "StatusMessage": {
	            "locationName": "statusMessage"
	          },
	          "InstanceCounts": {
	            "locationName": "instanceCounts",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "State": {
	                  "locationName": "state"
	                },
	                "InstanceCount": {
	                  "locationName": "instanceCount",
	                  "type": "integer"
	                }
	              }
	            }
	          },
	          "PriceSchedules": {
	            "locationName": "priceSchedules",
	            "type": "list",
	            "member": {
	              "locationName": "item",
	              "type": "structure",
	              "members": {
	                "Term": {
	                  "locationName": "term",
	                  "type": "long"
	                },
	                "Price": {
	                  "locationName": "price",
	                  "type": "double"
	                },
	                "CurrencyCode": {
	                  "locationName": "currencyCode"
	                },
	                "Active": {
	                  "locationName": "active",
	                  "type": "boolean"
	                }
	              }
	            }
	          },
	          "Tags": {
	            "shape": "Sj",
	            "locationName": "tagSet"
	          },
	          "ClientToken": {
	            "locationName": "clientToken"
	          }
	        }
	      }
	    },
	    "S2z": {
	      "type": "list",
	      "member": {
	        "locationName": "item"
	      }
	    },
	    "S39": {
	      "type": "list",
	      "member": {
	        "locationName": "SpotInstanceRequestId"
	      }
	    },
	    "S3n": {
	      "type": "structure",
	      "members": {
	        "CustomerGatewayId": {
	          "locationName": "customerGatewayId"
	        },
	        "State": {
	          "locationName": "state"
	        },
	        "Type": {
	          "locationName": "type"
	        },
	        "IpAddress": {
	          "locationName": "ipAddress"
	        },
	        "BgpAsn": {
	          "locationName": "bgpAsn"
	        },
	        "Tags": {
	          "shape": "Sj",
	          "locationName": "tagSet"
	        }
	      }
	    },
	    "S3s": {
	      "type": "structure",
	      "members": {
	        "DhcpOptionsId": {
	          "locationName": "dhcpOptionsId"
	        },
	        "DhcpConfigurations": {
	          "locationName": "dhcpConfigurationSet",
	          "type": "list",
	          "member": {
	            "locationName": "item",
	            "type": "structure",
	            "members": {
	              "Key": {
	                "locationName": "key"
	              },
	              "Values": {
	                "locationName": "valueSet",
	                "type": "list",
	                "member": {
	                  "shape": "S3w",
	                  "locationName": "item"
	                }
	              }
	            }
	          }
	        },
	        "Tags": {
	          "shape": "Sj",
	          "locationName": "tagSet"
	        }
	      }
	    },
	    "S3w": {
	      "type": "structure",
	      "members": {
	        "Value": {
	          "locationName": "value"
	        }
	      }
	    },
	    "S3z": {
	      "type": "structure",
	      "members": {
	        "EgressOnlyInternetGatewayId": {
	          "locationName": "egressOnlyInternetGatewayId"
	        },
	        "Attachments": {
	          "shape": "S41",
	          "locationName": "attachmentSet"
	        }
	      }
	    },
	    "S41": {
	      "type": "list",
	      "member": {
	        "locationName": "item",
	        "type": "structure",
	        "members": {
	          "VpcId": {
	            "locationName": "vpcId"
	          },
	          "State": {
	            "locationName": "state"
	          }
	        }
	      }
	    },
	    "S47": {
	      "type": "list",
	      "member": {
	        "shape": "S48",
	        "locationName": "item"
	      }
	    },
	    "S48": {
	      "type": "structure",
	      "required": [
	        "Error"
	      ],
	      "members": {
	        "ResourceId": {
	          "locationName": "resourceId"
	        },
	        "Error": {
	          "locationName": "error",
	          "type": "structure",
	          "required": [
	            "Code",
	            "Message"
	          ],
	          "members": {
	            "Code": {
	              "locationName": "code"
	            },
	            "Message": {
	              "locationName": "message"
	            }
	          }
	        }
	      }
	    },
	    "S4b": {
	      "type": "list",
	      "member": {
	        "shape": "S4c",
	        "locationName": "BlockDeviceMapping"
	      }
	    },
	    "S4c": {
	      "type": "structure",
	      "members": {
	        "VirtualName": {
	          "locationName": "virtualName"
	        },
	        "DeviceName": {
	          "locationName": "deviceName"
	        },
	        "Ebs": {
	          "locationName": "ebs",
	          "type": "structure",
	          "members": {
	            "SnapshotId": {
	              "locationName": "snapshotId"
	            },
	            "VolumeSize": {
	              "locationName": "volumeSize",
	              "type": "integer"
	            },
	            "DeleteOnTermination": {
	              "locationName": "deleteOnTermination",
	              "type": "boolean"
	            },
	            "VolumeType": {
	              "locationName": "volumeType"
	            },
	            "Iops": {
	              "locationName": "iops",
	              "type": "integer"
	            },
	            "Encrypted": {
	              "locationName": "encrypted",
	              "type": "boolean"
	            }
	          }
	        },
	        "NoDevice": {
	          "locationName": "noDevice"
	        }
	      }
	    },
	    "S4m": {
	      "type": "structure",
	      "members": {
	        "ExportTaskId": {
	          "locationName": "exportTaskId"
	        },
	        "Description": {
	          "locationName": "description"
	        },
	        "State": {
	          "locationName": "state"
	        },
	        "StatusMessage": {
	          "locationName": "statusMessage"
	        },
	        "InstanceExportDetails": {
	          "locationName": "instanceExport",
	          "type": "structure",
	          "members": {
	            "InstanceId": {
	              "locationName": "instanceId"
	            },
	            "TargetEnvironment": {
	              "locationName": "targetEnvironment"
	            }
	          }
	        },
	        "ExportToS3Task": {
	          "locationName": "exportToS3",
	          "type": "structure",
	          "members": {
	            "DiskImageFormat": {
	              "locationName": "diskImageFormat"
	            },
	            "ContainerFormat": {
	              "locationName": "containerFormat"
	            },
	            "S3Bucket": {
	              "locationName": "s3Bucket"
	            },
	            "S3Key": {
	              "locationName": "s3Key"
	            }
	          }
	        }
	      }
	    },
	    "S4s": {
	      "type": "structure",
	      "members": {
	        "InternetGatewayId": {
	          "locationName": "internetGatewayId"
	        },
	        "Attachments": {
	          "shape": "S41",
	          "locationName": "attachmentSet"
	        },
	        "Tags": {
	          "shape": "Sj",
	          "locationName": "tagSet"
	        }
	      }
	    },
	    "S4x": {
	      "type": "structure",
	      "members": {
	        "VpcId": {
	          "locationName": "vpcId"
	        },
	        "SubnetId": {
	          "locationName": "subnetId"
	        },
	        "NatGatewayId": {
	          "locationName": "natGatewayId"
	        },
	        "CreateTime": {
	          "locationName": "createTime",
	          "type": "timestamp"
	        },
	        "DeleteTime": {
	          "locationName": "deleteTime",
	          "type": "timestamp"
	        },
	        "NatGatewayAddresses": {
	          "locationName": "natGatewayAddressSet",
	          "type": "list",
	          "member": {
	            "locationName": "item",
	            "type": "structure",
	            "members": {
	              "PublicIp": {
	                "locationName": "publicIp"
	              },
	              "AllocationId": {
	                "locationName": "allocationId"
	              },
	              "PrivateIp": {
	                "locationName": "privateIp"
	              },
	              "NetworkInterfaceId": {
	                "locationName": "networkInterfaceId"
	              }
	            }
	          }
	        },
	        "State": {
	          "locationName": "state"
	        },
	        "FailureCode": {
	          "locationName": "failureCode"
	        },
	        "FailureMessage": {
	          "locationName": "failureMessage"
	        },
	        "ProvisionedBandwidth": {
	          "locationName": "provisionedBandwidth",
	          "type": "structure",
	          "members": {
	            "Provisioned": {
	              "locationName": "provisioned"
	            },
	            "Requested": {
	              "locationName": "requested"
	            },
	            "RequestTime": {
	              "locationName": "requestTime",
	              "type": "timestamp"
	            },
	            "ProvisionTime": {
	              "locationName": "provisionTime",
	              "type": "timestamp"
	            },
	            "Status": {
	              "locationName": "status"
	            }
	          }
	        }
	      }
	    },
	    "S54": {
	      "type": "structure",
	      "members": {
	        "NetworkAclId": {
	          "locationName": "networkAclId"
	        },
	        "VpcId": {
	          "locationName": "vpcId"
	        },
	        "IsDefault": {
	          "locationName": "default",
	          "type": "boolean"
	        },
	        "Entries": {
	          "locationName": "entrySet",
	          "type": "list",
	          "member": {
	            "locationName": "item",
	            "type": "structure",
	            "members": {
	              "RuleNumber": {
	                "locationName": "ruleNumber",
	                "type": "integer"
	              },
	              "Protocol": {
	                "locationName": "protocol"
	              },
	              "RuleAction": {
	                "locationName": "ruleAction"
	              },
	              "Egress": {
	                "locationName": "egress",
	                "type": "boolean"
	              },
	              "CidrBlock": {
	                "locationName": "cidrBlock"
	              },
	              "Ipv6CidrBlock": {
	                "locationName": "ipv6CidrBlock"
	              },
	              "IcmpTypeCode": {
	                "shape": "S58",
	                "locationName": "icmpTypeCode"
	              },
	              "PortRange": {
	                "shape": "S59",
	                "locationName": "portRange"
	              }
	            }
	          }
	        },
	        "Associations": {
	          "locationName": "associationSet",
	          "type": "list",
	          "member": {
	            "locationName": "item",
	            "type": "structure",
	            "members": {
	              "NetworkAclAssociationId": {
	                "locationName": "networkAclAssociationId"
	              },
	              "NetworkAclId": {
	                "locationName": "networkAclId"
	              },
	              "SubnetId": {
	                "locationName": "subnetId"
	              }
	            }
	          }
	        },
	        "Tags": {
	          "shape": "Sj",
	          "locationName": "tagSet"
	        }
	      }
	    },
	    "S58": {
	      "type": "structure",
	      "members": {
	        "Type": {
	          "locationName": "type",
	          "type": "integer"
	        },
	        "Code": {
	          "locationName": "code",
	          "type": "integer"
	        }
	      }
	    },
	    "S59": {
	      "type": "structure",
	      "members": {
	        "From": {
	          "locationName": "from",
	          "type": "integer"
	        },
	        "To": {
	          "locationName": "to",
	          "type": "integer"
	        }
	      }
	    },
	    "S5e": {
	      "type": "list",
	      "member": {
	        "locationName": "SecurityGroupId"
	      }
	    },
	    "S5f": {
	      "type": "list",
	      "member": {
	        "locationName": "item",
	        "type": "structure",
	        "required": [
	          "PrivateIpAddress"
	        ],
	        "members": {
	          "PrivateIpAddress": {
	            "locationName": "privateIpAddress"
	          },
	          "Primary": {
	            "locationName": "primary",
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "S5h": {
	      "type": "list",
	      "member": {
	        "locationName": "item",
	        "type": "structure",
	        "members": {
	          "Ipv6Address": {
	            "locationName": "ipv6Address"
	          }
	        }
	      }
	    },
	    "S5k": {
	      "type": "structure",
	      "members": {
	        "NetworkInterfaceId": {
	          "locationName": "networkInterfaceId"
	        },
	        "SubnetId": {
	          "locationName": "subnetId"
	        },
	        "VpcId": {
	          "locationName": "vpcId"
	        },
	        "AvailabilityZone": {
	          "locationName": "availabilityZone"
	        },
	        "Description": {
	          "locationName": "description"
	        },
	        "OwnerId": {
	          "locationName": "ownerId"
	        },
	        "RequesterId": {
	          "locationName": "requesterId"
	        },
	        "RequesterManaged": {
	          "locationName": "requesterManaged",
	          "type": "boolean"
	        },
	        "Status": {
	          "locationName": "status"
	        },
	        "MacAddress": {
	          "locationName": "macAddress"
	        },
	        "PrivateIpAddress": {
	          "locationName": "privateIpAddress"
	        },
	        "PrivateDnsName": {
	          "locationName": "privateDnsName"
	        },
	        "SourceDestCheck": {
	          "locationName": "sourceDestCheck",
	          "type": "boolean"
	        },
	        "Groups": {
	          "shape": "S5m",
	          "locationName": "groupSet"
	        },
	        "Attachment": {
	          "shape": "S5o",
	          "locationName": "attachment"
	        },
	        "Association": {
	          "shape": "S5p",
	          "locationName": "association"
	        },
	        "TagSet": {
	          "shape": "Sj",
	          "locationName": "tagSet"
	        },
	        "PrivateIpAddresses": {
	          "locationName": "privateIpAddressesSet",
	          "type": "list",
	          "member": {
	            "locationName": "item",
	            "type": "structure",
	            "members": {
	              "PrivateIpAddress": {
	                "locationName": "privateIpAddress"
	              },
	              "PrivateDnsName": {
	                "locationName": "privateDnsName"
	              },
	              "Primary": {
	                "locationName": "primary",
	                "type": "boolean"
	              },
	              "Association": {
	                "shape": "S5p",
	                "locationName": "association"
	              }
	            }
	          }
	        },
	        "Ipv6Addresses": {
	          "locationName": "ipv6AddressesSet",
	          "type": "list",
	          "member": {
	            "locationName": "item",
	            "type": "structure",
	            "members": {
	              "Ipv6Address": {
	                "locationName": "ipv6Address"
	              }
	            }
	          }
	        },
	        "InterfaceType": {
	          "locationName": "interfaceType"
	        }
	      }
	    },
	    "S5m": {
	      "type": "list",
	      "member": {
	        "locationName": "item",
	        "type": "structure",
	        "members": {
	          "GroupName": {
	            "locationName": "groupName"
	          },
	          "GroupId": {
	            "locationName": "groupId"
	          }
	        }
	      }
	    },
	    "S5o": {
	      "type": "structure",
	      "members": {
	        "AttachmentId": {
	          "locationName": "attachmentId"
	        },
	        "InstanceId": {
	          "locationName": "instanceId"
	        },
	        "InstanceOwnerId": {
	          "locationName": "instanceOwnerId"
	        },
	        "DeviceIndex": {
	          "locationName": "deviceIndex",
	          "type": "integer"
	        },
	        "Status": {
	          "locationName": "status"
	        },
	        "AttachTime": {
	          "locationName": "attachTime",
	          "type": "timestamp"
	        },
	        "DeleteOnTermination": {
	          "locationName": "deleteOnTermination",
	          "type": "boolean"
	        }
	      }
	    },
	    "S5p": {
	      "type": "structure",
	      "members": {
	        "PublicIp": {
	          "locationName": "publicIp"
	        },
	        "PublicDnsName": {
	          "locationName": "publicDnsName"
	        },
	        "IpOwnerId": {
	          "locationName": "ipOwnerId"
	        },
	        "AllocationId": {
	          "locationName": "allocationId"
	        },
	        "AssociationId": {
	          "locationName": "associationId"
	        }
	      }
	    },
	    "S65": {
	      "type": "structure",
	      "members": {
	        "RouteTableId": {
	          "locationName": "routeTableId"
	        },
	        "VpcId": {
	          "locationName": "vpcId"
	        },
	        "Routes": {
	          "locationName": "routeSet",
	          "type": "list",
	          "member": {
	            "locationName": "item",
	            "type": "structure",
	            "members": {
	              "DestinationCidrBlock": {
	                "locationName": "destinationCidrBlock"
	              },
	              "DestinationPrefixListId": {
	                "locationName": "destinationPrefixListId"
	              },
	              "GatewayId": {
	                "locationName": "gatewayId"
	              },
	              "InstanceId": {
	                "locationName": "instanceId"
	              },
	              "InstanceOwnerId": {
	                "locationName": "instanceOwnerId"
	              },
	              "NetworkInterfaceId": {
	                "locationName": "networkInterfaceId"
	              },
	              "VpcPeeringConnectionId": {
	                "locationName": "vpcPeeringConnectionId"
	              },
	              "NatGatewayId": {
	                "locationName": "natGatewayId"
	              },
	              "State": {
	                "locationName": "state"
	              },
	              "Origin": {
	                "locationName": "origin"
	              },
	              "DestinationIpv6CidrBlock": {
	                "locationName": "destinationIpv6CidrBlock"
	              },
	              "EgressOnlyInternetGatewayId": {
	                "locationName": "egressOnlyInternetGatewayId"
	              }
	            }
	          }
	        },
	        "Associations": {
	          "locationName": "associationSet",
	          "type": "list",
	          "member": {
	            "locationName": "item",
	            "type": "structure",
	            "members": {
	              "RouteTableAssociationId": {
	                "locationName": "routeTableAssociationId"
	              },
	              "RouteTableId": {
	                "locationName": "routeTableId"
	              },
	              "SubnetId": {
	                "locationName": "subnetId"
	              },
	              "Main": {
	                "locationName": "main",
	                "type": "boolean"
	              }
	            }
	          }
	        },
	        "Tags": {
	          "shape": "Sj",
	          "locationName": "tagSet"
	        },
	        "PropagatingVgws": {
	          "locationName": "propagatingVgwSet",
	          "type": "list",
	          "member": {
	            "locationName": "item",
	            "type": "structure",
	            "members": {
	              "GatewayId": {
	                "locationName": "gatewayId"
	              }
	            }
	          }
	        }
	      }
	    },
	    "S6h": {
	      "type": "structure",
	      "members": {
	        "SnapshotId": {
	          "locationName": "snapshotId"
	        },
	        "VolumeId": {
	          "locationName": "volumeId"
	        },
	        "State": {
	          "locationName": "status"
	        },
	        "StateMessage": {
	          "locationName": "statusMessage"
	        },
	        "StartTime": {
	          "locationName": "startTime",
	          "type": "timestamp"
	        },
	        "Progress": {
	          "locationName": "progress"
	        },
	        "OwnerId": {
	          "locationName": "ownerId"
	        },
	        "Description": {
	          "locationName": "description"
	        },
	        "VolumeSize": {
	          "locationName": "volumeSize",
	          "type": "integer"
	        },
	        "OwnerAlias": {
	          "locationName": "ownerAlias"
	        },
	        "Tags": {
	          "shape": "Sj",
	          "locationName": "tagSet"
	        },
	        "Encrypted": {
	          "locationName": "encrypted",
	          "type": "boolean"
	        },
	        "KmsKeyId": {
	          "locationName": "kmsKeyId"
	        },
	        "DataEncryptionKeyId": {
	          "locationName": "dataEncryptionKeyId"
	        }
	      }
	    },
	    "S6l": {
	      "type": "structure",
	      "members": {
	        "OwnerId": {
	          "locationName": "ownerId"
	        },
	        "Bucket": {
	          "locationName": "bucket"
	        },
	        "Prefix": {
	          "locationName": "prefix"
	        },
	        "State": {
	          "locationName": "state"
	        },
	        "Fault": {
	          "shape": "S6n",
	          "locationName": "fault"
	        }
	      }
	    },
	    "S6n": {
	      "type": "structure",
	      "members": {
	        "Code": {
	          "locationName": "code"
	        },
	        "Message": {
	          "locationName": "message"
	        }
	      }
	    },
	    "S6q": {
	      "type": "structure",
	      "members": {
	        "SubnetId": {
	          "locationName": "subnetId"
	        },
	        "State": {
	          "locationName": "state"
	        },
	        "VpcId": {
	          "locationName": "vpcId"
	        },
	        "CidrBlock": {
	          "locationName": "cidrBlock"
	        },
	        "Ipv6CidrBlockAssociationSet": {
	          "locationName": "ipv6CidrBlockAssociationSet",
	          "type": "list",
	          "member": {
	            "shape": "S1a",
	            "locationName": "item"
	          }
	        },
	        "AssignIpv6AddressOnCreation": {
	          "locationName": "assignIpv6AddressOnCreation",
	          "type": "boolean"
	        },
	        "AvailableIpAddressCount": {
	          "locationName": "availableIpAddressCount",
	          "type": "integer"
	        },
	        "AvailabilityZone": {
	          "locationName": "availabilityZone"
	        },
	        "DefaultForAz": {
	          "locationName": "defaultForAz",
	          "type": "boolean"
	        },
	        "MapPublicIpOnLaunch": {
	          "locationName": "mapPublicIpOnLaunch",
	          "type": "boolean"
	        },
	        "Tags": {
	          "shape": "Sj",
	          "locationName": "tagSet"
	        }
	      }
	    },
	    "S6u": {
	      "type": "list",
	      "member": {}
	    },
	    "S6w": {
	      "type": "structure",
	      "members": {
	        "VolumeId": {
	          "locationName": "volumeId"
	        },
	        "Size": {
	          "locationName": "size",
	          "type": "integer"
	        },
	        "SnapshotId": {
	          "locationName": "snapshotId"
	        },
	        "AvailabilityZone": {
	          "locationName": "availabilityZone"
	        },
	        "State": {
	          "locationName": "status"
	        },
	        "CreateTime": {
	          "locationName": "createTime",
	          "type": "timestamp"
	        },
	        "Attachments": {
	          "locationName": "attachmentSet",
	          "type": "list",
	          "member": {
	            "shape": "S1p",
	            "locationName": "item"
	          }
	        },
	        "Tags": {
	          "shape": "Sj",
	          "locationName": "tagSet"
	        },
	        "VolumeType": {
	          "locationName": "volumeType"
	        },
	        "Iops": {
	          "locationName": "iops",
	          "type": "integer"
	        },
	        "Encrypted": {
	          "locationName": "encrypted",
	          "type": "boolean"
	        },
	        "KmsKeyId": {
	          "locationName": "kmsKeyId"
	        }
	      }
	    },
	    "S72": {
	      "type": "structure",
	      "members": {
	        "VpcId": {
	          "locationName": "vpcId"
	        },
	        "State": {
	          "locationName": "state"
	        },
	        "CidrBlock": {
	          "locationName": "cidrBlock"
	        },
	        "DhcpOptionsId": {
	          "locationName": "dhcpOptionsId"
	        },
	        "Tags": {
	          "shape": "Sj",
	          "locationName": "tagSet"
	        },
	        "InstanceTenancy": {
	          "locationName": "instanceTenancy"
	        },
	        "IsDefault": {
	          "locationName": "isDefault",
	          "type": "boolean"
	        },
	        "Ipv6CidrBlockAssociationSet": {
	          "locationName": "ipv6CidrBlockAssociationSet",
	          "type": "list",
	          "member": {
	            "shape": "S1f",
	            "locationName": "item"
	          }
	        }
	      }
	    },
	    "S77": {
	      "type": "structure",
	      "members": {
	        "VpcEndpointId": {
	          "locationName": "vpcEndpointId"
	        },
	        "VpcId": {
	          "locationName": "vpcId"
	        },
	        "ServiceName": {
	          "locationName": "serviceName"
	        },
	        "State": {
	          "locationName": "state"
	        },
	        "PolicyDocument": {
	          "locationName": "policyDocument"
	        },
	        "RouteTableIds": {
	          "shape": "S2z",
	          "locationName": "routeTableIdSet"
	        },
	        "CreationTimestamp": {
	          "locationName": "creationTimestamp",
	          "type": "timestamp"
	        }
	      }
	    },
	    "S7e": {
	      "type": "structure",
	      "members": {
	        "VpnConnectionId": {
	          "locationName": "vpnConnectionId"
	        },
	        "State": {
	          "locationName": "state"
	        },
	        "CustomerGatewayConfiguration": {
	          "locationName": "customerGatewayConfiguration"
	        },
	        "Type": {
	          "locationName": "type"
	        },
	        "CustomerGatewayId": {
	          "locationName": "customerGatewayId"
	        },
	        "VpnGatewayId": {
	          "locationName": "vpnGatewayId"
	        },
	        "Tags": {
	          "shape": "Sj",
	          "locationName": "tagSet"
	        },
	        "VgwTelemetry": {
	          "locationName": "vgwTelemetry",
	          "type": "list",
	          "member": {
	            "locationName": "item",
	            "type": "structure",
	            "members": {
	              "OutsideIpAddress": {
	                "locationName": "outsideIpAddress"
	              },
	              "Status": {
	                "locationName": "status"
	              },
	              "LastStatusChange": {
	                "locationName": "lastStatusChange",
	                "type": "timestamp"
	              },
	              "StatusMessage": {
	                "locationName": "statusMessage"
	              },
	              "AcceptedRouteCount": {
	                "locationName": "acceptedRouteCount",
	                "type": "integer"
	              }
	            }
	          }
	        },
	        "Options": {
	          "locationName": "options",
	          "type": "structure",
	          "members": {
	            "StaticRoutesOnly": {
	              "locationName": "staticRoutesOnly",
	              "type": "boolean"
	            }
	          }
	        },
	        "Routes": {
	          "locationName": "routes",
	          "type": "list",
	          "member": {
	            "locationName": "item",
	            "type": "structure",
	            "members": {
	              "DestinationCidrBlock": {
	                "locationName": "destinationCidrBlock"
	              },
	              "Source": {
	                "locationName": "source"
	              },
	              "State": {
	                "locationName": "state"
	              }
	            }
	          }
	        }
	      }
	    },
	    "S7q": {
	      "type": "structure",
	      "members": {
	        "VpnGatewayId": {
	          "locationName": "vpnGatewayId"
	        },
	        "State": {
	          "locationName": "state"
	        },
	        "Type": {
	          "locationName": "type"
	        },
	        "AvailabilityZone": {
	          "locationName": "availabilityZone"
	        },
	        "VpcAttachments": {
	          "locationName": "attachments",
	          "type": "list",
	          "member": {
	            "shape": "S1t",
	            "locationName": "item"
	          }
	        },
	        "Tags": {
	          "shape": "Sj",
	          "locationName": "tagSet"
	        }
	      }
	    },
	    "S8x": {
	      "type": "list",
	      "member": {
	        "locationName": "Filter",
	        "type": "structure",
	        "members": {
	          "Name": {},
	          "Values": {
	            "shape": "S2z",
	            "locationName": "Value"
	          }
	        }
	      }
	    },
	    "S9g": {
	      "type": "list",
	      "member": {
	        "locationName": "InstanceId"
	      }
	    },
	    "S9o": {
	      "type": "structure",
	      "required": [
	        "ConversionTaskId",
	        "State"
	      ],
	      "members": {
	        "ConversionTaskId": {
	          "locationName": "conversionTaskId"
	        },
	        "ExpirationTime": {
	          "locationName": "expirationTime"
	        },
	        "ImportInstance": {
	          "locationName": "importInstance",
	          "type": "structure",
	          "required": [
	            "Volumes"
	          ],
	          "members": {
	            "Volumes": {
	              "locationName": "volumes",
	              "type": "list",
	              "member": {
	                "locationName": "item",
	                "type": "structure",
	                "required": [
	                  "BytesConverted",
	                  "AvailabilityZone",
	                  "Image",
	                  "Volume",
	                  "Status"
	                ],
	                "members": {
	                  "BytesConverted": {
	                    "locationName": "bytesConverted",
	                    "type": "long"
	                  },
	                  "AvailabilityZone": {
	                    "locationName": "availabilityZone"
	                  },
	                  "Image": {
	                    "shape": "S9s",
	                    "locationName": "image"
	                  },
	                  "Volume": {
	                    "shape": "S9t",
	                    "locationName": "volume"
	                  },
	                  "Status": {
	                    "locationName": "status"
	                  },
	                  "StatusMessage": {
	                    "locationName": "statusMessage"
	                  },
	                  "Description": {
	                    "locationName": "description"
	                  }
	                }
	              }
	            },
	            "InstanceId": {
	              "locationName": "instanceId"
	            },
	            "Platform": {
	              "locationName": "platform"
	            },
	            "Description": {
	              "locationName": "description"
	            }
	          }
	        },
	        "ImportVolume": {
	          "locationName": "importVolume",
	          "type": "structure",
	          "required": [
	            "BytesConverted",
	            "AvailabilityZone",
	            "Image",
	            "Volume"
	          ],
	          "members": {
	            "BytesConverted": {
	              "locationName": "bytesConverted",
	              "type": "long"
	            },
	            "AvailabilityZone": {
	              "locationName": "availabilityZone"
	            },
	            "Description": {
	              "locationName": "description"
	            },
	            "Image": {
	              "shape": "S9s",
	              "locationName": "image"
	            },
	            "Volume": {
	              "shape": "S9t",
	              "locationName": "volume"
	            }
	          }
	        },
	        "State": {
	          "locationName": "state"
	        },
	        "StatusMessage": {
	          "locationName": "statusMessage"
	        },
	        "Tags": {
	          "shape": "Sj",
	          "locationName": "tagSet"
	        }
	      }
	    },
	    "S9s": {
	      "type": "structure",
	      "required": [
	        "Format",
	        "Size",
	        "ImportManifestUrl"
	      ],
	      "members": {
	        "Format": {
	          "locationName": "format"
	        },
	        "Size": {
	          "locationName": "size",
	          "type": "long"
	        },
	        "ImportManifestUrl": {
	          "locationName": "importManifestUrl"
	        },
	        "Checksum": {
	          "locationName": "checksum"
	        }
	      }
	    },
	    "S9t": {
	      "type": "structure",
	      "required": [
	        "Id"
	      ],
	      "members": {
	        "Size": {
	          "locationName": "size",
	          "type": "long"
	        },
	        "Id": {
	          "locationName": "id"
	        }
	      }
	    },
	    "Sar": {
	      "type": "list",
	      "member": {
	        "locationName": "item"
	      }
	    },
	    "Sau": {
	      "type": "list",
	      "member": {
	        "locationName": "item"
	      }
	    },
	    "Sbd": {
	      "type": "list",
	      "member": {
	        "locationName": "item",
	        "type": "structure",
	        "members": {
	          "Resource": {
	            "locationName": "resource"
	          },
	          "UseLongIds": {
	            "locationName": "useLongIds",
	            "type": "boolean"
	          },
	          "Deadline": {
	            "locationName": "deadline",
	            "type": "timestamp"
	          }
	        }
	      }
	    },
	    "Sbk": {
	      "type": "list",
	      "member": {
	        "locationName": "item",
	        "type": "structure",
	        "members": {
	          "UserId": {
	            "locationName": "userId"
	          },
	          "Group": {
	            "locationName": "group"
	          }
	        }
	      }
	    },
	    "Sbn": {
	      "type": "list",
	      "member": {
	        "locationName": "item",
	        "type": "structure",
	        "members": {
	          "ProductCodeId": {
	            "locationName": "productCode"
	          },
	          "ProductCodeType": {
	            "locationName": "type"
	          }
	        }
	      }
	    },
	    "Sbq": {
	      "type": "list",
	      "member": {
	        "shape": "S4c",
	        "locationName": "item"
	      }
	    },
	    "Sbt": {
	      "type": "list",
	      "member": {
	        "locationName": "Owner"
	      }
	    },
	    "Sc1": {
	      "type": "structure",
	      "members": {
	        "Code": {
	          "locationName": "code"
	        },
	        "Message": {
	          "locationName": "message"
	        }
	      }
	    },
	    "Sc6": {
	      "type": "list",
	      "member": {
	        "locationName": "ImportTaskId"
	      }
	    },
	    "Sca": {
	      "type": "list",
	      "member": {
	        "locationName": "item",
	        "type": "structure",
	        "members": {
	          "DiskImageSize": {
	            "locationName": "diskImageSize",
	            "type": "double"
	          },
	          "Description": {
	            "locationName": "description"
	          },
	          "Format": {
	            "locationName": "format"
	          },
	          "Url": {
	            "locationName": "url"
	          },
	          "UserBucket": {
	            "shape": "Scc",
	            "locationName": "userBucket"
	          },
	          "DeviceName": {
	            "locationName": "deviceName"
	          },
	          "SnapshotId": {
	            "locationName": "snapshotId"
	          },
	          "Progress": {
	            "locationName": "progress"
	          },
	          "StatusMessage": {
	            "locationName": "statusMessage"
	          },
	          "Status": {
	            "locationName": "status"
	          }
	        }
	      }
	    },
	    "Scc": {
	      "type": "structure",
	      "members": {
	        "S3Bucket": {
	          "locationName": "s3Bucket"
	        },
	        "S3Key": {
	          "locationName": "s3Key"
	        }
	      }
	    },
	    "Sch": {
	      "type": "structure",
	      "members": {
	        "DiskImageSize": {
	          "locationName": "diskImageSize",
	          "type": "double"
	        },
	        "Description": {
	          "locationName": "description"
	        },
	        "Format": {
	          "locationName": "format"
	        },
	        "Url": {
	          "locationName": "url"
	        },
	        "UserBucket": {
	          "shape": "Scc",
	          "locationName": "userBucket"
	        },
	        "SnapshotId": {
	          "locationName": "snapshotId"
	        },
	        "Progress": {
	          "locationName": "progress"
	        },
	        "StatusMessage": {
	          "locationName": "statusMessage"
	        },
	        "Status": {
	          "locationName": "status"
	        }
	      }
	    },
	    "Scl": {
	      "type": "structure",
	      "members": {
	        "Value": {
	          "locationName": "value",
	          "type": "boolean"
	        }
	      }
	    },
	    "Scm": {
	      "type": "list",
	      "member": {
	        "locationName": "item",
	        "type": "structure",
	        "members": {
	          "DeviceName": {
	            "locationName": "deviceName"
	          },
	          "Ebs": {
	            "locationName": "ebs",
	            "type": "structure",
	            "members": {
	              "VolumeId": {
	                "locationName": "volumeId"
	              },
	              "Status": {
	                "locationName": "status"
	              },
	              "AttachTime": {
	                "locationName": "attachTime",
	                "type": "timestamp"
	              },
	              "DeleteOnTermination": {
	                "locationName": "deleteOnTermination",
	                "type": "boolean"
	              }
	            }
	          }
	        }
	      }
	    },
	    "Scw": {
	      "type": "structure",
	      "members": {
	        "Code": {
	          "locationName": "code",
	          "type": "integer"
	        },
	        "Name": {
	          "locationName": "name"
	        }
	      }
	    },
	    "Scy": {
	      "type": "structure",
	      "members": {
	        "Status": {
	          "locationName": "status"
	        },
	        "Details": {
	          "locationName": "details",
	          "type": "list",
	          "member": {
	            "locationName": "item",
	            "type": "structure",
	            "members": {
	              "Name": {
	                "locationName": "name"
	              },
	              "Status": {
	                "locationName": "status"
	              },
	              "ImpairedSince": {
	                "locationName": "impairedSince",
	                "type": "timestamp"
	              }
	            }
	          }
	        }
	      }
	    },
	    "Sd7": {
	      "type": "structure",
	      "members": {
	        "ReservationId": {
	          "locationName": "reservationId"
	        },
	        "OwnerId": {
	          "locationName": "ownerId"
	        },
	        "RequesterId": {
	          "locationName": "requesterId"
	        },
	        "Groups": {
	          "shape": "S5m",
	          "locationName": "groupSet"
	        },
	        "Instances": {
	          "locationName": "instancesSet",
	          "type": "list",
	          "member": {
	            "locationName": "item",
	            "type": "structure",
	            "members": {
	              "InstanceId": {
	                "locationName": "instanceId"
	              },
	              "ImageId": {
	                "locationName": "imageId"
	              },
	              "State": {
	                "shape": "Scw",
	                "locationName": "instanceState"
	              },
	              "PrivateDnsName": {
	                "locationName": "privateDnsName"
	              },
	              "PublicDnsName": {
	                "locationName": "dnsName"
	              },
	              "StateTransitionReason": {
	                "locationName": "reason"
	              },
	              "KeyName": {
	                "locationName": "keyName"
	              },
	              "AmiLaunchIndex": {
	                "locationName": "amiLaunchIndex",
	                "type": "integer"
	              },
	              "ProductCodes": {
	                "shape": "Sbn",
	                "locationName": "productCodes"
	              },
	              "InstanceType": {
	                "locationName": "instanceType"
	              },
	              "LaunchTime": {
	                "locationName": "launchTime",
	                "type": "timestamp"
	              },
	              "Placement": {
	                "shape": "Sdb",
	                "locationName": "placement"
	              },
	              "KernelId": {
	                "locationName": "kernelId"
	              },
	              "RamdiskId": {
	                "locationName": "ramdiskId"
	              },
	              "Platform": {
	                "locationName": "platform"
	              },
	              "Monitoring": {
	                "shape": "Sdc",
	                "locationName": "monitoring"
	              },
	              "SubnetId": {
	                "locationName": "subnetId"
	              },
	              "VpcId": {
	                "locationName": "vpcId"
	              },
	              "PrivateIpAddress": {
	                "locationName": "privateIpAddress"
	              },
	              "PublicIpAddress": {
	                "locationName": "ipAddress"
	              },
	              "StateReason": {
	                "shape": "Sc1",
	                "locationName": "stateReason"
	              },
	              "Architecture": {
	                "locationName": "architecture"
	              },
	              "RootDeviceType": {
	                "locationName": "rootDeviceType"
	              },
	              "RootDeviceName": {
	                "locationName": "rootDeviceName"
	              },
	              "BlockDeviceMappings": {
	                "shape": "Scm",
	                "locationName": "blockDeviceMapping"
	              },
	              "VirtualizationType": {
	                "locationName": "virtualizationType"
	              },
	              "InstanceLifecycle": {
	                "locationName": "instanceLifecycle"
	              },
	              "SpotInstanceRequestId": {
	                "locationName": "spotInstanceRequestId"
	              },
	              "ClientToken": {
	                "locationName": "clientToken"
	              },
	              "Tags": {
	                "shape": "Sj",
	                "locationName": "tagSet"
	              },
	              "SecurityGroups": {
	                "shape": "S5m",
	                "locationName": "groupSet"
	              },
	              "SourceDestCheck": {
	                "locationName": "sourceDestCheck",
	                "type": "boolean"
	              },
	              "Hypervisor": {
	                "locationName": "hypervisor"
	              },
	              "NetworkInterfaces": {
	                "locationName": "networkInterfaceSet",
	                "type": "list",
	                "member": {
	                  "locationName": "item",
	                  "type": "structure",
	                  "members": {
	                    "NetworkInterfaceId": {
	                      "locationName": "networkInterfaceId"
	                    },
	                    "SubnetId": {
	                      "locationName": "subnetId"
	                    },
	                    "VpcId": {
	                      "locationName": "vpcId"
	                    },
	                    "Description": {
	                      "locationName": "description"
	                    },
	                    "OwnerId": {
	                      "locationName": "ownerId"
	                    },
	                    "Status": {
	                      "locationName": "status"
	                    },
	                    "MacAddress": {
	                      "locationName": "macAddress"
	                    },
	                    "PrivateIpAddress": {
	                      "locationName": "privateIpAddress"
	                    },
	                    "PrivateDnsName": {
	                      "locationName": "privateDnsName"
	                    },
	                    "SourceDestCheck": {
	                      "locationName": "sourceDestCheck",
	                      "type": "boolean"
	                    },
	                    "Groups": {
	                      "shape": "S5m",
	                      "locationName": "groupSet"
	                    },
	                    "Attachment": {
	                      "locationName": "attachment",
	                      "type": "structure",
	                      "members": {
	                        "AttachmentId": {
	                          "locationName": "attachmentId"
	                        },
	                        "DeviceIndex": {
	                          "locationName": "deviceIndex",
	                          "type": "integer"
	                        },
	                        "Status": {
	                          "locationName": "status"
	                        },
	                        "AttachTime": {
	                          "locationName": "attachTime",
	                          "type": "timestamp"
	                        },
	                        "DeleteOnTermination": {
	                          "locationName": "deleteOnTermination",
	                          "type": "boolean"
	                        }
	                      }
	                    },
	                    "Association": {
	                      "shape": "Sdi",
	                      "locationName": "association"
	                    },
	                    "PrivateIpAddresses": {
	                      "locationName": "privateIpAddressesSet",
	                      "type": "list",
	                      "member": {
	                        "locationName": "item",
	                        "type": "structure",
	                        "members": {
	                          "PrivateIpAddress": {
	                            "locationName": "privateIpAddress"
	                          },
	                          "PrivateDnsName": {
	                            "locationName": "privateDnsName"
	                          },
	                          "Primary": {
	                            "locationName": "primary",
	                            "type": "boolean"
	                          },
	                          "Association": {
	                            "shape": "Sdi",
	                            "locationName": "association"
	                          }
	                        }
	                      }
	                    },
	                    "Ipv6Addresses": {
	                      "shape": "S5h",
	                      "locationName": "ipv6AddressesSet"
	                    }
	                  }
	                }
	              },
	              "IamInstanceProfile": {
	                "shape": "S14",
	                "locationName": "iamInstanceProfile"
	              },
	              "EbsOptimized": {
	                "locationName": "ebsOptimized",
	                "type": "boolean"
	              },
	              "SriovNetSupport": {
	                "locationName": "sriovNetSupport"
	              },
	              "EnaSupport": {
	                "locationName": "enaSupport",
	                "type": "boolean"
	              }
	            }
	          }
	        }
	      }
	    },
	    "Sdb": {
	      "type": "structure",
	      "members": {
	        "AvailabilityZone": {
	          "locationName": "availabilityZone"
	        },
	        "GroupName": {
	          "locationName": "groupName"
	        },
	        "Tenancy": {
	          "locationName": "tenancy"
	        },
	        "HostId": {
	          "locationName": "hostId"
	        },
	        "Affinity": {
	          "locationName": "affinity"
	        }
	      }
	    },
	    "Sdc": {
	      "type": "structure",
	      "members": {
	        "State": {
	          "locationName": "state"
	        }
	      }
	    },
	    "Sdi": {
	      "type": "structure",
	      "members": {
	        "PublicIp": {
	          "locationName": "publicIp"
	        },
	        "PublicDnsName": {
	          "locationName": "publicDnsName"
	        },
	        "IpOwnerId": {
	          "locationName": "ipOwnerId"
	        }
	      }
	    },
	    "Ser": {
	      "type": "list",
	      "member": {
	        "locationName": "ReservedInstancesId"
	      }
	    },
	    "Sf0": {
	      "type": "list",
	      "member": {
	        "locationName": "item",
	        "type": "structure",
	        "members": {
	          "Frequency": {
	            "locationName": "frequency"
	          },
	          "Amount": {
	            "locationName": "amount",
	            "type": "double"
	          }
	        }
	      }
	    },
	    "Sff": {
	      "type": "structure",
	      "members": {
	        "AvailabilityZone": {
	          "locationName": "availabilityZone"
	        },
	        "Platform": {
	          "locationName": "platform"
	        },
	        "InstanceCount": {
	          "locationName": "instanceCount",
	          "type": "integer"
	        },
	        "InstanceType": {
	          "locationName": "instanceType"
	        },
	        "Scope": {
	          "locationName": "scope"
	        }
	      }
	    },
	    "Sfx": {
	      "type": "structure",
	      "members": {
	        "Frequency": {
	          "locationName": "frequency"
	        },
	        "Interval": {
	          "locationName": "interval",
	          "type": "integer"
	        },
	        "OccurrenceDaySet": {
	          "locationName": "occurrenceDaySet",
	          "type": "list",
	          "member": {
	            "locationName": "item",
	            "type": "integer"
	          }
	        },
	        "OccurrenceRelativeToEnd": {
	          "locationName": "occurrenceRelativeToEnd",
	          "type": "boolean"
	        },
	        "OccurrenceUnit": {
	          "locationName": "occurrenceUnit"
	        }
	      }
	    },
	    "Sg4": {
	      "type": "structure",
	      "members": {
	        "ScheduledInstanceId": {
	          "locationName": "scheduledInstanceId"
	        },
	        "InstanceType": {
	          "locationName": "instanceType"
	        },
	        "Platform": {
	          "locationName": "platform"
	        },
	        "NetworkPlatform": {
	          "locationName": "networkPlatform"
	        },
	        "AvailabilityZone": {
	          "locationName": "availabilityZone"
	        },
	        "SlotDurationInHours": {
	          "locationName": "slotDurationInHours",
	          "type": "integer"
	        },
	        "Recurrence": {
	          "shape": "Sfx",
	          "locationName": "recurrence"
	        },
	        "PreviousSlotEndTime": {
	          "locationName": "previousSlotEndTime",
	          "type": "timestamp"
	        },
	        "NextSlotStartTime": {
	          "locationName": "nextSlotStartTime",
	          "type": "timestamp"
	        },
	        "HourlyPrice": {
	          "locationName": "hourlyPrice"
	        },
	        "TotalScheduledInstanceHours": {
	          "locationName": "totalScheduledInstanceHours",
	          "type": "integer"
	        },
	        "InstanceCount": {
	          "locationName": "instanceCount",
	          "type": "integer"
	        },
	        "TermStartDate": {
	          "locationName": "termStartDate",
	          "type": "timestamp"
	        },
	        "TermEndDate": {
	          "locationName": "termEndDate",
	          "type": "timestamp"
	        },
	        "CreateDate": {
	          "locationName": "createDate",
	          "type": "timestamp"
	        }
	      }
	    },
	    "Sgb": {
	      "type": "list",
	      "member": {
	        "locationName": "GroupName"
	      }
	    },
	    "Sgi": {
	      "type": "list",
	      "member": {
	        "locationName": "item",
	        "type": "structure",
	        "members": {
	          "UserId": {
	            "locationName": "userId"
	          },
	          "Group": {
	            "locationName": "group"
	          }
	        }
	      }
	    },
	    "Sh6": {
	      "type": "structure",
	      "required": [
	        "SpotPrice",
	        "TargetCapacity",
	        "IamFleetRole",
	        "LaunchSpecifications"
	      ],
	      "members": {
	        "ClientToken": {
	          "locationName": "clientToken"
	        },
	        "SpotPrice": {
	          "locationName": "spotPrice"
	        },
	        "TargetCapacity": {
	          "locationName": "targetCapacity",
	          "type": "integer"
	        },
	        "ValidFrom": {
	          "locationName": "validFrom",
	          "type": "timestamp"
	        },
	        "ValidUntil": {
	          "locationName": "validUntil",
	          "type": "timestamp"
	        },
	        "TerminateInstancesWithExpiration": {
	          "locationName": "terminateInstancesWithExpiration",
	          "type": "boolean"
	        },
	        "IamFleetRole": {
	          "locationName": "iamFleetRole"
	        },
	        "LaunchSpecifications": {
	          "locationName": "launchSpecifications",
	          "type": "list",
	          "member": {
	            "locationName": "item",
	            "type": "structure",
	            "members": {
	              "ImageId": {
	                "locationName": "imageId"
	              },
	              "KeyName": {
	                "locationName": "keyName"
	              },
	              "SecurityGroups": {
	                "shape": "S5m",
	                "locationName": "groupSet"
	              },
	              "UserData": {
	                "locationName": "userData"
	              },
	              "AddressingType": {
	                "locationName": "addressingType"
	              },
	              "InstanceType": {
	                "locationName": "instanceType"
	              },
	              "Placement": {
	                "shape": "Sh9",
	                "locationName": "placement"
	              },
	              "KernelId": {
	                "locationName": "kernelId"
	              },
	              "RamdiskId": {
	                "locationName": "ramdiskId"
	              },
	              "BlockDeviceMappings": {
	                "shape": "Sbq",
	                "locationName": "blockDeviceMapping"
	              },
	              "Monitoring": {
	                "locationName": "monitoring",
	                "type": "structure",
	                "members": {
	                  "Enabled": {
	                    "locationName": "enabled",
	                    "type": "boolean"
	                  }
	                }
	              },
	              "SubnetId": {
	                "locationName": "subnetId"
	              },
	              "NetworkInterfaces": {
	                "shape": "Shb",
	                "locationName": "networkInterfaceSet"
	              },
	              "IamInstanceProfile": {
	                "shape": "S11",
	                "locationName": "iamInstanceProfile"
	              },
	              "EbsOptimized": {
	                "locationName": "ebsOptimized",
	                "type": "boolean"
	              },
	              "WeightedCapacity": {
	                "locationName": "weightedCapacity",
	                "type": "double"
	              },
	              "SpotPrice": {
	                "locationName": "spotPrice"
	              }
	            }
	          }
	        },
	        "ExcessCapacityTerminationPolicy": {
	          "locationName": "excessCapacityTerminationPolicy"
	        },
	        "AllocationStrategy": {
	          "locationName": "allocationStrategy"
	        },
	        "FulfilledCapacity": {
	          "locationName": "fulfilledCapacity",
	          "type": "double"
	        },
	        "Type": {
	          "locationName": "type"
	        },
	        "ReplaceUnhealthyInstances": {
	          "locationName": "replaceUnhealthyInstances",
	          "type": "boolean"
	        }
	      }
	    },
	    "Sh9": {
	      "type": "structure",
	      "members": {
	        "AvailabilityZone": {
	          "locationName": "availabilityZone"
	        },
	        "GroupName": {
	          "locationName": "groupName"
	        },
	        "Tenancy": {
	          "locationName": "tenancy"
	        }
	      }
	    },
	    "Shb": {
	      "type": "list",
	      "member": {
	        "locationName": "item",
	        "type": "structure",
	        "members": {
	          "NetworkInterfaceId": {
	            "locationName": "networkInterfaceId"
	          },
	          "DeviceIndex": {
	            "locationName": "deviceIndex",
	            "type": "integer"
	          },
	          "SubnetId": {
	            "locationName": "subnetId"
	          },
	          "Description": {
	            "locationName": "description"
	          },
	          "PrivateIpAddress": {
	            "locationName": "privateIpAddress"
	          },
	          "Groups": {
	            "shape": "S5e",
	            "locationName": "SecurityGroupId"
	          },
	          "DeleteOnTermination": {
	            "locationName": "deleteOnTermination",
	            "type": "boolean"
	          },
	          "PrivateIpAddresses": {
	            "shape": "S5f",
	            "locationName": "privateIpAddressesSet",
	            "queryName": "PrivateIpAddresses"
	          },
	          "SecondaryPrivateIpAddressCount": {
	            "locationName": "secondaryPrivateIpAddressCount",
	            "type": "integer"
	          },
	          "AssociatePublicIpAddress": {
	            "locationName": "associatePublicIpAddress",
	            "type": "boolean"
	          },
	          "Ipv6Addresses": {
	            "shape": "S5h",
	            "locationName": "ipv6AddressesSet",
	            "queryName": "Ipv6Addresses"
	          },
	          "Ipv6AddressCount": {
	            "locationName": "ipv6AddressCount",
	            "type": "integer"
	          }
	        }
	      }
	    },
	    "Shj": {
	      "type": "list",
	      "member": {
	        "locationName": "item",
	        "type": "structure",
	        "members": {
	          "SpotInstanceRequestId": {
	            "locationName": "spotInstanceRequestId"
	          },
	          "SpotPrice": {
	            "locationName": "spotPrice"
	          },
	          "Type": {
	            "locationName": "type"
	          },
	          "State": {
	            "locationName": "state"
	          },
	          "Fault": {
	            "shape": "S6n",
	            "locationName": "fault"
	          },
	          "Status": {
	            "locationName": "status",
	            "type": "structure",
	            "members": {
	              "Code": {
	                "locationName": "code"
	              },
	              "UpdateTime": {
	                "locationName": "updateTime",
	                "type": "timestamp"
	              },
	              "Message": {
	                "locationName": "message"
	              }
	            }
	          },
	          "ValidFrom": {
	            "locationName": "validFrom",
	            "type": "timestamp"
	          },
	          "ValidUntil": {
	            "locationName": "validUntil",
	            "type": "timestamp"
	          },
	          "LaunchGroup": {
	            "locationName": "launchGroup"
	          },
	          "AvailabilityZoneGroup": {
	            "locationName": "availabilityZoneGroup"
	          },
	          "LaunchSpecification": {
	            "locationName": "launchSpecification",
	            "type": "structure",
	            "members": {
	              "ImageId": {
	                "locationName": "imageId"
	              },
	              "KeyName": {
	                "locationName": "keyName"
	              },
	              "SecurityGroups": {
	                "shape": "S5m",
	                "locationName": "groupSet"
	              },
	              "UserData": {
	                "locationName": "userData"
	              },
	              "AddressingType": {
	                "locationName": "addressingType"
	              },
	              "InstanceType": {
	                "locationName": "instanceType"
	              },
	              "Placement": {
	                "shape": "Sh9",
	                "locationName": "placement"
	              },
	              "KernelId": {
	                "locationName": "kernelId"
	              },
	              "RamdiskId": {
	                "locationName": "ramdiskId"
	              },
	              "BlockDeviceMappings": {
	                "shape": "Sbq",
	                "locationName": "blockDeviceMapping"
	              },
	              "SubnetId": {
	                "locationName": "subnetId"
	              },
	              "NetworkInterfaces": {
	                "shape": "Shb",
	                "locationName": "networkInterfaceSet"
	              },
	              "IamInstanceProfile": {
	                "shape": "S11",
	                "locationName": "iamInstanceProfile"
	              },
	              "EbsOptimized": {
	                "locationName": "ebsOptimized",
	                "type": "boolean"
	              },
	              "Monitoring": {
	                "shape": "Shp",
	                "locationName": "monitoring"
	              }
	            }
	          },
	          "InstanceId": {
	            "locationName": "instanceId"
	          },
	          "CreateTime": {
	            "locationName": "createTime",
	            "type": "timestamp"
	          },
	          "ProductDescription": {
	            "locationName": "productDescription"
	          },
	          "BlockDurationMinutes": {
	            "locationName": "blockDurationMinutes",
	            "type": "integer"
	          },
	          "ActualBlockHourlyPrice": {
	            "locationName": "actualBlockHourlyPrice"
	          },
	          "Tags": {
	            "shape": "Sj",
	            "locationName": "tagSet"
	          },
	          "LaunchedAvailabilityZone": {
	            "locationName": "launchedAvailabilityZone"
	          }
	        }
	      }
	    },
	    "Shp": {
	      "type": "structure",
	      "required": [
	        "Enabled"
	      ],
	      "members": {
	        "Enabled": {
	          "locationName": "enabled",
	          "type": "boolean"
	        }
	      }
	    },
	    "Si0": {
	      "type": "list",
	      "member": {
	        "locationName": "item",
	        "type": "structure",
	        "members": {
	          "FromPort": {
	            "locationName": "fromPort",
	            "type": "integer"
	          },
	          "IpProtocol": {
	            "locationName": "ipProtocol"
	          },
	          "IpRanges": {
	            "locationName": "ipRanges",
	            "type": "list",
	            "member": {
	              "locationName": "item"
	            }
	          },
	          "PrefixListIds": {
	            "locationName": "prefixListIds",
	            "type": "list",
	            "member": {
	              "locationName": "item"
	            }
	          },
	          "ToPort": {
	            "locationName": "toPort",
	            "type": "integer"
	          },
	          "UserIdGroupPairs": {
	            "locationName": "groups",
	            "type": "list",
	            "member": {
	              "shape": "S1z",
	              "locationName": "item"
	            }
	          }
	        }
	      }
	    },
	    "Sii": {
	      "type": "list",
	      "member": {
	        "locationName": "VolumeId"
	      }
	    },
	    "Sj1": {
	      "type": "structure",
	      "members": {
	        "VolumeId": {
	          "locationName": "volumeId"
	        },
	        "ModificationState": {
	          "locationName": "modificationState"
	        },
	        "StatusMessage": {
	          "locationName": "statusMessage"
	        },
	        "TargetSize": {
	          "locationName": "targetSize",
	          "type": "integer"
	        },
	        "TargetIops": {
	          "locationName": "targetIops",
	          "type": "integer"
	        },
	        "TargetVolumeType": {
	          "locationName": "targetVolumeType"
	        },
	        "OriginalSize": {
	          "locationName": "originalSize",
	          "type": "integer"
	        },
	        "OriginalIops": {
	          "locationName": "originalIops",
	          "type": "integer"
	        },
	        "OriginalVolumeType": {
	          "locationName": "originalVolumeType"
	        },
	        "Progress": {
	          "locationName": "progress",
	          "type": "long"
	        },
	        "StartTime": {
	          "locationName": "startTime",
	          "type": "timestamp"
	        },
	        "EndTime": {
	          "locationName": "endTime",
	          "type": "timestamp"
	        }
	      }
	    },
	    "Sj7": {
	      "type": "list",
	      "member": {
	        "locationName": "VpcId"
	      }
	    },
	    "Skt": {
	      "type": "list",
	      "member": {
	        "locationName": "item"
	      }
	    },
	    "Skv": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "HostReservationId": {
	            "locationName": "hostReservationId"
	          },
	          "HostIdSet": {
	            "shape": "Sar",
	            "locationName": "hostIdSet"
	          },
	          "InstanceFamily": {
	            "locationName": "instanceFamily"
	          },
	          "PaymentOption": {
	            "locationName": "paymentOption"
	          },
	          "UpfrontPrice": {
	            "locationName": "upfrontPrice"
	          },
	          "HourlyPrice": {
	            "locationName": "hourlyPrice"
	          },
	          "CurrencyCode": {
	            "locationName": "currencyCode"
	          },
	          "Duration": {
	            "locationName": "duration",
	            "type": "integer"
	          }
	        }
	      }
	    },
	    "Sl3": {
	      "type": "structure",
	      "members": {
	        "RemainingTotalValue": {
	          "locationName": "remainingTotalValue"
	        },
	        "RemainingUpfrontValue": {
	          "locationName": "remainingUpfrontValue"
	        },
	        "HourlyPrice": {
	          "locationName": "hourlyPrice"
	        }
	      }
	    },
	    "Sla": {
	      "type": "structure",
	      "members": {
	        "S3Bucket": {},
	        "S3Key": {}
	      }
	    },
	    "Slb": {
	      "type": "structure",
	      "members": {
	        "UploadStart": {
	          "type": "timestamp"
	        },
	        "UploadEnd": {
	          "type": "timestamp"
	        },
	        "UploadSize": {
	          "type": "double"
	        },
	        "Comment": {}
	      }
	    },
	    "Slf": {
	      "type": "list",
	      "member": {
	        "locationName": "SecurityGroup"
	      }
	    },
	    "Slk": {
	      "type": "structure",
	      "required": [
	        "Format",
	        "Bytes",
	        "ImportManifestUrl"
	      ],
	      "members": {
	        "Format": {
	          "locationName": "format"
	        },
	        "Bytes": {
	          "locationName": "bytes",
	          "type": "long"
	        },
	        "ImportManifestUrl": {
	          "locationName": "importManifestUrl"
	        }
	      }
	    },
	    "Sll": {
	      "type": "structure",
	      "required": [
	        "Size"
	      ],
	      "members": {
	        "Size": {
	          "locationName": "size",
	          "type": "long"
	        }
	      }
	    },
	    "Slw": {
	      "type": "list",
	      "member": {
	        "shape": "S48",
	        "locationName": "item"
	      }
	    },
	    "Sm1": {
	      "type": "list",
	      "member": {
	        "locationName": "UserId"
	      }
	    },
	    "Smv": {
	      "type": "structure",
	      "members": {
	        "AllowEgressFromLocalClassicLinkToRemoteVpc": {
	          "type": "boolean"
	        },
	        "AllowEgressFromLocalVpcToRemoteClassicLink": {
	          "type": "boolean"
	        },
	        "AllowDnsResolutionFromRemoteVpc": {
	          "type": "boolean"
	        }
	      }
	    },
	    "Smx": {
	      "type": "structure",
	      "members": {
	        "AllowEgressFromLocalClassicLinkToRemoteVpc": {
	          "locationName": "allowEgressFromLocalClassicLinkToRemoteVpc",
	          "type": "boolean"
	        },
	        "AllowEgressFromLocalVpcToRemoteClassicLink": {
	          "locationName": "allowEgressFromLocalVpcToRemoteClassicLink",
	          "type": "boolean"
	        },
	        "AllowDnsResolutionFromRemoteVpc": {
	          "locationName": "allowDnsResolutionFromRemoteVpc",
	          "type": "boolean"
	        }
	      }
	    },
	    "Sn0": {
	      "type": "list",
	      "member": {
	        "locationName": "item",
	        "type": "structure",
	        "members": {
	          "InstanceId": {
	            "locationName": "instanceId"
	          },
	          "Monitoring": {
	            "shape": "Sdc",
	            "locationName": "monitoring"
	          }
	        }
	      }
	    },
	    "Sog": {
	      "type": "list",
	      "member": {
	        "locationName": "SecurityGroupId"
	      }
	    },
	    "Soy": {
	      "type": "list",
	      "member": {
	        "locationName": "item",
	        "type": "structure",
	        "members": {
	          "InstanceId": {
	            "locationName": "instanceId"
	          },
	          "CurrentState": {
	            "shape": "Scw",
	            "locationName": "currentState"
	          },
	          "PreviousState": {
	            "shape": "Scw",
	            "locationName": "previousState"
	          }
	        }
	      }
	    }
	  }
	}
	},{}],43:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "DescribeAccountAttributes": {
	      "result_key": "AccountAttributes"
	    },
	    "DescribeAddresses": {
	      "result_key": "Addresses"
	    },
	    "DescribeAvailabilityZones": {
	      "result_key": "AvailabilityZones"
	    },
	    "DescribeBundleTasks": {
	      "result_key": "BundleTasks"
	    },
	    "DescribeConversionTasks": {
	      "result_key": "ConversionTasks"
	    },
	    "DescribeCustomerGateways": {
	      "result_key": "CustomerGateways"
	    },
	    "DescribeDhcpOptions": {
	      "result_key": "DhcpOptions"
	    },
	    "DescribeExportTasks": {
	      "result_key": "ExportTasks"
	    },
	    "DescribeImages": {
	      "result_key": "Images"
	    },
	    "DescribeInstanceStatus": {
	      "input_token": "NextToken",
	      "limit_key": "MaxResults",
	      "output_token": "NextToken",
	      "result_key": "InstanceStatuses"
	    },
	    "DescribeInstances": {
	      "input_token": "NextToken",
	      "limit_key": "MaxResults",
	      "output_token": "NextToken",
	      "result_key": "Reservations"
	    },
	    "DescribeInternetGateways": {
	      "result_key": "InternetGateways"
	    },
	    "DescribeKeyPairs": {
	      "result_key": "KeyPairs"
	    },
	    "DescribeNatGateways": {
	      "input_token": "NextToken",
	      "limit_key": "MaxResults",
	      "output_token": "NextToken",
	      "result_key": "NatGateways"
	    },
	    "DescribeNetworkAcls": {
	      "result_key": "NetworkAcls"
	    },
	    "DescribeNetworkInterfaces": {
	      "result_key": "NetworkInterfaces"
	    },
	    "DescribePlacementGroups": {
	      "result_key": "PlacementGroups"
	    },
	    "DescribeRegions": {
	      "result_key": "Regions"
	    },
	    "DescribeReservedInstances": {
	      "result_key": "ReservedInstances"
	    },
	    "DescribeReservedInstancesListings": {
	      "result_key": "ReservedInstancesListings"
	    },
	    "DescribeReservedInstancesModifications": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "result_key": "ReservedInstancesModifications"
	    },
	    "DescribeReservedInstancesOfferings": {
	      "input_token": "NextToken",
	      "limit_key": "MaxResults",
	      "output_token": "NextToken",
	      "result_key": "ReservedInstancesOfferings"
	    },
	    "DescribeRouteTables": {
	      "result_key": "RouteTables"
	    },
	    "DescribeSecurityGroups": {
	      "result_key": "SecurityGroups"
	    },
	    "DescribeSnapshots": {
	      "input_token": "NextToken",
	      "limit_key": "MaxResults",
	      "output_token": "NextToken",
	      "result_key": "Snapshots"
	    },
	    "DescribeSpotFleetRequests": {
	      "input_token": "NextToken",
	      "limit_key": "MaxResults",
	      "output_token": "NextToken",
	      "result_key": "SpotFleetRequestConfigs"
	    },
	    "DescribeSpotInstanceRequests": {
	      "result_key": "SpotInstanceRequests"
	    },
	    "DescribeSpotPriceHistory": {
	      "input_token": "NextToken",
	      "limit_key": "MaxResults",
	      "output_token": "NextToken",
	      "result_key": "SpotPriceHistory"
	    },
	    "DescribeSubnets": {
	      "result_key": "Subnets"
	    },
	    "DescribeTags": {
	      "input_token": "NextToken",
	      "limit_key": "MaxResults",
	      "output_token": "NextToken",
	      "result_key": "Tags"
	    },
	    "DescribeVolumeStatus": {
	      "input_token": "NextToken",
	      "limit_key": "MaxResults",
	      "output_token": "NextToken",
	      "result_key": "VolumeStatuses"
	    },
	    "DescribeVolumes": {
	      "input_token": "NextToken",
	      "limit_key": "MaxResults",
	      "output_token": "NextToken",
	      "result_key": "Volumes"
	    },
	    "DescribeVpcPeeringConnections": {
	      "result_key": "VpcPeeringConnections"
	    },
	    "DescribeVpcs": {
	      "result_key": "Vpcs"
	    },
	    "DescribeVpnConnections": {
	      "result_key": "VpnConnections"
	    },
	    "DescribeVpnGateways": {
	      "result_key": "VpnGateways"
	    }
	  }
	}
	},{}],44:[function(require,module,exports){
	module.exports={
	  "version": 2,
	  "waiters": {
	    "InstanceExists": {
	      "delay": 5,
	      "maxAttempts": 40,
	      "operation": "DescribeInstances",
	      "acceptors": [
	        {
	          "matcher": "path",
	          "expected": true,
	          "argument": "length(Reservations[]) > `0`",
	          "state": "success"
	        },
	        {
	          "matcher": "error",
	          "expected": "InvalidInstanceID.NotFound",
	          "state": "retry"
	        }
	      ]
	    },
	    "BundleTaskComplete": {
	      "delay": 15,
	      "operation": "DescribeBundleTasks",
	      "maxAttempts": 40,
	      "acceptors": [
	        {
	          "expected": "complete",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "BundleTasks[].State"
	        },
	        {
	          "expected": "failed",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "BundleTasks[].State"
	        }
	      ]
	    },
	    "ConversionTaskCancelled": {
	      "delay": 15,
	      "operation": "DescribeConversionTasks",
	      "maxAttempts": 40,
	      "acceptors": [
	        {
	          "expected": "cancelled",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "ConversionTasks[].State"
	        }
	      ]
	    },
	    "ConversionTaskCompleted": {
	      "delay": 15,
	      "operation": "DescribeConversionTasks",
	      "maxAttempts": 40,
	      "acceptors": [
	        {
	          "expected": "completed",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "ConversionTasks[].State"
	        },
	        {
	          "expected": "cancelled",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "ConversionTasks[].State"
	        },
	        {
	          "expected": "cancelling",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "ConversionTasks[].State"
	        }
	      ]
	    },
	    "ConversionTaskDeleted": {
	      "delay": 15,
	      "operation": "DescribeConversionTasks",
	      "maxAttempts": 40,
	      "acceptors": [
	        {
	          "expected": "deleted",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "ConversionTasks[].State"
	        }
	      ]
	    },
	    "CustomerGatewayAvailable": {
	      "delay": 15,
	      "operation": "DescribeCustomerGateways",
	      "maxAttempts": 40,
	      "acceptors": [
	        {
	          "expected": "available",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "CustomerGateways[].State"
	        },
	        {
	          "expected": "deleted",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "CustomerGateways[].State"
	        },
	        {
	          "expected": "deleting",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "CustomerGateways[].State"
	        }
	      ]
	    },
	    "ExportTaskCancelled": {
	      "delay": 15,
	      "operation": "DescribeExportTasks",
	      "maxAttempts": 40,
	      "acceptors": [
	        {
	          "expected": "cancelled",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "ExportTasks[].State"
	        }
	      ]
	    },
	    "ExportTaskCompleted": {
	      "delay": 15,
	      "operation": "DescribeExportTasks",
	      "maxAttempts": 40,
	      "acceptors": [
	        {
	          "expected": "completed",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "ExportTasks[].State"
	        }
	      ]
	    },
	    "ImageExists": {
	      "operation": "DescribeImages",
	      "maxAttempts": 40,
	      "delay": 15,
	      "acceptors": [
	        {
	          "matcher": "path",
	          "expected": true,
	          "argument": "length(Images[]) > `0`",
	          "state": "success"
	        },
	        {
	          "matcher": "error",
	          "expected": "InvalidAMIID.NotFound",
	          "state": "retry"
	        }
	      ]
	    },
	    "ImageAvailable": {
	      "operation": "DescribeImages",
	      "maxAttempts": 40,
	      "delay": 15,
	      "acceptors": [
	        {
	          "state": "success",
	          "matcher": "pathAll",
	          "argument": "Images[].State",
	          "expected": "available"
	        },
	        {
	          "state": "failure",
	          "matcher": "pathAny",
	          "argument": "Images[].State",
	          "expected": "failed"
	        }
	      ]
	    },
	    "InstanceRunning": {
	      "delay": 15,
	      "operation": "DescribeInstances",
	      "maxAttempts": 40,
	      "acceptors": [
	        {
	          "expected": "running",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "Reservations[].Instances[].State.Name"
	        },
	        {
	          "expected": "shutting-down",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Reservations[].Instances[].State.Name"
	        },
	        {
	          "expected": "terminated",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Reservations[].Instances[].State.Name"
	        },
	        {
	          "expected": "stopping",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Reservations[].Instances[].State.Name"
	        },
	        {
	          "matcher": "error",
	          "expected": "InvalidInstanceID.NotFound",
	          "state": "retry"
	        }
	      ]
	    },
	    "InstanceStatusOk": {
	      "operation": "DescribeInstanceStatus",
	      "maxAttempts": 40,
	      "delay": 15,
	      "acceptors": [
	        {
	          "state": "success",
	          "matcher": "pathAll",
	          "argument": "InstanceStatuses[].InstanceStatus.Status",
	          "expected": "ok"
	        },
	        {
	          "matcher": "error",
	          "expected": "InvalidInstanceID.NotFound",
	          "state": "retry"
	        }
	      ]
	    },
	    "InstanceStopped": {
	      "delay": 15,
	      "operation": "DescribeInstances",
	      "maxAttempts": 40,
	      "acceptors": [
	        {
	          "expected": "stopped",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "Reservations[].Instances[].State.Name"
	        },
	        {
	          "expected": "pending",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Reservations[].Instances[].State.Name"
	        },
	        {
	          "expected": "terminated",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Reservations[].Instances[].State.Name"
	        }
	      ]
	    },
	    "InstanceTerminated": {
	      "delay": 15,
	      "operation": "DescribeInstances",
	      "maxAttempts": 40,
	      "acceptors": [
	        {
	          "expected": "terminated",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "Reservations[].Instances[].State.Name"
	        },
	        {
	          "expected": "pending",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Reservations[].Instances[].State.Name"
	        },
	        {
	          "expected": "stopping",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Reservations[].Instances[].State.Name"
	        }
	      ]
	    },
	    "KeyPairExists": {
	      "operation": "DescribeKeyPairs",
	      "delay": 5,
	      "maxAttempts": 6,
	      "acceptors": [
	        {
	          "expected": true,
	          "matcher": "path",
	          "state": "success",
	          "argument": "length(KeyPairs[].KeyName) > `0`"
	        },
	        {
	          "expected": "InvalidKeyPair.NotFound",
	          "matcher": "error",
	          "state": "retry"
	        }
	      ]
	    },
	    "NatGatewayAvailable": {
	      "operation": "DescribeNatGateways",
	      "delay": 15,
	      "maxAttempts": 40,
	      "acceptors": [
	        {
	          "state": "success",
	          "matcher": "pathAll",
	          "argument": "NatGateways[].State",
	          "expected": "available"
	        },
	        {
	          "state": "failure",
	          "matcher": "pathAny",
	          "argument": "NatGateways[].State",
	          "expected": "failed"
	        },
	        {
	          "state": "failure",
	          "matcher": "pathAny",
	          "argument": "NatGateways[].State",
	          "expected": "deleting"
	        },
	        {
	          "state": "failure",
	          "matcher": "pathAny",
	          "argument": "NatGateways[].State",
	          "expected": "deleted"
	        },
	        {
	          "state": "retry",
	          "matcher": "error",
	          "expected": "NatGatewayNotFound"
	        }
	      ]
	    },
	    "NetworkInterfaceAvailable": {
	      "operation": "DescribeNetworkInterfaces",
	      "delay": 20,
	      "maxAttempts": 10,
	      "acceptors": [
	        {
	          "expected": "available",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "NetworkInterfaces[].Status"
	        },
	        {
	          "expected": "InvalidNetworkInterfaceID.NotFound",
	          "matcher": "error",
	          "state": "failure"
	        }
	      ]
	    },
	    "PasswordDataAvailable": {
	      "operation": "GetPasswordData",
	      "maxAttempts": 40,
	      "delay": 15,
	      "acceptors": [
	        {
	          "state": "success",
	          "matcher": "path",
	          "argument": "length(PasswordData) > `0`",
	          "expected": true
	        }
	      ]
	    },
	    "SnapshotCompleted": {
	      "delay": 15,
	      "operation": "DescribeSnapshots",
	      "maxAttempts": 40,
	      "acceptors": [
	        {
	          "expected": "completed",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "Snapshots[].State"
	        }
	      ]
	    },
	    "SpotInstanceRequestFulfilled": {
	      "operation": "DescribeSpotInstanceRequests",
	      "maxAttempts": 40,
	      "delay": 15,
	      "acceptors": [
	        {
	          "state": "success",
	          "matcher": "pathAll",
	          "argument": "SpotInstanceRequests[].Status.Code",
	          "expected": "fulfilled"
	        },
	        {
	          "state": "failure",
	          "matcher": "pathAny",
	          "argument": "SpotInstanceRequests[].Status.Code",
	          "expected": "schedule-expired"
	        },
	        {
	          "state": "failure",
	          "matcher": "pathAny",
	          "argument": "SpotInstanceRequests[].Status.Code",
	          "expected": "canceled-before-fulfillment"
	        },
	        {
	          "state": "failure",
	          "matcher": "pathAny",
	          "argument": "SpotInstanceRequests[].Status.Code",
	          "expected": "bad-parameters"
	        },
	        {
	          "state": "failure",
	          "matcher": "pathAny",
	          "argument": "SpotInstanceRequests[].Status.Code",
	          "expected": "system-error"
	        }
	      ]
	    },
	    "SubnetAvailable": {
	      "delay": 15,
	      "operation": "DescribeSubnets",
	      "maxAttempts": 40,
	      "acceptors": [
	        {
	          "expected": "available",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "Subnets[].State"
	        }
	      ]
	    },
	    "SystemStatusOk": {
	      "operation": "DescribeInstanceStatus",
	      "maxAttempts": 40,
	      "delay": 15,
	      "acceptors": [
	        {
	          "state": "success",
	          "matcher": "pathAll",
	          "argument": "InstanceStatuses[].SystemStatus.Status",
	          "expected": "ok"
	        }
	      ]
	    },
	    "VolumeAvailable": {
	      "delay": 15,
	      "operation": "DescribeVolumes",
	      "maxAttempts": 40,
	      "acceptors": [
	        {
	          "expected": "available",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "Volumes[].State"
	        },
	        {
	          "expected": "deleted",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Volumes[].State"
	        }
	      ]
	    },
	    "VolumeDeleted": {
	      "delay": 15,
	      "operation": "DescribeVolumes",
	      "maxAttempts": 40,
	      "acceptors": [
	        {
	          "expected": "deleted",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "Volumes[].State"
	        },
	        {
	          "matcher": "error",
	          "expected": "InvalidVolume.NotFound",
	          "state": "success"
	        }
	      ]
	    },
	    "VolumeInUse": {
	      "delay": 15,
	      "operation": "DescribeVolumes",
	      "maxAttempts": 40,
	      "acceptors": [
	        {
	          "expected": "in-use",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "Volumes[].State"
	        },
	        {
	          "expected": "deleted",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Volumes[].State"
	        }
	      ]
	    },
	    "VpcAvailable": {
	      "delay": 15,
	      "operation": "DescribeVpcs",
	      "maxAttempts": 40,
	      "acceptors": [
	        {
	          "expected": "available",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "Vpcs[].State"
	        }
	      ]
	    },
	    "VpcExists": {
	      "operation": "DescribeVpcs",
	      "delay": 1,
	      "maxAttempts": 5,
	      "acceptors": [
	        {
	          "matcher": "status",
	          "expected": 200,
	          "state": "success"
	        },
	        {
	          "matcher": "error",
	          "expected": "InvalidVpcID.NotFound",
	          "state": "retry"
	        }
	      ]
	    },
	    "VpnConnectionAvailable": {
	      "delay": 15,
	      "operation": "DescribeVpnConnections",
	      "maxAttempts": 40,
	      "acceptors": [
	        {
	          "expected": "available",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "VpnConnections[].State"
	        },
	        {
	          "expected": "deleting",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "VpnConnections[].State"
	        },
	        {
	          "expected": "deleted",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "VpnConnections[].State"
	        }
	      ]
	    },
	    "VpnConnectionDeleted": {
	      "delay": 15,
	      "operation": "DescribeVpnConnections",
	      "maxAttempts": 40,
	      "acceptors": [
	        {
	          "expected": "deleted",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "VpnConnections[].State"
	        },
	        {
	          "expected": "pending",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "VpnConnections[].State"
	        }
	      ]
	    },
	    "VpcPeeringConnectionExists": {
	      "delay": 15,
	      "operation": "DescribeVpcPeeringConnections",
	      "maxAttempts": 40,
	      "acceptors": [
	        {
	          "matcher": "status",
	          "expected": 200,
	          "state": "success"
	        },
	        {
	          "matcher": "error",
	          "expected": "InvalidVpcPeeringConnectionID.NotFound",
	          "state": "retry"
	        }
	      ]
	    },
	    "VpcPeeringConnectionDeleted": {
	      "delay": 15,
	      "operation": "DescribeVpcPeeringConnections",
	      "maxAttempts": 40,
	      "acceptors": [
	        {
	          "expected": "deleted",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "VpcPeeringConnections[].Status.Code"
	        },
	        {
	          "matcher": "error",
	          "expected": "InvalidVpcPeeringConnectionID.NotFound",
	          "state": "success"
	        }
	      ]
	    }
	  }
	}
	
	},{}],45:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "uid": "ecr-2015-09-21",
	    "apiVersion": "2015-09-21",
	    "endpointPrefix": "ecr",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceAbbreviation": "Amazon ECR",
	    "serviceFullName": "Amazon EC2 Container Registry",
	    "signatureVersion": "v4",
	    "targetPrefix": "AmazonEC2ContainerRegistry_V20150921"
	  },
	  "operations": {
	    "BatchCheckLayerAvailability": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "repositoryName",
	          "layerDigests"
	        ],
	        "members": {
	          "registryId": {},
	          "repositoryName": {},
	          "layerDigests": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "layers": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "layerDigest": {},
	                "layerAvailability": {},
	                "layerSize": {
	                  "type": "long"
	                },
	                "mediaType": {}
	              }
	            }
	          },
	          "failures": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "layerDigest": {},
	                "failureCode": {},
	                "failureReason": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "BatchDeleteImage": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "repositoryName",
	          "imageIds"
	        ],
	        "members": {
	          "registryId": {},
	          "repositoryName": {},
	          "imageIds": {
	            "shape": "Si"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "imageIds": {
	            "shape": "Si"
	          },
	          "failures": {
	            "shape": "Sn"
	          }
	        }
	      }
	    },
	    "BatchGetImage": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "repositoryName",
	          "imageIds"
	        ],
	        "members": {
	          "registryId": {},
	          "repositoryName": {},
	          "imageIds": {
	            "shape": "Si"
	          },
	          "acceptedMediaTypes": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "images": {
	            "type": "list",
	            "member": {
	              "shape": "Sv"
	            }
	          },
	          "failures": {
	            "shape": "Sn"
	          }
	        }
	      }
	    },
	    "CompleteLayerUpload": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "repositoryName",
	          "uploadId",
	          "layerDigests"
	        ],
	        "members": {
	          "registryId": {},
	          "repositoryName": {},
	          "uploadId": {},
	          "layerDigests": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "registryId": {},
	          "repositoryName": {},
	          "uploadId": {},
	          "layerDigest": {}
	        }
	      }
	    },
	    "CreateRepository": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "repositoryName"
	        ],
	        "members": {
	          "repositoryName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "repository": {
	            "shape": "S13"
	          }
	        }
	      }
	    },
	    "DeleteRepository": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "repositoryName"
	        ],
	        "members": {
	          "registryId": {},
	          "repositoryName": {},
	          "force": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "repository": {
	            "shape": "S13"
	          }
	        }
	      }
	    },
	    "DeleteRepositoryPolicy": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "repositoryName"
	        ],
	        "members": {
	          "registryId": {},
	          "repositoryName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "registryId": {},
	          "repositoryName": {},
	          "policyText": {}
	        }
	      }
	    },
	    "DescribeImages": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "repositoryName"
	        ],
	        "members": {
	          "registryId": {},
	          "repositoryName": {},
	          "imageIds": {
	            "shape": "Si"
	          },
	          "nextToken": {},
	          "maxResults": {
	            "type": "integer"
	          },
	          "filter": {
	            "type": "structure",
	            "members": {
	              "tagStatus": {}
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "imageDetails": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "registryId": {},
	                "repositoryName": {},
	                "imageDigest": {},
	                "imageTags": {
	                  "type": "list",
	                  "member": {}
	                },
	                "imageSizeInBytes": {
	                  "type": "long"
	                },
	                "imagePushedAt": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "DescribeRepositories": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "registryId": {},
	          "repositoryNames": {
	            "type": "list",
	            "member": {}
	          },
	          "nextToken": {},
	          "maxResults": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "repositories": {
	            "type": "list",
	            "member": {
	              "shape": "S13"
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "GetAuthorizationToken": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "registryIds": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "authorizationData": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "authorizationToken": {},
	                "expiresAt": {
	                  "type": "timestamp"
	                },
	                "proxyEndpoint": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "GetDownloadUrlForLayer": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "repositoryName",
	          "layerDigest"
	        ],
	        "members": {
	          "registryId": {},
	          "repositoryName": {},
	          "layerDigest": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "downloadUrl": {},
	          "layerDigest": {}
	        }
	      }
	    },
	    "GetRepositoryPolicy": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "repositoryName"
	        ],
	        "members": {
	          "registryId": {},
	          "repositoryName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "registryId": {},
	          "repositoryName": {},
	          "policyText": {}
	        }
	      }
	    },
	    "InitiateLayerUpload": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "repositoryName"
	        ],
	        "members": {
	          "registryId": {},
	          "repositoryName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "uploadId": {},
	          "partSize": {
	            "type": "long"
	          }
	        }
	      }
	    },
	    "ListImages": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "repositoryName"
	        ],
	        "members": {
	          "registryId": {},
	          "repositoryName": {},
	          "nextToken": {},
	          "maxResults": {
	            "type": "integer"
	          },
	          "filter": {
	            "type": "structure",
	            "members": {
	              "tagStatus": {}
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "imageIds": {
	            "shape": "Si"
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "PutImage": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "repositoryName",
	          "imageManifest"
	        ],
	        "members": {
	          "registryId": {},
	          "repositoryName": {},
	          "imageManifest": {},
	          "imageTag": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "image": {
	            "shape": "Sv"
	          }
	        }
	      }
	    },
	    "SetRepositoryPolicy": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "repositoryName",
	          "policyText"
	        ],
	        "members": {
	          "registryId": {},
	          "repositoryName": {},
	          "policyText": {},
	          "force": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "registryId": {},
	          "repositoryName": {},
	          "policyText": {}
	        }
	      }
	    },
	    "UploadLayerPart": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "repositoryName",
	          "uploadId",
	          "partFirstByte",
	          "partLastByte",
	          "layerPartBlob"
	        ],
	        "members": {
	          "registryId": {},
	          "repositoryName": {},
	          "uploadId": {},
	          "partFirstByte": {
	            "type": "long"
	          },
	          "partLastByte": {
	            "type": "long"
	          },
	          "layerPartBlob": {
	            "type": "blob"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "registryId": {},
	          "repositoryName": {},
	          "uploadId": {},
	          "lastByteReceived": {
	            "type": "long"
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "Si": {
	      "type": "list",
	      "member": {
	        "shape": "Sj"
	      }
	    },
	    "Sj": {
	      "type": "structure",
	      "members": {
	        "imageDigest": {},
	        "imageTag": {}
	      }
	    },
	    "Sn": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "imageId": {
	            "shape": "Sj"
	          },
	          "failureCode": {},
	          "failureReason": {}
	        }
	      }
	    },
	    "Sv": {
	      "type": "structure",
	      "members": {
	        "registryId": {},
	        "repositoryName": {},
	        "imageId": {
	          "shape": "Sj"
	        },
	        "imageManifest": {}
	      }
	    },
	    "S13": {
	      "type": "structure",
	      "members": {
	        "repositoryArn": {},
	        "registryId": {},
	        "repositoryName": {},
	        "repositoryUri": {},
	        "createdAt": {
	          "type": "timestamp"
	        }
	      }
	    }
	  }
	}
	},{}],46:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "ListImages": {
	      "input_token": "nextToken",
	      "output_token": "nextToken",
	      "limit_key": "maxResults",
	      "result_key": "imageIds"
	    },
	    "DescribeImages": {
	      "input_token": "nextToken",
	      "output_token": "nextToken",
	      "limit_key": "maxResults",
	      "result_key": "imageDetails"
	    },
	    "DescribeRepositories": {
	      "input_token": "nextToken",
	      "output_token": "nextToken",
	      "limit_key": "maxResults",
	      "result_key": "repositories"
	    }
	  }
	}
	
	},{}],47:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2014-11-13",
	    "endpointPrefix": "ecs",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceAbbreviation": "Amazon ECS",
	    "serviceFullName": "Amazon EC2 Container Service",
	    "signatureVersion": "v4",
	    "targetPrefix": "AmazonEC2ContainerServiceV20141113",
	    "uid": "ecs-2014-11-13"
	  },
	  "operations": {
	    "CreateCluster": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "clusterName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "cluster": {
	            "shape": "S4"
	          }
	        }
	      }
	    },
	    "CreateService": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "serviceName",
	          "taskDefinition",
	          "desiredCount"
	        ],
	        "members": {
	          "cluster": {},
	          "serviceName": {},
	          "taskDefinition": {},
	          "loadBalancers": {
	            "shape": "S7"
	          },
	          "desiredCount": {
	            "type": "integer"
	          },
	          "clientToken": {},
	          "role": {},
	          "deploymentConfiguration": {
	            "shape": "Sa"
	          },
	          "placementConstraints": {
	            "shape": "Sb"
	          },
	          "placementStrategy": {
	            "shape": "Se"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "service": {
	            "shape": "Si"
	          }
	        }
	      }
	    },
	    "DeleteAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "attributes"
	        ],
	        "members": {
	          "cluster": {},
	          "attributes": {
	            "shape": "Sp"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "attributes": {
	            "shape": "Sp"
	          }
	        }
	      }
	    },
	    "DeleteCluster": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "cluster"
	        ],
	        "members": {
	          "cluster": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "cluster": {
	            "shape": "S4"
	          }
	        }
	      }
	    },
	    "DeleteService": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "service"
	        ],
	        "members": {
	          "cluster": {},
	          "service": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "service": {
	            "shape": "Si"
	          }
	        }
	      }
	    },
	    "DeregisterContainerInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "containerInstance"
	        ],
	        "members": {
	          "cluster": {},
	          "containerInstance": {},
	          "force": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "containerInstance": {
	            "shape": "S10"
	          }
	        }
	      }
	    },
	    "DeregisterTaskDefinition": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "taskDefinition"
	        ],
	        "members": {
	          "taskDefinition": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "taskDefinition": {
	            "shape": "S1b"
	          }
	        }
	      }
	    },
	    "DescribeClusters": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "clusters": {
	            "shape": "S16"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "clusters": {
	            "type": "list",
	            "member": {
	              "shape": "S4"
	            }
	          },
	          "failures": {
	            "shape": "S28"
	          }
	        }
	      }
	    },
	    "DescribeContainerInstances": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "containerInstances"
	        ],
	        "members": {
	          "cluster": {},
	          "containerInstances": {
	            "shape": "S16"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "containerInstances": {
	            "shape": "S2c"
	          },
	          "failures": {
	            "shape": "S28"
	          }
	        }
	      }
	    },
	    "DescribeServices": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "services"
	        ],
	        "members": {
	          "cluster": {},
	          "services": {
	            "shape": "S16"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "services": {
	            "type": "list",
	            "member": {
	              "shape": "Si"
	            }
	          },
	          "failures": {
	            "shape": "S28"
	          }
	        }
	      }
	    },
	    "DescribeTaskDefinition": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "taskDefinition"
	        ],
	        "members": {
	          "taskDefinition": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "taskDefinition": {
	            "shape": "S1b"
	          }
	        }
	      }
	    },
	    "DescribeTasks": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "tasks"
	        ],
	        "members": {
	          "cluster": {},
	          "tasks": {
	            "shape": "S16"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "tasks": {
	            "shape": "S2k"
	          },
	          "failures": {
	            "shape": "S28"
	          }
	        }
	      }
	    },
	    "DiscoverPollEndpoint": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "containerInstance": {},
	          "cluster": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "endpoint": {},
	          "telemetryEndpoint": {}
	        }
	      }
	    },
	    "ListAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "targetType"
	        ],
	        "members": {
	          "cluster": {},
	          "targetType": {},
	          "attributeName": {},
	          "attributeValue": {},
	          "nextToken": {},
	          "maxResults": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "attributes": {
	            "shape": "Sp"
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListClusters": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "nextToken": {},
	          "maxResults": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "clusterArns": {
	            "shape": "S16"
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListContainerInstances": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "cluster": {},
	          "filter": {},
	          "nextToken": {},
	          "maxResults": {
	            "type": "integer"
	          },
	          "status": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "containerInstanceArns": {
	            "shape": "S16"
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListServices": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "cluster": {},
	          "nextToken": {},
	          "maxResults": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "serviceArns": {
	            "shape": "S16"
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListTaskDefinitionFamilies": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "familyPrefix": {},
	          "status": {},
	          "nextToken": {},
	          "maxResults": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "families": {
	            "shape": "S16"
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListTaskDefinitions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "familyPrefix": {},
	          "status": {},
	          "sort": {},
	          "nextToken": {},
	          "maxResults": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "taskDefinitionArns": {
	            "shape": "S16"
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListTasks": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "cluster": {},
	          "containerInstance": {},
	          "family": {},
	          "nextToken": {},
	          "maxResults": {
	            "type": "integer"
	          },
	          "startedBy": {},
	          "serviceName": {},
	          "desiredStatus": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "taskArns": {
	            "shape": "S16"
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "PutAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "attributes"
	        ],
	        "members": {
	          "cluster": {},
	          "attributes": {
	            "shape": "Sp"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "attributes": {
	            "shape": "Sp"
	          }
	        }
	      }
	    },
	    "RegisterContainerInstance": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "cluster": {},
	          "instanceIdentityDocument": {},
	          "instanceIdentityDocumentSignature": {},
	          "totalResources": {
	            "shape": "S13"
	          },
	          "versionInfo": {
	            "shape": "S12"
	          },
	          "containerInstanceArn": {},
	          "attributes": {
	            "shape": "Sp"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "containerInstance": {
	            "shape": "S10"
	          }
	        }
	      }
	    },
	    "RegisterTaskDefinition": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "family",
	          "containerDefinitions"
	        ],
	        "members": {
	          "family": {},
	          "taskRoleArn": {},
	          "networkMode": {},
	          "containerDefinitions": {
	            "shape": "S1c"
	          },
	          "volumes": {
	            "shape": "S1x"
	          },
	          "placementConstraints": {
	            "shape": "S22"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "taskDefinition": {
	            "shape": "S1b"
	          }
	        }
	      }
	    },
	    "RunTask": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "taskDefinition"
	        ],
	        "members": {
	          "cluster": {},
	          "taskDefinition": {},
	          "overrides": {
	            "shape": "S2m"
	          },
	          "count": {
	            "type": "integer"
	          },
	          "startedBy": {},
	          "group": {},
	          "placementConstraints": {
	            "shape": "Sb"
	          },
	          "placementStrategy": {
	            "shape": "Se"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "tasks": {
	            "shape": "S2k"
	          },
	          "failures": {
	            "shape": "S28"
	          }
	        }
	      }
	    },
	    "StartTask": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "taskDefinition",
	          "containerInstances"
	        ],
	        "members": {
	          "cluster": {},
	          "taskDefinition": {},
	          "overrides": {
	            "shape": "S2m"
	          },
	          "containerInstances": {
	            "shape": "S16"
	          },
	          "startedBy": {},
	          "group": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "tasks": {
	            "shape": "S2k"
	          },
	          "failures": {
	            "shape": "S28"
	          }
	        }
	      }
	    },
	    "StopTask": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "task"
	        ],
	        "members": {
	          "cluster": {},
	          "task": {},
	          "reason": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "task": {
	            "shape": "S2l"
	          }
	        }
	      }
	    },
	    "SubmitContainerStateChange": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "cluster": {},
	          "task": {},
	          "containerName": {},
	          "status": {},
	          "exitCode": {
	            "type": "integer"
	          },
	          "reason": {},
	          "networkBindings": {
	            "shape": "S2r"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "acknowledgment": {}
	        }
	      }
	    },
	    "SubmitTaskStateChange": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "cluster": {},
	          "task": {},
	          "status": {},
	          "reason": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "acknowledgment": {}
	        }
	      }
	    },
	    "UpdateContainerAgent": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "containerInstance"
	        ],
	        "members": {
	          "cluster": {},
	          "containerInstance": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "containerInstance": {
	            "shape": "S10"
	          }
	        }
	      }
	    },
	    "UpdateContainerInstancesState": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "containerInstances",
	          "status"
	        ],
	        "members": {
	          "cluster": {},
	          "containerInstances": {
	            "shape": "S16"
	          },
	          "status": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "containerInstances": {
	            "shape": "S2c"
	          },
	          "failures": {
	            "shape": "S28"
	          }
	        }
	      }
	    },
	    "UpdateService": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "service"
	        ],
	        "members": {
	          "cluster": {},
	          "service": {},
	          "desiredCount": {
	            "type": "integer"
	          },
	          "taskDefinition": {},
	          "deploymentConfiguration": {
	            "shape": "Sa"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "service": {
	            "shape": "Si"
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S4": {
	      "type": "structure",
	      "members": {
	        "clusterArn": {},
	        "clusterName": {},
	        "status": {},
	        "registeredContainerInstancesCount": {
	          "type": "integer"
	        },
	        "runningTasksCount": {
	          "type": "integer"
	        },
	        "pendingTasksCount": {
	          "type": "integer"
	        },
	        "activeServicesCount": {
	          "type": "integer"
	        }
	      }
	    },
	    "S7": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "targetGroupArn": {},
	          "loadBalancerName": {},
	          "containerName": {},
	          "containerPort": {
	            "type": "integer"
	          }
	        }
	      }
	    },
	    "Sa": {
	      "type": "structure",
	      "members": {
	        "maximumPercent": {
	          "type": "integer"
	        },
	        "minimumHealthyPercent": {
	          "type": "integer"
	        }
	      }
	    },
	    "Sb": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "type": {},
	          "expression": {}
	        }
	      }
	    },
	    "Se": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "type": {},
	          "field": {}
	        }
	      }
	    },
	    "Si": {
	      "type": "structure",
	      "members": {
	        "serviceArn": {},
	        "serviceName": {},
	        "clusterArn": {},
	        "loadBalancers": {
	          "shape": "S7"
	        },
	        "status": {},
	        "desiredCount": {
	          "type": "integer"
	        },
	        "runningCount": {
	          "type": "integer"
	        },
	        "pendingCount": {
	          "type": "integer"
	        },
	        "taskDefinition": {},
	        "deploymentConfiguration": {
	          "shape": "Sa"
	        },
	        "deployments": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "members": {
	              "id": {},
	              "status": {},
	              "taskDefinition": {},
	              "desiredCount": {
	                "type": "integer"
	              },
	              "pendingCount": {
	                "type": "integer"
	              },
	              "runningCount": {
	                "type": "integer"
	              },
	              "createdAt": {
	                "type": "timestamp"
	              },
	              "updatedAt": {
	                "type": "timestamp"
	              }
	            }
	          }
	        },
	        "roleArn": {},
	        "events": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "members": {
	              "id": {},
	              "createdAt": {
	                "type": "timestamp"
	              },
	              "message": {}
	            }
	          }
	        },
	        "createdAt": {
	          "type": "timestamp"
	        },
	        "placementConstraints": {
	          "shape": "Sb"
	        },
	        "placementStrategy": {
	          "shape": "Se"
	        }
	      }
	    },
	    "Sp": {
	      "type": "list",
	      "member": {
	        "shape": "Sq"
	      }
	    },
	    "Sq": {
	      "type": "structure",
	      "required": [
	        "name"
	      ],
	      "members": {
	        "name": {},
	        "value": {},
	        "targetType": {},
	        "targetId": {}
	      }
	    },
	    "S10": {
	      "type": "structure",
	      "members": {
	        "containerInstanceArn": {},
	        "ec2InstanceId": {},
	        "version": {
	          "type": "long"
	        },
	        "versionInfo": {
	          "shape": "S12"
	        },
	        "remainingResources": {
	          "shape": "S13"
	        },
	        "registeredResources": {
	          "shape": "S13"
	        },
	        "status": {},
	        "agentConnected": {
	          "type": "boolean"
	        },
	        "runningTasksCount": {
	          "type": "integer"
	        },
	        "pendingTasksCount": {
	          "type": "integer"
	        },
	        "agentUpdateStatus": {},
	        "attributes": {
	          "shape": "Sp"
	        }
	      }
	    },
	    "S12": {
	      "type": "structure",
	      "members": {
	        "agentVersion": {},
	        "agentHash": {},
	        "dockerVersion": {}
	      }
	    },
	    "S13": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "name": {},
	          "type": {},
	          "doubleValue": {
	            "type": "double"
	          },
	          "longValue": {
	            "type": "long"
	          },
	          "integerValue": {
	            "type": "integer"
	          },
	          "stringSetValue": {
	            "shape": "S16"
	          }
	        }
	      }
	    },
	    "S16": {
	      "type": "list",
	      "member": {}
	    },
	    "S1b": {
	      "type": "structure",
	      "members": {
	        "taskDefinitionArn": {},
	        "containerDefinitions": {
	          "shape": "S1c"
	        },
	        "family": {},
	        "taskRoleArn": {},
	        "networkMode": {},
	        "revision": {
	          "type": "integer"
	        },
	        "volumes": {
	          "shape": "S1x"
	        },
	        "status": {},
	        "requiresAttributes": {
	          "type": "list",
	          "member": {
	            "shape": "Sq"
	          }
	        },
	        "placementConstraints": {
	          "shape": "S22"
	        }
	      }
	    },
	    "S1c": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "name": {},
	          "image": {},
	          "cpu": {
	            "type": "integer"
	          },
	          "memory": {
	            "type": "integer"
	          },
	          "memoryReservation": {
	            "type": "integer"
	          },
	          "links": {
	            "shape": "S16"
	          },
	          "portMappings": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "containerPort": {
	                  "type": "integer"
	                },
	                "hostPort": {
	                  "type": "integer"
	                },
	                "protocol": {}
	              }
	            }
	          },
	          "essential": {
	            "type": "boolean"
	          },
	          "entryPoint": {
	            "shape": "S16"
	          },
	          "command": {
	            "shape": "S16"
	          },
	          "environment": {
	            "shape": "S1h"
	          },
	          "mountPoints": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "sourceVolume": {},
	                "containerPath": {},
	                "readOnly": {
	                  "type": "boolean"
	                }
	              }
	            }
	          },
	          "volumesFrom": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "sourceContainer": {},
	                "readOnly": {
	                  "type": "boolean"
	                }
	              }
	            }
	          },
	          "hostname": {},
	          "user": {},
	          "workingDirectory": {},
	          "disableNetworking": {
	            "type": "boolean"
	          },
	          "privileged": {
	            "type": "boolean"
	          },
	          "readonlyRootFilesystem": {
	            "type": "boolean"
	          },
	          "dnsServers": {
	            "shape": "S16"
	          },
	          "dnsSearchDomains": {
	            "shape": "S16"
	          },
	          "extraHosts": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "hostname",
	                "ipAddress"
	              ],
	              "members": {
	                "hostname": {},
	                "ipAddress": {}
	              }
	            }
	          },
	          "dockerSecurityOptions": {
	            "shape": "S16"
	          },
	          "dockerLabels": {
	            "type": "map",
	            "key": {},
	            "value": {}
	          },
	          "ulimits": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "name",
	                "softLimit",
	                "hardLimit"
	              ],
	              "members": {
	                "name": {},
	                "softLimit": {
	                  "type": "integer"
	                },
	                "hardLimit": {
	                  "type": "integer"
	                }
	              }
	            }
	          },
	          "logConfiguration": {
	            "type": "structure",
	            "required": [
	              "logDriver"
	            ],
	            "members": {
	              "logDriver": {},
	              "options": {
	                "type": "map",
	                "key": {},
	                "value": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "S1h": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "name": {},
	          "value": {}
	        }
	      }
	    },
	    "S1x": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "name": {},
	          "host": {
	            "type": "structure",
	            "members": {
	              "sourcePath": {}
	            }
	          }
	        }
	      }
	    },
	    "S22": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "type": {},
	          "expression": {}
	        }
	      }
	    },
	    "S28": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "arn": {},
	          "reason": {}
	        }
	      }
	    },
	    "S2c": {
	      "type": "list",
	      "member": {
	        "shape": "S10"
	      }
	    },
	    "S2k": {
	      "type": "list",
	      "member": {
	        "shape": "S2l"
	      }
	    },
	    "S2l": {
	      "type": "structure",
	      "members": {
	        "taskArn": {},
	        "clusterArn": {},
	        "taskDefinitionArn": {},
	        "containerInstanceArn": {},
	        "overrides": {
	          "shape": "S2m"
	        },
	        "lastStatus": {},
	        "desiredStatus": {},
	        "containers": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "members": {
	              "containerArn": {},
	              "taskArn": {},
	              "name": {},
	              "lastStatus": {},
	              "exitCode": {
	                "type": "integer"
	              },
	              "reason": {},
	              "networkBindings": {
	                "shape": "S2r"
	              }
	            }
	          }
	        },
	        "startedBy": {},
	        "version": {
	          "type": "long"
	        },
	        "stoppedReason": {},
	        "createdAt": {
	          "type": "timestamp"
	        },
	        "startedAt": {
	          "type": "timestamp"
	        },
	        "stoppedAt": {
	          "type": "timestamp"
	        },
	        "group": {}
	      }
	    },
	    "S2m": {
	      "type": "structure",
	      "members": {
	        "containerOverrides": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "members": {
	              "name": {},
	              "command": {
	                "shape": "S16"
	              },
	              "environment": {
	                "shape": "S1h"
	              }
	            }
	          }
	        },
	        "taskRoleArn": {}
	      }
	    },
	    "S2r": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "bindIP": {},
	          "containerPort": {
	            "type": "integer"
	          },
	          "hostPort": {
	            "type": "integer"
	          },
	          "protocol": {}
	        }
	      }
	    }
	  }
	}
	},{}],48:[function(require,module,exports){
	module.exports={
		"pagination": {
			"ListClusters": {
				"input_token": "nextToken",
				"output_token": "nextToken",
				"limit_key": "maxResults",
				"result_key": "clusterArns"
			},
			"ListContainerInstances": {
				"input_token": "nextToken",
				"output_token": "nextToken",
				"limit_key": "maxResults",
				"result_key": "containerInstanceArns"
			},
			"ListTaskDefinitions": {
				"input_token": "nextToken",
				"output_token": "nextToken",
				"limit_key": "maxResults",
				"result_key": "taskDefinitionArns"
			},
			"ListTaskDefinitionFamilies": {
				"input_token": "nextToken",
				"output_token": "nextToken",
				"limit_key": "maxResults",
				"result_key": "families"
			},
			"ListTasks": {
				"input_token": "nextToken",
				"output_token": "nextToken",
				"limit_key": "maxResults",
				"result_key": "taskArns"
			},
			"ListServices": {
				"input_token": "nextToken",
				"output_token": "nextToken",
				"limit_key": "maxResults",
				"result_key": "serviceArns"
			}
		}
	}
	
	},{}],49:[function(require,module,exports){
	module.exports={
	  "version": 2,
	  "waiters": {
	    "TasksRunning": {
	      "delay": 6,
	      "operation": "DescribeTasks",
	      "maxAttempts": 100,
	      "acceptors": [
	        {
	          "expected": "STOPPED",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "tasks[].lastStatus"
	        },
	        {
	          "expected": "MISSING",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "failures[].reason"
	        },
	        {
	          "expected": "RUNNING",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "tasks[].lastStatus"
	        }
	      ]
	    },
	    "TasksStopped": {
	      "delay": 6,
	      "operation": "DescribeTasks",
	      "maxAttempts": 100,
	      "acceptors": [
	        {
	          "expected": "STOPPED",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "tasks[].lastStatus"
	        }
	      ]
	    },
	    "ServicesStable": {
	      "delay": 15,
	      "operation": "DescribeServices",
	      "maxAttempts": 40,
	      "acceptors": [
	        {
	          "expected": "MISSING",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "failures[].reason"
	        },
	        {
	          "expected": "DRAINING",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "services[].status"
	        },
	        {
	          "expected": "INACTIVE",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "services[].status"
	        },
	        {
	          "expected": true,
	          "matcher": "path",
	          "state": "success",
	          "argument": "length(services[?!(length(deployments) == `1` && runningCount == desiredCount)]) == `0`"
	        }
	      ]
	    },
	    "ServicesInactive": {
	      "delay": 15,
	      "operation": "DescribeServices",
	      "maxAttempts": 40,
	      "acceptors": [
	        {
	          "expected": "MISSING",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "failures[].reason"
	        },
	        {
	          "expected": "INACTIVE",
	          "matcher": "pathAny",
	          "state": "success",
	          "argument": "services[].status"
	        }
	      ]
	    }
	  }
	}
	
	},{}],50:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2015-02-02",
	    "endpointPrefix": "elasticache",
	    "protocol": "query",
	    "serviceFullName": "Amazon ElastiCache",
	    "signatureVersion": "v4",
	    "uid": "elasticache-2015-02-02",
	    "xmlNamespace": "http://elasticache.amazonaws.com/doc/2015-02-02/"
	  },
	  "operations": {
	    "AddTagsToResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceName",
	          "Tags"
	        ],
	        "members": {
	          "ResourceName": {},
	          "Tags": {
	            "shape": "S3"
	          }
	        }
	      },
	      "output": {
	        "shape": "S5",
	        "resultWrapper": "AddTagsToResourceResult"
	      }
	    },
	    "AuthorizeCacheSecurityGroupIngress": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CacheSecurityGroupName",
	          "EC2SecurityGroupName",
	          "EC2SecurityGroupOwnerId"
	        ],
	        "members": {
	          "CacheSecurityGroupName": {},
	          "EC2SecurityGroupName": {},
	          "EC2SecurityGroupOwnerId": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "AuthorizeCacheSecurityGroupIngressResult",
	        "type": "structure",
	        "members": {
	          "CacheSecurityGroup": {
	            "shape": "S8"
	          }
	        }
	      }
	    },
	    "CopySnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SourceSnapshotName",
	          "TargetSnapshotName"
	        ],
	        "members": {
	          "SourceSnapshotName": {},
	          "TargetSnapshotName": {},
	          "TargetBucket": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CopySnapshotResult",
	        "type": "structure",
	        "members": {
	          "Snapshot": {
	            "shape": "Sd"
	          }
	        }
	      }
	    },
	    "CreateCacheCluster": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CacheClusterId"
	        ],
	        "members": {
	          "CacheClusterId": {},
	          "ReplicationGroupId": {},
	          "AZMode": {},
	          "PreferredAvailabilityZone": {},
	          "PreferredAvailabilityZones": {
	            "shape": "So"
	          },
	          "NumCacheNodes": {
	            "type": "integer"
	          },
	          "CacheNodeType": {},
	          "Engine": {},
	          "EngineVersion": {},
	          "CacheParameterGroupName": {},
	          "CacheSubnetGroupName": {},
	          "CacheSecurityGroupNames": {
	            "shape": "Sp"
	          },
	          "SecurityGroupIds": {
	            "shape": "Sq"
	          },
	          "Tags": {
	            "shape": "S3"
	          },
	          "SnapshotArns": {
	            "shape": "Sr"
	          },
	          "SnapshotName": {},
	          "PreferredMaintenanceWindow": {},
	          "Port": {
	            "type": "integer"
	          },
	          "NotificationTopicArn": {},
	          "AutoMinorVersionUpgrade": {
	            "type": "boolean"
	          },
	          "SnapshotRetentionLimit": {
	            "type": "integer"
	          },
	          "SnapshotWindow": {},
	          "AuthToken": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateCacheClusterResult",
	        "type": "structure",
	        "members": {
	          "CacheCluster": {
	            "shape": "Su"
	          }
	        }
	      }
	    },
	    "CreateCacheParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CacheParameterGroupName",
	          "CacheParameterGroupFamily",
	          "Description"
	        ],
	        "members": {
	          "CacheParameterGroupName": {},
	          "CacheParameterGroupFamily": {},
	          "Description": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateCacheParameterGroupResult",
	        "type": "structure",
	        "members": {
	          "CacheParameterGroup": {
	            "shape": "S19"
	          }
	        }
	      }
	    },
	    "CreateCacheSecurityGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CacheSecurityGroupName",
	          "Description"
	        ],
	        "members": {
	          "CacheSecurityGroupName": {},
	          "Description": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateCacheSecurityGroupResult",
	        "type": "structure",
	        "members": {
	          "CacheSecurityGroup": {
	            "shape": "S8"
	          }
	        }
	      }
	    },
	    "CreateCacheSubnetGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CacheSubnetGroupName",
	          "CacheSubnetGroupDescription",
	          "SubnetIds"
	        ],
	        "members": {
	          "CacheSubnetGroupName": {},
	          "CacheSubnetGroupDescription": {},
	          "SubnetIds": {
	            "shape": "S1d"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateCacheSubnetGroupResult",
	        "type": "structure",
	        "members": {
	          "CacheSubnetGroup": {
	            "shape": "S1f"
	          }
	        }
	      }
	    },
	    "CreateReplicationGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ReplicationGroupId",
	          "ReplicationGroupDescription"
	        ],
	        "members": {
	          "ReplicationGroupId": {},
	          "ReplicationGroupDescription": {},
	          "PrimaryClusterId": {},
	          "AutomaticFailoverEnabled": {
	            "type": "boolean"
	          },
	          "NumCacheClusters": {
	            "type": "integer"
	          },
	          "PreferredCacheClusterAZs": {
	            "shape": "Sl"
	          },
	          "NumNodeGroups": {
	            "type": "integer"
	          },
	          "ReplicasPerNodeGroup": {
	            "type": "integer"
	          },
	          "NodeGroupConfiguration": {
	            "type": "list",
	            "member": {
	              "shape": "Sk",
	              "locationName": "NodeGroupConfiguration"
	            }
	          },
	          "CacheNodeType": {},
	          "Engine": {},
	          "EngineVersion": {},
	          "CacheParameterGroupName": {},
	          "CacheSubnetGroupName": {},
	          "CacheSecurityGroupNames": {
	            "shape": "Sp"
	          },
	          "SecurityGroupIds": {
	            "shape": "Sq"
	          },
	          "Tags": {
	            "shape": "S3"
	          },
	          "SnapshotArns": {
	            "shape": "Sr"
	          },
	          "SnapshotName": {},
	          "PreferredMaintenanceWindow": {},
	          "Port": {
	            "type": "integer"
	          },
	          "NotificationTopicArn": {},
	          "AutoMinorVersionUpgrade": {
	            "type": "boolean"
	          },
	          "SnapshotRetentionLimit": {
	            "type": "integer"
	          },
	          "SnapshotWindow": {},
	          "AuthToken": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateReplicationGroupResult",
	        "type": "structure",
	        "members": {
	          "ReplicationGroup": {
	            "shape": "S1m"
	          }
	        }
	      }
	    },
	    "CreateSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SnapshotName"
	        ],
	        "members": {
	          "ReplicationGroupId": {},
	          "CacheClusterId": {},
	          "SnapshotName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateSnapshotResult",
	        "type": "structure",
	        "members": {
	          "Snapshot": {
	            "shape": "Sd"
	          }
	        }
	      }
	    },
	    "DeleteCacheCluster": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CacheClusterId"
	        ],
	        "members": {
	          "CacheClusterId": {},
	          "FinalSnapshotIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteCacheClusterResult",
	        "type": "structure",
	        "members": {
	          "CacheCluster": {
	            "shape": "Su"
	          }
	        }
	      }
	    },
	    "DeleteCacheParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CacheParameterGroupName"
	        ],
	        "members": {
	          "CacheParameterGroupName": {}
	        }
	      }
	    },
	    "DeleteCacheSecurityGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CacheSecurityGroupName"
	        ],
	        "members": {
	          "CacheSecurityGroupName": {}
	        }
	      }
	    },
	    "DeleteCacheSubnetGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CacheSubnetGroupName"
	        ],
	        "members": {
	          "CacheSubnetGroupName": {}
	        }
	      }
	    },
	    "DeleteReplicationGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ReplicationGroupId"
	        ],
	        "members": {
	          "ReplicationGroupId": {},
	          "RetainPrimaryCluster": {
	            "type": "boolean"
	          },
	          "FinalSnapshotIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteReplicationGroupResult",
	        "type": "structure",
	        "members": {
	          "ReplicationGroup": {
	            "shape": "S1m"
	          }
	        }
	      }
	    },
	    "DeleteSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SnapshotName"
	        ],
	        "members": {
	          "SnapshotName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteSnapshotResult",
	        "type": "structure",
	        "members": {
	          "Snapshot": {
	            "shape": "Sd"
	          }
	        }
	      }
	    },
	    "DescribeCacheClusters": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "CacheClusterId": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {},
	          "ShowCacheNodeInfo": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeCacheClustersResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "CacheClusters": {
	            "type": "list",
	            "member": {
	              "shape": "Su",
	              "locationName": "CacheCluster"
	            }
	          }
	        }
	      }
	    },
	    "DescribeCacheEngineVersions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Engine": {},
	          "EngineVersion": {},
	          "CacheParameterGroupFamily": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {},
	          "DefaultOnly": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeCacheEngineVersionsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "CacheEngineVersions": {
	            "type": "list",
	            "member": {
	              "locationName": "CacheEngineVersion",
	              "type": "structure",
	              "members": {
	                "Engine": {},
	                "EngineVersion": {},
	                "CacheParameterGroupFamily": {},
	                "CacheEngineDescription": {},
	                "CacheEngineVersionDescription": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeCacheParameterGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "CacheParameterGroupName": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeCacheParameterGroupsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "CacheParameterGroups": {
	            "type": "list",
	            "member": {
	              "shape": "S19",
	              "locationName": "CacheParameterGroup"
	            }
	          }
	        }
	      }
	    },
	    "DescribeCacheParameters": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CacheParameterGroupName"
	        ],
	        "members": {
	          "CacheParameterGroupName": {},
	          "Source": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeCacheParametersResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "Parameters": {
	            "shape": "S2h"
	          },
	          "CacheNodeTypeSpecificParameters": {
	            "shape": "S2k"
	          }
	        }
	      }
	    },
	    "DescribeCacheSecurityGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "CacheSecurityGroupName": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeCacheSecurityGroupsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "CacheSecurityGroups": {
	            "type": "list",
	            "member": {
	              "shape": "S8",
	              "locationName": "CacheSecurityGroup"
	            }
	          }
	        }
	      }
	    },
	    "DescribeCacheSubnetGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "CacheSubnetGroupName": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeCacheSubnetGroupsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "CacheSubnetGroups": {
	            "type": "list",
	            "member": {
	              "shape": "S1f",
	              "locationName": "CacheSubnetGroup"
	            }
	          }
	        }
	      }
	    },
	    "DescribeEngineDefaultParameters": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CacheParameterGroupFamily"
	        ],
	        "members": {
	          "CacheParameterGroupFamily": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeEngineDefaultParametersResult",
	        "type": "structure",
	        "members": {
	          "EngineDefaults": {
	            "type": "structure",
	            "members": {
	              "CacheParameterGroupFamily": {},
	              "Marker": {},
	              "Parameters": {
	                "shape": "S2h"
	              },
	              "CacheNodeTypeSpecificParameters": {
	                "shape": "S2k"
	              }
	            },
	            "wrapper": true
	          }
	        }
	      }
	    },
	    "DescribeEvents": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "SourceIdentifier": {},
	          "SourceType": {},
	          "StartTime": {
	            "type": "timestamp"
	          },
	          "EndTime": {
	            "type": "timestamp"
	          },
	          "Duration": {
	            "type": "integer"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeEventsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "Events": {
	            "type": "list",
	            "member": {
	              "locationName": "Event",
	              "type": "structure",
	              "members": {
	                "SourceIdentifier": {},
	                "SourceType": {},
	                "Message": {},
	                "Date": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeReplicationGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ReplicationGroupId": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeReplicationGroupsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "ReplicationGroups": {
	            "type": "list",
	            "member": {
	              "shape": "S1m",
	              "locationName": "ReplicationGroup"
	            }
	          }
	        }
	      }
	    },
	    "DescribeReservedCacheNodes": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ReservedCacheNodeId": {},
	          "ReservedCacheNodesOfferingId": {},
	          "CacheNodeType": {},
	          "Duration": {},
	          "ProductDescription": {},
	          "OfferingType": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeReservedCacheNodesResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "ReservedCacheNodes": {
	            "type": "list",
	            "member": {
	              "shape": "S38",
	              "locationName": "ReservedCacheNode"
	            }
	          }
	        }
	      }
	    },
	    "DescribeReservedCacheNodesOfferings": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ReservedCacheNodesOfferingId": {},
	          "CacheNodeType": {},
	          "Duration": {},
	          "ProductDescription": {},
	          "OfferingType": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeReservedCacheNodesOfferingsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "ReservedCacheNodesOfferings": {
	            "type": "list",
	            "member": {
	              "locationName": "ReservedCacheNodesOffering",
	              "type": "structure",
	              "members": {
	                "ReservedCacheNodesOfferingId": {},
	                "CacheNodeType": {},
	                "Duration": {
	                  "type": "integer"
	                },
	                "FixedPrice": {
	                  "type": "double"
	                },
	                "UsagePrice": {
	                  "type": "double"
	                },
	                "ProductDescription": {},
	                "OfferingType": {},
	                "RecurringCharges": {
	                  "shape": "S3a"
	                }
	              },
	              "wrapper": true
	            }
	          }
	        }
	      }
	    },
	    "DescribeSnapshots": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ReplicationGroupId": {},
	          "CacheClusterId": {},
	          "SnapshotName": {},
	          "SnapshotSource": {},
	          "Marker": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "ShowNodeGroupConfig": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeSnapshotsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "Snapshots": {
	            "type": "list",
	            "member": {
	              "shape": "Sd",
	              "locationName": "Snapshot"
	            }
	          }
	        }
	      }
	    },
	    "ListAllowedNodeTypeModifications": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "CacheClusterId": {},
	          "ReplicationGroupId": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ListAllowedNodeTypeModificationsResult",
	        "type": "structure",
	        "members": {
	          "ScaleUpModifications": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      }
	    },
	    "ListTagsForResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceName"
	        ],
	        "members": {
	          "ResourceName": {}
	        }
	      },
	      "output": {
	        "shape": "S5",
	        "resultWrapper": "ListTagsForResourceResult"
	      }
	    },
	    "ModifyCacheCluster": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CacheClusterId"
	        ],
	        "members": {
	          "CacheClusterId": {},
	          "NumCacheNodes": {
	            "type": "integer"
	          },
	          "CacheNodeIdsToRemove": {
	            "shape": "Sy"
	          },
	          "AZMode": {},
	          "NewAvailabilityZones": {
	            "shape": "So"
	          },
	          "CacheSecurityGroupNames": {
	            "shape": "Sp"
	          },
	          "SecurityGroupIds": {
	            "shape": "Sq"
	          },
	          "PreferredMaintenanceWindow": {},
	          "NotificationTopicArn": {},
	          "CacheParameterGroupName": {},
	          "NotificationTopicStatus": {},
	          "ApplyImmediately": {
	            "type": "boolean"
	          },
	          "EngineVersion": {},
	          "AutoMinorVersionUpgrade": {
	            "type": "boolean"
	          },
	          "SnapshotRetentionLimit": {
	            "type": "integer"
	          },
	          "SnapshotWindow": {},
	          "CacheNodeType": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyCacheClusterResult",
	        "type": "structure",
	        "members": {
	          "CacheCluster": {
	            "shape": "Su"
	          }
	        }
	      }
	    },
	    "ModifyCacheParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CacheParameterGroupName",
	          "ParameterNameValues"
	        ],
	        "members": {
	          "CacheParameterGroupName": {},
	          "ParameterNameValues": {
	            "shape": "S3q"
	          }
	        }
	      },
	      "output": {
	        "shape": "S3s",
	        "resultWrapper": "ModifyCacheParameterGroupResult"
	      }
	    },
	    "ModifyCacheSubnetGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CacheSubnetGroupName"
	        ],
	        "members": {
	          "CacheSubnetGroupName": {},
	          "CacheSubnetGroupDescription": {},
	          "SubnetIds": {
	            "shape": "S1d"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyCacheSubnetGroupResult",
	        "type": "structure",
	        "members": {
	          "CacheSubnetGroup": {
	            "shape": "S1f"
	          }
	        }
	      }
	    },
	    "ModifyReplicationGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ReplicationGroupId"
	        ],
	        "members": {
	          "ReplicationGroupId": {},
	          "ReplicationGroupDescription": {},
	          "PrimaryClusterId": {},
	          "SnapshottingClusterId": {},
	          "AutomaticFailoverEnabled": {
	            "type": "boolean"
	          },
	          "CacheSecurityGroupNames": {
	            "shape": "Sp"
	          },
	          "SecurityGroupIds": {
	            "shape": "Sq"
	          },
	          "PreferredMaintenanceWindow": {},
	          "NotificationTopicArn": {},
	          "CacheParameterGroupName": {},
	          "NotificationTopicStatus": {},
	          "ApplyImmediately": {
	            "type": "boolean"
	          },
	          "EngineVersion": {},
	          "AutoMinorVersionUpgrade": {
	            "type": "boolean"
	          },
	          "SnapshotRetentionLimit": {
	            "type": "integer"
	          },
	          "SnapshotWindow": {},
	          "CacheNodeType": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyReplicationGroupResult",
	        "type": "structure",
	        "members": {
	          "ReplicationGroup": {
	            "shape": "S1m"
	          }
	        }
	      }
	    },
	    "PurchaseReservedCacheNodesOffering": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ReservedCacheNodesOfferingId"
	        ],
	        "members": {
	          "ReservedCacheNodesOfferingId": {},
	          "ReservedCacheNodeId": {},
	          "CacheNodeCount": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "PurchaseReservedCacheNodesOfferingResult",
	        "type": "structure",
	        "members": {
	          "ReservedCacheNode": {
	            "shape": "S38"
	          }
	        }
	      }
	    },
	    "RebootCacheCluster": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CacheClusterId",
	          "CacheNodeIdsToReboot"
	        ],
	        "members": {
	          "CacheClusterId": {},
	          "CacheNodeIdsToReboot": {
	            "shape": "Sy"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "RebootCacheClusterResult",
	        "type": "structure",
	        "members": {
	          "CacheCluster": {
	            "shape": "Su"
	          }
	        }
	      }
	    },
	    "RemoveTagsFromResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceName",
	          "TagKeys"
	        ],
	        "members": {
	          "ResourceName": {},
	          "TagKeys": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "shape": "S5",
	        "resultWrapper": "RemoveTagsFromResourceResult"
	      }
	    },
	    "ResetCacheParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CacheParameterGroupName"
	        ],
	        "members": {
	          "CacheParameterGroupName": {},
	          "ResetAllParameters": {
	            "type": "boolean"
	          },
	          "ParameterNameValues": {
	            "shape": "S3q"
	          }
	        }
	      },
	      "output": {
	        "shape": "S3s",
	        "resultWrapper": "ResetCacheParameterGroupResult"
	      }
	    },
	    "RevokeCacheSecurityGroupIngress": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CacheSecurityGroupName",
	          "EC2SecurityGroupName",
	          "EC2SecurityGroupOwnerId"
	        ],
	        "members": {
	          "CacheSecurityGroupName": {},
	          "EC2SecurityGroupName": {},
	          "EC2SecurityGroupOwnerId": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "RevokeCacheSecurityGroupIngressResult",
	        "type": "structure",
	        "members": {
	          "CacheSecurityGroup": {
	            "shape": "S8"
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S3": {
	      "type": "list",
	      "member": {
	        "locationName": "Tag",
	        "type": "structure",
	        "members": {
	          "Key": {},
	          "Value": {}
	        }
	      }
	    },
	    "S5": {
	      "type": "structure",
	      "members": {
	        "TagList": {
	          "shape": "S3"
	        }
	      }
	    },
	    "S8": {
	      "type": "structure",
	      "members": {
	        "OwnerId": {},
	        "CacheSecurityGroupName": {},
	        "Description": {},
	        "EC2SecurityGroups": {
	          "type": "list",
	          "member": {
	            "locationName": "EC2SecurityGroup",
	            "type": "structure",
	            "members": {
	              "Status": {},
	              "EC2SecurityGroupName": {},
	              "EC2SecurityGroupOwnerId": {}
	            }
	          }
	        }
	      },
	      "wrapper": true
	    },
	    "Sd": {
	      "type": "structure",
	      "members": {
	        "SnapshotName": {},
	        "ReplicationGroupId": {},
	        "ReplicationGroupDescription": {},
	        "CacheClusterId": {},
	        "SnapshotStatus": {},
	        "SnapshotSource": {},
	        "CacheNodeType": {},
	        "Engine": {},
	        "EngineVersion": {},
	        "NumCacheNodes": {
	          "type": "integer"
	        },
	        "PreferredAvailabilityZone": {},
	        "CacheClusterCreateTime": {
	          "type": "timestamp"
	        },
	        "PreferredMaintenanceWindow": {},
	        "TopicArn": {},
	        "Port": {
	          "type": "integer"
	        },
	        "CacheParameterGroupName": {},
	        "CacheSubnetGroupName": {},
	        "VpcId": {},
	        "AutoMinorVersionUpgrade": {
	          "type": "boolean"
	        },
	        "SnapshotRetentionLimit": {
	          "type": "integer"
	        },
	        "SnapshotWindow": {},
	        "NumNodeGroups": {
	          "type": "integer"
	        },
	        "AutomaticFailover": {},
	        "NodeSnapshots": {
	          "type": "list",
	          "member": {
	            "locationName": "NodeSnapshot",
	            "type": "structure",
	            "members": {
	              "CacheClusterId": {},
	              "NodeGroupId": {},
	              "CacheNodeId": {},
	              "NodeGroupConfiguration": {
	                "shape": "Sk"
	              },
	              "CacheSize": {},
	              "CacheNodeCreateTime": {
	                "type": "timestamp"
	              },
	              "SnapshotCreateTime": {
	                "type": "timestamp"
	              }
	            },
	            "wrapper": true
	          }
	        }
	      },
	      "wrapper": true
	    },
	    "Sk": {
	      "type": "structure",
	      "members": {
	        "Slots": {},
	        "ReplicaCount": {
	          "type": "integer"
	        },
	        "PrimaryAvailabilityZone": {},
	        "ReplicaAvailabilityZones": {
	          "shape": "Sl"
	        }
	      }
	    },
	    "Sl": {
	      "type": "list",
	      "member": {
	        "locationName": "AvailabilityZone"
	      }
	    },
	    "So": {
	      "type": "list",
	      "member": {
	        "locationName": "PreferredAvailabilityZone"
	      }
	    },
	    "Sp": {
	      "type": "list",
	      "member": {
	        "locationName": "CacheSecurityGroupName"
	      }
	    },
	    "Sq": {
	      "type": "list",
	      "member": {
	        "locationName": "SecurityGroupId"
	      }
	    },
	    "Sr": {
	      "type": "list",
	      "member": {
	        "locationName": "SnapshotArn"
	      }
	    },
	    "Su": {
	      "type": "structure",
	      "members": {
	        "CacheClusterId": {},
	        "ConfigurationEndpoint": {
	          "shape": "Sv"
	        },
	        "ClientDownloadLandingPage": {},
	        "CacheNodeType": {},
	        "Engine": {},
	        "EngineVersion": {},
	        "CacheClusterStatus": {},
	        "NumCacheNodes": {
	          "type": "integer"
	        },
	        "PreferredAvailabilityZone": {},
	        "CacheClusterCreateTime": {
	          "type": "timestamp"
	        },
	        "PreferredMaintenanceWindow": {},
	        "PendingModifiedValues": {
	          "type": "structure",
	          "members": {
	            "NumCacheNodes": {
	              "type": "integer"
	            },
	            "CacheNodeIdsToRemove": {
	              "shape": "Sy"
	            },
	            "EngineVersion": {},
	            "CacheNodeType": {}
	          }
	        },
	        "NotificationConfiguration": {
	          "type": "structure",
	          "members": {
	            "TopicArn": {},
	            "TopicStatus": {}
	          }
	        },
	        "CacheSecurityGroups": {
	          "type": "list",
	          "member": {
	            "locationName": "CacheSecurityGroup",
	            "type": "structure",
	            "members": {
	              "CacheSecurityGroupName": {},
	              "Status": {}
	            }
	          }
	        },
	        "CacheParameterGroup": {
	          "type": "structure",
	          "members": {
	            "CacheParameterGroupName": {},
	            "ParameterApplyStatus": {},
	            "CacheNodeIdsToReboot": {
	              "shape": "Sy"
	            }
	          }
	        },
	        "CacheSubnetGroupName": {},
	        "CacheNodes": {
	          "type": "list",
	          "member": {
	            "locationName": "CacheNode",
	            "type": "structure",
	            "members": {
	              "CacheNodeId": {},
	              "CacheNodeStatus": {},
	              "CacheNodeCreateTime": {
	                "type": "timestamp"
	              },
	              "Endpoint": {
	                "shape": "Sv"
	              },
	              "ParameterGroupStatus": {},
	              "SourceCacheNodeId": {},
	              "CustomerAvailabilityZone": {}
	            }
	          }
	        },
	        "AutoMinorVersionUpgrade": {
	          "type": "boolean"
	        },
	        "SecurityGroups": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "members": {
	              "SecurityGroupId": {},
	              "Status": {}
	            }
	          }
	        },
	        "ReplicationGroupId": {},
	        "SnapshotRetentionLimit": {
	          "type": "integer"
	        },
	        "SnapshotWindow": {}
	      },
	      "wrapper": true
	    },
	    "Sv": {
	      "type": "structure",
	      "members": {
	        "Address": {},
	        "Port": {
	          "type": "integer"
	        }
	      }
	    },
	    "Sy": {
	      "type": "list",
	      "member": {
	        "locationName": "CacheNodeId"
	      }
	    },
	    "S19": {
	      "type": "structure",
	      "members": {
	        "CacheParameterGroupName": {},
	        "CacheParameterGroupFamily": {},
	        "Description": {}
	      },
	      "wrapper": true
	    },
	    "S1d": {
	      "type": "list",
	      "member": {
	        "locationName": "SubnetIdentifier"
	      }
	    },
	    "S1f": {
	      "type": "structure",
	      "members": {
	        "CacheSubnetGroupName": {},
	        "CacheSubnetGroupDescription": {},
	        "VpcId": {},
	        "Subnets": {
	          "type": "list",
	          "member": {
	            "locationName": "Subnet",
	            "type": "structure",
	            "members": {
	              "SubnetIdentifier": {},
	              "SubnetAvailabilityZone": {
	                "type": "structure",
	                "members": {
	                  "Name": {}
	                },
	                "wrapper": true
	              }
	            }
	          }
	        }
	      },
	      "wrapper": true
	    },
	    "S1m": {
	      "type": "structure",
	      "members": {
	        "ReplicationGroupId": {},
	        "Description": {},
	        "Status": {},
	        "PendingModifiedValues": {
	          "type": "structure",
	          "members": {
	            "PrimaryClusterId": {},
	            "AutomaticFailoverStatus": {}
	          }
	        },
	        "MemberClusters": {
	          "type": "list",
	          "member": {
	            "locationName": "ClusterId"
	          }
	        },
	        "NodeGroups": {
	          "type": "list",
	          "member": {
	            "locationName": "NodeGroup",
	            "type": "structure",
	            "members": {
	              "NodeGroupId": {},
	              "Status": {},
	              "PrimaryEndpoint": {
	                "shape": "Sv"
	              },
	              "Slots": {},
	              "NodeGroupMembers": {
	                "type": "list",
	                "member": {
	                  "locationName": "NodeGroupMember",
	                  "type": "structure",
	                  "members": {
	                    "CacheClusterId": {},
	                    "CacheNodeId": {},
	                    "ReadEndpoint": {
	                      "shape": "Sv"
	                    },
	                    "PreferredAvailabilityZone": {},
	                    "CurrentRole": {}
	                  }
	                }
	              }
	            }
	          }
	        },
	        "SnapshottingClusterId": {},
	        "AutomaticFailover": {},
	        "ConfigurationEndpoint": {
	          "shape": "Sv"
	        },
	        "SnapshotRetentionLimit": {
	          "type": "integer"
	        },
	        "SnapshotWindow": {}
	      },
	      "wrapper": true
	    },
	    "S2h": {
	      "type": "list",
	      "member": {
	        "locationName": "Parameter",
	        "type": "structure",
	        "members": {
	          "ParameterName": {},
	          "ParameterValue": {},
	          "Description": {},
	          "Source": {},
	          "DataType": {},
	          "AllowedValues": {},
	          "IsModifiable": {
	            "type": "boolean"
	          },
	          "MinimumEngineVersion": {},
	          "ChangeType": {}
	        }
	      }
	    },
	    "S2k": {
	      "type": "list",
	      "member": {
	        "locationName": "CacheNodeTypeSpecificParameter",
	        "type": "structure",
	        "members": {
	          "ParameterName": {},
	          "Description": {},
	          "Source": {},
	          "DataType": {},
	          "AllowedValues": {},
	          "IsModifiable": {
	            "type": "boolean"
	          },
	          "MinimumEngineVersion": {},
	          "CacheNodeTypeSpecificValues": {
	            "type": "list",
	            "member": {
	              "locationName": "CacheNodeTypeSpecificValue",
	              "type": "structure",
	              "members": {
	                "CacheNodeType": {},
	                "Value": {}
	              }
	            }
	          },
	          "ChangeType": {}
	        }
	      }
	    },
	    "S38": {
	      "type": "structure",
	      "members": {
	        "ReservedCacheNodeId": {},
	        "ReservedCacheNodesOfferingId": {},
	        "CacheNodeType": {},
	        "StartTime": {
	          "type": "timestamp"
	        },
	        "Duration": {
	          "type": "integer"
	        },
	        "FixedPrice": {
	          "type": "double"
	        },
	        "UsagePrice": {
	          "type": "double"
	        },
	        "CacheNodeCount": {
	          "type": "integer"
	        },
	        "ProductDescription": {},
	        "OfferingType": {},
	        "State": {},
	        "RecurringCharges": {
	          "shape": "S3a"
	        }
	      },
	      "wrapper": true
	    },
	    "S3a": {
	      "type": "list",
	      "member": {
	        "locationName": "RecurringCharge",
	        "type": "structure",
	        "members": {
	          "RecurringChargeAmount": {
	            "type": "double"
	          },
	          "RecurringChargeFrequency": {}
	        },
	        "wrapper": true
	      }
	    },
	    "S3q": {
	      "type": "list",
	      "member": {
	        "locationName": "ParameterNameValue",
	        "type": "structure",
	        "members": {
	          "ParameterName": {},
	          "ParameterValue": {}
	        }
	      }
	    },
	    "S3s": {
	      "type": "structure",
	      "members": {
	        "CacheParameterGroupName": {}
	      }
	    }
	  }
	}
	},{}],51:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "DescribeCacheClusters": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "limit_key": "MaxRecords",
	      "result_key": "CacheClusters"
	    },
	    "DescribeCacheEngineVersions": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "limit_key": "MaxRecords",
	      "result_key": "CacheEngineVersions"
	    },
	    "DescribeCacheParameterGroups": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "limit_key": "MaxRecords",
	      "result_key": "CacheParameterGroups"
	    },
	    "DescribeCacheParameters": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "limit_key": "MaxRecords",
	      "result_key": "Parameters"
	    },
	    "DescribeCacheSecurityGroups": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "limit_key": "MaxRecords",
	      "result_key": "CacheSecurityGroups"
	    },
	    "DescribeCacheSubnetGroups": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "limit_key": "MaxRecords",
	      "result_key": "CacheSubnetGroups"
	    },
	    "DescribeEngineDefaultParameters": {
	      "input_token": "Marker",
	      "output_token": "EngineDefaults.Marker",
	      "limit_key": "MaxRecords",
	      "result_key": "EngineDefaults.Parameters"
	    },
	    "DescribeEvents": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "limit_key": "MaxRecords",
	      "result_key": "Events"
	    },
	    "DescribeReservedCacheNodes": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "limit_key": "MaxRecords",
	      "result_key": "ReservedCacheNodes"
	    },
	    "DescribeReservedCacheNodesOfferings": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "limit_key": "MaxRecords",
	      "result_key": "ReservedCacheNodesOfferings"
	    },
	    "DescribeReplicationGroups": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "limit_key": "MaxRecords",
	      "result_key": "ReplicationGroups"
	    },
	    "DescribeSnapshots": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "limit_key": "MaxRecords",
	      "result_key": "Snapshots"
	    }
	  }
	}
	
	},{}],52:[function(require,module,exports){
	module.exports={
	    "version":2,
	    "waiters":{
	        "CacheClusterAvailable":{
	            "acceptors":[
	                {
	                    "argument":"CacheClusters[].CacheClusterStatus",
	                    "expected":"available",
	                    "matcher":"pathAll",
	                    "state":"success"
	                },
	                {
	                    "argument":"CacheClusters[].CacheClusterStatus",
	                    "expected":"deleted",
	                    "matcher":"pathAny",
	                    "state":"failure"
	                },
	                {
	                    "argument":"CacheClusters[].CacheClusterStatus",
	                    "expected":"deleting",
	                    "matcher":"pathAny",
	                    "state":"failure"
	                },
	                {
	                    "argument":"CacheClusters[].CacheClusterStatus",
	                    "expected":"incompatible-network",
	                    "matcher":"pathAny",
	                    "state":"failure"
	                },
	                {
	                    "argument":"CacheClusters[].CacheClusterStatus",
	                    "expected":"restore-failed",
	                    "matcher":"pathAny",
	                    "state":"failure"
	                }
	            ],
	            "delay":15,
	            "description":"Wait until ElastiCache cluster is available.",
	            "maxAttempts":40,
	            "operation":"DescribeCacheClusters"
	        },
	        "CacheClusterDeleted":{
	            "acceptors":[
	                {
	                    "argument":"CacheClusters[].CacheClusterStatus",
	                    "expected":"deleted",
	                    "matcher":"pathAll",
	                    "state":"success"
	                },
	                {
	                    "expected":"CacheClusterNotFound",
	                    "matcher":"error",
	                    "state":"success"
	                },
	                {
	                    "argument":"CacheClusters[].CacheClusterStatus",
	                    "expected":"available",
	                    "matcher":"pathAny",
	                    "state":"failure"
	                },
	                {
	                    "argument":"CacheClusters[].CacheClusterStatus",
	                    "expected":"creating",
	                    "matcher":"pathAny",
	                    "state":"failure"
	                },
	                {
	                    "argument":"CacheClusters[].CacheClusterStatus",
	                    "expected":"incompatible-network",
	                    "matcher":"pathAny",
	                    "state":"failure"
	                },
	                {
	                    "argument":"CacheClusters[].CacheClusterStatus",
	                    "expected":"modifying",
	                    "matcher":"pathAny",
	                    "state":"failure"
	                },
	                {
	                    "argument":"CacheClusters[].CacheClusterStatus",
	                    "expected":"restore-failed",
	                    "matcher":"pathAny",
	                    "state":"failure"
	                },
	                {
	                    "argument":"CacheClusters[].CacheClusterStatus",
	                    "expected":"snapshotting",
	                    "matcher":"pathAny",
	                    "state":"failure"
	                }
	            ],
	            "delay":15,
	            "description":"Wait until ElastiCache cluster is deleted.",
	            "maxAttempts":40,
	            "operation":"DescribeCacheClusters"
	        },
	        "ReplicationGroupAvailable":{
	            "acceptors":[
	                {
	                    "argument":"ReplicationGroups[].Status",
	                    "expected":"available",
	                    "matcher":"pathAll",
	                    "state":"success"
	                },
	                {
	                    "argument":"ReplicationGroups[].Status",
	                    "expected":"deleted",
	                    "matcher":"pathAny",
	                    "state":"failure"
	                }
	            ],
	            "delay":15,
	            "description":"Wait until ElastiCache replication group is available.",
	            "maxAttempts":40,
	            "operation":"DescribeReplicationGroups"
	        },
	        "ReplicationGroupDeleted":{
	            "acceptors":[
	                {
	                    "argument":"ReplicationGroups[].Status",
	                    "expected":"deleted",
	                    "matcher":"pathAll",
	                    "state":"success"
	                },
	                {
	                    "argument":"ReplicationGroups[].Status",
	                    "expected":"available",
	                    "matcher":"pathAny",
	                    "state":"failure"
	                },
	                {
	                    "expected":"ReplicationGroupNotFoundFault",
	                    "matcher":"error",
	                    "state":"success"
	                }
	            ],
	            "delay":15,
	            "description":"Wait until ElastiCache replication group is deleted.",
	            "maxAttempts":40,
	            "operation":"DescribeReplicationGroups"
	        }
	    }
	}
	
	},{}],53:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2010-12-01",
	    "endpointPrefix": "elasticbeanstalk",
	    "protocol": "query",
	    "serviceAbbreviation": "Elastic Beanstalk",
	    "serviceFullName": "AWS Elastic Beanstalk",
	    "signatureVersion": "v4",
	    "uid": "elasticbeanstalk-2010-12-01",
	    "xmlNamespace": "http://elasticbeanstalk.amazonaws.com/docs/2010-12-01/"
	  },
	  "operations": {
	    "AbortEnvironmentUpdate": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "EnvironmentId": {},
	          "EnvironmentName": {}
	        }
	      }
	    },
	    "ApplyEnvironmentManagedAction": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ActionId"
	        ],
	        "members": {
	          "EnvironmentName": {},
	          "EnvironmentId": {},
	          "ActionId": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ApplyEnvironmentManagedActionResult",
	        "type": "structure",
	        "members": {
	          "ActionId": {},
	          "ActionDescription": {},
	          "ActionType": {},
	          "Status": {}
	        }
	      }
	    },
	    "CheckDNSAvailability": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CNAMEPrefix"
	        ],
	        "members": {
	          "CNAMEPrefix": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CheckDNSAvailabilityResult",
	        "type": "structure",
	        "members": {
	          "Available": {
	            "type": "boolean"
	          },
	          "FullyQualifiedCNAME": {}
	        }
	      }
	    },
	    "ComposeEnvironments": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ApplicationName": {},
	          "GroupName": {},
	          "VersionLabels": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "shape": "Si",
	        "resultWrapper": "ComposeEnvironmentsResult"
	      }
	    },
	    "CreateApplication": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ApplicationName"
	        ],
	        "members": {
	          "ApplicationName": {},
	          "Description": {},
	          "ResourceLifecycleConfig": {
	            "shape": "S14"
	          }
	        }
	      },
	      "output": {
	        "shape": "S1a",
	        "resultWrapper": "CreateApplicationResult"
	      }
	    },
	    "CreateApplicationVersion": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ApplicationName",
	          "VersionLabel"
	        ],
	        "members": {
	          "ApplicationName": {},
	          "VersionLabel": {},
	          "Description": {},
	          "SourceBuildInformation": {
	            "shape": "S1f"
	          },
	          "SourceBundle": {
	            "shape": "S1j"
	          },
	          "BuildConfiguration": {
	            "type": "structure",
	            "required": [
	              "CodeBuildServiceRole",
	              "Image"
	            ],
	            "members": {
	              "ArtifactName": {},
	              "CodeBuildServiceRole": {},
	              "ComputeType": {},
	              "Image": {},
	              "TimeoutInMinutes": {
	                "type": "integer"
	              }
	            }
	          },
	          "AutoCreateApplication": {
	            "type": "boolean"
	          },
	          "Process": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "shape": "S1r",
	        "resultWrapper": "CreateApplicationVersionResult"
	      }
	    },
	    "CreateConfigurationTemplate": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ApplicationName",
	          "TemplateName"
	        ],
	        "members": {
	          "ApplicationName": {},
	          "TemplateName": {},
	          "SolutionStackName": {},
	          "SourceConfiguration": {
	            "type": "structure",
	            "members": {
	              "ApplicationName": {},
	              "TemplateName": {}
	            }
	          },
	          "EnvironmentId": {},
	          "Description": {},
	          "OptionSettings": {
	            "shape": "S1w"
	          }
	        }
	      },
	      "output": {
	        "shape": "S22",
	        "resultWrapper": "CreateConfigurationTemplateResult"
	      }
	    },
	    "CreateEnvironment": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ApplicationName"
	        ],
	        "members": {
	          "ApplicationName": {},
	          "EnvironmentName": {},
	          "GroupName": {},
	          "Description": {},
	          "CNAMEPrefix": {},
	          "Tier": {
	            "shape": "S10"
	          },
	          "Tags": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Key": {},
	                "Value": {}
	              }
	            }
	          },
	          "VersionLabel": {},
	          "TemplateName": {},
	          "SolutionStackName": {},
	          "OptionSettings": {
	            "shape": "S1w"
	          },
	          "OptionsToRemove": {
	            "shape": "S29"
	          }
	        }
	      },
	      "output": {
	        "shape": "Sk",
	        "resultWrapper": "CreateEnvironmentResult"
	      }
	    },
	    "CreateStorageLocation": {
	      "output": {
	        "resultWrapper": "CreateStorageLocationResult",
	        "type": "structure",
	        "members": {
	          "S3Bucket": {}
	        }
	      }
	    },
	    "DeleteApplication": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ApplicationName"
	        ],
	        "members": {
	          "ApplicationName": {},
	          "TerminateEnvByForce": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "DeleteApplicationVersion": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ApplicationName",
	          "VersionLabel"
	        ],
	        "members": {
	          "ApplicationName": {},
	          "VersionLabel": {},
	          "DeleteSourceBundle": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "DeleteConfigurationTemplate": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ApplicationName",
	          "TemplateName"
	        ],
	        "members": {
	          "ApplicationName": {},
	          "TemplateName": {}
	        }
	      }
	    },
	    "DeleteEnvironmentConfiguration": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ApplicationName",
	          "EnvironmentName"
	        ],
	        "members": {
	          "ApplicationName": {},
	          "EnvironmentName": {}
	        }
	      }
	    },
	    "DescribeApplicationVersions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ApplicationName": {},
	          "VersionLabels": {
	            "shape": "S1c"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeApplicationVersionsResult",
	        "type": "structure",
	        "members": {
	          "ApplicationVersions": {
	            "type": "list",
	            "member": {
	              "shape": "S1s"
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeApplications": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ApplicationNames": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeApplicationsResult",
	        "type": "structure",
	        "members": {
	          "Applications": {
	            "type": "list",
	            "member": {
	              "shape": "S1b"
	            }
	          }
	        }
	      }
	    },
	    "DescribeConfigurationOptions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ApplicationName": {},
	          "TemplateName": {},
	          "EnvironmentName": {},
	          "SolutionStackName": {},
	          "Options": {
	            "shape": "S29"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeConfigurationOptionsResult",
	        "type": "structure",
	        "members": {
	          "SolutionStackName": {},
	          "Options": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Namespace": {},
	                "Name": {},
	                "DefaultValue": {},
	                "ChangeSeverity": {},
	                "UserDefined": {
	                  "type": "boolean"
	                },
	                "ValueType": {},
	                "ValueOptions": {
	                  "type": "list",
	                  "member": {}
	                },
	                "MinValue": {
	                  "type": "integer"
	                },
	                "MaxValue": {
	                  "type": "integer"
	                },
	                "MaxLength": {
	                  "type": "integer"
	                },
	                "Regex": {
	                  "type": "structure",
	                  "members": {
	                    "Pattern": {},
	                    "Label": {}
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeConfigurationSettings": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ApplicationName"
	        ],
	        "members": {
	          "ApplicationName": {},
	          "TemplateName": {},
	          "EnvironmentName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeConfigurationSettingsResult",
	        "type": "structure",
	        "members": {
	          "ConfigurationSettings": {
	            "type": "list",
	            "member": {
	              "shape": "S22"
	            }
	          }
	        }
	      }
	    },
	    "DescribeEnvironmentHealth": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "EnvironmentName": {},
	          "EnvironmentId": {},
	          "AttributeNames": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeEnvironmentHealthResult",
	        "type": "structure",
	        "members": {
	          "EnvironmentName": {},
	          "HealthStatus": {},
	          "Status": {},
	          "Color": {},
	          "Causes": {
	            "shape": "S3e"
	          },
	          "ApplicationMetrics": {
	            "shape": "S3g"
	          },
	          "InstancesHealth": {
	            "type": "structure",
	            "members": {
	              "NoData": {
	                "type": "integer"
	              },
	              "Unknown": {
	                "type": "integer"
	              },
	              "Pending": {
	                "type": "integer"
	              },
	              "Ok": {
	                "type": "integer"
	              },
	              "Info": {
	                "type": "integer"
	              },
	              "Warning": {
	                "type": "integer"
	              },
	              "Degraded": {
	                "type": "integer"
	              },
	              "Severe": {
	                "type": "integer"
	              }
	            }
	          },
	          "RefreshedAt": {
	            "type": "timestamp"
	          }
	        }
	      }
	    },
	    "DescribeEnvironmentManagedActionHistory": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "EnvironmentId": {},
	          "EnvironmentName": {},
	          "NextToken": {},
	          "MaxItems": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeEnvironmentManagedActionHistoryResult",
	        "type": "structure",
	        "members": {
	          "ManagedActionHistoryItems": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "ActionId": {},
	                "ActionType": {},
	                "ActionDescription": {},
	                "FailureType": {},
	                "Status": {},
	                "FailureDescription": {},
	                "ExecutedTime": {
	                  "type": "timestamp"
	                },
	                "FinishedTime": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeEnvironmentManagedActions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "EnvironmentName": {},
	          "EnvironmentId": {},
	          "Status": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeEnvironmentManagedActionsResult",
	        "type": "structure",
	        "members": {
	          "ManagedActions": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "ActionId": {},
	                "ActionDescription": {},
	                "ActionType": {},
	                "Status": {},
	                "WindowStartTime": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeEnvironmentResources": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "EnvironmentId": {},
	          "EnvironmentName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeEnvironmentResourcesResult",
	        "type": "structure",
	        "members": {
	          "EnvironmentResources": {
	            "type": "structure",
	            "members": {
	              "EnvironmentName": {},
	              "AutoScalingGroups": {
	                "type": "list",
	                "member": {
	                  "type": "structure",
	                  "members": {
	                    "Name": {}
	                  }
	                }
	              },
	              "Instances": {
	                "type": "list",
	                "member": {
	                  "type": "structure",
	                  "members": {
	                    "Id": {}
	                  }
	                }
	              },
	              "LaunchConfigurations": {
	                "type": "list",
	                "member": {
	                  "type": "structure",
	                  "members": {
	                    "Name": {}
	                  }
	                }
	              },
	              "LoadBalancers": {
	                "type": "list",
	                "member": {
	                  "type": "structure",
	                  "members": {
	                    "Name": {}
	                  }
	                }
	              },
	              "Triggers": {
	                "type": "list",
	                "member": {
	                  "type": "structure",
	                  "members": {
	                    "Name": {}
	                  }
	                }
	              },
	              "Queues": {
	                "type": "list",
	                "member": {
	                  "type": "structure",
	                  "members": {
	                    "Name": {},
	                    "URL": {}
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeEnvironments": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ApplicationName": {},
	          "VersionLabel": {},
	          "EnvironmentIds": {
	            "type": "list",
	            "member": {}
	          },
	          "EnvironmentNames": {
	            "type": "list",
	            "member": {}
	          },
	          "IncludeDeleted": {
	            "type": "boolean"
	          },
	          "IncludedDeletedBackTo": {
	            "type": "timestamp"
	          }
	        }
	      },
	      "output": {
	        "shape": "Si",
	        "resultWrapper": "DescribeEnvironmentsResult"
	      }
	    },
	    "DescribeEvents": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ApplicationName": {},
	          "VersionLabel": {},
	          "TemplateName": {},
	          "EnvironmentId": {},
	          "EnvironmentName": {},
	          "RequestId": {},
	          "Severity": {},
	          "StartTime": {
	            "type": "timestamp"
	          },
	          "EndTime": {
	            "type": "timestamp"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeEventsResult",
	        "type": "structure",
	        "members": {
	          "Events": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "EventDate": {
	                  "type": "timestamp"
	                },
	                "Message": {},
	                "ApplicationName": {},
	                "VersionLabel": {},
	                "TemplateName": {},
	                "EnvironmentName": {},
	                "RequestId": {},
	                "Severity": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeInstancesHealth": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "EnvironmentName": {},
	          "EnvironmentId": {},
	          "AttributeNames": {
	            "type": "list",
	            "member": {}
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeInstancesHealthResult",
	        "type": "structure",
	        "members": {
	          "InstanceHealthList": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "InstanceId": {},
	                "HealthStatus": {},
	                "Color": {},
	                "Causes": {
	                  "shape": "S3e"
	                },
	                "LaunchedAt": {
	                  "type": "timestamp"
	                },
	                "ApplicationMetrics": {
	                  "shape": "S3g"
	                },
	                "System": {
	                  "type": "structure",
	                  "members": {
	                    "CPUUtilization": {
	                      "type": "structure",
	                      "members": {
	                        "User": {
	                          "type": "double"
	                        },
	                        "Nice": {
	                          "type": "double"
	                        },
	                        "System": {
	                          "type": "double"
	                        },
	                        "Idle": {
	                          "type": "double"
	                        },
	                        "IOWait": {
	                          "type": "double"
	                        },
	                        "IRQ": {
	                          "type": "double"
	                        },
	                        "SoftIRQ": {
	                          "type": "double"
	                        }
	                      }
	                    },
	                    "LoadAverage": {
	                      "type": "list",
	                      "member": {
	                        "type": "double"
	                      }
	                    }
	                  }
	                },
	                "Deployment": {
	                  "type": "structure",
	                  "members": {
	                    "VersionLabel": {},
	                    "DeploymentId": {
	                      "type": "long"
	                    },
	                    "Status": {},
	                    "DeploymentTime": {
	                      "type": "timestamp"
	                    }
	                  }
	                },
	                "AvailabilityZone": {},
	                "InstanceType": {}
	              }
	            }
	          },
	          "RefreshedAt": {
	            "type": "timestamp"
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListAvailableSolutionStacks": {
	      "output": {
	        "resultWrapper": "ListAvailableSolutionStacksResult",
	        "type": "structure",
	        "members": {
	          "SolutionStacks": {
	            "type": "list",
	            "member": {}
	          },
	          "SolutionStackDetails": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "SolutionStackName": {},
	                "PermittedFileTypes": {
	                  "type": "list",
	                  "member": {}
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "RebuildEnvironment": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "EnvironmentId": {},
	          "EnvironmentName": {}
	        }
	      }
	    },
	    "RequestEnvironmentInfo": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InfoType"
	        ],
	        "members": {
	          "EnvironmentId": {},
	          "EnvironmentName": {},
	          "InfoType": {}
	        }
	      }
	    },
	    "RestartAppServer": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "EnvironmentId": {},
	          "EnvironmentName": {}
	        }
	      }
	    },
	    "RetrieveEnvironmentInfo": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InfoType"
	        ],
	        "members": {
	          "EnvironmentId": {},
	          "EnvironmentName": {},
	          "InfoType": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "RetrieveEnvironmentInfoResult",
	        "type": "structure",
	        "members": {
	          "EnvironmentInfo": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "InfoType": {},
	                "Ec2InstanceId": {},
	                "SampleTimestamp": {
	                  "type": "timestamp"
	                },
	                "Message": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "SwapEnvironmentCNAMEs": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "SourceEnvironmentId": {},
	          "SourceEnvironmentName": {},
	          "DestinationEnvironmentId": {},
	          "DestinationEnvironmentName": {}
	        }
	      }
	    },
	    "TerminateEnvironment": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "EnvironmentId": {},
	          "EnvironmentName": {},
	          "TerminateResources": {
	            "type": "boolean"
	          },
	          "ForceTerminate": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "shape": "Sk",
	        "resultWrapper": "TerminateEnvironmentResult"
	      }
	    },
	    "UpdateApplication": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ApplicationName"
	        ],
	        "members": {
	          "ApplicationName": {},
	          "Description": {}
	        }
	      },
	      "output": {
	        "shape": "S1a",
	        "resultWrapper": "UpdateApplicationResult"
	      }
	    },
	    "UpdateApplicationResourceLifecycle": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ApplicationName",
	          "ResourceLifecycleConfig"
	        ],
	        "members": {
	          "ApplicationName": {},
	          "ResourceLifecycleConfig": {
	            "shape": "S14"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "UpdateApplicationResourceLifecycleResult",
	        "type": "structure",
	        "members": {
	          "ApplicationName": {},
	          "ResourceLifecycleConfig": {
	            "shape": "S14"
	          }
	        }
	      }
	    },
	    "UpdateApplicationVersion": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ApplicationName",
	          "VersionLabel"
	        ],
	        "members": {
	          "ApplicationName": {},
	          "VersionLabel": {},
	          "Description": {}
	        }
	      },
	      "output": {
	        "shape": "S1r",
	        "resultWrapper": "UpdateApplicationVersionResult"
	      }
	    },
	    "UpdateConfigurationTemplate": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ApplicationName",
	          "TemplateName"
	        ],
	        "members": {
	          "ApplicationName": {},
	          "TemplateName": {},
	          "Description": {},
	          "OptionSettings": {
	            "shape": "S1w"
	          },
	          "OptionsToRemove": {
	            "shape": "S29"
	          }
	        }
	      },
	      "output": {
	        "shape": "S22",
	        "resultWrapper": "UpdateConfigurationTemplateResult"
	      }
	    },
	    "UpdateEnvironment": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ApplicationName": {},
	          "EnvironmentId": {},
	          "EnvironmentName": {},
	          "GroupName": {},
	          "Description": {},
	          "Tier": {
	            "shape": "S10"
	          },
	          "VersionLabel": {},
	          "TemplateName": {},
	          "SolutionStackName": {},
	          "OptionSettings": {
	            "shape": "S1w"
	          },
	          "OptionsToRemove": {
	            "shape": "S29"
	          }
	        }
	      },
	      "output": {
	        "shape": "Sk",
	        "resultWrapper": "UpdateEnvironmentResult"
	      }
	    },
	    "ValidateConfigurationSettings": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ApplicationName",
	          "OptionSettings"
	        ],
	        "members": {
	          "ApplicationName": {},
	          "TemplateName": {},
	          "EnvironmentName": {},
	          "OptionSettings": {
	            "shape": "S1w"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ValidateConfigurationSettingsResult",
	        "type": "structure",
	        "members": {
	          "Messages": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Message": {},
	                "Severity": {},
	                "Namespace": {},
	                "OptionName": {}
	              }
	            }
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "Si": {
	      "type": "structure",
	      "members": {
	        "Environments": {
	          "type": "list",
	          "member": {
	            "shape": "Sk"
	          }
	        }
	      }
	    },
	    "Sk": {
	      "type": "structure",
	      "members": {
	        "EnvironmentName": {},
	        "EnvironmentId": {},
	        "ApplicationName": {},
	        "VersionLabel": {},
	        "SolutionStackName": {},
	        "TemplateName": {},
	        "Description": {},
	        "EndpointURL": {},
	        "CNAME": {},
	        "DateCreated": {
	          "type": "timestamp"
	        },
	        "DateUpdated": {
	          "type": "timestamp"
	        },
	        "Status": {},
	        "AbortableOperationInProgress": {
	          "type": "boolean"
	        },
	        "Health": {},
	        "HealthStatus": {},
	        "Resources": {
	          "type": "structure",
	          "members": {
	            "LoadBalancer": {
	              "type": "structure",
	              "members": {
	                "LoadBalancerName": {},
	                "Domain": {},
	                "Listeners": {
	                  "type": "list",
	                  "member": {
	                    "type": "structure",
	                    "members": {
	                      "Protocol": {},
	                      "Port": {
	                        "type": "integer"
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	        },
	        "Tier": {
	          "shape": "S10"
	        },
	        "EnvironmentLinks": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "members": {
	              "LinkName": {},
	              "EnvironmentName": {}
	            }
	          }
	        }
	      }
	    },
	    "S10": {
	      "type": "structure",
	      "members": {
	        "Name": {},
	        "Type": {},
	        "Version": {}
	      }
	    },
	    "S14": {
	      "type": "structure",
	      "members": {
	        "ServiceRole": {},
	        "VersionLifecycleConfig": {
	          "type": "structure",
	          "members": {
	            "MaxCountRule": {
	              "type": "structure",
	              "required": [
	                "Enabled"
	              ],
	              "members": {
	                "Enabled": {
	                  "type": "boolean"
	                },
	                "MaxCount": {
	                  "type": "integer"
	                },
	                "DeleteSourceFromS3": {
	                  "type": "boolean"
	                }
	              }
	            },
	            "MaxAgeRule": {
	              "type": "structure",
	              "required": [
	                "Enabled"
	              ],
	              "members": {
	                "Enabled": {
	                  "type": "boolean"
	                },
	                "MaxAgeInDays": {
	                  "type": "integer"
	                },
	                "DeleteSourceFromS3": {
	                  "type": "boolean"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "S1a": {
	      "type": "structure",
	      "members": {
	        "Application": {
	          "shape": "S1b"
	        }
	      }
	    },
	    "S1b": {
	      "type": "structure",
	      "members": {
	        "ApplicationName": {},
	        "Description": {},
	        "DateCreated": {
	          "type": "timestamp"
	        },
	        "DateUpdated": {
	          "type": "timestamp"
	        },
	        "Versions": {
	          "shape": "S1c"
	        },
	        "ConfigurationTemplates": {
	          "type": "list",
	          "member": {}
	        },
	        "ResourceLifecycleConfig": {
	          "shape": "S14"
	        }
	      }
	    },
	    "S1c": {
	      "type": "list",
	      "member": {}
	    },
	    "S1f": {
	      "type": "structure",
	      "required": [
	        "SourceType",
	        "SourceRepository",
	        "SourceLocation"
	      ],
	      "members": {
	        "SourceType": {},
	        "SourceRepository": {},
	        "SourceLocation": {}
	      }
	    },
	    "S1j": {
	      "type": "structure",
	      "members": {
	        "S3Bucket": {},
	        "S3Key": {}
	      }
	    },
	    "S1r": {
	      "type": "structure",
	      "members": {
	        "ApplicationVersion": {
	          "shape": "S1s"
	        }
	      }
	    },
	    "S1s": {
	      "type": "structure",
	      "members": {
	        "ApplicationName": {},
	        "Description": {},
	        "VersionLabel": {},
	        "SourceBuildInformation": {
	          "shape": "S1f"
	        },
	        "BuildArn": {},
	        "SourceBundle": {
	          "shape": "S1j"
	        },
	        "DateCreated": {
	          "type": "timestamp"
	        },
	        "DateUpdated": {
	          "type": "timestamp"
	        },
	        "Status": {}
	      }
	    },
	    "S1w": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "ResourceName": {},
	          "Namespace": {},
	          "OptionName": {},
	          "Value": {}
	        }
	      }
	    },
	    "S22": {
	      "type": "structure",
	      "members": {
	        "SolutionStackName": {},
	        "ApplicationName": {},
	        "TemplateName": {},
	        "Description": {},
	        "EnvironmentName": {},
	        "DeploymentStatus": {},
	        "DateCreated": {
	          "type": "timestamp"
	        },
	        "DateUpdated": {
	          "type": "timestamp"
	        },
	        "OptionSettings": {
	          "shape": "S1w"
	        }
	      }
	    },
	    "S29": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "ResourceName": {},
	          "Namespace": {},
	          "OptionName": {}
	        }
	      }
	    },
	    "S3e": {
	      "type": "list",
	      "member": {}
	    },
	    "S3g": {
	      "type": "structure",
	      "members": {
	        "Duration": {
	          "type": "integer"
	        },
	        "RequestCount": {
	          "type": "integer"
	        },
	        "StatusCodes": {
	          "type": "structure",
	          "members": {
	            "Status2xx": {
	              "type": "integer"
	            },
	            "Status3xx": {
	              "type": "integer"
	            },
	            "Status4xx": {
	              "type": "integer"
	            },
	            "Status5xx": {
	              "type": "integer"
	            }
	          }
	        },
	        "Latency": {
	          "type": "structure",
	          "members": {
	            "P999": {
	              "type": "double"
	            },
	            "P99": {
	              "type": "double"
	            },
	            "P95": {
	              "type": "double"
	            },
	            "P90": {
	              "type": "double"
	            },
	            "P85": {
	              "type": "double"
	            },
	            "P75": {
	              "type": "double"
	            },
	            "P50": {
	              "type": "double"
	            },
	            "P10": {
	              "type": "double"
	            }
	          }
	        }
	      }
	    }
	  }
	}
	},{}],54:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "DescribeApplicationVersions": {
	      "result_key": "ApplicationVersions"
	    },
	    "DescribeApplications": {
	      "result_key": "Applications"
	    },
	    "DescribeConfigurationOptions": {
	      "result_key": "Options"
	    },
	    "DescribeEnvironments": {
	      "result_key": "Environments"
	    },
	    "DescribeEvents": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "limit_key": "MaxRecords",
	      "result_key": "Events"
	    },
	    "ListAvailableSolutionStacks": {
	      "result_key": "SolutionStacks"
	    }
	  }
	}
	
	},{}],55:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "uid": "elasticloadbalancing-2012-06-01",
	    "apiVersion": "2012-06-01",
	    "endpointPrefix": "elasticloadbalancing",
	    "protocol": "query",
	    "serviceFullName": "Elastic Load Balancing",
	    "signatureVersion": "v4",
	    "xmlNamespace": "http://elasticloadbalancing.amazonaws.com/doc/2012-06-01/"
	  },
	  "operations": {
	    "AddTags": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerNames",
	          "Tags"
	        ],
	        "members": {
	          "LoadBalancerNames": {
	            "shape": "S2"
	          },
	          "Tags": {
	            "shape": "S4"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "AddTagsResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "ApplySecurityGroupsToLoadBalancer": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerName",
	          "SecurityGroups"
	        ],
	        "members": {
	          "LoadBalancerName": {},
	          "SecurityGroups": {
	            "shape": "Sa"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ApplySecurityGroupsToLoadBalancerResult",
	        "type": "structure",
	        "members": {
	          "SecurityGroups": {
	            "shape": "Sa"
	          }
	        }
	      }
	    },
	    "AttachLoadBalancerToSubnets": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerName",
	          "Subnets"
	        ],
	        "members": {
	          "LoadBalancerName": {},
	          "Subnets": {
	            "shape": "Se"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "AttachLoadBalancerToSubnetsResult",
	        "type": "structure",
	        "members": {
	          "Subnets": {
	            "shape": "Se"
	          }
	        }
	      }
	    },
	    "ConfigureHealthCheck": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerName",
	          "HealthCheck"
	        ],
	        "members": {
	          "LoadBalancerName": {},
	          "HealthCheck": {
	            "shape": "Si"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ConfigureHealthCheckResult",
	        "type": "structure",
	        "members": {
	          "HealthCheck": {
	            "shape": "Si"
	          }
	        }
	      }
	    },
	    "CreateAppCookieStickinessPolicy": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerName",
	          "PolicyName",
	          "CookieName"
	        ],
	        "members": {
	          "LoadBalancerName": {},
	          "PolicyName": {},
	          "CookieName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateAppCookieStickinessPolicyResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "CreateLBCookieStickinessPolicy": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerName",
	          "PolicyName"
	        ],
	        "members": {
	          "LoadBalancerName": {},
	          "PolicyName": {},
	          "CookieExpirationPeriod": {
	            "type": "long"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateLBCookieStickinessPolicyResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "CreateLoadBalancer": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerName",
	          "Listeners"
	        ],
	        "members": {
	          "LoadBalancerName": {},
	          "Listeners": {
	            "shape": "Sx"
	          },
	          "AvailabilityZones": {
	            "shape": "S13"
	          },
	          "Subnets": {
	            "shape": "Se"
	          },
	          "SecurityGroups": {
	            "shape": "Sa"
	          },
	          "Scheme": {},
	          "Tags": {
	            "shape": "S4"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateLoadBalancerResult",
	        "type": "structure",
	        "members": {
	          "DNSName": {}
	        }
	      }
	    },
	    "CreateLoadBalancerListeners": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerName",
	          "Listeners"
	        ],
	        "members": {
	          "LoadBalancerName": {},
	          "Listeners": {
	            "shape": "Sx"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateLoadBalancerListenersResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "CreateLoadBalancerPolicy": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerName",
	          "PolicyName",
	          "PolicyTypeName"
	        ],
	        "members": {
	          "LoadBalancerName": {},
	          "PolicyName": {},
	          "PolicyTypeName": {},
	          "PolicyAttributes": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "AttributeName": {},
	                "AttributeValue": {}
	              }
	            }
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateLoadBalancerPolicyResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteLoadBalancer": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerName"
	        ],
	        "members": {
	          "LoadBalancerName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteLoadBalancerResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteLoadBalancerListeners": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerName",
	          "LoadBalancerPorts"
	        ],
	        "members": {
	          "LoadBalancerName": {},
	          "LoadBalancerPorts": {
	            "type": "list",
	            "member": {
	              "type": "integer"
	            }
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteLoadBalancerListenersResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteLoadBalancerPolicy": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerName",
	          "PolicyName"
	        ],
	        "members": {
	          "LoadBalancerName": {},
	          "PolicyName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteLoadBalancerPolicyResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeregisterInstancesFromLoadBalancer": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerName",
	          "Instances"
	        ],
	        "members": {
	          "LoadBalancerName": {},
	          "Instances": {
	            "shape": "S1p"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DeregisterInstancesFromLoadBalancerResult",
	        "type": "structure",
	        "members": {
	          "Instances": {
	            "shape": "S1p"
	          }
	        }
	      }
	    },
	    "DescribeInstanceHealth": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerName"
	        ],
	        "members": {
	          "LoadBalancerName": {},
	          "Instances": {
	            "shape": "S1p"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeInstanceHealthResult",
	        "type": "structure",
	        "members": {
	          "InstanceStates": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "InstanceId": {},
	                "State": {},
	                "ReasonCode": {},
	                "Description": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeLoadBalancerAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerName"
	        ],
	        "members": {
	          "LoadBalancerName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeLoadBalancerAttributesResult",
	        "type": "structure",
	        "members": {
	          "LoadBalancerAttributes": {
	            "shape": "S22"
	          }
	        }
	      }
	    },
	    "DescribeLoadBalancerPolicies": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "LoadBalancerName": {},
	          "PolicyNames": {
	            "shape": "S2k"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeLoadBalancerPoliciesResult",
	        "type": "structure",
	        "members": {
	          "PolicyDescriptions": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "PolicyName": {},
	                "PolicyTypeName": {},
	                "PolicyAttributeDescriptions": {
	                  "type": "list",
	                  "member": {
	                    "type": "structure",
	                    "members": {
	                      "AttributeName": {},
	                      "AttributeValue": {}
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeLoadBalancerPolicyTypes": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "PolicyTypeNames": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeLoadBalancerPolicyTypesResult",
	        "type": "structure",
	        "members": {
	          "PolicyTypeDescriptions": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "PolicyTypeName": {},
	                "Description": {},
	                "PolicyAttributeTypeDescriptions": {
	                  "type": "list",
	                  "member": {
	                    "type": "structure",
	                    "members": {
	                      "AttributeName": {},
	                      "AttributeType": {},
	                      "Description": {},
	                      "DefaultValue": {},
	                      "Cardinality": {}
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeLoadBalancers": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "LoadBalancerNames": {
	            "shape": "S2"
	          },
	          "Marker": {},
	          "PageSize": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeLoadBalancersResult",
	        "type": "structure",
	        "members": {
	          "LoadBalancerDescriptions": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "LoadBalancerName": {},
	                "DNSName": {},
	                "CanonicalHostedZoneName": {},
	                "CanonicalHostedZoneNameID": {},
	                "ListenerDescriptions": {
	                  "type": "list",
	                  "member": {
	                    "type": "structure",
	                    "members": {
	                      "Listener": {
	                        "shape": "Sy"
	                      },
	                      "PolicyNames": {
	                        "shape": "S2k"
	                      }
	                    }
	                  }
	                },
	                "Policies": {
	                  "type": "structure",
	                  "members": {
	                    "AppCookieStickinessPolicies": {
	                      "type": "list",
	                      "member": {
	                        "type": "structure",
	                        "members": {
	                          "PolicyName": {},
	                          "CookieName": {}
	                        }
	                      }
	                    },
	                    "LBCookieStickinessPolicies": {
	                      "type": "list",
	                      "member": {
	                        "type": "structure",
	                        "members": {
	                          "PolicyName": {},
	                          "CookieExpirationPeriod": {
	                            "type": "long"
	                          }
	                        }
	                      }
	                    },
	                    "OtherPolicies": {
	                      "shape": "S2k"
	                    }
	                  }
	                },
	                "BackendServerDescriptions": {
	                  "type": "list",
	                  "member": {
	                    "type": "structure",
	                    "members": {
	                      "InstancePort": {
	                        "type": "integer"
	                      },
	                      "PolicyNames": {
	                        "shape": "S2k"
	                      }
	                    }
	                  }
	                },
	                "AvailabilityZones": {
	                  "shape": "S13"
	                },
	                "Subnets": {
	                  "shape": "Se"
	                },
	                "VPCId": {},
	                "Instances": {
	                  "shape": "S1p"
	                },
	                "HealthCheck": {
	                  "shape": "Si"
	                },
	                "SourceSecurityGroup": {
	                  "type": "structure",
	                  "members": {
	                    "OwnerAlias": {},
	                    "GroupName": {}
	                  }
	                },
	                "SecurityGroups": {
	                  "shape": "Sa"
	                },
	                "CreatedTime": {
	                  "type": "timestamp"
	                },
	                "Scheme": {}
	              }
	            }
	          },
	          "NextMarker": {}
	        }
	      }
	    },
	    "DescribeTags": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerNames"
	        ],
	        "members": {
	          "LoadBalancerNames": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeTagsResult",
	        "type": "structure",
	        "members": {
	          "TagDescriptions": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "LoadBalancerName": {},
	                "Tags": {
	                  "shape": "S4"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DetachLoadBalancerFromSubnets": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerName",
	          "Subnets"
	        ],
	        "members": {
	          "LoadBalancerName": {},
	          "Subnets": {
	            "shape": "Se"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DetachLoadBalancerFromSubnetsResult",
	        "type": "structure",
	        "members": {
	          "Subnets": {
	            "shape": "Se"
	          }
	        }
	      }
	    },
	    "DisableAvailabilityZonesForLoadBalancer": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerName",
	          "AvailabilityZones"
	        ],
	        "members": {
	          "LoadBalancerName": {},
	          "AvailabilityZones": {
	            "shape": "S13"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DisableAvailabilityZonesForLoadBalancerResult",
	        "type": "structure",
	        "members": {
	          "AvailabilityZones": {
	            "shape": "S13"
	          }
	        }
	      }
	    },
	    "EnableAvailabilityZonesForLoadBalancer": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerName",
	          "AvailabilityZones"
	        ],
	        "members": {
	          "LoadBalancerName": {},
	          "AvailabilityZones": {
	            "shape": "S13"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "EnableAvailabilityZonesForLoadBalancerResult",
	        "type": "structure",
	        "members": {
	          "AvailabilityZones": {
	            "shape": "S13"
	          }
	        }
	      }
	    },
	    "ModifyLoadBalancerAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerName",
	          "LoadBalancerAttributes"
	        ],
	        "members": {
	          "LoadBalancerName": {},
	          "LoadBalancerAttributes": {
	            "shape": "S22"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyLoadBalancerAttributesResult",
	        "type": "structure",
	        "members": {
	          "LoadBalancerName": {},
	          "LoadBalancerAttributes": {
	            "shape": "S22"
	          }
	        }
	      }
	    },
	    "RegisterInstancesWithLoadBalancer": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerName",
	          "Instances"
	        ],
	        "members": {
	          "LoadBalancerName": {},
	          "Instances": {
	            "shape": "S1p"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "RegisterInstancesWithLoadBalancerResult",
	        "type": "structure",
	        "members": {
	          "Instances": {
	            "shape": "S1p"
	          }
	        }
	      }
	    },
	    "RemoveTags": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerNames",
	          "Tags"
	        ],
	        "members": {
	          "LoadBalancerNames": {
	            "shape": "S2"
	          },
	          "Tags": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Key": {}
	              }
	            }
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "RemoveTagsResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "SetLoadBalancerListenerSSLCertificate": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerName",
	          "LoadBalancerPort",
	          "SSLCertificateId"
	        ],
	        "members": {
	          "LoadBalancerName": {},
	          "LoadBalancerPort": {
	            "type": "integer"
	          },
	          "SSLCertificateId": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "SetLoadBalancerListenerSSLCertificateResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "SetLoadBalancerPoliciesForBackendServer": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerName",
	          "InstancePort",
	          "PolicyNames"
	        ],
	        "members": {
	          "LoadBalancerName": {},
	          "InstancePort": {
	            "type": "integer"
	          },
	          "PolicyNames": {
	            "shape": "S2k"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "SetLoadBalancerPoliciesForBackendServerResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "SetLoadBalancerPoliciesOfListener": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerName",
	          "LoadBalancerPort",
	          "PolicyNames"
	        ],
	        "members": {
	          "LoadBalancerName": {},
	          "LoadBalancerPort": {
	            "type": "integer"
	          },
	          "PolicyNames": {
	            "shape": "S2k"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "SetLoadBalancerPoliciesOfListenerResult",
	        "type": "structure",
	        "members": {}
	      }
	    }
	  },
	  "shapes": {
	    "S2": {
	      "type": "list",
	      "member": {}
	    },
	    "S4": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "Key"
	        ],
	        "members": {
	          "Key": {},
	          "Value": {}
	        }
	      }
	    },
	    "Sa": {
	      "type": "list",
	      "member": {}
	    },
	    "Se": {
	      "type": "list",
	      "member": {}
	    },
	    "Si": {
	      "type": "structure",
	      "required": [
	        "Target",
	        "Interval",
	        "Timeout",
	        "UnhealthyThreshold",
	        "HealthyThreshold"
	      ],
	      "members": {
	        "Target": {},
	        "Interval": {
	          "type": "integer"
	        },
	        "Timeout": {
	          "type": "integer"
	        },
	        "UnhealthyThreshold": {
	          "type": "integer"
	        },
	        "HealthyThreshold": {
	          "type": "integer"
	        }
	      }
	    },
	    "Sx": {
	      "type": "list",
	      "member": {
	        "shape": "Sy"
	      }
	    },
	    "Sy": {
	      "type": "structure",
	      "required": [
	        "Protocol",
	        "LoadBalancerPort",
	        "InstancePort"
	      ],
	      "members": {
	        "Protocol": {},
	        "LoadBalancerPort": {
	          "type": "integer"
	        },
	        "InstanceProtocol": {},
	        "InstancePort": {
	          "type": "integer"
	        },
	        "SSLCertificateId": {}
	      }
	    },
	    "S13": {
	      "type": "list",
	      "member": {}
	    },
	    "S1p": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "InstanceId": {}
	        }
	      }
	    },
	    "S22": {
	      "type": "structure",
	      "members": {
	        "CrossZoneLoadBalancing": {
	          "type": "structure",
	          "required": [
	            "Enabled"
	          ],
	          "members": {
	            "Enabled": {
	              "type": "boolean"
	            }
	          }
	        },
	        "AccessLog": {
	          "type": "structure",
	          "required": [
	            "Enabled"
	          ],
	          "members": {
	            "Enabled": {
	              "type": "boolean"
	            },
	            "S3BucketName": {},
	            "EmitInterval": {
	              "type": "integer"
	            },
	            "S3BucketPrefix": {}
	          }
	        },
	        "ConnectionDraining": {
	          "type": "structure",
	          "required": [
	            "Enabled"
	          ],
	          "members": {
	            "Enabled": {
	              "type": "boolean"
	            },
	            "Timeout": {
	              "type": "integer"
	            }
	          }
	        },
	        "ConnectionSettings": {
	          "type": "structure",
	          "required": [
	            "IdleTimeout"
	          ],
	          "members": {
	            "IdleTimeout": {
	              "type": "integer"
	            }
	          }
	        },
	        "AdditionalAttributes": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "members": {
	              "Key": {},
	              "Value": {}
	            }
	          }
	        }
	      }
	    },
	    "S2k": {
	      "type": "list",
	      "member": {}
	    }
	  }
	}
	},{}],56:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "DescribeInstanceHealth": {
	      "result_key": "InstanceStates"
	    },
	    "DescribeLoadBalancerPolicies": {
	      "result_key": "PolicyDescriptions"
	    },
	    "DescribeLoadBalancerPolicyTypes": {
	      "result_key": "PolicyTypeDescriptions"
	    },
	    "DescribeLoadBalancers": {
	      "input_token": "Marker",
	      "output_token": "NextMarker",
	      "result_key": "LoadBalancerDescriptions"
	    }
	  }
	}
	
	},{}],57:[function(require,module,exports){
	module.exports={
	    "version":2,
	    "waiters":{
	        "InstanceDeregistered": {
	          "delay": 15,
	          "operation": "DescribeInstanceHealth",
	          "maxAttempts": 40,
	          "acceptors": [
	            {
	              "expected": "OutOfService",
	              "matcher": "pathAll",
	              "state": "success",
	              "argument": "InstanceStates[].State"
	            },
	            {
	              "matcher": "error",
	              "expected": "InvalidInstance",
	              "state": "success"
	            }
	          ]
	        },
	        "AnyInstanceInService":{
	            "acceptors":[
	                {
	                    "argument":"InstanceStates[].State",
	                    "expected":"InService",
	                    "matcher":"pathAny",
	                    "state":"success"
	                }
	            ],
	            "delay":15,
	            "maxAttempts":40,
	            "operation":"DescribeInstanceHealth"
	        },
	        "InstanceInService":{
	            "acceptors":[
	                {
	                    "argument":"InstanceStates[].State",
	                    "expected":"InService",
	                    "matcher":"pathAll",
	                    "state":"success"
	                }
	            ],
	            "delay":15,
	            "maxAttempts":40,
	            "operation":"DescribeInstanceHealth"
	        }
	    }
	}
	
	},{}],58:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2015-12-01",
	    "endpointPrefix": "elasticloadbalancing",
	    "protocol": "query",
	    "serviceAbbreviation": "Elastic Load Balancing v2",
	    "serviceFullName": "Elastic Load Balancing",
	    "signatureVersion": "v4",
	    "uid": "elasticloadbalancingv2-2015-12-01",
	    "xmlNamespace": "http://elasticloadbalancing.amazonaws.com/doc/2015-12-01/"
	  },
	  "operations": {
	    "AddTags": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceArns",
	          "Tags"
	        ],
	        "members": {
	          "ResourceArns": {
	            "shape": "S2"
	          },
	          "Tags": {
	            "shape": "S4"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "AddTagsResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "CreateListener": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerArn",
	          "Protocol",
	          "Port",
	          "DefaultActions"
	        ],
	        "members": {
	          "LoadBalancerArn": {},
	          "Protocol": {},
	          "Port": {
	            "type": "integer"
	          },
	          "SslPolicy": {},
	          "Certificates": {
	            "shape": "Se"
	          },
	          "DefaultActions": {
	            "shape": "Sh"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateListenerResult",
	        "type": "structure",
	        "members": {
	          "Listeners": {
	            "shape": "Sm"
	          }
	        }
	      }
	    },
	    "CreateLoadBalancer": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "Subnets"
	        ],
	        "members": {
	          "Name": {},
	          "Subnets": {
	            "shape": "Sr"
	          },
	          "SecurityGroups": {
	            "shape": "St"
	          },
	          "Scheme": {},
	          "Tags": {
	            "shape": "S4"
	          },
	          "IpAddressType": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateLoadBalancerResult",
	        "type": "structure",
	        "members": {
	          "LoadBalancers": {
	            "shape": "Sy"
	          }
	        }
	      }
	    },
	    "CreateRule": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ListenerArn",
	          "Conditions",
	          "Priority",
	          "Actions"
	        ],
	        "members": {
	          "ListenerArn": {},
	          "Conditions": {
	            "shape": "S1c"
	          },
	          "Priority": {
	            "type": "integer"
	          },
	          "Actions": {
	            "shape": "Sh"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateRuleResult",
	        "type": "structure",
	        "members": {
	          "Rules": {
	            "shape": "S1j"
	          }
	        }
	      }
	    },
	    "CreateTargetGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "Protocol",
	          "Port",
	          "VpcId"
	        ],
	        "members": {
	          "Name": {},
	          "Protocol": {},
	          "Port": {
	            "type": "integer"
	          },
	          "VpcId": {},
	          "HealthCheckProtocol": {},
	          "HealthCheckPort": {},
	          "HealthCheckPath": {},
	          "HealthCheckIntervalSeconds": {
	            "type": "integer"
	          },
	          "HealthCheckTimeoutSeconds": {
	            "type": "integer"
	          },
	          "HealthyThresholdCount": {
	            "type": "integer"
	          },
	          "UnhealthyThresholdCount": {
	            "type": "integer"
	          },
	          "Matcher": {
	            "shape": "S1v"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateTargetGroupResult",
	        "type": "structure",
	        "members": {
	          "TargetGroups": {
	            "shape": "S1y"
	          }
	        }
	      }
	    },
	    "DeleteListener": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ListenerArn"
	        ],
	        "members": {
	          "ListenerArn": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteListenerResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteLoadBalancer": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerArn"
	        ],
	        "members": {
	          "LoadBalancerArn": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteLoadBalancerResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteRule": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RuleArn"
	        ],
	        "members": {
	          "RuleArn": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteRuleResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteTargetGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TargetGroupArn"
	        ],
	        "members": {
	          "TargetGroupArn": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteTargetGroupResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeregisterTargets": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TargetGroupArn",
	          "Targets"
	        ],
	        "members": {
	          "TargetGroupArn": {},
	          "Targets": {
	            "shape": "S2a"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DeregisterTargetsResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DescribeListeners": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "LoadBalancerArn": {},
	          "ListenerArns": {
	            "type": "list",
	            "member": {}
	          },
	          "Marker": {},
	          "PageSize": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeListenersResult",
	        "type": "structure",
	        "members": {
	          "Listeners": {
	            "shape": "Sm"
	          },
	          "NextMarker": {}
	        }
	      }
	    },
	    "DescribeLoadBalancerAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerArn"
	        ],
	        "members": {
	          "LoadBalancerArn": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeLoadBalancerAttributesResult",
	        "type": "structure",
	        "members": {
	          "Attributes": {
	            "shape": "S2l"
	          }
	        }
	      }
	    },
	    "DescribeLoadBalancers": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "LoadBalancerArns": {
	            "shape": "S20"
	          },
	          "Names": {
	            "type": "list",
	            "member": {}
	          },
	          "Marker": {},
	          "PageSize": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeLoadBalancersResult",
	        "type": "structure",
	        "members": {
	          "LoadBalancers": {
	            "shape": "Sy"
	          },
	          "NextMarker": {}
	        }
	      }
	    },
	    "DescribeRules": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ListenerArn": {},
	          "RuleArns": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeRulesResult",
	        "type": "structure",
	        "members": {
	          "Rules": {
	            "shape": "S1j"
	          }
	        }
	      }
	    },
	    "DescribeSSLPolicies": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Names": {
	            "type": "list",
	            "member": {}
	          },
	          "Marker": {},
	          "PageSize": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeSSLPoliciesResult",
	        "type": "structure",
	        "members": {
	          "SslPolicies": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "SslProtocols": {
	                  "type": "list",
	                  "member": {}
	                },
	                "Ciphers": {
	                  "type": "list",
	                  "member": {
	                    "type": "structure",
	                    "members": {
	                      "Name": {},
	                      "Priority": {
	                        "type": "integer"
	                      }
	                    }
	                  }
	                },
	                "Name": {}
	              }
	            }
	          },
	          "NextMarker": {}
	        }
	      }
	    },
	    "DescribeTags": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceArns"
	        ],
	        "members": {
	          "ResourceArns": {
	            "shape": "S2"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeTagsResult",
	        "type": "structure",
	        "members": {
	          "TagDescriptions": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "ResourceArn": {},
	                "Tags": {
	                  "shape": "S4"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeTargetGroupAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TargetGroupArn"
	        ],
	        "members": {
	          "TargetGroupArn": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeTargetGroupAttributesResult",
	        "type": "structure",
	        "members": {
	          "Attributes": {
	            "shape": "S3c"
	          }
	        }
	      }
	    },
	    "DescribeTargetGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "LoadBalancerArn": {},
	          "TargetGroupArns": {
	            "type": "list",
	            "member": {}
	          },
	          "Names": {
	            "type": "list",
	            "member": {}
	          },
	          "Marker": {},
	          "PageSize": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeTargetGroupsResult",
	        "type": "structure",
	        "members": {
	          "TargetGroups": {
	            "shape": "S1y"
	          },
	          "NextMarker": {}
	        }
	      }
	    },
	    "DescribeTargetHealth": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TargetGroupArn"
	        ],
	        "members": {
	          "TargetGroupArn": {},
	          "Targets": {
	            "shape": "S2a"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeTargetHealthResult",
	        "type": "structure",
	        "members": {
	          "TargetHealthDescriptions": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Target": {
	                  "shape": "S2b"
	                },
	                "HealthCheckPort": {},
	                "TargetHealth": {
	                  "type": "structure",
	                  "members": {
	                    "State": {},
	                    "Reason": {},
	                    "Description": {}
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "ModifyListener": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ListenerArn"
	        ],
	        "members": {
	          "ListenerArn": {},
	          "Port": {
	            "type": "integer"
	          },
	          "Protocol": {},
	          "SslPolicy": {},
	          "Certificates": {
	            "shape": "Se"
	          },
	          "DefaultActions": {
	            "shape": "Sh"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyListenerResult",
	        "type": "structure",
	        "members": {
	          "Listeners": {
	            "shape": "Sm"
	          }
	        }
	      }
	    },
	    "ModifyLoadBalancerAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerArn",
	          "Attributes"
	        ],
	        "members": {
	          "LoadBalancerArn": {},
	          "Attributes": {
	            "shape": "S2l"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyLoadBalancerAttributesResult",
	        "type": "structure",
	        "members": {
	          "Attributes": {
	            "shape": "S2l"
	          }
	        }
	      }
	    },
	    "ModifyRule": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RuleArn"
	        ],
	        "members": {
	          "RuleArn": {},
	          "Conditions": {
	            "shape": "S1c"
	          },
	          "Actions": {
	            "shape": "Sh"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyRuleResult",
	        "type": "structure",
	        "members": {
	          "Rules": {
	            "shape": "S1j"
	          }
	        }
	      }
	    },
	    "ModifyTargetGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TargetGroupArn"
	        ],
	        "members": {
	          "TargetGroupArn": {},
	          "HealthCheckProtocol": {},
	          "HealthCheckPort": {},
	          "HealthCheckPath": {},
	          "HealthCheckIntervalSeconds": {
	            "type": "integer"
	          },
	          "HealthCheckTimeoutSeconds": {
	            "type": "integer"
	          },
	          "HealthyThresholdCount": {
	            "type": "integer"
	          },
	          "UnhealthyThresholdCount": {
	            "type": "integer"
	          },
	          "Matcher": {
	            "shape": "S1v"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyTargetGroupResult",
	        "type": "structure",
	        "members": {
	          "TargetGroups": {
	            "shape": "S1y"
	          }
	        }
	      }
	    },
	    "ModifyTargetGroupAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TargetGroupArn",
	          "Attributes"
	        ],
	        "members": {
	          "TargetGroupArn": {},
	          "Attributes": {
	            "shape": "S3c"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyTargetGroupAttributesResult",
	        "type": "structure",
	        "members": {
	          "Attributes": {
	            "shape": "S3c"
	          }
	        }
	      }
	    },
	    "RegisterTargets": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TargetGroupArn",
	          "Targets"
	        ],
	        "members": {
	          "TargetGroupArn": {},
	          "Targets": {
	            "shape": "S2a"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "RegisterTargetsResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "RemoveTags": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceArns",
	          "TagKeys"
	        ],
	        "members": {
	          "ResourceArns": {
	            "shape": "S2"
	          },
	          "TagKeys": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "RemoveTagsResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "SetIpAddressType": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerArn",
	          "IpAddressType"
	        ],
	        "members": {
	          "LoadBalancerArn": {},
	          "IpAddressType": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "SetIpAddressTypeResult",
	        "type": "structure",
	        "members": {
	          "IpAddressType": {}
	        }
	      }
	    },
	    "SetRulePriorities": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RulePriorities"
	        ],
	        "members": {
	          "RulePriorities": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "RuleArn": {},
	                "Priority": {
	                  "type": "integer"
	                }
	              }
	            }
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "SetRulePrioritiesResult",
	        "type": "structure",
	        "members": {
	          "Rules": {
	            "shape": "S1j"
	          }
	        }
	      }
	    },
	    "SetSecurityGroups": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerArn",
	          "SecurityGroups"
	        ],
	        "members": {
	          "LoadBalancerArn": {},
	          "SecurityGroups": {
	            "shape": "St"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "SetSecurityGroupsResult",
	        "type": "structure",
	        "members": {
	          "SecurityGroupIds": {
	            "shape": "St"
	          }
	        }
	      }
	    },
	    "SetSubnets": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LoadBalancerArn",
	          "Subnets"
	        ],
	        "members": {
	          "LoadBalancerArn": {},
	          "Subnets": {
	            "shape": "Sr"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "SetSubnetsResult",
	        "type": "structure",
	        "members": {
	          "AvailabilityZones": {
	            "shape": "S18"
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S2": {
	      "type": "list",
	      "member": {}
	    },
	    "S4": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "Key"
	        ],
	        "members": {
	          "Key": {},
	          "Value": {}
	        }
	      }
	    },
	    "Se": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "CertificateArn": {}
	        }
	      }
	    },
	    "Sh": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "Type",
	          "TargetGroupArn"
	        ],
	        "members": {
	          "Type": {},
	          "TargetGroupArn": {}
	        }
	      }
	    },
	    "Sm": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "ListenerArn": {},
	          "LoadBalancerArn": {},
	          "Port": {
	            "type": "integer"
	          },
	          "Protocol": {},
	          "Certificates": {
	            "shape": "Se"
	          },
	          "SslPolicy": {},
	          "DefaultActions": {
	            "shape": "Sh"
	          }
	        }
	      }
	    },
	    "Sr": {
	      "type": "list",
	      "member": {}
	    },
	    "St": {
	      "type": "list",
	      "member": {}
	    },
	    "Sy": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "LoadBalancerArn": {},
	          "DNSName": {},
	          "CanonicalHostedZoneId": {},
	          "CreatedTime": {
	            "type": "timestamp"
	          },
	          "LoadBalancerName": {},
	          "Scheme": {},
	          "VpcId": {},
	          "State": {
	            "type": "structure",
	            "members": {
	              "Code": {},
	              "Reason": {}
	            }
	          },
	          "Type": {},
	          "AvailabilityZones": {
	            "shape": "S18"
	          },
	          "SecurityGroups": {
	            "shape": "St"
	          },
	          "IpAddressType": {}
	        }
	      }
	    },
	    "S18": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "ZoneName": {},
	          "SubnetId": {}
	        }
	      }
	    },
	    "S1c": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "Field": {},
	          "Values": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      }
	    },
	    "S1j": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "RuleArn": {},
	          "Priority": {},
	          "Conditions": {
	            "shape": "S1c"
	          },
	          "Actions": {
	            "shape": "Sh"
	          },
	          "IsDefault": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "S1v": {
	      "type": "structure",
	      "required": [
	        "HttpCode"
	      ],
	      "members": {
	        "HttpCode": {}
	      }
	    },
	    "S1y": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "TargetGroupArn": {},
	          "TargetGroupName": {},
	          "Protocol": {},
	          "Port": {
	            "type": "integer"
	          },
	          "VpcId": {},
	          "HealthCheckProtocol": {},
	          "HealthCheckPort": {},
	          "HealthCheckIntervalSeconds": {
	            "type": "integer"
	          },
	          "HealthCheckTimeoutSeconds": {
	            "type": "integer"
	          },
	          "HealthyThresholdCount": {
	            "type": "integer"
	          },
	          "UnhealthyThresholdCount": {
	            "type": "integer"
	          },
	          "HealthCheckPath": {},
	          "Matcher": {
	            "shape": "S1v"
	          },
	          "LoadBalancerArns": {
	            "shape": "S20"
	          }
	        }
	      }
	    },
	    "S20": {
	      "type": "list",
	      "member": {}
	    },
	    "S2a": {
	      "type": "list",
	      "member": {
	        "shape": "S2b"
	      }
	    },
	    "S2b": {
	      "type": "structure",
	      "required": [
	        "Id"
	      ],
	      "members": {
	        "Id": {},
	        "Port": {
	          "type": "integer"
	        }
	      }
	    },
	    "S2l": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "Key": {},
	          "Value": {}
	        }
	      }
	    },
	    "S3c": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "Key": {},
	          "Value": {}
	        }
	      }
	    }
	  }
	}
	},{}],59:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "DescribeListeners": {
	      "input_token": "Marker",
	      "output_token": "NextMarker",
	      "result_key": "Listeners"
	    },
	    "DescribeLoadBalancers": {
	      "input_token": "Marker",
	      "output_token": "NextMarker",
	      "result_key": "LoadBalancers"
	    },
	    "DescribeTargetGroups": {
	      "input_token": "Marker",
	      "output_token": "NextMarker",
	      "result_key": "TargetGroups"
	    }
	  }
	}
	},{}],60:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "uid": "elasticmapreduce-2009-03-31",
	    "apiVersion": "2009-03-31",
	    "endpointPrefix": "elasticmapreduce",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceAbbreviation": "Amazon EMR",
	    "serviceFullName": "Amazon Elastic MapReduce",
	    "signatureVersion": "v4",
	    "targetPrefix": "ElasticMapReduce",
	    "timestampFormat": "unixTimestamp"
	  },
	  "operations": {
	    "AddInstanceGroups": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceGroups",
	          "JobFlowId"
	        ],
	        "members": {
	          "InstanceGroups": {
	            "shape": "S2"
	          },
	          "JobFlowId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "JobFlowId": {},
	          "InstanceGroupIds": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      }
	    },
	    "AddJobFlowSteps": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "JobFlowId",
	          "Steps"
	        ],
	        "members": {
	          "JobFlowId": {},
	          "Steps": {
	            "shape": "S10"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "StepIds": {
	            "shape": "S19"
	          }
	        }
	      }
	    },
	    "AddTags": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceId",
	          "Tags"
	        ],
	        "members": {
	          "ResourceId": {},
	          "Tags": {
	            "shape": "S1c"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "CancelSteps": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ClusterId": {},
	          "StepIds": {
	            "shape": "S19"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "CancelStepsInfoList": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "StepId": {},
	                "Status": {},
	                "Reason": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "CreateSecurityConfiguration": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "SecurityConfiguration"
	        ],
	        "members": {
	          "Name": {},
	          "SecurityConfiguration": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "CreationDateTime"
	        ],
	        "members": {
	          "Name": {},
	          "CreationDateTime": {
	            "type": "timestamp"
	          }
	        }
	      }
	    },
	    "DeleteSecurityConfiguration": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name"
	        ],
	        "members": {
	          "Name": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DescribeCluster": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterId"
	        ],
	        "members": {
	          "ClusterId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Cluster": {
	            "type": "structure",
	            "members": {
	              "Id": {},
	              "Name": {},
	              "Status": {
	                "shape": "S1u"
	              },
	              "Ec2InstanceAttributes": {
	                "type": "structure",
	                "members": {
	                  "Ec2KeyName": {},
	                  "Ec2SubnetId": {},
	                  "Ec2AvailabilityZone": {},
	                  "IamInstanceProfile": {},
	                  "EmrManagedMasterSecurityGroup": {},
	                  "EmrManagedSlaveSecurityGroup": {},
	                  "ServiceAccessSecurityGroup": {},
	                  "AdditionalMasterSecurityGroups": {
	                    "shape": "S20"
	                  },
	                  "AdditionalSlaveSecurityGroups": {
	                    "shape": "S20"
	                  }
	                }
	              },
	              "LogUri": {},
	              "RequestedAmiVersion": {},
	              "RunningAmiVersion": {},
	              "ReleaseLabel": {},
	              "AutoTerminate": {
	                "type": "boolean"
	              },
	              "TerminationProtected": {
	                "type": "boolean"
	              },
	              "VisibleToAllUsers": {
	                "type": "boolean"
	              },
	              "Applications": {
	                "shape": "S22"
	              },
	              "Tags": {
	                "shape": "S1c"
	              },
	              "ServiceRole": {},
	              "NormalizedInstanceHours": {
	                "type": "integer"
	              },
	              "MasterPublicDnsName": {},
	              "Configurations": {
	                "shape": "S9"
	              },
	              "SecurityConfiguration": {},
	              "AutoScalingRole": {},
	              "ScaleDownBehavior": {}
	            }
	          }
	        }
	      }
	    },
	    "DescribeJobFlows": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "CreatedAfter": {
	            "type": "timestamp"
	          },
	          "CreatedBefore": {
	            "type": "timestamp"
	          },
	          "JobFlowIds": {
	            "shape": "S17"
	          },
	          "JobFlowStates": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "JobFlows": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "JobFlowId",
	                "Name",
	                "ExecutionStatusDetail",
	                "Instances"
	              ],
	              "members": {
	                "JobFlowId": {},
	                "Name": {},
	                "LogUri": {},
	                "AmiVersion": {},
	                "ExecutionStatusDetail": {
	                  "type": "structure",
	                  "required": [
	                    "State",
	                    "CreationDateTime"
	                  ],
	                  "members": {
	                    "State": {},
	                    "CreationDateTime": {
	                      "type": "timestamp"
	                    },
	                    "StartDateTime": {
	                      "type": "timestamp"
	                    },
	                    "ReadyDateTime": {
	                      "type": "timestamp"
	                    },
	                    "EndDateTime": {
	                      "type": "timestamp"
	                    },
	                    "LastStateChangeReason": {}
	                  }
	                },
	                "Instances": {
	                  "type": "structure",
	                  "required": [
	                    "MasterInstanceType",
	                    "SlaveInstanceType",
	                    "InstanceCount"
	                  ],
	                  "members": {
	                    "MasterInstanceType": {},
	                    "MasterPublicDnsName": {},
	                    "MasterInstanceId": {},
	                    "SlaveInstanceType": {},
	                    "InstanceCount": {
	                      "type": "integer"
	                    },
	                    "InstanceGroups": {
	                      "type": "list",
	                      "member": {
	                        "type": "structure",
	                        "required": [
	                          "Market",
	                          "InstanceRole",
	                          "InstanceType",
	                          "InstanceRequestCount",
	                          "InstanceRunningCount",
	                          "State",
	                          "CreationDateTime"
	                        ],
	                        "members": {
	                          "InstanceGroupId": {},
	                          "Name": {},
	                          "Market": {},
	                          "InstanceRole": {},
	                          "BidPrice": {},
	                          "InstanceType": {},
	                          "InstanceRequestCount": {
	                            "type": "integer"
	                          },
	                          "InstanceRunningCount": {
	                            "type": "integer"
	                          },
	                          "State": {},
	                          "LastStateChangeReason": {},
	                          "CreationDateTime": {
	                            "type": "timestamp"
	                          },
	                          "StartDateTime": {
	                            "type": "timestamp"
	                          },
	                          "ReadyDateTime": {
	                            "type": "timestamp"
	                          },
	                          "EndDateTime": {
	                            "type": "timestamp"
	                          }
	                        }
	                      }
	                    },
	                    "NormalizedInstanceHours": {
	                      "type": "integer"
	                    },
	                    "Ec2KeyName": {},
	                    "Ec2SubnetId": {},
	                    "Placement": {
	                      "shape": "S2g"
	                    },
	                    "KeepJobFlowAliveWhenNoSteps": {
	                      "type": "boolean"
	                    },
	                    "TerminationProtected": {
	                      "type": "boolean"
	                    },
	                    "HadoopVersion": {}
	                  }
	                },
	                "Steps": {
	                  "type": "list",
	                  "member": {
	                    "type": "structure",
	                    "required": [
	                      "StepConfig",
	                      "ExecutionStatusDetail"
	                    ],
	                    "members": {
	                      "StepConfig": {
	                        "shape": "S11"
	                      },
	                      "ExecutionStatusDetail": {
	                        "type": "structure",
	                        "required": [
	                          "State",
	                          "CreationDateTime"
	                        ],
	                        "members": {
	                          "State": {},
	                          "CreationDateTime": {
	                            "type": "timestamp"
	                          },
	                          "StartDateTime": {
	                            "type": "timestamp"
	                          },
	                          "EndDateTime": {
	                            "type": "timestamp"
	                          },
	                          "LastStateChangeReason": {}
	                        }
	                      }
	                    }
	                  }
	                },
	                "BootstrapActions": {
	                  "type": "list",
	                  "member": {
	                    "type": "structure",
	                    "members": {
	                      "BootstrapActionConfig": {
	                        "shape": "S2n"
	                      }
	                    }
	                  }
	                },
	                "SupportedProducts": {
	                  "shape": "S2p"
	                },
	                "VisibleToAllUsers": {
	                  "type": "boolean"
	                },
	                "JobFlowRole": {},
	                "ServiceRole": {},
	                "AutoScalingRole": {},
	                "ScaleDownBehavior": {}
	              }
	            }
	          }
	        }
	      },
	      "deprecated": true
	    },
	    "DescribeSecurityConfiguration": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name"
	        ],
	        "members": {
	          "Name": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Name": {},
	          "SecurityConfiguration": {},
	          "CreationDateTime": {
	            "type": "timestamp"
	          }
	        }
	      }
	    },
	    "DescribeStep": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterId",
	          "StepId"
	        ],
	        "members": {
	          "ClusterId": {},
	          "StepId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Step": {
	            "type": "structure",
	            "members": {
	              "Id": {},
	              "Name": {},
	              "Config": {
	                "shape": "S2v"
	              },
	              "ActionOnFailure": {},
	              "Status": {
	                "shape": "S2w"
	              }
	            }
	          }
	        }
	      }
	    },
	    "ListBootstrapActions": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterId"
	        ],
	        "members": {
	          "ClusterId": {},
	          "Marker": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "BootstrapActions": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Name": {},
	                "ScriptPath": {},
	                "Args": {
	                  "shape": "S20"
	                }
	              }
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "ListClusters": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "CreatedAfter": {
	            "type": "timestamp"
	          },
	          "CreatedBefore": {
	            "type": "timestamp"
	          },
	          "ClusterStates": {
	            "type": "list",
	            "member": {}
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Clusters": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Id": {},
	                "Name": {},
	                "Status": {
	                  "shape": "S1u"
	                },
	                "NormalizedInstanceHours": {
	                  "type": "integer"
	                }
	              }
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "ListInstanceGroups": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterId"
	        ],
	        "members": {
	          "ClusterId": {},
	          "Marker": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "InstanceGroups": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Id": {},
	                "Name": {},
	                "Market": {},
	                "InstanceGroupType": {},
	                "BidPrice": {},
	                "InstanceType": {},
	                "RequestedInstanceCount": {
	                  "type": "integer"
	                },
	                "RunningInstanceCount": {
	                  "type": "integer"
	                },
	                "Status": {
	                  "type": "structure",
	                  "members": {
	                    "State": {},
	                    "StateChangeReason": {
	                      "type": "structure",
	                      "members": {
	                        "Code": {},
	                        "Message": {}
	                      }
	                    },
	                    "Timeline": {
	                      "type": "structure",
	                      "members": {
	                        "CreationDateTime": {
	                          "type": "timestamp"
	                        },
	                        "ReadyDateTime": {
	                          "type": "timestamp"
	                        },
	                        "EndDateTime": {
	                          "type": "timestamp"
	                        }
	                      }
	                    }
	                  }
	                },
	                "Configurations": {
	                  "shape": "S9"
	                },
	                "EbsBlockDevices": {
	                  "type": "list",
	                  "member": {
	                    "type": "structure",
	                    "members": {
	                      "VolumeSpecification": {
	                        "shape": "Sg"
	                      },
	                      "Device": {}
	                    }
	                  }
	                },
	                "EbsOptimized": {
	                  "type": "boolean"
	                },
	                "ShrinkPolicy": {
	                  "shape": "S3o"
	                },
	                "AutoScalingPolicy": {
	                  "shape": "S3s"
	                }
	              }
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "ListInstances": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterId"
	        ],
	        "members": {
	          "ClusterId": {},
	          "InstanceGroupId": {},
	          "InstanceGroupTypes": {
	            "type": "list",
	            "member": {}
	          },
	          "InstanceStates": {
	            "type": "list",
	            "member": {}
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Instances": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Id": {},
	                "Ec2InstanceId": {},
	                "PublicDnsName": {},
	                "PublicIpAddress": {},
	                "PrivateDnsName": {},
	                "PrivateIpAddress": {},
	                "Status": {
	                  "type": "structure",
	                  "members": {
	                    "State": {},
	                    "StateChangeReason": {
	                      "type": "structure",
	                      "members": {
	                        "Code": {},
	                        "Message": {}
	                      }
	                    },
	                    "Timeline": {
	                      "type": "structure",
	                      "members": {
	                        "CreationDateTime": {
	                          "type": "timestamp"
	                        },
	                        "ReadyDateTime": {
	                          "type": "timestamp"
	                        },
	                        "EndDateTime": {
	                          "type": "timestamp"
	                        }
	                      }
	                    }
	                  }
	                },
	                "InstanceGroupId": {},
	                "EbsVolumes": {
	                  "type": "list",
	                  "member": {
	                    "type": "structure",
	                    "members": {
	                      "Device": {},
	                      "VolumeId": {}
	                    }
	                  }
	                }
	              }
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "ListSecurityConfigurations": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Marker": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "SecurityConfigurations": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Name": {},
	                "CreationDateTime": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "ListSteps": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterId"
	        ],
	        "members": {
	          "ClusterId": {},
	          "StepStates": {
	            "type": "list",
	            "member": {}
	          },
	          "StepIds": {
	            "shape": "S17"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Steps": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Id": {},
	                "Name": {},
	                "Config": {
	                  "shape": "S2v"
	                },
	                "ActionOnFailure": {},
	                "Status": {
	                  "shape": "S2w"
	                }
	              }
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "ModifyInstanceGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ClusterId": {},
	          "InstanceGroups": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "InstanceGroupId"
	              ],
	              "members": {
	                "InstanceGroupId": {},
	                "InstanceCount": {
	                  "type": "integer"
	                },
	                "EC2InstanceIdsToTerminate": {
	                  "type": "list",
	                  "member": {}
	                },
	                "ShrinkPolicy": {
	                  "shape": "S3o"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "PutAutoScalingPolicy": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterId",
	          "InstanceGroupId",
	          "AutoScalingPolicy"
	        ],
	        "members": {
	          "ClusterId": {},
	          "InstanceGroupId": {},
	          "AutoScalingPolicy": {
	            "shape": "Si"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ClusterId": {},
	          "InstanceGroupId": {},
	          "AutoScalingPolicy": {
	            "shape": "S3s"
	          }
	        }
	      }
	    },
	    "RemoveAutoScalingPolicy": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterId",
	          "InstanceGroupId"
	        ],
	        "members": {
	          "ClusterId": {},
	          "InstanceGroupId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "RemoveTags": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceId",
	          "TagKeys"
	        ],
	        "members": {
	          "ResourceId": {},
	          "TagKeys": {
	            "shape": "S20"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "RunJobFlow": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "Instances"
	        ],
	        "members": {
	          "Name": {},
	          "LogUri": {},
	          "AdditionalInfo": {},
	          "AmiVersion": {},
	          "ReleaseLabel": {},
	          "Instances": {
	            "type": "structure",
	            "members": {
	              "MasterInstanceType": {},
	              "SlaveInstanceType": {},
	              "InstanceCount": {
	                "type": "integer"
	              },
	              "InstanceGroups": {
	                "shape": "S2"
	              },
	              "Ec2KeyName": {},
	              "Placement": {
	                "shape": "S2g"
	              },
	              "KeepJobFlowAliveWhenNoSteps": {
	                "type": "boolean"
	              },
	              "TerminationProtected": {
	                "type": "boolean"
	              },
	              "HadoopVersion": {},
	              "Ec2SubnetId": {},
	              "EmrManagedMasterSecurityGroup": {},
	              "EmrManagedSlaveSecurityGroup": {},
	              "ServiceAccessSecurityGroup": {},
	              "AdditionalMasterSecurityGroups": {
	                "shape": "S4v"
	              },
	              "AdditionalSlaveSecurityGroups": {
	                "shape": "S4v"
	              }
	            }
	          },
	          "Steps": {
	            "shape": "S10"
	          },
	          "BootstrapActions": {
	            "type": "list",
	            "member": {
	              "shape": "S2n"
	            }
	          },
	          "SupportedProducts": {
	            "shape": "S2p"
	          },
	          "NewSupportedProducts": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Name": {},
	                "Args": {
	                  "shape": "S17"
	                }
	              }
	            }
	          },
	          "Applications": {
	            "shape": "S22"
	          },
	          "Configurations": {
	            "shape": "S9"
	          },
	          "VisibleToAllUsers": {
	            "type": "boolean"
	          },
	          "JobFlowRole": {},
	          "ServiceRole": {},
	          "Tags": {
	            "shape": "S1c"
	          },
	          "SecurityConfiguration": {},
	          "AutoScalingRole": {},
	          "ScaleDownBehavior": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "JobFlowId": {}
	        }
	      }
	    },
	    "SetTerminationProtection": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "JobFlowIds",
	          "TerminationProtected"
	        ],
	        "members": {
	          "JobFlowIds": {
	            "shape": "S17"
	          },
	          "TerminationProtected": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "SetVisibleToAllUsers": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "JobFlowIds",
	          "VisibleToAllUsers"
	        ],
	        "members": {
	          "JobFlowIds": {
	            "shape": "S17"
	          },
	          "VisibleToAllUsers": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "TerminateJobFlows": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "JobFlowIds"
	        ],
	        "members": {
	          "JobFlowIds": {
	            "shape": "S17"
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S2": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "InstanceRole",
	          "InstanceType",
	          "InstanceCount"
	        ],
	        "members": {
	          "Name": {},
	          "Market": {},
	          "InstanceRole": {},
	          "BidPrice": {},
	          "InstanceType": {},
	          "InstanceCount": {
	            "type": "integer"
	          },
	          "Configurations": {
	            "shape": "S9"
	          },
	          "EbsConfiguration": {
	            "type": "structure",
	            "members": {
	              "EbsBlockDeviceConfigs": {
	                "type": "list",
	                "member": {
	                  "type": "structure",
	                  "required": [
	                    "VolumeSpecification"
	                  ],
	                  "members": {
	                    "VolumeSpecification": {
	                      "shape": "Sg"
	                    },
	                    "VolumesPerInstance": {
	                      "type": "integer"
	                    }
	                  }
	                }
	              },
	              "EbsOptimized": {
	                "type": "boolean"
	              }
	            }
	          },
	          "AutoScalingPolicy": {
	            "shape": "Si"
	          }
	        }
	      }
	    },
	    "S9": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "Classification": {},
	          "Configurations": {
	            "shape": "S9"
	          },
	          "Properties": {
	            "shape": "Sc"
	          }
	        }
	      }
	    },
	    "Sc": {
	      "type": "map",
	      "key": {},
	      "value": {}
	    },
	    "Sg": {
	      "type": "structure",
	      "required": [
	        "VolumeType",
	        "SizeInGB"
	      ],
	      "members": {
	        "VolumeType": {},
	        "Iops": {
	          "type": "integer"
	        },
	        "SizeInGB": {
	          "type": "integer"
	        }
	      }
	    },
	    "Si": {
	      "type": "structure",
	      "required": [
	        "Constraints",
	        "Rules"
	      ],
	      "members": {
	        "Constraints": {
	          "shape": "Sj"
	        },
	        "Rules": {
	          "shape": "Sk"
	        }
	      }
	    },
	    "Sj": {
	      "type": "structure",
	      "required": [
	        "MinCapacity",
	        "MaxCapacity"
	      ],
	      "members": {
	        "MinCapacity": {
	          "type": "integer"
	        },
	        "MaxCapacity": {
	          "type": "integer"
	        }
	      }
	    },
	    "Sk": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "Action",
	          "Trigger"
	        ],
	        "members": {
	          "Name": {},
	          "Description": {},
	          "Action": {
	            "type": "structure",
	            "required": [
	              "SimpleScalingPolicyConfiguration"
	            ],
	            "members": {
	              "Market": {},
	              "SimpleScalingPolicyConfiguration": {
	                "type": "structure",
	                "required": [
	                  "ScalingAdjustment"
	                ],
	                "members": {
	                  "AdjustmentType": {},
	                  "ScalingAdjustment": {
	                    "type": "integer"
	                  },
	                  "CoolDown": {
	                    "type": "integer"
	                  }
	                }
	              }
	            }
	          },
	          "Trigger": {
	            "type": "structure",
	            "required": [
	              "CloudWatchAlarmDefinition"
	            ],
	            "members": {
	              "CloudWatchAlarmDefinition": {
	                "type": "structure",
	                "required": [
	                  "ComparisonOperator",
	                  "MetricName",
	                  "Period",
	                  "Threshold"
	                ],
	                "members": {
	                  "ComparisonOperator": {},
	                  "EvaluationPeriods": {
	                    "type": "integer"
	                  },
	                  "MetricName": {},
	                  "Namespace": {},
	                  "Period": {
	                    "type": "integer"
	                  },
	                  "Statistic": {},
	                  "Threshold": {
	                    "type": "double"
	                  },
	                  "Unit": {},
	                  "Dimensions": {
	                    "type": "list",
	                    "member": {
	                      "type": "structure",
	                      "members": {
	                        "Key": {},
	                        "Value": {}
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "S10": {
	      "type": "list",
	      "member": {
	        "shape": "S11"
	      }
	    },
	    "S11": {
	      "type": "structure",
	      "required": [
	        "Name",
	        "HadoopJarStep"
	      ],
	      "members": {
	        "Name": {},
	        "ActionOnFailure": {},
	        "HadoopJarStep": {
	          "type": "structure",
	          "required": [
	            "Jar"
	          ],
	          "members": {
	            "Properties": {
	              "type": "list",
	              "member": {
	                "type": "structure",
	                "members": {
	                  "Key": {},
	                  "Value": {}
	                }
	              }
	            },
	            "Jar": {},
	            "MainClass": {},
	            "Args": {
	              "shape": "S17"
	            }
	          }
	        }
	      }
	    },
	    "S17": {
	      "type": "list",
	      "member": {}
	    },
	    "S19": {
	      "type": "list",
	      "member": {}
	    },
	    "S1c": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "Key": {},
	          "Value": {}
	        }
	      }
	    },
	    "S1u": {
	      "type": "structure",
	      "members": {
	        "State": {},
	        "StateChangeReason": {
	          "type": "structure",
	          "members": {
	            "Code": {},
	            "Message": {}
	          }
	        },
	        "Timeline": {
	          "type": "structure",
	          "members": {
	            "CreationDateTime": {
	              "type": "timestamp"
	            },
	            "ReadyDateTime": {
	              "type": "timestamp"
	            },
	            "EndDateTime": {
	              "type": "timestamp"
	            }
	          }
	        }
	      }
	    },
	    "S20": {
	      "type": "list",
	      "member": {}
	    },
	    "S22": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "Name": {},
	          "Version": {},
	          "Args": {
	            "shape": "S20"
	          },
	          "AdditionalInfo": {
	            "shape": "Sc"
	          }
	        }
	      }
	    },
	    "S2g": {
	      "type": "structure",
	      "required": [
	        "AvailabilityZone"
	      ],
	      "members": {
	        "AvailabilityZone": {}
	      }
	    },
	    "S2n": {
	      "type": "structure",
	      "required": [
	        "Name",
	        "ScriptBootstrapAction"
	      ],
	      "members": {
	        "Name": {},
	        "ScriptBootstrapAction": {
	          "type": "structure",
	          "required": [
	            "Path"
	          ],
	          "members": {
	            "Path": {},
	            "Args": {
	              "shape": "S17"
	            }
	          }
	        }
	      }
	    },
	    "S2p": {
	      "type": "list",
	      "member": {}
	    },
	    "S2v": {
	      "type": "structure",
	      "members": {
	        "Jar": {},
	        "Properties": {
	          "shape": "Sc"
	        },
	        "MainClass": {},
	        "Args": {
	          "shape": "S20"
	        }
	      }
	    },
	    "S2w": {
	      "type": "structure",
	      "members": {
	        "State": {},
	        "StateChangeReason": {
	          "type": "structure",
	          "members": {
	            "Code": {},
	            "Message": {}
	          }
	        },
	        "FailureDetails": {
	          "type": "structure",
	          "members": {
	            "Reason": {},
	            "Message": {},
	            "LogFile": {}
	          }
	        },
	        "Timeline": {
	          "type": "structure",
	          "members": {
	            "CreationDateTime": {
	              "type": "timestamp"
	            },
	            "StartDateTime": {
	              "type": "timestamp"
	            },
	            "EndDateTime": {
	              "type": "timestamp"
	            }
	          }
	        }
	      }
	    },
	    "S3o": {
	      "type": "structure",
	      "members": {
	        "DecommissionTimeout": {
	          "type": "integer"
	        },
	        "InstanceResizePolicy": {
	          "type": "structure",
	          "members": {
	            "InstancesToTerminate": {
	              "shape": "S3q"
	            },
	            "InstancesToProtect": {
	              "shape": "S3q"
	            },
	            "InstanceTerminationTimeout": {
	              "type": "integer"
	            }
	          }
	        }
	      }
	    },
	    "S3q": {
	      "type": "list",
	      "member": {}
	    },
	    "S3s": {
	      "type": "structure",
	      "members": {
	        "Status": {
	          "type": "structure",
	          "members": {
	            "State": {},
	            "StateChangeReason": {
	              "type": "structure",
	              "members": {
	                "Code": {},
	                "Message": {}
	              }
	            }
	          }
	        },
	        "Constraints": {
	          "shape": "Sj"
	        },
	        "Rules": {
	          "shape": "Sk"
	        }
	      }
	    },
	    "S4v": {
	      "type": "list",
	      "member": {}
	    }
	  }
	}
	},{}],61:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "DescribeJobFlows": {
	      "result_key": "JobFlows"
	    },
	    "ListBootstrapActions": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "result_key": "BootstrapActions"
	    },
	    "ListClusters": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "result_key": "Clusters"
	    },
	    "ListInstanceGroups": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "result_key": "InstanceGroups"
	    },
	    "ListInstances": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "result_key": "Instances"
	    },
	    "ListSteps": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "result_key": "Steps"
	    }
	  }
	}
	
	},{}],62:[function(require,module,exports){
	module.exports={
	  "version": 2,
	  "waiters": {
	    "ClusterRunning": {
	      "delay": 30,
	      "operation": "DescribeCluster",
	      "maxAttempts": 60,
	      "acceptors": [
	        {
	          "state": "success",
	          "matcher": "path",
	          "argument": "Cluster.Status.State",
	          "expected": "RUNNING"
	        },
	        {
	          "state": "success",
	          "matcher": "path",
	          "argument": "Cluster.Status.State",
	          "expected": "WAITING"
	        },
	        {
	          "state": "failure",
	          "matcher": "path",
	          "argument": "Cluster.Status.State",
	          "expected": "TERMINATING"
	        },
	        {
	          "state": "failure",
	          "matcher": "path",
	          "argument": "Cluster.Status.State",
	          "expected": "TERMINATED"
	        },
	        {
	          "state": "failure",
	          "matcher": "path",
	          "argument": "Cluster.Status.State",
	          "expected": "TERMINATED_WITH_ERRORS"
	        }
	      ]
	    },
	    "StepComplete": {
	      "delay": 30,
	      "operation": "DescribeStep",
	      "maxAttempts": 60,
	      "acceptors": [
	        {
	          "state": "success",
	          "matcher": "path",
	          "argument": "Step.Status.State",
	          "expected": "COMPLETED"
	        },
	        {
	          "state": "failure",
	          "matcher": "path",
	          "argument": "Step.Status.State",
	          "expected": "FAILED"
	        },
	        {
	          "state": "failure",
	          "matcher": "path",
	          "argument": "Step.Status.State",
	          "expected": "CANCELLED"
	        }
	      ]
	    }
	  }
	}
	
	},{}],63:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "uid": "elastictranscoder-2012-09-25",
	    "apiVersion": "2012-09-25",
	    "endpointPrefix": "elastictranscoder",
	    "protocol": "rest-json",
	    "serviceFullName": "Amazon Elastic Transcoder",
	    "signatureVersion": "v4"
	  },
	  "operations": {
	    "CancelJob": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/2012-09-25/jobs/{Id}",
	        "responseCode": 202
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "CreateJob": {
	      "http": {
	        "requestUri": "/2012-09-25/jobs",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "PipelineId"
	        ],
	        "members": {
	          "PipelineId": {},
	          "Input": {
	            "shape": "S5"
	          },
	          "Inputs": {
	            "shape": "St"
	          },
	          "Output": {
	            "shape": "Su"
	          },
	          "Outputs": {
	            "type": "list",
	            "member": {
	              "shape": "Su"
	            }
	          },
	          "OutputKeyPrefix": {},
	          "Playlists": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Name": {},
	                "Format": {},
	                "OutputKeys": {
	                  "shape": "S1l"
	                },
	                "HlsContentProtection": {
	                  "shape": "S1m"
	                },
	                "PlayReadyDrm": {
	                  "shape": "S1q"
	                }
	              }
	            }
	          },
	          "UserMetadata": {
	            "shape": "S1v"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Job": {
	            "shape": "S1y"
	          }
	        }
	      }
	    },
	    "CreatePipeline": {
	      "http": {
	        "requestUri": "/2012-09-25/pipelines",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "InputBucket",
	          "Role"
	        ],
	        "members": {
	          "Name": {},
	          "InputBucket": {},
	          "OutputBucket": {},
	          "Role": {},
	          "AwsKmsKeyArn": {},
	          "Notifications": {
	            "shape": "S2a"
	          },
	          "ContentConfig": {
	            "shape": "S2c"
	          },
	          "ThumbnailConfig": {
	            "shape": "S2c"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Pipeline": {
	            "shape": "S2l"
	          },
	          "Warnings": {
	            "shape": "S2n"
	          }
	        }
	      }
	    },
	    "CreatePreset": {
	      "http": {
	        "requestUri": "/2012-09-25/presets",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "Container"
	        ],
	        "members": {
	          "Name": {},
	          "Description": {},
	          "Container": {},
	          "Video": {
	            "shape": "S2r"
	          },
	          "Audio": {
	            "shape": "S37"
	          },
	          "Thumbnails": {
	            "shape": "S3i"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Preset": {
	            "shape": "S3m"
	          },
	          "Warning": {}
	        }
	      }
	    },
	    "DeletePipeline": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/2012-09-25/pipelines/{Id}",
	        "responseCode": 202
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeletePreset": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/2012-09-25/presets/{Id}",
	        "responseCode": 202
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "ListJobsByPipeline": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2012-09-25/jobsByPipeline/{PipelineId}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "PipelineId"
	        ],
	        "members": {
	          "PipelineId": {
	            "location": "uri",
	            "locationName": "PipelineId"
	          },
	          "Ascending": {
	            "location": "querystring",
	            "locationName": "Ascending"
	          },
	          "PageToken": {
	            "location": "querystring",
	            "locationName": "PageToken"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Jobs": {
	            "shape": "S3v"
	          },
	          "NextPageToken": {}
	        }
	      }
	    },
	    "ListJobsByStatus": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2012-09-25/jobsByStatus/{Status}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Status"
	        ],
	        "members": {
	          "Status": {
	            "location": "uri",
	            "locationName": "Status"
	          },
	          "Ascending": {
	            "location": "querystring",
	            "locationName": "Ascending"
	          },
	          "PageToken": {
	            "location": "querystring",
	            "locationName": "PageToken"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Jobs": {
	            "shape": "S3v"
	          },
	          "NextPageToken": {}
	        }
	      }
	    },
	    "ListPipelines": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2012-09-25/pipelines"
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "Ascending": {
	            "location": "querystring",
	            "locationName": "Ascending"
	          },
	          "PageToken": {
	            "location": "querystring",
	            "locationName": "PageToken"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Pipelines": {
	            "type": "list",
	            "member": {
	              "shape": "S2l"
	            }
	          },
	          "NextPageToken": {}
	        }
	      }
	    },
	    "ListPresets": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2012-09-25/presets"
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "Ascending": {
	            "location": "querystring",
	            "locationName": "Ascending"
	          },
	          "PageToken": {
	            "location": "querystring",
	            "locationName": "PageToken"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Presets": {
	            "type": "list",
	            "member": {
	              "shape": "S3m"
	            }
	          },
	          "NextPageToken": {}
	        }
	      }
	    },
	    "ReadJob": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2012-09-25/jobs/{Id}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Job": {
	            "shape": "S1y"
	          }
	        }
	      }
	    },
	    "ReadPipeline": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2012-09-25/pipelines/{Id}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Pipeline": {
	            "shape": "S2l"
	          },
	          "Warnings": {
	            "shape": "S2n"
	          }
	        }
	      }
	    },
	    "ReadPreset": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2012-09-25/presets/{Id}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Preset": {
	            "shape": "S3m"
	          }
	        }
	      }
	    },
	    "TestRole": {
	      "http": {
	        "requestUri": "/2012-09-25/roleTests",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Role",
	          "InputBucket",
	          "OutputBucket",
	          "Topics"
	        ],
	        "members": {
	          "Role": {},
	          "InputBucket": {},
	          "OutputBucket": {},
	          "Topics": {
	            "type": "list",
	            "member": {}
	          }
	        },
	        "deprecated": true
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Success": {},
	          "Messages": {
	            "type": "list",
	            "member": {}
	          }
	        },
	        "deprecated": true
	      },
	      "deprecated": true
	    },
	    "UpdatePipeline": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/2012-09-25/pipelines/{Id}",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          },
	          "Name": {},
	          "InputBucket": {},
	          "Role": {},
	          "AwsKmsKeyArn": {},
	          "Notifications": {
	            "shape": "S2a"
	          },
	          "ContentConfig": {
	            "shape": "S2c"
	          },
	          "ThumbnailConfig": {
	            "shape": "S2c"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Pipeline": {
	            "shape": "S2l"
	          },
	          "Warnings": {
	            "shape": "S2n"
	          }
	        }
	      }
	    },
	    "UpdatePipelineNotifications": {
	      "http": {
	        "requestUri": "/2012-09-25/pipelines/{Id}/notifications"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id",
	          "Notifications"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          },
	          "Notifications": {
	            "shape": "S2a"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Pipeline": {
	            "shape": "S2l"
	          }
	        }
	      }
	    },
	    "UpdatePipelineStatus": {
	      "http": {
	        "requestUri": "/2012-09-25/pipelines/{Id}/status"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id",
	          "Status"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          },
	          "Status": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Pipeline": {
	            "shape": "S2l"
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S5": {
	      "type": "structure",
	      "members": {
	        "Key": {},
	        "FrameRate": {},
	        "Resolution": {},
	        "AspectRatio": {},
	        "Interlaced": {},
	        "Container": {},
	        "Encryption": {
	          "shape": "Sc"
	        },
	        "TimeSpan": {
	          "shape": "Sg"
	        },
	        "InputCaptions": {
	          "type": "structure",
	          "members": {
	            "MergePolicy": {},
	            "CaptionSources": {
	              "shape": "Sk"
	            }
	          }
	        },
	        "DetectedProperties": {
	          "type": "structure",
	          "members": {
	            "Width": {
	              "type": "integer"
	            },
	            "Height": {
	              "type": "integer"
	            },
	            "FrameRate": {},
	            "FileSize": {
	              "type": "long"
	            },
	            "DurationMillis": {
	              "type": "long"
	            }
	          }
	        }
	      }
	    },
	    "Sc": {
	      "type": "structure",
	      "members": {
	        "Mode": {},
	        "Key": {},
	        "KeyMd5": {},
	        "InitializationVector": {}
	      }
	    },
	    "Sg": {
	      "type": "structure",
	      "members": {
	        "StartTime": {},
	        "Duration": {}
	      }
	    },
	    "Sk": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "Key": {},
	          "Language": {},
	          "TimeOffset": {},
	          "Label": {},
	          "Encryption": {
	            "shape": "Sc"
	          }
	        }
	      }
	    },
	    "St": {
	      "type": "list",
	      "member": {
	        "shape": "S5"
	      }
	    },
	    "Su": {
	      "type": "structure",
	      "members": {
	        "Key": {},
	        "ThumbnailPattern": {},
	        "ThumbnailEncryption": {
	          "shape": "Sc"
	        },
	        "Rotate": {},
	        "PresetId": {},
	        "SegmentDuration": {},
	        "Watermarks": {
	          "shape": "Sx"
	        },
	        "AlbumArt": {
	          "shape": "S11"
	        },
	        "Composition": {
	          "shape": "S19",
	          "deprecated": true
	        },
	        "Captions": {
	          "shape": "S1b"
	        },
	        "Encryption": {
	          "shape": "Sc"
	        }
	      }
	    },
	    "Sx": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "PresetWatermarkId": {},
	          "InputKey": {},
	          "Encryption": {
	            "shape": "Sc"
	          }
	        }
	      }
	    },
	    "S11": {
	      "type": "structure",
	      "members": {
	        "MergePolicy": {},
	        "Artwork": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "members": {
	              "InputKey": {},
	              "MaxWidth": {},
	              "MaxHeight": {},
	              "SizingPolicy": {},
	              "PaddingPolicy": {},
	              "AlbumArtFormat": {},
	              "Encryption": {
	                "shape": "Sc"
	              }
	            }
	          }
	        }
	      }
	    },
	    "S19": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "TimeSpan": {
	            "shape": "Sg"
	          }
	        },
	        "deprecated": true
	      },
	      "deprecated": true
	    },
	    "S1b": {
	      "type": "structure",
	      "members": {
	        "MergePolicy": {
	          "deprecated": true
	        },
	        "CaptionSources": {
	          "shape": "Sk",
	          "deprecated": true
	        },
	        "CaptionFormats": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "members": {
	              "Format": {},
	              "Pattern": {},
	              "Encryption": {
	                "shape": "Sc"
	              }
	            }
	          }
	        }
	      }
	    },
	    "S1l": {
	      "type": "list",
	      "member": {}
	    },
	    "S1m": {
	      "type": "structure",
	      "members": {
	        "Method": {},
	        "Key": {},
	        "KeyMd5": {},
	        "InitializationVector": {},
	        "LicenseAcquisitionUrl": {},
	        "KeyStoragePolicy": {}
	      }
	    },
	    "S1q": {
	      "type": "structure",
	      "members": {
	        "Format": {},
	        "Key": {},
	        "KeyMd5": {},
	        "KeyId": {},
	        "InitializationVector": {},
	        "LicenseAcquisitionUrl": {}
	      }
	    },
	    "S1v": {
	      "type": "map",
	      "key": {},
	      "value": {}
	    },
	    "S1y": {
	      "type": "structure",
	      "members": {
	        "Id": {},
	        "Arn": {},
	        "PipelineId": {},
	        "Input": {
	          "shape": "S5"
	        },
	        "Inputs": {
	          "shape": "St"
	        },
	        "Output": {
	          "shape": "S1z"
	        },
	        "Outputs": {
	          "type": "list",
	          "member": {
	            "shape": "S1z"
	          }
	        },
	        "OutputKeyPrefix": {},
	        "Playlists": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "members": {
	              "Name": {},
	              "Format": {},
	              "OutputKeys": {
	                "shape": "S1l"
	              },
	              "HlsContentProtection": {
	                "shape": "S1m"
	              },
	              "PlayReadyDrm": {
	                "shape": "S1q"
	              },
	              "Status": {},
	              "StatusDetail": {}
	            }
	          }
	        },
	        "Status": {},
	        "UserMetadata": {
	          "shape": "S1v"
	        },
	        "Timing": {
	          "type": "structure",
	          "members": {
	            "SubmitTimeMillis": {
	              "type": "long"
	            },
	            "StartTimeMillis": {
	              "type": "long"
	            },
	            "FinishTimeMillis": {
	              "type": "long"
	            }
	          }
	        }
	      }
	    },
	    "S1z": {
	      "type": "structure",
	      "members": {
	        "Id": {},
	        "Key": {},
	        "ThumbnailPattern": {},
	        "ThumbnailEncryption": {
	          "shape": "Sc"
	        },
	        "Rotate": {},
	        "PresetId": {},
	        "SegmentDuration": {},
	        "Status": {},
	        "StatusDetail": {},
	        "Duration": {
	          "type": "long"
	        },
	        "Width": {
	          "type": "integer"
	        },
	        "Height": {
	          "type": "integer"
	        },
	        "FrameRate": {},
	        "FileSize": {
	          "type": "long"
	        },
	        "DurationMillis": {
	          "type": "long"
	        },
	        "Watermarks": {
	          "shape": "Sx"
	        },
	        "AlbumArt": {
	          "shape": "S11"
	        },
	        "Composition": {
	          "shape": "S19",
	          "deprecated": true
	        },
	        "Captions": {
	          "shape": "S1b"
	        },
	        "Encryption": {
	          "shape": "Sc"
	        },
	        "AppliedColorSpaceConversion": {}
	      }
	    },
	    "S2a": {
	      "type": "structure",
	      "members": {
	        "Progressing": {},
	        "Completed": {},
	        "Warning": {},
	        "Error": {}
	      }
	    },
	    "S2c": {
	      "type": "structure",
	      "members": {
	        "Bucket": {},
	        "StorageClass": {},
	        "Permissions": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "members": {
	              "GranteeType": {},
	              "Grantee": {},
	              "Access": {
	                "type": "list",
	                "member": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "S2l": {
	      "type": "structure",
	      "members": {
	        "Id": {},
	        "Arn": {},
	        "Name": {},
	        "Status": {},
	        "InputBucket": {},
	        "OutputBucket": {},
	        "Role": {},
	        "AwsKmsKeyArn": {},
	        "Notifications": {
	          "shape": "S2a"
	        },
	        "ContentConfig": {
	          "shape": "S2c"
	        },
	        "ThumbnailConfig": {
	          "shape": "S2c"
	        }
	      }
	    },
	    "S2n": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "Code": {},
	          "Message": {}
	        }
	      }
	    },
	    "S2r": {
	      "type": "structure",
	      "members": {
	        "Codec": {},
	        "CodecOptions": {
	          "type": "map",
	          "key": {},
	          "value": {}
	        },
	        "KeyframesMaxDist": {},
	        "FixedGOP": {},
	        "BitRate": {},
	        "FrameRate": {},
	        "MaxFrameRate": {},
	        "Resolution": {},
	        "AspectRatio": {},
	        "MaxWidth": {},
	        "MaxHeight": {},
	        "DisplayAspectRatio": {},
	        "SizingPolicy": {},
	        "PaddingPolicy": {},
	        "Watermarks": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "members": {
	              "Id": {},
	              "MaxWidth": {},
	              "MaxHeight": {},
	              "SizingPolicy": {},
	              "HorizontalAlign": {},
	              "HorizontalOffset": {},
	              "VerticalAlign": {},
	              "VerticalOffset": {},
	              "Opacity": {},
	              "Target": {}
	            }
	          }
	        }
	      }
	    },
	    "S37": {
	      "type": "structure",
	      "members": {
	        "Codec": {},
	        "SampleRate": {},
	        "BitRate": {},
	        "Channels": {},
	        "AudioPackingMode": {},
	        "CodecOptions": {
	          "type": "structure",
	          "members": {
	            "Profile": {},
	            "BitDepth": {},
	            "BitOrder": {},
	            "Signed": {}
	          }
	        }
	      }
	    },
	    "S3i": {
	      "type": "structure",
	      "members": {
	        "Format": {},
	        "Interval": {},
	        "Resolution": {},
	        "AspectRatio": {},
	        "MaxWidth": {},
	        "MaxHeight": {},
	        "SizingPolicy": {},
	        "PaddingPolicy": {}
	      }
	    },
	    "S3m": {
	      "type": "structure",
	      "members": {
	        "Id": {},
	        "Arn": {},
	        "Name": {},
	        "Description": {},
	        "Container": {},
	        "Audio": {
	          "shape": "S37"
	        },
	        "Video": {
	          "shape": "S2r"
	        },
	        "Thumbnails": {
	          "shape": "S3i"
	        },
	        "Type": {}
	      }
	    },
	    "S3v": {
	      "type": "list",
	      "member": {
	        "shape": "S1y"
	      }
	    }
	  }
	}
	},{}],64:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "ListJobsByPipeline": {
	      "input_token": "PageToken",
	      "output_token": "NextPageToken",
	      "result_key": "Jobs"
	    },
	    "ListJobsByStatus": {
	      "input_token": "PageToken",
	      "output_token": "NextPageToken",
	      "result_key": "Jobs"
	    },
	    "ListPipelines": {
	      "input_token": "PageToken",
	      "output_token": "NextPageToken",
	      "result_key": "Pipelines"
	    },
	    "ListPresets": {
	      "input_token": "PageToken",
	      "output_token": "NextPageToken",
	      "result_key": "Presets"
	    }
	  }
	}
	
	},{}],65:[function(require,module,exports){
	module.exports={
	  "version": 2,
	  "waiters": {
	    "JobComplete": {
	      "delay": 30,
	      "operation": "ReadJob",
	      "maxAttempts": 120,
	      "acceptors": [
	        {
	          "expected": "Complete",
	          "matcher": "path",
	          "state": "success",
	          "argument": "Job.Status"
	        },
	        {
	          "expected": "Canceled",
	          "matcher": "path",
	          "state": "failure",
	          "argument": "Job.Status"
	        },
	        {
	          "expected": "Error",
	          "matcher": "path",
	          "state": "failure",
	          "argument": "Job.Status"
	        }
	      ]
	    }
	  }
	}
	
	},{}],66:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "uid": "email-2010-12-01",
	    "apiVersion": "2010-12-01",
	    "endpointPrefix": "email",
	    "protocol": "query",
	    "serviceAbbreviation": "Amazon SES",
	    "serviceFullName": "Amazon Simple Email Service",
	    "signatureVersion": "v4",
	    "signingName": "ses",
	    "xmlNamespace": "http://ses.amazonaws.com/doc/2010-12-01/"
	  },
	  "operations": {
	    "CloneReceiptRuleSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RuleSetName",
	          "OriginalRuleSetName"
	        ],
	        "members": {
	          "RuleSetName": {},
	          "OriginalRuleSetName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CloneReceiptRuleSetResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "CreateConfigurationSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ConfigurationSet"
	        ],
	        "members": {
	          "ConfigurationSet": {
	            "shape": "S5"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateConfigurationSetResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "CreateConfigurationSetEventDestination": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ConfigurationSetName",
	          "EventDestination"
	        ],
	        "members": {
	          "ConfigurationSetName": {},
	          "EventDestination": {
	            "shape": "S9"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateConfigurationSetEventDestinationResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "CreateReceiptFilter": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Filter"
	        ],
	        "members": {
	          "Filter": {
	            "shape": "So"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateReceiptFilterResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "CreateReceiptRule": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RuleSetName",
	          "Rule"
	        ],
	        "members": {
	          "RuleSetName": {},
	          "After": {},
	          "Rule": {
	            "shape": "Sw"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateReceiptRuleResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "CreateReceiptRuleSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RuleSetName"
	        ],
	        "members": {
	          "RuleSetName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateReceiptRuleSetResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteConfigurationSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ConfigurationSetName"
	        ],
	        "members": {
	          "ConfigurationSetName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteConfigurationSetResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteConfigurationSetEventDestination": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ConfigurationSetName",
	          "EventDestinationName"
	        ],
	        "members": {
	          "ConfigurationSetName": {},
	          "EventDestinationName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteConfigurationSetEventDestinationResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteIdentity": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Identity"
	        ],
	        "members": {
	          "Identity": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteIdentityResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteIdentityPolicy": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Identity",
	          "PolicyName"
	        ],
	        "members": {
	          "Identity": {},
	          "PolicyName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteIdentityPolicyResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteReceiptFilter": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "FilterName"
	        ],
	        "members": {
	          "FilterName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteReceiptFilterResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteReceiptRule": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RuleSetName",
	          "RuleName"
	        ],
	        "members": {
	          "RuleSetName": {},
	          "RuleName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteReceiptRuleResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteReceiptRuleSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RuleSetName"
	        ],
	        "members": {
	          "RuleSetName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteReceiptRuleSetResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteVerifiedEmailAddress": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "EmailAddress"
	        ],
	        "members": {
	          "EmailAddress": {}
	        }
	      }
	    },
	    "DescribeActiveReceiptRuleSet": {
	      "input": {
	        "type": "structure",
	        "members": {}
	      },
	      "output": {
	        "resultWrapper": "DescribeActiveReceiptRuleSetResult",
	        "type": "structure",
	        "members": {
	          "Metadata": {
	            "shape": "S26"
	          },
	          "Rules": {
	            "shape": "S28"
	          }
	        }
	      }
	    },
	    "DescribeConfigurationSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ConfigurationSetName"
	        ],
	        "members": {
	          "ConfigurationSetName": {},
	          "ConfigurationSetAttributeNames": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeConfigurationSetResult",
	        "type": "structure",
	        "members": {
	          "ConfigurationSet": {
	            "shape": "S5"
	          },
	          "EventDestinations": {
	            "type": "list",
	            "member": {
	              "shape": "S9"
	            }
	          }
	        }
	      }
	    },
	    "DescribeReceiptRule": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RuleSetName",
	          "RuleName"
	        ],
	        "members": {
	          "RuleSetName": {},
	          "RuleName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeReceiptRuleResult",
	        "type": "structure",
	        "members": {
	          "Rule": {
	            "shape": "Sw"
	          }
	        }
	      }
	    },
	    "DescribeReceiptRuleSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RuleSetName"
	        ],
	        "members": {
	          "RuleSetName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeReceiptRuleSetResult",
	        "type": "structure",
	        "members": {
	          "Metadata": {
	            "shape": "S26"
	          },
	          "Rules": {
	            "shape": "S28"
	          }
	        }
	      }
	    },
	    "GetIdentityDkimAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Identities"
	        ],
	        "members": {
	          "Identities": {
	            "shape": "S2j"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "GetIdentityDkimAttributesResult",
	        "type": "structure",
	        "required": [
	          "DkimAttributes"
	        ],
	        "members": {
	          "DkimAttributes": {
	            "type": "map",
	            "key": {},
	            "value": {
	              "type": "structure",
	              "required": [
	                "DkimEnabled",
	                "DkimVerificationStatus"
	              ],
	              "members": {
	                "DkimEnabled": {
	                  "type": "boolean"
	                },
	                "DkimVerificationStatus": {},
	                "DkimTokens": {
	                  "shape": "S2o"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "GetIdentityMailFromDomainAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Identities"
	        ],
	        "members": {
	          "Identities": {
	            "shape": "S2j"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "GetIdentityMailFromDomainAttributesResult",
	        "type": "structure",
	        "required": [
	          "MailFromDomainAttributes"
	        ],
	        "members": {
	          "MailFromDomainAttributes": {
	            "type": "map",
	            "key": {},
	            "value": {
	              "type": "structure",
	              "required": [
	                "MailFromDomain",
	                "MailFromDomainStatus",
	                "BehaviorOnMXFailure"
	              ],
	              "members": {
	                "MailFromDomain": {},
	                "MailFromDomainStatus": {},
	                "BehaviorOnMXFailure": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "GetIdentityNotificationAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Identities"
	        ],
	        "members": {
	          "Identities": {
	            "shape": "S2j"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "GetIdentityNotificationAttributesResult",
	        "type": "structure",
	        "required": [
	          "NotificationAttributes"
	        ],
	        "members": {
	          "NotificationAttributes": {
	            "type": "map",
	            "key": {},
	            "value": {
	              "type": "structure",
	              "required": [
	                "BounceTopic",
	                "ComplaintTopic",
	                "DeliveryTopic",
	                "ForwardingEnabled"
	              ],
	              "members": {
	                "BounceTopic": {},
	                "ComplaintTopic": {},
	                "DeliveryTopic": {},
	                "ForwardingEnabled": {
	                  "type": "boolean"
	                },
	                "HeadersInBounceNotificationsEnabled": {
	                  "type": "boolean"
	                },
	                "HeadersInComplaintNotificationsEnabled": {
	                  "type": "boolean"
	                },
	                "HeadersInDeliveryNotificationsEnabled": {
	                  "type": "boolean"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "GetIdentityPolicies": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Identity",
	          "PolicyNames"
	        ],
	        "members": {
	          "Identity": {},
	          "PolicyNames": {
	            "shape": "S33"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "GetIdentityPoliciesResult",
	        "type": "structure",
	        "required": [
	          "Policies"
	        ],
	        "members": {
	          "Policies": {
	            "type": "map",
	            "key": {},
	            "value": {}
	          }
	        }
	      }
	    },
	    "GetIdentityVerificationAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Identities"
	        ],
	        "members": {
	          "Identities": {
	            "shape": "S2j"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "GetIdentityVerificationAttributesResult",
	        "type": "structure",
	        "required": [
	          "VerificationAttributes"
	        ],
	        "members": {
	          "VerificationAttributes": {
	            "type": "map",
	            "key": {},
	            "value": {
	              "type": "structure",
	              "required": [
	                "VerificationStatus"
	              ],
	              "members": {
	                "VerificationStatus": {},
	                "VerificationToken": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "GetSendQuota": {
	      "output": {
	        "resultWrapper": "GetSendQuotaResult",
	        "type": "structure",
	        "members": {
	          "Max24HourSend": {
	            "type": "double"
	          },
	          "MaxSendRate": {
	            "type": "double"
	          },
	          "SentLast24Hours": {
	            "type": "double"
	          }
	        }
	      }
	    },
	    "GetSendStatistics": {
	      "output": {
	        "resultWrapper": "GetSendStatisticsResult",
	        "type": "structure",
	        "members": {
	          "SendDataPoints": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Timestamp": {
	                  "type": "timestamp"
	                },
	                "DeliveryAttempts": {
	                  "type": "long"
	                },
	                "Bounces": {
	                  "type": "long"
	                },
	                "Complaints": {
	                  "type": "long"
	                },
	                "Rejects": {
	                  "type": "long"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "ListConfigurationSets": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "NextToken": {},
	          "MaxItems": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ListConfigurationSetsResult",
	        "type": "structure",
	        "members": {
	          "ConfigurationSets": {
	            "type": "list",
	            "member": {
	              "shape": "S5"
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListIdentities": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "IdentityType": {},
	          "NextToken": {},
	          "MaxItems": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ListIdentitiesResult",
	        "type": "structure",
	        "required": [
	          "Identities"
	        ],
	        "members": {
	          "Identities": {
	            "shape": "S2j"
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListIdentityPolicies": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Identity"
	        ],
	        "members": {
	          "Identity": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ListIdentityPoliciesResult",
	        "type": "structure",
	        "required": [
	          "PolicyNames"
	        ],
	        "members": {
	          "PolicyNames": {
	            "shape": "S33"
	          }
	        }
	      }
	    },
	    "ListReceiptFilters": {
	      "input": {
	        "type": "structure",
	        "members": {}
	      },
	      "output": {
	        "resultWrapper": "ListReceiptFiltersResult",
	        "type": "structure",
	        "members": {
	          "Filters": {
	            "type": "list",
	            "member": {
	              "shape": "So"
	            }
	          }
	        }
	      }
	    },
	    "ListReceiptRuleSets": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ListReceiptRuleSetsResult",
	        "type": "structure",
	        "members": {
	          "RuleSets": {
	            "type": "list",
	            "member": {
	              "shape": "S26"
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListVerifiedEmailAddresses": {
	      "output": {
	        "resultWrapper": "ListVerifiedEmailAddressesResult",
	        "type": "structure",
	        "members": {
	          "VerifiedEmailAddresses": {
	            "shape": "S40"
	          }
	        }
	      }
	    },
	    "PutIdentityPolicy": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Identity",
	          "PolicyName",
	          "Policy"
	        ],
	        "members": {
	          "Identity": {},
	          "PolicyName": {},
	          "Policy": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "PutIdentityPolicyResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "ReorderReceiptRuleSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RuleSetName",
	          "RuleNames"
	        ],
	        "members": {
	          "RuleSetName": {},
	          "RuleNames": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ReorderReceiptRuleSetResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "SendBounce": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "OriginalMessageId",
	          "BounceSender",
	          "BouncedRecipientInfoList"
	        ],
	        "members": {
	          "OriginalMessageId": {},
	          "BounceSender": {},
	          "Explanation": {},
	          "MessageDsn": {
	            "type": "structure",
	            "required": [
	              "ReportingMta"
	            ],
	            "members": {
	              "ReportingMta": {},
	              "ArrivalDate": {
	                "type": "timestamp"
	              },
	              "ExtensionFields": {
	                "shape": "S4c"
	              }
	            }
	          },
	          "BouncedRecipientInfoList": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "Recipient"
	              ],
	              "members": {
	                "Recipient": {},
	                "RecipientArn": {},
	                "BounceType": {},
	                "RecipientDsnFields": {
	                  "type": "structure",
	                  "required": [
	                    "Action",
	                    "Status"
	                  ],
	                  "members": {
	                    "FinalRecipient": {},
	                    "Action": {},
	                    "RemoteMta": {},
	                    "Status": {},
	                    "DiagnosticCode": {},
	                    "LastAttemptDate": {
	                      "type": "timestamp"
	                    },
	                    "ExtensionFields": {
	                      "shape": "S4c"
	                    }
	                  }
	                }
	              }
	            }
	          },
	          "BounceSenderArn": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "SendBounceResult",
	        "type": "structure",
	        "members": {
	          "MessageId": {}
	        }
	      }
	    },
	    "SendEmail": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Source",
	          "Destination",
	          "Message"
	        ],
	        "members": {
	          "Source": {},
	          "Destination": {
	            "type": "structure",
	            "members": {
	              "ToAddresses": {
	                "shape": "S40"
	              },
	              "CcAddresses": {
	                "shape": "S40"
	              },
	              "BccAddresses": {
	                "shape": "S40"
	              }
	            }
	          },
	          "Message": {
	            "type": "structure",
	            "required": [
	              "Subject",
	              "Body"
	            ],
	            "members": {
	              "Subject": {
	                "shape": "S4t"
	              },
	              "Body": {
	                "type": "structure",
	                "members": {
	                  "Text": {
	                    "shape": "S4t"
	                  },
	                  "Html": {
	                    "shape": "S4t"
	                  }
	                }
	              }
	            }
	          },
	          "ReplyToAddresses": {
	            "shape": "S40"
	          },
	          "ReturnPath": {},
	          "SourceArn": {},
	          "ReturnPathArn": {},
	          "Tags": {
	            "shape": "S4x"
	          },
	          "ConfigurationSetName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "SendEmailResult",
	        "type": "structure",
	        "required": [
	          "MessageId"
	        ],
	        "members": {
	          "MessageId": {}
	        }
	      }
	    },
	    "SendRawEmail": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RawMessage"
	        ],
	        "members": {
	          "Source": {},
	          "Destinations": {
	            "shape": "S40"
	          },
	          "RawMessage": {
	            "type": "structure",
	            "required": [
	              "Data"
	            ],
	            "members": {
	              "Data": {
	                "type": "blob"
	              }
	            }
	          },
	          "FromArn": {},
	          "SourceArn": {},
	          "ReturnPathArn": {},
	          "Tags": {
	            "shape": "S4x"
	          },
	          "ConfigurationSetName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "SendRawEmailResult",
	        "type": "structure",
	        "required": [
	          "MessageId"
	        ],
	        "members": {
	          "MessageId": {}
	        }
	      }
	    },
	    "SetActiveReceiptRuleSet": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "RuleSetName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "SetActiveReceiptRuleSetResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "SetIdentityDkimEnabled": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Identity",
	          "DkimEnabled"
	        ],
	        "members": {
	          "Identity": {},
	          "DkimEnabled": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "SetIdentityDkimEnabledResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "SetIdentityFeedbackForwardingEnabled": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Identity",
	          "ForwardingEnabled"
	        ],
	        "members": {
	          "Identity": {},
	          "ForwardingEnabled": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "SetIdentityFeedbackForwardingEnabledResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "SetIdentityHeadersInNotificationsEnabled": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Identity",
	          "NotificationType",
	          "Enabled"
	        ],
	        "members": {
	          "Identity": {},
	          "NotificationType": {},
	          "Enabled": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "SetIdentityHeadersInNotificationsEnabledResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "SetIdentityMailFromDomain": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Identity"
	        ],
	        "members": {
	          "Identity": {},
	          "MailFromDomain": {},
	          "BehaviorOnMXFailure": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "SetIdentityMailFromDomainResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "SetIdentityNotificationTopic": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Identity",
	          "NotificationType"
	        ],
	        "members": {
	          "Identity": {},
	          "NotificationType": {},
	          "SnsTopic": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "SetIdentityNotificationTopicResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "SetReceiptRulePosition": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RuleSetName",
	          "RuleName"
	        ],
	        "members": {
	          "RuleSetName": {},
	          "RuleName": {},
	          "After": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "SetReceiptRulePositionResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "UpdateConfigurationSetEventDestination": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ConfigurationSetName",
	          "EventDestination"
	        ],
	        "members": {
	          "ConfigurationSetName": {},
	          "EventDestination": {
	            "shape": "S9"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "UpdateConfigurationSetEventDestinationResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "UpdateReceiptRule": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RuleSetName",
	          "Rule"
	        ],
	        "members": {
	          "RuleSetName": {},
	          "Rule": {
	            "shape": "Sw"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "UpdateReceiptRuleResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "VerifyDomainDkim": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Domain"
	        ],
	        "members": {
	          "Domain": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "VerifyDomainDkimResult",
	        "type": "structure",
	        "required": [
	          "DkimTokens"
	        ],
	        "members": {
	          "DkimTokens": {
	            "shape": "S2o"
	          }
	        }
	      }
	    },
	    "VerifyDomainIdentity": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Domain"
	        ],
	        "members": {
	          "Domain": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "VerifyDomainIdentityResult",
	        "type": "structure",
	        "required": [
	          "VerificationToken"
	        ],
	        "members": {
	          "VerificationToken": {}
	        }
	      }
	    },
	    "VerifyEmailAddress": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "EmailAddress"
	        ],
	        "members": {
	          "EmailAddress": {}
	        }
	      }
	    },
	    "VerifyEmailIdentity": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "EmailAddress"
	        ],
	        "members": {
	          "EmailAddress": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "VerifyEmailIdentityResult",
	        "type": "structure",
	        "members": {}
	      }
	    }
	  },
	  "shapes": {
	    "S5": {
	      "type": "structure",
	      "required": [
	        "Name"
	      ],
	      "members": {
	        "Name": {}
	      }
	    },
	    "S9": {
	      "type": "structure",
	      "required": [
	        "Name",
	        "MatchingEventTypes"
	      ],
	      "members": {
	        "Name": {},
	        "Enabled": {
	          "type": "boolean"
	        },
	        "MatchingEventTypes": {
	          "type": "list",
	          "member": {}
	        },
	        "KinesisFirehoseDestination": {
	          "type": "structure",
	          "required": [
	            "IAMRoleARN",
	            "DeliveryStreamARN"
	          ],
	          "members": {
	            "IAMRoleARN": {},
	            "DeliveryStreamARN": {}
	          }
	        },
	        "CloudWatchDestination": {
	          "type": "structure",
	          "required": [
	            "DimensionConfigurations"
	          ],
	          "members": {
	            "DimensionConfigurations": {
	              "type": "list",
	              "member": {
	                "type": "structure",
	                "required": [
	                  "DimensionName",
	                  "DimensionValueSource",
	                  "DefaultDimensionValue"
	                ],
	                "members": {
	                  "DimensionName": {},
	                  "DimensionValueSource": {},
	                  "DefaultDimensionValue": {}
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "So": {
	      "type": "structure",
	      "required": [
	        "Name",
	        "IpFilter"
	      ],
	      "members": {
	        "Name": {},
	        "IpFilter": {
	          "type": "structure",
	          "required": [
	            "Policy",
	            "Cidr"
	          ],
	          "members": {
	            "Policy": {},
	            "Cidr": {}
	          }
	        }
	      }
	    },
	    "Sw": {
	      "type": "structure",
	      "required": [
	        "Name"
	      ],
	      "members": {
	        "Name": {},
	        "Enabled": {
	          "type": "boolean"
	        },
	        "TlsPolicy": {},
	        "Recipients": {
	          "type": "list",
	          "member": {}
	        },
	        "Actions": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "members": {
	              "S3Action": {
	                "type": "structure",
	                "required": [
	                  "BucketName"
	                ],
	                "members": {
	                  "TopicArn": {},
	                  "BucketName": {},
	                  "ObjectKeyPrefix": {},
	                  "KmsKeyArn": {}
	                }
	              },
	              "BounceAction": {
	                "type": "structure",
	                "required": [
	                  "SmtpReplyCode",
	                  "Message",
	                  "Sender"
	                ],
	                "members": {
	                  "TopicArn": {},
	                  "SmtpReplyCode": {},
	                  "StatusCode": {},
	                  "Message": {},
	                  "Sender": {}
	                }
	              },
	              "WorkmailAction": {
	                "type": "structure",
	                "required": [
	                  "OrganizationArn"
	                ],
	                "members": {
	                  "TopicArn": {},
	                  "OrganizationArn": {}
	                }
	              },
	              "LambdaAction": {
	                "type": "structure",
	                "required": [
	                  "FunctionArn"
	                ],
	                "members": {
	                  "TopicArn": {},
	                  "FunctionArn": {},
	                  "InvocationType": {}
	                }
	              },
	              "StopAction": {
	                "type": "structure",
	                "required": [
	                  "Scope"
	                ],
	                "members": {
	                  "Scope": {},
	                  "TopicArn": {}
	                }
	              },
	              "AddHeaderAction": {
	                "type": "structure",
	                "required": [
	                  "HeaderName",
	                  "HeaderValue"
	                ],
	                "members": {
	                  "HeaderName": {},
	                  "HeaderValue": {}
	                }
	              },
	              "SNSAction": {
	                "type": "structure",
	                "required": [
	                  "TopicArn"
	                ],
	                "members": {
	                  "TopicArn": {},
	                  "Encoding": {}
	                }
	              }
	            }
	          }
	        },
	        "ScanEnabled": {
	          "type": "boolean"
	        }
	      }
	    },
	    "S26": {
	      "type": "structure",
	      "members": {
	        "Name": {},
	        "CreatedTimestamp": {
	          "type": "timestamp"
	        }
	      }
	    },
	    "S28": {
	      "type": "list",
	      "member": {
	        "shape": "Sw"
	      }
	    },
	    "S2j": {
	      "type": "list",
	      "member": {}
	    },
	    "S2o": {
	      "type": "list",
	      "member": {}
	    },
	    "S33": {
	      "type": "list",
	      "member": {}
	    },
	    "S40": {
	      "type": "list",
	      "member": {}
	    },
	    "S4c": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "Value"
	        ],
	        "members": {
	          "Name": {},
	          "Value": {}
	        }
	      }
	    },
	    "S4t": {
	      "type": "structure",
	      "required": [
	        "Data"
	      ],
	      "members": {
	        "Data": {},
	        "Charset": {}
	      }
	    },
	    "S4x": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "Value"
	        ],
	        "members": {
	          "Name": {},
	          "Value": {}
	        }
	      }
	    }
	  }
	}
	},{}],67:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "ListIdentities": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "limit_key": "MaxItems",
	      "result_key": "Identities"
	    },
	    "ListVerifiedEmailAddresses": {
	      "result_key": "VerifiedEmailAddresses"
	    }
	  }
	}
	
	},{}],68:[function(require,module,exports){
	module.exports={
	  "version": 2,
	  "waiters": {
	    "IdentityExists": {
	      "delay": 3,
	      "operation": "GetIdentityVerificationAttributes",
	      "maxAttempts": 20,
	      "acceptors": [
	        {
	          "expected": "Success",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "VerificationAttributes.*.VerificationStatus"
	        }
	      ]
	    }
	  }
	}
	
	},{}],69:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "uid": "events-2015-10-07",
	    "apiVersion": "2015-10-07",
	    "endpointPrefix": "events",
	    "jsonVersion": "1.1",
	    "serviceFullName": "Amazon CloudWatch Events",
	    "signatureVersion": "v4",
	    "targetPrefix": "AWSEvents",
	    "protocol": "json"
	  },
	  "operations": {
	    "DeleteRule": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name"
	        ],
	        "members": {
	          "Name": {}
	        }
	      }
	    },
	    "DescribeRule": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name"
	        ],
	        "members": {
	          "Name": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Name": {},
	          "Arn": {},
	          "EventPattern": {},
	          "ScheduleExpression": {},
	          "State": {},
	          "Description": {},
	          "RoleArn": {}
	        }
	      }
	    },
	    "DisableRule": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name"
	        ],
	        "members": {
	          "Name": {}
	        }
	      }
	    },
	    "EnableRule": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name"
	        ],
	        "members": {
	          "Name": {}
	        }
	      }
	    },
	    "ListRuleNamesByTarget": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TargetArn"
	        ],
	        "members": {
	          "TargetArn": {},
	          "NextToken": {},
	          "Limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "RuleNames": {
	            "type": "list",
	            "member": {}
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListRules": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "NamePrefix": {},
	          "NextToken": {},
	          "Limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Rules": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Name": {},
	                "Arn": {},
	                "EventPattern": {},
	                "State": {},
	                "Description": {},
	                "ScheduleExpression": {},
	                "RoleArn": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListTargetsByRule": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Rule"
	        ],
	        "members": {
	          "Rule": {},
	          "NextToken": {},
	          "Limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Targets": {
	            "shape": "Sp"
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "PutEvents": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Entries"
	        ],
	        "members": {
	          "Entries": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Time": {
	                  "type": "timestamp"
	                },
	                "Source": {},
	                "Resources": {
	                  "type": "list",
	                  "member": {}
	                },
	                "DetailType": {},
	                "Detail": {}
	              }
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "FailedEntryCount": {
	            "type": "integer"
	          },
	          "Entries": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "EventId": {},
	                "ErrorCode": {},
	                "ErrorMessage": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "PutRule": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name"
	        ],
	        "members": {
	          "Name": {},
	          "ScheduleExpression": {},
	          "EventPattern": {},
	          "State": {},
	          "Description": {},
	          "RoleArn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "RuleArn": {}
	        }
	      }
	    },
	    "PutTargets": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Rule",
	          "Targets"
	        ],
	        "members": {
	          "Rule": {},
	          "Targets": {
	            "shape": "Sp"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "FailedEntryCount": {
	            "type": "integer"
	          },
	          "FailedEntries": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "TargetId": {},
	                "ErrorCode": {},
	                "ErrorMessage": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "RemoveTargets": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Rule",
	          "Ids"
	        ],
	        "members": {
	          "Rule": {},
	          "Ids": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "FailedEntryCount": {
	            "type": "integer"
	          },
	          "FailedEntries": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "TargetId": {},
	                "ErrorCode": {},
	                "ErrorMessage": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "TestEventPattern": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "EventPattern",
	          "Event"
	        ],
	        "members": {
	          "EventPattern": {},
	          "Event": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Result": {
	            "type": "boolean"
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "Sp": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "Id",
	          "Arn"
	        ],
	        "members": {
	          "Id": {},
	          "Arn": {},
	          "Input": {},
	          "InputPath": {}
	        }
	      }
	    }
	  },
	  "examples": {}
	}
	},{}],70:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2015-08-04",
	    "endpointPrefix": "firehose",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceAbbreviation": "Firehose",
	    "serviceFullName": "Amazon Kinesis Firehose",
	    "signatureVersion": "v4",
	    "targetPrefix": "Firehose_20150804",
	    "uid": "firehose-2015-08-04"
	  },
	  "operations": {
	    "CreateDeliveryStream": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DeliveryStreamName"
	        ],
	        "members": {
	          "DeliveryStreamName": {},
	          "S3DestinationConfiguration": {
	            "shape": "S3",
	            "deprecated": true
	          },
	          "ExtendedS3DestinationConfiguration": {
	            "type": "structure",
	            "required": [
	              "RoleARN",
	              "BucketARN"
	            ],
	            "members": {
	              "RoleARN": {},
	              "BucketARN": {},
	              "Prefix": {},
	              "BufferingHints": {
	                "shape": "S7"
	              },
	              "CompressionFormat": {},
	              "EncryptionConfiguration": {
	                "shape": "Sb"
	              },
	              "CloudWatchLoggingOptions": {
	                "shape": "Sf"
	              },
	              "ProcessingConfiguration": {
	                "shape": "Sk"
	              },
	              "S3BackupMode": {},
	              "S3BackupConfiguration": {
	                "shape": "S3"
	              }
	            }
	          },
	          "RedshiftDestinationConfiguration": {
	            "type": "structure",
	            "required": [
	              "RoleARN",
	              "ClusterJDBCURL",
	              "CopyCommand",
	              "Username",
	              "Password",
	              "S3Configuration"
	            ],
	            "members": {
	              "RoleARN": {},
	              "ClusterJDBCURL": {},
	              "CopyCommand": {
	                "shape": "Sv"
	              },
	              "Username": {
	                "shape": "Sz"
	              },
	              "Password": {
	                "shape": "S10"
	              },
	              "RetryOptions": {
	                "shape": "S11"
	              },
	              "S3Configuration": {
	                "shape": "S3"
	              },
	              "ProcessingConfiguration": {
	                "shape": "Sk"
	              },
	              "S3BackupMode": {},
	              "S3BackupConfiguration": {
	                "shape": "S3"
	              },
	              "CloudWatchLoggingOptions": {
	                "shape": "Sf"
	              }
	            }
	          },
	          "ElasticsearchDestinationConfiguration": {
	            "type": "structure",
	            "required": [
	              "RoleARN",
	              "DomainARN",
	              "IndexName",
	              "TypeName",
	              "S3Configuration"
	            ],
	            "members": {
	              "RoleARN": {},
	              "DomainARN": {},
	              "IndexName": {},
	              "TypeName": {},
	              "IndexRotationPeriod": {},
	              "BufferingHints": {
	                "shape": "S19"
	              },
	              "RetryOptions": {
	                "shape": "S1c"
	              },
	              "S3BackupMode": {},
	              "S3Configuration": {
	                "shape": "S3"
	              },
	              "ProcessingConfiguration": {
	                "shape": "Sk"
	              },
	              "CloudWatchLoggingOptions": {
	                "shape": "Sf"
	              }
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "DeliveryStreamARN": {}
	        }
	      }
	    },
	    "DeleteDeliveryStream": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DeliveryStreamName"
	        ],
	        "members": {
	          "DeliveryStreamName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DescribeDeliveryStream": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DeliveryStreamName"
	        ],
	        "members": {
	          "DeliveryStreamName": {},
	          "Limit": {
	            "type": "integer"
	          },
	          "ExclusiveStartDestinationId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "DeliveryStreamDescription"
	        ],
	        "members": {
	          "DeliveryStreamDescription": {
	            "type": "structure",
	            "required": [
	              "DeliveryStreamName",
	              "DeliveryStreamARN",
	              "DeliveryStreamStatus",
	              "VersionId",
	              "Destinations",
	              "HasMoreDestinations"
	            ],
	            "members": {
	              "DeliveryStreamName": {},
	              "DeliveryStreamARN": {},
	              "DeliveryStreamStatus": {},
	              "VersionId": {},
	              "CreateTimestamp": {
	                "type": "timestamp"
	              },
	              "LastUpdateTimestamp": {
	                "type": "timestamp"
	              },
	              "Destinations": {
	                "type": "list",
	                "member": {
	                  "type": "structure",
	                  "required": [
	                    "DestinationId"
	                  ],
	                  "members": {
	                    "DestinationId": {},
	                    "S3DestinationDescription": {
	                      "shape": "S1t"
	                    },
	                    "ExtendedS3DestinationDescription": {
	                      "type": "structure",
	                      "required": [
	                        "RoleARN",
	                        "BucketARN",
	                        "BufferingHints",
	                        "CompressionFormat",
	                        "EncryptionConfiguration"
	                      ],
	                      "members": {
	                        "RoleARN": {},
	                        "BucketARN": {},
	                        "Prefix": {},
	                        "BufferingHints": {
	                          "shape": "S7"
	                        },
	                        "CompressionFormat": {},
	                        "EncryptionConfiguration": {
	                          "shape": "Sb"
	                        },
	                        "CloudWatchLoggingOptions": {
	                          "shape": "Sf"
	                        },
	                        "ProcessingConfiguration": {
	                          "shape": "Sk"
	                        },
	                        "S3BackupMode": {},
	                        "S3BackupDescription": {
	                          "shape": "S1t"
	                        }
	                      }
	                    },
	                    "RedshiftDestinationDescription": {
	                      "type": "structure",
	                      "required": [
	                        "RoleARN",
	                        "ClusterJDBCURL",
	                        "CopyCommand",
	                        "Username",
	                        "S3DestinationDescription"
	                      ],
	                      "members": {
	                        "RoleARN": {},
	                        "ClusterJDBCURL": {},
	                        "CopyCommand": {
	                          "shape": "Sv"
	                        },
	                        "Username": {
	                          "shape": "Sz"
	                        },
	                        "RetryOptions": {
	                          "shape": "S11"
	                        },
	                        "S3DestinationDescription": {
	                          "shape": "S1t"
	                        },
	                        "ProcessingConfiguration": {
	                          "shape": "Sk"
	                        },
	                        "S3BackupMode": {},
	                        "S3BackupDescription": {
	                          "shape": "S1t"
	                        },
	                        "CloudWatchLoggingOptions": {
	                          "shape": "Sf"
	                        }
	                      }
	                    },
	                    "ElasticsearchDestinationDescription": {
	                      "type": "structure",
	                      "members": {
	                        "RoleARN": {},
	                        "DomainARN": {},
	                        "IndexName": {},
	                        "TypeName": {},
	                        "IndexRotationPeriod": {},
	                        "BufferingHints": {
	                          "shape": "S19"
	                        },
	                        "RetryOptions": {
	                          "shape": "S1c"
	                        },
	                        "S3BackupMode": {},
	                        "S3DestinationDescription": {
	                          "shape": "S1t"
	                        },
	                        "ProcessingConfiguration": {
	                          "shape": "Sk"
	                        },
	                        "CloudWatchLoggingOptions": {
	                          "shape": "Sf"
	                        }
	                      }
	                    }
	                  }
	                }
	              },
	              "HasMoreDestinations": {
	                "type": "boolean"
	              }
	            }
	          }
	        }
	      }
	    },
	    "ListDeliveryStreams": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Limit": {
	            "type": "integer"
	          },
	          "ExclusiveStartDeliveryStreamName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "DeliveryStreamNames",
	          "HasMoreDeliveryStreams"
	        ],
	        "members": {
	          "DeliveryStreamNames": {
	            "type": "list",
	            "member": {}
	          },
	          "HasMoreDeliveryStreams": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "PutRecord": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DeliveryStreamName",
	          "Record"
	        ],
	        "members": {
	          "DeliveryStreamName": {},
	          "Record": {
	            "shape": "S22"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "RecordId"
	        ],
	        "members": {
	          "RecordId": {}
	        }
	      }
	    },
	    "PutRecordBatch": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DeliveryStreamName",
	          "Records"
	        ],
	        "members": {
	          "DeliveryStreamName": {},
	          "Records": {
	            "type": "list",
	            "member": {
	              "shape": "S22"
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "FailedPutCount",
	          "RequestResponses"
	        ],
	        "members": {
	          "FailedPutCount": {
	            "type": "integer"
	          },
	          "RequestResponses": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "RecordId": {},
	                "ErrorCode": {},
	                "ErrorMessage": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "UpdateDestination": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DeliveryStreamName",
	          "CurrentDeliveryStreamVersionId",
	          "DestinationId"
	        ],
	        "members": {
	          "DeliveryStreamName": {},
	          "CurrentDeliveryStreamVersionId": {},
	          "DestinationId": {},
	          "S3DestinationUpdate": {
	            "shape": "S2f",
	            "deprecated": true
	          },
	          "ExtendedS3DestinationUpdate": {
	            "type": "structure",
	            "members": {
	              "RoleARN": {},
	              "BucketARN": {},
	              "Prefix": {},
	              "BufferingHints": {
	                "shape": "S7"
	              },
	              "CompressionFormat": {},
	              "EncryptionConfiguration": {
	                "shape": "Sb"
	              },
	              "CloudWatchLoggingOptions": {
	                "shape": "Sf"
	              },
	              "ProcessingConfiguration": {
	                "shape": "Sk"
	              },
	              "S3BackupMode": {},
	              "S3BackupUpdate": {
	                "shape": "S2f"
	              }
	            }
	          },
	          "RedshiftDestinationUpdate": {
	            "type": "structure",
	            "members": {
	              "RoleARN": {},
	              "ClusterJDBCURL": {},
	              "CopyCommand": {
	                "shape": "Sv"
	              },
	              "Username": {
	                "shape": "Sz"
	              },
	              "Password": {
	                "shape": "S10"
	              },
	              "RetryOptions": {
	                "shape": "S11"
	              },
	              "S3Update": {
	                "shape": "S2f"
	              },
	              "ProcessingConfiguration": {
	                "shape": "Sk"
	              },
	              "S3BackupMode": {},
	              "S3BackupUpdate": {
	                "shape": "S2f"
	              },
	              "CloudWatchLoggingOptions": {
	                "shape": "Sf"
	              }
	            }
	          },
	          "ElasticsearchDestinationUpdate": {
	            "type": "structure",
	            "members": {
	              "RoleARN": {},
	              "DomainARN": {},
	              "IndexName": {},
	              "TypeName": {},
	              "IndexRotationPeriod": {},
	              "BufferingHints": {
	                "shape": "S19"
	              },
	              "RetryOptions": {
	                "shape": "S1c"
	              },
	              "S3Update": {
	                "shape": "S2f"
	              },
	              "ProcessingConfiguration": {
	                "shape": "Sk"
	              },
	              "CloudWatchLoggingOptions": {
	                "shape": "Sf"
	              }
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    }
	  },
	  "shapes": {
	    "S3": {
	      "type": "structure",
	      "required": [
	        "RoleARN",
	        "BucketARN"
	      ],
	      "members": {
	        "RoleARN": {},
	        "BucketARN": {},
	        "Prefix": {},
	        "BufferingHints": {
	          "shape": "S7"
	        },
	        "CompressionFormat": {},
	        "EncryptionConfiguration": {
	          "shape": "Sb"
	        },
	        "CloudWatchLoggingOptions": {
	          "shape": "Sf"
	        }
	      }
	    },
	    "S7": {
	      "type": "structure",
	      "members": {
	        "SizeInMBs": {
	          "type": "integer"
	        },
	        "IntervalInSeconds": {
	          "type": "integer"
	        }
	      }
	    },
	    "Sb": {
	      "type": "structure",
	      "members": {
	        "NoEncryptionConfig": {},
	        "KMSEncryptionConfig": {
	          "type": "structure",
	          "required": [
	            "AWSKMSKeyARN"
	          ],
	          "members": {
	            "AWSKMSKeyARN": {}
	          }
	        }
	      }
	    },
	    "Sf": {
	      "type": "structure",
	      "members": {
	        "Enabled": {
	          "type": "boolean"
	        },
	        "LogGroupName": {},
	        "LogStreamName": {}
	      }
	    },
	    "Sk": {
	      "type": "structure",
	      "members": {
	        "Enabled": {
	          "type": "boolean"
	        },
	        "Processors": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "required": [
	              "Type"
	            ],
	            "members": {
	              "Type": {},
	              "Parameters": {
	                "type": "list",
	                "member": {
	                  "type": "structure",
	                  "required": [
	                    "ParameterName",
	                    "ParameterValue"
	                  ],
	                  "members": {
	                    "ParameterName": {},
	                    "ParameterValue": {}
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "Sv": {
	      "type": "structure",
	      "required": [
	        "DataTableName"
	      ],
	      "members": {
	        "DataTableName": {},
	        "DataTableColumns": {},
	        "CopyOptions": {}
	      }
	    },
	    "Sz": {
	      "type": "string",
	      "sensitive": true
	    },
	    "S10": {
	      "type": "string",
	      "sensitive": true
	    },
	    "S11": {
	      "type": "structure",
	      "members": {
	        "DurationInSeconds": {
	          "type": "integer"
	        }
	      }
	    },
	    "S19": {
	      "type": "structure",
	      "members": {
	        "IntervalInSeconds": {
	          "type": "integer"
	        },
	        "SizeInMBs": {
	          "type": "integer"
	        }
	      }
	    },
	    "S1c": {
	      "type": "structure",
	      "members": {
	        "DurationInSeconds": {
	          "type": "integer"
	        }
	      }
	    },
	    "S1t": {
	      "type": "structure",
	      "required": [
	        "RoleARN",
	        "BucketARN",
	        "BufferingHints",
	        "CompressionFormat",
	        "EncryptionConfiguration"
	      ],
	      "members": {
	        "RoleARN": {},
	        "BucketARN": {},
	        "Prefix": {},
	        "BufferingHints": {
	          "shape": "S7"
	        },
	        "CompressionFormat": {},
	        "EncryptionConfiguration": {
	          "shape": "Sb"
	        },
	        "CloudWatchLoggingOptions": {
	          "shape": "Sf"
	        }
	      }
	    },
	    "S22": {
	      "type": "structure",
	      "required": [
	        "Data"
	      ],
	      "members": {
	        "Data": {
	          "type": "blob"
	        }
	      }
	    },
	    "S2f": {
	      "type": "structure",
	      "members": {
	        "RoleARN": {},
	        "BucketARN": {},
	        "Prefix": {},
	        "BufferingHints": {
	          "shape": "S7"
	        },
	        "CompressionFormat": {},
	        "EncryptionConfiguration": {
	          "shape": "Sb"
	        },
	        "CloudWatchLoggingOptions": {
	          "shape": "Sf"
	        }
	      }
	    }
	  }
	}
	},{}],71:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "uid": "gamelift-2015-10-01",
	    "apiVersion": "2015-10-01",
	    "endpointPrefix": "gamelift",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceFullName": "Amazon GameLift",
	    "signatureVersion": "v4",
	    "targetPrefix": "GameLift"
	  },
	  "operations": {
	    "CreateAlias": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "RoutingStrategy"
	        ],
	        "members": {
	          "Name": {},
	          "Description": {},
	          "RoutingStrategy": {
	            "shape": "S4"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Alias": {
	            "shape": "S9"
	          }
	        }
	      }
	    },
	    "CreateBuild": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Name": {},
	          "Version": {},
	          "StorageLocation": {
	            "shape": "Sd"
	          },
	          "OperatingSystem": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Build": {
	            "shape": "Sh"
	          },
	          "UploadCredentials": {
	            "shape": "Sl"
	          },
	          "StorageLocation": {
	            "shape": "Sd"
	          }
	        }
	      }
	    },
	    "CreateFleet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "BuildId",
	          "EC2InstanceType"
	        ],
	        "members": {
	          "Name": {},
	          "Description": {},
	          "BuildId": {},
	          "ServerLaunchPath": {},
	          "ServerLaunchParameters": {},
	          "LogPaths": {
	            "shape": "Sn"
	          },
	          "EC2InstanceType": {},
	          "EC2InboundPermissions": {
	            "shape": "Sp"
	          },
	          "NewGameSessionProtectionPolicy": {},
	          "RuntimeConfiguration": {
	            "shape": "Sv"
	          },
	          "ResourceCreationLimitPolicy": {
	            "shape": "Sz"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "FleetAttributes": {
	            "shape": "S12"
	          }
	        }
	      }
	    },
	    "CreateGameSession": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "MaximumPlayerSessionCount"
	        ],
	        "members": {
	          "FleetId": {},
	          "AliasId": {},
	          "MaximumPlayerSessionCount": {
	            "type": "integer"
	          },
	          "Name": {},
	          "GameProperties": {
	            "shape": "S15"
	          },
	          "CreatorId": {},
	          "GameSessionId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GameSession": {
	            "shape": "S1b"
	          }
	        }
	      }
	    },
	    "CreatePlayerSession": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GameSessionId",
	          "PlayerId"
	        ],
	        "members": {
	          "GameSessionId": {},
	          "PlayerId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "PlayerSession": {
	            "shape": "S1i"
	          }
	        }
	      }
	    },
	    "CreatePlayerSessions": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GameSessionId",
	          "PlayerIds"
	        ],
	        "members": {
	          "GameSessionId": {},
	          "PlayerIds": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "PlayerSessions": {
	            "shape": "S1o"
	          }
	        }
	      }
	    },
	    "DeleteAlias": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AliasId"
	        ],
	        "members": {
	          "AliasId": {}
	        }
	      }
	    },
	    "DeleteBuild": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "BuildId"
	        ],
	        "members": {
	          "BuildId": {}
	        }
	      }
	    },
	    "DeleteFleet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "FleetId"
	        ],
	        "members": {
	          "FleetId": {}
	        }
	      }
	    },
	    "DeleteScalingPolicy": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "FleetId"
	        ],
	        "members": {
	          "Name": {},
	          "FleetId": {}
	        }
	      }
	    },
	    "DescribeAlias": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AliasId"
	        ],
	        "members": {
	          "AliasId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Alias": {
	            "shape": "S9"
	          }
	        }
	      }
	    },
	    "DescribeBuild": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "BuildId"
	        ],
	        "members": {
	          "BuildId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Build": {
	            "shape": "Sh"
	          }
	        }
	      }
	    },
	    "DescribeEC2InstanceLimits": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "EC2InstanceType": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "EC2InstanceLimits": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "EC2InstanceType": {},
	                "CurrentInstances": {
	                  "type": "integer"
	                },
	                "InstanceLimit": {
	                  "type": "integer"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeFleetAttributes": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "FleetIds": {
	            "shape": "S22"
	          },
	          "Limit": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "FleetAttributes": {
	            "type": "list",
	            "member": {
	              "shape": "S12"
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeFleetCapacity": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "FleetIds": {
	            "shape": "S22"
	          },
	          "Limit": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "FleetCapacity": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "FleetId": {},
	                "InstanceType": {},
	                "InstanceCounts": {
	                  "type": "structure",
	                  "members": {
	                    "DESIRED": {
	                      "type": "integer"
	                    },
	                    "MINIMUM": {
	                      "type": "integer"
	                    },
	                    "MAXIMUM": {
	                      "type": "integer"
	                    },
	                    "PENDING": {
	                      "type": "integer"
	                    },
	                    "ACTIVE": {
	                      "type": "integer"
	                    },
	                    "IDLE": {
	                      "type": "integer"
	                    },
	                    "TERMINATING": {
	                      "type": "integer"
	                    }
	                  }
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeFleetEvents": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "FleetId"
	        ],
	        "members": {
	          "FleetId": {},
	          "StartTime": {
	            "type": "timestamp"
	          },
	          "EndTime": {
	            "type": "timestamp"
	          },
	          "Limit": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Events": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "EventId": {},
	                "ResourceId": {},
	                "EventCode": {},
	                "Message": {},
	                "EventTime": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeFleetPortSettings": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "FleetId"
	        ],
	        "members": {
	          "FleetId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "InboundPermissions": {
	            "shape": "Sp"
	          }
	        }
	      }
	    },
	    "DescribeFleetUtilization": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "FleetIds": {
	            "shape": "S22"
	          },
	          "Limit": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "FleetUtilization": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "FleetId": {},
	                "ActiveServerProcessCount": {
	                  "type": "integer"
	                },
	                "ActiveGameSessionCount": {
	                  "type": "integer"
	                },
	                "CurrentPlayerSessionCount": {
	                  "type": "integer"
	                },
	                "MaximumPlayerSessionCount": {
	                  "type": "integer"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeGameSessionDetails": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "FleetId": {},
	          "GameSessionId": {},
	          "AliasId": {},
	          "StatusFilter": {},
	          "Limit": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GameSessionDetails": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "GameSession": {
	                  "shape": "S1b"
	                },
	                "ProtectionPolicy": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeGameSessions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "FleetId": {},
	          "GameSessionId": {},
	          "AliasId": {},
	          "StatusFilter": {},
	          "Limit": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GameSessions": {
	            "shape": "S2r"
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeInstances": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "FleetId"
	        ],
	        "members": {
	          "FleetId": {},
	          "InstanceId": {},
	          "Limit": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Instances": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "FleetId": {},
	                "InstanceId": {},
	                "IpAddress": {},
	                "OperatingSystem": {},
	                "Type": {},
	                "Status": {},
	                "CreationTime": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribePlayerSessions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "GameSessionId": {},
	          "PlayerId": {},
	          "PlayerSessionId": {},
	          "PlayerSessionStatusFilter": {},
	          "Limit": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "PlayerSessions": {
	            "shape": "S1o"
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeRuntimeConfiguration": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "FleetId"
	        ],
	        "members": {
	          "FleetId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "RuntimeConfiguration": {
	            "shape": "Sv"
	          }
	        }
	      }
	    },
	    "DescribeScalingPolicies": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "FleetId"
	        ],
	        "members": {
	          "FleetId": {},
	          "StatusFilter": {},
	          "Limit": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ScalingPolicies": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "FleetId": {},
	                "Name": {},
	                "Status": {},
	                "ScalingAdjustment": {
	                  "type": "integer"
	                },
	                "ScalingAdjustmentType": {},
	                "ComparisonOperator": {},
	                "Threshold": {
	                  "type": "double"
	                },
	                "EvaluationPeriods": {
	                  "type": "integer"
	                },
	                "MetricName": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "GetGameSessionLogUrl": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GameSessionId"
	        ],
	        "members": {
	          "GameSessionId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "PreSignedUrl": {}
	        }
	      }
	    },
	    "GetInstanceAccess": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "FleetId",
	          "InstanceId"
	        ],
	        "members": {
	          "FleetId": {},
	          "InstanceId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "InstanceAccess": {
	            "type": "structure",
	            "members": {
	              "FleetId": {},
	              "InstanceId": {},
	              "IpAddress": {},
	              "OperatingSystem": {},
	              "Credentials": {
	                "type": "structure",
	                "members": {
	                  "UserName": {},
	                  "Secret": {}
	                },
	                "sensitive": true
	              }
	            }
	          }
	        }
	      }
	    },
	    "ListAliases": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "RoutingStrategyType": {},
	          "Name": {},
	          "Limit": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Aliases": {
	            "type": "list",
	            "member": {
	              "shape": "S9"
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListBuilds": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Status": {},
	          "Limit": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Builds": {
	            "type": "list",
	            "member": {
	              "shape": "Sh"
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListFleets": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "BuildId": {},
	          "Limit": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "FleetIds": {
	            "shape": "S22"
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "PutScalingPolicy": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "FleetId",
	          "ScalingAdjustment",
	          "ScalingAdjustmentType",
	          "Threshold",
	          "ComparisonOperator",
	          "EvaluationPeriods",
	          "MetricName"
	        ],
	        "members": {
	          "Name": {},
	          "FleetId": {},
	          "ScalingAdjustment": {
	            "type": "integer"
	          },
	          "ScalingAdjustmentType": {},
	          "Threshold": {
	            "type": "double"
	          },
	          "ComparisonOperator": {},
	          "EvaluationPeriods": {
	            "type": "integer"
	          },
	          "MetricName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Name": {}
	        }
	      }
	    },
	    "RequestUploadCredentials": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "BuildId"
	        ],
	        "members": {
	          "BuildId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "UploadCredentials": {
	            "shape": "Sl"
	          },
	          "StorageLocation": {
	            "shape": "Sd"
	          }
	        }
	      }
	    },
	    "ResolveAlias": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AliasId"
	        ],
	        "members": {
	          "AliasId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "FleetId": {}
	        }
	      }
	    },
	    "SearchGameSessions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "FleetId": {},
	          "AliasId": {},
	          "FilterExpression": {},
	          "SortExpression": {},
	          "Limit": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GameSessions": {
	            "shape": "S2r"
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "UpdateAlias": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AliasId"
	        ],
	        "members": {
	          "AliasId": {},
	          "Name": {},
	          "Description": {},
	          "RoutingStrategy": {
	            "shape": "S4"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Alias": {
	            "shape": "S9"
	          }
	        }
	      }
	    },
	    "UpdateBuild": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "BuildId"
	        ],
	        "members": {
	          "BuildId": {},
	          "Name": {},
	          "Version": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Build": {
	            "shape": "Sh"
	          }
	        }
	      }
	    },
	    "UpdateFleetAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "FleetId"
	        ],
	        "members": {
	          "FleetId": {},
	          "Name": {},
	          "Description": {},
	          "NewGameSessionProtectionPolicy": {},
	          "ResourceCreationLimitPolicy": {
	            "shape": "Sz"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "FleetId": {}
	        }
	      }
	    },
	    "UpdateFleetCapacity": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "FleetId"
	        ],
	        "members": {
	          "FleetId": {},
	          "DesiredInstances": {
	            "type": "integer"
	          },
	          "MinSize": {
	            "type": "integer"
	          },
	          "MaxSize": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "FleetId": {}
	        }
	      }
	    },
	    "UpdateFleetPortSettings": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "FleetId"
	        ],
	        "members": {
	          "FleetId": {},
	          "InboundPermissionAuthorizations": {
	            "shape": "Sp"
	          },
	          "InboundPermissionRevocations": {
	            "shape": "Sp"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "FleetId": {}
	        }
	      }
	    },
	    "UpdateGameSession": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GameSessionId"
	        ],
	        "members": {
	          "GameSessionId": {},
	          "MaximumPlayerSessionCount": {
	            "type": "integer"
	          },
	          "Name": {},
	          "PlayerSessionCreationPolicy": {},
	          "ProtectionPolicy": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GameSession": {
	            "shape": "S1b"
	          }
	        }
	      }
	    },
	    "UpdateRuntimeConfiguration": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "FleetId",
	          "RuntimeConfiguration"
	        ],
	        "members": {
	          "FleetId": {},
	          "RuntimeConfiguration": {
	            "shape": "Sv"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "RuntimeConfiguration": {
	            "shape": "Sv"
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S4": {
	      "type": "structure",
	      "members": {
	        "Type": {},
	        "FleetId": {},
	        "Message": {}
	      }
	    },
	    "S9": {
	      "type": "structure",
	      "members": {
	        "AliasId": {},
	        "Name": {},
	        "Description": {},
	        "RoutingStrategy": {
	          "shape": "S4"
	        },
	        "CreationTime": {
	          "type": "timestamp"
	        },
	        "LastUpdatedTime": {
	          "type": "timestamp"
	        }
	      }
	    },
	    "Sd": {
	      "type": "structure",
	      "members": {
	        "Bucket": {},
	        "Key": {},
	        "RoleArn": {}
	      }
	    },
	    "Sh": {
	      "type": "structure",
	      "members": {
	        "BuildId": {},
	        "Name": {},
	        "Version": {},
	        "Status": {},
	        "SizeOnDisk": {
	          "type": "long"
	        },
	        "OperatingSystem": {},
	        "CreationTime": {
	          "type": "timestamp"
	        }
	      }
	    },
	    "Sl": {
	      "type": "structure",
	      "members": {
	        "AccessKeyId": {},
	        "SecretAccessKey": {},
	        "SessionToken": {}
	      },
	      "sensitive": true
	    },
	    "Sn": {
	      "type": "list",
	      "member": {}
	    },
	    "Sp": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "FromPort",
	          "ToPort",
	          "IpRange",
	          "Protocol"
	        ],
	        "members": {
	          "FromPort": {
	            "type": "integer"
	          },
	          "ToPort": {
	            "type": "integer"
	          },
	          "IpRange": {},
	          "Protocol": {}
	        }
	      }
	    },
	    "Sv": {
	      "type": "structure",
	      "members": {
	        "ServerProcesses": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "required": [
	              "LaunchPath",
	              "ConcurrentExecutions"
	            ],
	            "members": {
	              "LaunchPath": {},
	              "Parameters": {},
	              "ConcurrentExecutions": {
	                "type": "integer"
	              }
	            }
	          }
	        }
	      }
	    },
	    "Sz": {
	      "type": "structure",
	      "members": {
	        "NewGameSessionsPerCreator": {
	          "type": "integer"
	        },
	        "PolicyPeriodInMinutes": {
	          "type": "integer"
	        }
	      }
	    },
	    "S12": {
	      "type": "structure",
	      "members": {
	        "FleetId": {},
	        "Description": {},
	        "Name": {},
	        "CreationTime": {
	          "type": "timestamp"
	        },
	        "TerminationTime": {
	          "type": "timestamp"
	        },
	        "Status": {},
	        "BuildId": {},
	        "ServerLaunchPath": {},
	        "ServerLaunchParameters": {},
	        "LogPaths": {
	          "shape": "Sn"
	        },
	        "NewGameSessionProtectionPolicy": {},
	        "OperatingSystem": {},
	        "ResourceCreationLimitPolicy": {
	          "shape": "Sz"
	        }
	      }
	    },
	    "S15": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "Key",
	          "Value"
	        ],
	        "members": {
	          "Key": {},
	          "Value": {}
	        }
	      }
	    },
	    "S1b": {
	      "type": "structure",
	      "members": {
	        "GameSessionId": {},
	        "Name": {},
	        "FleetId": {},
	        "CreationTime": {
	          "type": "timestamp"
	        },
	        "TerminationTime": {
	          "type": "timestamp"
	        },
	        "CurrentPlayerSessionCount": {
	          "type": "integer"
	        },
	        "MaximumPlayerSessionCount": {
	          "type": "integer"
	        },
	        "Status": {},
	        "GameProperties": {
	          "shape": "S15"
	        },
	        "IpAddress": {},
	        "Port": {
	          "type": "integer"
	        },
	        "PlayerSessionCreationPolicy": {},
	        "CreatorId": {}
	      }
	    },
	    "S1i": {
	      "type": "structure",
	      "members": {
	        "PlayerSessionId": {},
	        "PlayerId": {},
	        "GameSessionId": {},
	        "FleetId": {},
	        "CreationTime": {
	          "type": "timestamp"
	        },
	        "TerminationTime": {
	          "type": "timestamp"
	        },
	        "Status": {},
	        "IpAddress": {},
	        "Port": {
	          "type": "integer"
	        }
	      }
	    },
	    "S1o": {
	      "type": "list",
	      "member": {
	        "shape": "S1i"
	      }
	    },
	    "S22": {
	      "type": "list",
	      "member": {}
	    },
	    "S2r": {
	      "type": "list",
	      "member": {
	        "shape": "S1b"
	      }
	    }
	  }
	}
	},{}],72:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2016-02-16",
	    "endpointPrefix": "inspector",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceFullName": "Amazon Inspector",
	    "signatureVersion": "v4",
	    "targetPrefix": "InspectorService",
	    "uid": "inspector-2016-02-16"
	  },
	  "operations": {
	    "AddAttributesToFindings": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "findingArns",
	          "attributes"
	        ],
	        "members": {
	          "findingArns": {
	            "shape": "S2"
	          },
	          "attributes": {
	            "shape": "S4"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "failedItems"
	        ],
	        "members": {
	          "failedItems": {
	            "shape": "S9"
	          }
	        }
	      }
	    },
	    "CreateAssessmentTarget": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "assessmentTargetName",
	          "resourceGroupArn"
	        ],
	        "members": {
	          "assessmentTargetName": {},
	          "resourceGroupArn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "assessmentTargetArn"
	        ],
	        "members": {
	          "assessmentTargetArn": {}
	        }
	      }
	    },
	    "CreateAssessmentTemplate": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "assessmentTargetArn",
	          "assessmentTemplateName",
	          "durationInSeconds",
	          "rulesPackageArns"
	        ],
	        "members": {
	          "assessmentTargetArn": {},
	          "assessmentTemplateName": {},
	          "durationInSeconds": {
	            "type": "integer"
	          },
	          "rulesPackageArns": {
	            "shape": "Sj"
	          },
	          "userAttributesForFindings": {
	            "shape": "S4"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "assessmentTemplateArn"
	        ],
	        "members": {
	          "assessmentTemplateArn": {}
	        }
	      }
	    },
	    "CreateResourceGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "resourceGroupTags"
	        ],
	        "members": {
	          "resourceGroupTags": {
	            "shape": "Sm"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "resourceGroupArn"
	        ],
	        "members": {
	          "resourceGroupArn": {}
	        }
	      }
	    },
	    "DeleteAssessmentRun": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "assessmentRunArn"
	        ],
	        "members": {
	          "assessmentRunArn": {}
	        }
	      }
	    },
	    "DeleteAssessmentTarget": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "assessmentTargetArn"
	        ],
	        "members": {
	          "assessmentTargetArn": {}
	        }
	      }
	    },
	    "DeleteAssessmentTemplate": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "assessmentTemplateArn"
	        ],
	        "members": {
	          "assessmentTemplateArn": {}
	        }
	      }
	    },
	    "DescribeAssessmentRuns": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "assessmentRunArns"
	        ],
	        "members": {
	          "assessmentRunArns": {
	            "shape": "Sv"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "assessmentRuns",
	          "failedItems"
	        ],
	        "members": {
	          "assessmentRuns": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "arn",
	                "name",
	                "assessmentTemplateArn",
	                "state",
	                "durationInSeconds",
	                "rulesPackageArns",
	                "userAttributesForFindings",
	                "createdAt",
	                "stateChangedAt",
	                "dataCollected",
	                "stateChanges",
	                "notifications"
	              ],
	              "members": {
	                "arn": {},
	                "name": {},
	                "assessmentTemplateArn": {},
	                "state": {},
	                "durationInSeconds": {
	                  "type": "integer"
	                },
	                "rulesPackageArns": {
	                  "type": "list",
	                  "member": {}
	                },
	                "userAttributesForFindings": {
	                  "shape": "S4"
	                },
	                "createdAt": {
	                  "type": "timestamp"
	                },
	                "startedAt": {
	                  "type": "timestamp"
	                },
	                "completedAt": {
	                  "type": "timestamp"
	                },
	                "stateChangedAt": {
	                  "type": "timestamp"
	                },
	                "dataCollected": {
	                  "type": "boolean"
	                },
	                "stateChanges": {
	                  "type": "list",
	                  "member": {
	                    "type": "structure",
	                    "required": [
	                      "stateChangedAt",
	                      "state"
	                    ],
	                    "members": {
	                      "stateChangedAt": {
	                        "type": "timestamp"
	                      },
	                      "state": {}
	                    }
	                  }
	                },
	                "notifications": {
	                  "type": "list",
	                  "member": {
	                    "type": "structure",
	                    "required": [
	                      "date",
	                      "event",
	                      "error"
	                    ],
	                    "members": {
	                      "date": {
	                        "type": "timestamp"
	                      },
	                      "event": {},
	                      "message": {},
	                      "error": {
	                        "type": "boolean"
	                      },
	                      "snsTopicArn": {},
	                      "snsPublishStatusCode": {}
	                    }
	                  }
	                }
	              }
	            }
	          },
	          "failedItems": {
	            "shape": "S9"
	          }
	        }
	      }
	    },
	    "DescribeAssessmentTargets": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "assessmentTargetArns"
	        ],
	        "members": {
	          "assessmentTargetArns": {
	            "shape": "Sv"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "assessmentTargets",
	          "failedItems"
	        ],
	        "members": {
	          "assessmentTargets": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "arn",
	                "name",
	                "resourceGroupArn",
	                "createdAt",
	                "updatedAt"
	              ],
	              "members": {
	                "arn": {},
	                "name": {},
	                "resourceGroupArn": {},
	                "createdAt": {
	                  "type": "timestamp"
	                },
	                "updatedAt": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          },
	          "failedItems": {
	            "shape": "S9"
	          }
	        }
	      }
	    },
	    "DescribeAssessmentTemplates": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "assessmentTemplateArns"
	        ],
	        "members": {
	          "assessmentTemplateArns": {
	            "shape": "Sv"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "assessmentTemplates",
	          "failedItems"
	        ],
	        "members": {
	          "assessmentTemplates": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "arn",
	                "name",
	                "assessmentTargetArn",
	                "durationInSeconds",
	                "rulesPackageArns",
	                "userAttributesForFindings",
	                "createdAt"
	              ],
	              "members": {
	                "arn": {},
	                "name": {},
	                "assessmentTargetArn": {},
	                "durationInSeconds": {
	                  "type": "integer"
	                },
	                "rulesPackageArns": {
	                  "shape": "Sj"
	                },
	                "userAttributesForFindings": {
	                  "shape": "S4"
	                },
	                "createdAt": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          },
	          "failedItems": {
	            "shape": "S9"
	          }
	        }
	      }
	    },
	    "DescribeCrossAccountAccessRole": {
	      "output": {
	        "type": "structure",
	        "required": [
	          "roleArn",
	          "valid",
	          "registeredAt"
	        ],
	        "members": {
	          "roleArn": {},
	          "valid": {
	            "type": "boolean"
	          },
	          "registeredAt": {
	            "type": "timestamp"
	          }
	        }
	      }
	    },
	    "DescribeFindings": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "findingArns"
	        ],
	        "members": {
	          "findingArns": {
	            "shape": "Sv"
	          },
	          "locale": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "findings",
	          "failedItems"
	        ],
	        "members": {
	          "findings": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "arn",
	                "attributes",
	                "userAttributes",
	                "createdAt",
	                "updatedAt"
	              ],
	              "members": {
	                "arn": {},
	                "schemaVersion": {
	                  "type": "integer"
	                },
	                "service": {},
	                "serviceAttributes": {
	                  "type": "structure",
	                  "required": [
	                    "schemaVersion"
	                  ],
	                  "members": {
	                    "schemaVersion": {
	                      "type": "integer"
	                    },
	                    "assessmentRunArn": {},
	                    "rulesPackageArn": {}
	                  }
	                },
	                "assetType": {},
	                "assetAttributes": {
	                  "type": "structure",
	                  "required": [
	                    "schemaVersion"
	                  ],
	                  "members": {
	                    "schemaVersion": {
	                      "type": "integer"
	                    },
	                    "agentId": {},
	                    "autoScalingGroup": {},
	                    "amiId": {},
	                    "hostname": {},
	                    "ipv4Addresses": {
	                      "type": "list",
	                      "member": {}
	                    }
	                  }
	                },
	                "id": {},
	                "title": {},
	                "description": {},
	                "recommendation": {},
	                "severity": {},
	                "numericSeverity": {
	                  "type": "double"
	                },
	                "confidence": {
	                  "type": "integer"
	                },
	                "indicatorOfCompromise": {
	                  "type": "boolean"
	                },
	                "attributes": {
	                  "shape": "S24"
	                },
	                "userAttributes": {
	                  "shape": "S4"
	                },
	                "createdAt": {
	                  "type": "timestamp"
	                },
	                "updatedAt": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          },
	          "failedItems": {
	            "shape": "S9"
	          }
	        }
	      }
	    },
	    "DescribeResourceGroups": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "resourceGroupArns"
	        ],
	        "members": {
	          "resourceGroupArns": {
	            "shape": "Sv"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "resourceGroups",
	          "failedItems"
	        ],
	        "members": {
	          "resourceGroups": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "arn",
	                "tags",
	                "createdAt"
	              ],
	              "members": {
	                "arn": {},
	                "tags": {
	                  "shape": "Sm"
	                },
	                "createdAt": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          },
	          "failedItems": {
	            "shape": "S9"
	          }
	        }
	      }
	    },
	    "DescribeRulesPackages": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "rulesPackageArns"
	        ],
	        "members": {
	          "rulesPackageArns": {
	            "shape": "Sv"
	          },
	          "locale": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "rulesPackages",
	          "failedItems"
	        ],
	        "members": {
	          "rulesPackages": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "arn",
	                "name",
	                "version",
	                "provider"
	              ],
	              "members": {
	                "arn": {},
	                "name": {},
	                "version": {},
	                "provider": {},
	                "description": {}
	              }
	            }
	          },
	          "failedItems": {
	            "shape": "S9"
	          }
	        }
	      }
	    },
	    "GetTelemetryMetadata": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "assessmentRunArn"
	        ],
	        "members": {
	          "assessmentRunArn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "telemetryMetadata"
	        ],
	        "members": {
	          "telemetryMetadata": {
	            "shape": "S2i"
	          }
	        }
	      }
	    },
	    "ListAssessmentRunAgents": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "assessmentRunArn"
	        ],
	        "members": {
	          "assessmentRunArn": {},
	          "filter": {
	            "type": "structure",
	            "required": [
	              "agentHealths",
	              "agentHealthCodes"
	            ],
	            "members": {
	              "agentHealths": {
	                "type": "list",
	                "member": {}
	              },
	              "agentHealthCodes": {
	                "type": "list",
	                "member": {}
	              }
	            }
	          },
	          "nextToken": {},
	          "maxResults": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "assessmentRunAgents"
	        ],
	        "members": {
	          "assessmentRunAgents": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "agentId",
	                "assessmentRunArn",
	                "agentHealth",
	                "agentHealthCode",
	                "telemetryMetadata"
	              ],
	              "members": {
	                "agentId": {},
	                "assessmentRunArn": {},
	                "agentHealth": {},
	                "agentHealthCode": {},
	                "agentHealthDetails": {},
	                "autoScalingGroup": {},
	                "telemetryMetadata": {
	                  "shape": "S2i"
	                }
	              }
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListAssessmentRuns": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "assessmentTemplateArns": {
	            "shape": "S2y"
	          },
	          "filter": {
	            "type": "structure",
	            "members": {
	              "namePattern": {},
	              "states": {
	                "type": "list",
	                "member": {}
	              },
	              "durationRange": {
	                "shape": "S32"
	              },
	              "rulesPackageArns": {
	                "shape": "S33"
	              },
	              "startTimeRange": {
	                "shape": "S34"
	              },
	              "completionTimeRange": {
	                "shape": "S34"
	              },
	              "stateChangeTimeRange": {
	                "shape": "S34"
	              }
	            }
	          },
	          "nextToken": {},
	          "maxResults": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "assessmentRunArns"
	        ],
	        "members": {
	          "assessmentRunArns": {
	            "shape": "S36"
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListAssessmentTargets": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "filter": {
	            "type": "structure",
	            "members": {
	              "assessmentTargetNamePattern": {}
	            }
	          },
	          "nextToken": {},
	          "maxResults": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "assessmentTargetArns"
	        ],
	        "members": {
	          "assessmentTargetArns": {
	            "shape": "S36"
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListAssessmentTemplates": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "assessmentTargetArns": {
	            "shape": "S2y"
	          },
	          "filter": {
	            "type": "structure",
	            "members": {
	              "namePattern": {},
	              "durationRange": {
	                "shape": "S32"
	              },
	              "rulesPackageArns": {
	                "shape": "S33"
	              }
	            }
	          },
	          "nextToken": {},
	          "maxResults": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "assessmentTemplateArns"
	        ],
	        "members": {
	          "assessmentTemplateArns": {
	            "shape": "S36"
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListEventSubscriptions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "resourceArn": {},
	          "nextToken": {},
	          "maxResults": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "subscriptions"
	        ],
	        "members": {
	          "subscriptions": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "resourceArn",
	                "topicArn",
	                "eventSubscriptions"
	              ],
	              "members": {
	                "resourceArn": {},
	                "topicArn": {},
	                "eventSubscriptions": {
	                  "type": "list",
	                  "member": {
	                    "type": "structure",
	                    "required": [
	                      "event",
	                      "subscribedAt"
	                    ],
	                    "members": {
	                      "event": {},
	                      "subscribedAt": {
	                        "type": "timestamp"
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListFindings": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "assessmentRunArns": {
	            "shape": "S2y"
	          },
	          "filter": {
	            "type": "structure",
	            "members": {
	              "agentIds": {
	                "type": "list",
	                "member": {}
	              },
	              "autoScalingGroups": {
	                "type": "list",
	                "member": {}
	              },
	              "ruleNames": {
	                "type": "list",
	                "member": {}
	              },
	              "severities": {
	                "type": "list",
	                "member": {}
	              },
	              "rulesPackageArns": {
	                "shape": "S33"
	              },
	              "attributes": {
	                "shape": "S24"
	              },
	              "userAttributes": {
	                "shape": "S24"
	              },
	              "creationTimeRange": {
	                "shape": "S34"
	              }
	            }
	          },
	          "nextToken": {},
	          "maxResults": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "findingArns"
	        ],
	        "members": {
	          "findingArns": {
	            "shape": "S36"
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListRulesPackages": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "nextToken": {},
	          "maxResults": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "rulesPackageArns"
	        ],
	        "members": {
	          "rulesPackageArns": {
	            "shape": "S36"
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListTagsForResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "resourceArn"
	        ],
	        "members": {
	          "resourceArn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "tags"
	        ],
	        "members": {
	          "tags": {
	            "shape": "S3w"
	          }
	        }
	      }
	    },
	    "PreviewAgents": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "previewAgentsArn"
	        ],
	        "members": {
	          "previewAgentsArn": {},
	          "nextToken": {},
	          "maxResults": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "agentPreviews"
	        ],
	        "members": {
	          "agentPreviews": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "agentId"
	              ],
	              "members": {
	                "agentId": {},
	                "autoScalingGroup": {}
	              }
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "RegisterCrossAccountAccessRole": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "roleArn"
	        ],
	        "members": {
	          "roleArn": {}
	        }
	      }
	    },
	    "RemoveAttributesFromFindings": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "findingArns",
	          "attributeKeys"
	        ],
	        "members": {
	          "findingArns": {
	            "shape": "S2"
	          },
	          "attributeKeys": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "failedItems"
	        ],
	        "members": {
	          "failedItems": {
	            "shape": "S9"
	          }
	        }
	      }
	    },
	    "SetTagsForResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "resourceArn"
	        ],
	        "members": {
	          "resourceArn": {},
	          "tags": {
	            "shape": "S3w"
	          }
	        }
	      }
	    },
	    "StartAssessmentRun": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "assessmentTemplateArn"
	        ],
	        "members": {
	          "assessmentTemplateArn": {},
	          "assessmentRunName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "assessmentRunArn"
	        ],
	        "members": {
	          "assessmentRunArn": {}
	        }
	      }
	    },
	    "StopAssessmentRun": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "assessmentRunArn"
	        ],
	        "members": {
	          "assessmentRunArn": {}
	        }
	      }
	    },
	    "SubscribeToEvent": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "resourceArn",
	          "event",
	          "topicArn"
	        ],
	        "members": {
	          "resourceArn": {},
	          "event": {},
	          "topicArn": {}
	        }
	      }
	    },
	    "UnsubscribeFromEvent": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "resourceArn",
	          "event",
	          "topicArn"
	        ],
	        "members": {
	          "resourceArn": {},
	          "event": {},
	          "topicArn": {}
	        }
	      }
	    },
	    "UpdateAssessmentTarget": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "assessmentTargetArn",
	          "assessmentTargetName",
	          "resourceGroupArn"
	        ],
	        "members": {
	          "assessmentTargetArn": {},
	          "assessmentTargetName": {},
	          "resourceGroupArn": {}
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S2": {
	      "type": "list",
	      "member": {}
	    },
	    "S4": {
	      "type": "list",
	      "member": {
	        "shape": "S5"
	      }
	    },
	    "S5": {
	      "type": "structure",
	      "required": [
	        "key"
	      ],
	      "members": {
	        "key": {},
	        "value": {}
	      }
	    },
	    "S9": {
	      "type": "map",
	      "key": {},
	      "value": {
	        "type": "structure",
	        "required": [
	          "failureCode",
	          "retryable"
	        ],
	        "members": {
	          "failureCode": {},
	          "retryable": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "Sj": {
	      "type": "list",
	      "member": {}
	    },
	    "Sm": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "key"
	        ],
	        "members": {
	          "key": {},
	          "value": {}
	        }
	      }
	    },
	    "Sv": {
	      "type": "list",
	      "member": {}
	    },
	    "S24": {
	      "type": "list",
	      "member": {
	        "shape": "S5"
	      }
	    },
	    "S2i": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "messageType",
	          "count"
	        ],
	        "members": {
	          "messageType": {},
	          "count": {
	            "type": "long"
	          },
	          "dataSize": {
	            "type": "long"
	          }
	        }
	      }
	    },
	    "S2y": {
	      "type": "list",
	      "member": {}
	    },
	    "S32": {
	      "type": "structure",
	      "members": {
	        "minSeconds": {
	          "type": "integer"
	        },
	        "maxSeconds": {
	          "type": "integer"
	        }
	      }
	    },
	    "S33": {
	      "type": "list",
	      "member": {}
	    },
	    "S34": {
	      "type": "structure",
	      "members": {
	        "beginDate": {
	          "type": "timestamp"
	        },
	        "endDate": {
	          "type": "timestamp"
	        }
	      }
	    },
	    "S36": {
	      "type": "list",
	      "member": {}
	    },
	    "S3w": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "key"
	        ],
	        "members": {
	          "key": {},
	          "value": {}
	        }
	      }
	    }
	  }
	}
	},{}],73:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "uid": "iot-2015-05-28",
	    "apiVersion": "2015-05-28",
	    "endpointPrefix": "iot",
	    "serviceFullName": "AWS IoT",
	    "signatureVersion": "v4",
	    "signingName": "execute-api",
	    "protocol": "rest-json"
	  },
	  "operations": {
	    "AcceptCertificateTransfer": {
	      "http": {
	        "method": "PATCH",
	        "requestUri": "/accept-certificate-transfer/{certificateId}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "certificateId"
	        ],
	        "members": {
	          "certificateId": {
	            "location": "uri",
	            "locationName": "certificateId"
	          },
	          "setAsActive": {
	            "location": "querystring",
	            "locationName": "setAsActive",
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "AttachPrincipalPolicy": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/principal-policies/{policyName}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "policyName",
	          "principal"
	        ],
	        "members": {
	          "policyName": {
	            "location": "uri",
	            "locationName": "policyName"
	          },
	          "principal": {
	            "location": "header",
	            "locationName": "x-amzn-iot-principal"
	          }
	        }
	      }
	    },
	    "AttachThingPrincipal": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/things/{thingName}/principals"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "thingName",
	          "principal"
	        ],
	        "members": {
	          "thingName": {
	            "location": "uri",
	            "locationName": "thingName"
	          },
	          "principal": {
	            "location": "header",
	            "locationName": "x-amzn-principal"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "CancelCertificateTransfer": {
	      "http": {
	        "method": "PATCH",
	        "requestUri": "/cancel-certificate-transfer/{certificateId}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "certificateId"
	        ],
	        "members": {
	          "certificateId": {
	            "location": "uri",
	            "locationName": "certificateId"
	          }
	        }
	      }
	    },
	    "CreateCertificateFromCsr": {
	      "http": {
	        "requestUri": "/certificates"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "certificateSigningRequest"
	        ],
	        "members": {
	          "certificateSigningRequest": {},
	          "setAsActive": {
	            "location": "querystring",
	            "locationName": "setAsActive",
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "certificateArn": {},
	          "certificateId": {},
	          "certificatePem": {}
	        }
	      }
	    },
	    "CreateKeysAndCertificate": {
	      "http": {
	        "requestUri": "/keys-and-certificate"
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "setAsActive": {
	            "location": "querystring",
	            "locationName": "setAsActive",
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "certificateArn": {},
	          "certificateId": {},
	          "certificatePem": {},
	          "keyPair": {
	            "type": "structure",
	            "members": {
	              "PublicKey": {},
	              "PrivateKey": {
	                "type": "string",
	                "sensitive": true
	              }
	            }
	          }
	        }
	      }
	    },
	    "CreatePolicy": {
	      "http": {
	        "requestUri": "/policies/{policyName}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "policyName",
	          "policyDocument"
	        ],
	        "members": {
	          "policyName": {
	            "location": "uri",
	            "locationName": "policyName"
	          },
	          "policyDocument": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "policyName": {},
	          "policyArn": {},
	          "policyDocument": {},
	          "policyVersionId": {}
	        }
	      }
	    },
	    "CreatePolicyVersion": {
	      "http": {
	        "requestUri": "/policies/{policyName}/version"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "policyName",
	          "policyDocument"
	        ],
	        "members": {
	          "policyName": {
	            "location": "uri",
	            "locationName": "policyName"
	          },
	          "policyDocument": {},
	          "setAsDefault": {
	            "location": "querystring",
	            "locationName": "setAsDefault",
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "policyArn": {},
	          "policyDocument": {},
	          "policyVersionId": {},
	          "isDefaultVersion": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "CreateThing": {
	      "http": {
	        "requestUri": "/things/{thingName}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "thingName"
	        ],
	        "members": {
	          "thingName": {
	            "location": "uri",
	            "locationName": "thingName"
	          },
	          "thingTypeName": {},
	          "attributePayload": {
	            "shape": "Sw"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "thingName": {},
	          "thingArn": {}
	        }
	      }
	    },
	    "CreateThingType": {
	      "http": {
	        "requestUri": "/thing-types/{thingTypeName}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "thingTypeName"
	        ],
	        "members": {
	          "thingTypeName": {
	            "location": "uri",
	            "locationName": "thingTypeName"
	          },
	          "thingTypeProperties": {
	            "shape": "S14"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "thingTypeName": {},
	          "thingTypeArn": {}
	        }
	      }
	    },
	    "CreateTopicRule": {
	      "http": {
	        "requestUri": "/rules/{ruleName}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "ruleName",
	          "topicRulePayload"
	        ],
	        "members": {
	          "ruleName": {
	            "location": "uri",
	            "locationName": "ruleName"
	          },
	          "topicRulePayload": {
	            "shape": "S1b"
	          }
	        },
	        "payload": "topicRulePayload"
	      }
	    },
	    "DeleteCACertificate": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/cacertificate/{caCertificateId}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "certificateId"
	        ],
	        "members": {
	          "certificateId": {
	            "location": "uri",
	            "locationName": "caCertificateId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteCertificate": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/certificates/{certificateId}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "certificateId"
	        ],
	        "members": {
	          "certificateId": {
	            "location": "uri",
	            "locationName": "certificateId"
	          }
	        }
	      }
	    },
	    "DeletePolicy": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/policies/{policyName}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "policyName"
	        ],
	        "members": {
	          "policyName": {
	            "location": "uri",
	            "locationName": "policyName"
	          }
	        }
	      }
	    },
	    "DeletePolicyVersion": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/policies/{policyName}/version/{policyVersionId}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "policyName",
	          "policyVersionId"
	        ],
	        "members": {
	          "policyName": {
	            "location": "uri",
	            "locationName": "policyName"
	          },
	          "policyVersionId": {
	            "location": "uri",
	            "locationName": "policyVersionId"
	          }
	        }
	      }
	    },
	    "DeleteRegistrationCode": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/registrationcode"
	      },
	      "input": {
	        "type": "structure",
	        "members": {}
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteThing": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/things/{thingName}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "thingName"
	        ],
	        "members": {
	          "thingName": {
	            "location": "uri",
	            "locationName": "thingName"
	          },
	          "expectedVersion": {
	            "location": "querystring",
	            "locationName": "expectedVersion",
	            "type": "long"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteThingType": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/thing-types/{thingTypeName}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "thingTypeName"
	        ],
	        "members": {
	          "thingTypeName": {
	            "location": "uri",
	            "locationName": "thingTypeName"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteTopicRule": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/rules/{ruleName}"
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "ruleName": {
	            "location": "uri",
	            "locationName": "ruleName"
	          }
	        },
	        "required": [
	          "ruleName"
	        ]
	      }
	    },
	    "DeprecateThingType": {
	      "http": {
	        "requestUri": "/thing-types/{thingTypeName}/deprecate"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "thingTypeName"
	        ],
	        "members": {
	          "thingTypeName": {
	            "location": "uri",
	            "locationName": "thingTypeName"
	          },
	          "undoDeprecate": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DescribeCACertificate": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/cacertificate/{caCertificateId}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "certificateId"
	        ],
	        "members": {
	          "certificateId": {
	            "location": "uri",
	            "locationName": "caCertificateId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "certificateDescription": {
	            "type": "structure",
	            "members": {
	              "certificateArn": {},
	              "certificateId": {},
	              "status": {},
	              "certificatePem": {},
	              "ownedBy": {},
	              "creationDate": {
	                "type": "timestamp"
	              },
	              "autoRegistrationStatus": {}
	            }
	          }
	        }
	      }
	    },
	    "DescribeCertificate": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/certificates/{certificateId}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "certificateId"
	        ],
	        "members": {
	          "certificateId": {
	            "location": "uri",
	            "locationName": "certificateId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "certificateDescription": {
	            "type": "structure",
	            "members": {
	              "certificateArn": {},
	              "certificateId": {},
	              "caCertificateId": {},
	              "status": {},
	              "certificatePem": {},
	              "ownedBy": {},
	              "previousOwnedBy": {},
	              "creationDate": {
	                "type": "timestamp"
	              },
	              "lastModifiedDate": {
	                "type": "timestamp"
	              },
	              "transferData": {
	                "type": "structure",
	                "members": {
	                  "transferMessage": {},
	                  "rejectReason": {},
	                  "transferDate": {
	                    "type": "timestamp"
	                  },
	                  "acceptDate": {
	                    "type": "timestamp"
	                  },
	                  "rejectDate": {
	                    "type": "timestamp"
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeEndpoint": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/endpoint"
	      },
	      "input": {
	        "type": "structure",
	        "members": {}
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "endpointAddress": {}
	        }
	      }
	    },
	    "DescribeThing": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/things/{thingName}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "thingName"
	        ],
	        "members": {
	          "thingName": {
	            "location": "uri",
	            "locationName": "thingName"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "defaultClientId": {},
	          "thingName": {},
	          "thingTypeName": {},
	          "attributes": {
	            "shape": "Sx"
	          },
	          "version": {
	            "type": "long"
	          }
	        }
	      }
	    },
	    "DescribeThingType": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/thing-types/{thingTypeName}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "thingTypeName"
	        ],
	        "members": {
	          "thingTypeName": {
	            "location": "uri",
	            "locationName": "thingTypeName"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "thingTypeName": {},
	          "thingTypeProperties": {
	            "shape": "S14"
	          },
	          "thingTypeMetadata": {
	            "shape": "S3u"
	          }
	        }
	      }
	    },
	    "DetachPrincipalPolicy": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/principal-policies/{policyName}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "policyName",
	          "principal"
	        ],
	        "members": {
	          "policyName": {
	            "location": "uri",
	            "locationName": "policyName"
	          },
	          "principal": {
	            "location": "header",
	            "locationName": "x-amzn-iot-principal"
	          }
	        }
	      }
	    },
	    "DetachThingPrincipal": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/things/{thingName}/principals"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "thingName",
	          "principal"
	        ],
	        "members": {
	          "thingName": {
	            "location": "uri",
	            "locationName": "thingName"
	          },
	          "principal": {
	            "location": "header",
	            "locationName": "x-amzn-principal"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DisableTopicRule": {
	      "http": {
	        "requestUri": "/rules/{ruleName}/disable"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "ruleName"
	        ],
	        "members": {
	          "ruleName": {
	            "location": "uri",
	            "locationName": "ruleName"
	          }
	        }
	      }
	    },
	    "EnableTopicRule": {
	      "http": {
	        "requestUri": "/rules/{ruleName}/enable"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "ruleName"
	        ],
	        "members": {
	          "ruleName": {
	            "location": "uri",
	            "locationName": "ruleName"
	          }
	        }
	      }
	    },
	    "GetLoggingOptions": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/loggingOptions"
	      },
	      "input": {
	        "type": "structure",
	        "members": {}
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "roleArn": {},
	          "logLevel": {}
	        }
	      }
	    },
	    "GetPolicy": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/policies/{policyName}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "policyName"
	        ],
	        "members": {
	          "policyName": {
	            "location": "uri",
	            "locationName": "policyName"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "policyName": {},
	          "policyArn": {},
	          "policyDocument": {},
	          "defaultVersionId": {}
	        }
	      }
	    },
	    "GetPolicyVersion": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/policies/{policyName}/version/{policyVersionId}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "policyName",
	          "policyVersionId"
	        ],
	        "members": {
	          "policyName": {
	            "location": "uri",
	            "locationName": "policyName"
	          },
	          "policyVersionId": {
	            "location": "uri",
	            "locationName": "policyVersionId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "policyArn": {},
	          "policyName": {},
	          "policyDocument": {},
	          "policyVersionId": {},
	          "isDefaultVersion": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "GetRegistrationCode": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/registrationcode"
	      },
	      "input": {
	        "type": "structure",
	        "members": {}
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "registrationCode": {}
	        }
	      }
	    },
	    "GetTopicRule": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/rules/{ruleName}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "ruleName"
	        ],
	        "members": {
	          "ruleName": {
	            "location": "uri",
	            "locationName": "ruleName"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ruleArn": {},
	          "rule": {
	            "type": "structure",
	            "members": {
	              "ruleName": {},
	              "sql": {},
	              "description": {},
	              "createdAt": {
	                "type": "timestamp"
	              },
	              "actions": {
	                "shape": "S1e"
	              },
	              "ruleDisabled": {
	                "type": "boolean"
	              },
	              "awsIotSqlVersion": {}
	            }
	          }
	        }
	      }
	    },
	    "ListCACertificates": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/cacertificates"
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "pageSize": {
	            "location": "querystring",
	            "locationName": "pageSize",
	            "type": "integer"
	          },
	          "marker": {
	            "location": "querystring",
	            "locationName": "marker"
	          },
	          "ascendingOrder": {
	            "location": "querystring",
	            "locationName": "isAscendingOrder",
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "certificates": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "certificateArn": {},
	                "certificateId": {},
	                "status": {},
	                "creationDate": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          },
	          "nextMarker": {}
	        }
	      }
	    },
	    "ListCertificates": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/certificates"
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "pageSize": {
	            "location": "querystring",
	            "locationName": "pageSize",
	            "type": "integer"
	          },
	          "marker": {
	            "location": "querystring",
	            "locationName": "marker"
	          },
	          "ascendingOrder": {
	            "location": "querystring",
	            "locationName": "isAscendingOrder",
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "certificates": {
	            "shape": "S4r"
	          },
	          "nextMarker": {}
	        }
	      }
	    },
	    "ListCertificatesByCA": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/certificates-by-ca/{caCertificateId}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "caCertificateId"
	        ],
	        "members": {
	          "caCertificateId": {
	            "location": "uri",
	            "locationName": "caCertificateId"
	          },
	          "pageSize": {
	            "location": "querystring",
	            "locationName": "pageSize",
	            "type": "integer"
	          },
	          "marker": {
	            "location": "querystring",
	            "locationName": "marker"
	          },
	          "ascendingOrder": {
	            "location": "querystring",
	            "locationName": "isAscendingOrder",
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "certificates": {
	            "shape": "S4r"
	          },
	          "nextMarker": {}
	        }
	      }
	    },
	    "ListOutgoingCertificates": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/certificates-out-going"
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "pageSize": {
	            "location": "querystring",
	            "locationName": "pageSize",
	            "type": "integer"
	          },
	          "marker": {
	            "location": "querystring",
	            "locationName": "marker"
	          },
	          "ascendingOrder": {
	            "location": "querystring",
	            "locationName": "isAscendingOrder",
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "outgoingCertificates": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "certificateArn": {},
	                "certificateId": {},
	                "transferredTo": {},
	                "transferDate": {
	                  "type": "timestamp"
	                },
	                "transferMessage": {},
	                "creationDate": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          },
	          "nextMarker": {}
	        }
	      }
	    },
	    "ListPolicies": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/policies"
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "marker": {
	            "location": "querystring",
	            "locationName": "marker"
	          },
	          "pageSize": {
	            "location": "querystring",
	            "locationName": "pageSize",
	            "type": "integer"
	          },
	          "ascendingOrder": {
	            "location": "querystring",
	            "locationName": "isAscendingOrder",
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "policies": {
	            "shape": "S51"
	          },
	          "nextMarker": {}
	        }
	      }
	    },
	    "ListPolicyPrincipals": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/policy-principals"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "policyName"
	        ],
	        "members": {
	          "policyName": {
	            "location": "header",
	            "locationName": "x-amzn-iot-policy"
	          },
	          "marker": {
	            "location": "querystring",
	            "locationName": "marker"
	          },
	          "pageSize": {
	            "location": "querystring",
	            "locationName": "pageSize",
	            "type": "integer"
	          },
	          "ascendingOrder": {
	            "location": "querystring",
	            "locationName": "isAscendingOrder",
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "principals": {
	            "shape": "S55"
	          },
	          "nextMarker": {}
	        }
	      }
	    },
	    "ListPolicyVersions": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/policies/{policyName}/version"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "policyName"
	        ],
	        "members": {
	          "policyName": {
	            "location": "uri",
	            "locationName": "policyName"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "policyVersions": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "versionId": {},
	                "isDefaultVersion": {
	                  "type": "boolean"
	                },
	                "createDate": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "ListPrincipalPolicies": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/principal-policies"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "principal"
	        ],
	        "members": {
	          "principal": {
	            "location": "header",
	            "locationName": "x-amzn-iot-principal"
	          },
	          "marker": {
	            "location": "querystring",
	            "locationName": "marker"
	          },
	          "pageSize": {
	            "location": "querystring",
	            "locationName": "pageSize",
	            "type": "integer"
	          },
	          "ascendingOrder": {
	            "location": "querystring",
	            "locationName": "isAscendingOrder",
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "policies": {
	            "shape": "S51"
	          },
	          "nextMarker": {}
	        }
	      }
	    },
	    "ListPrincipalThings": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/principals/things"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "principal"
	        ],
	        "members": {
	          "nextToken": {
	            "location": "querystring",
	            "locationName": "nextToken"
	          },
	          "maxResults": {
	            "location": "querystring",
	            "locationName": "maxResults",
	            "type": "integer"
	          },
	          "principal": {
	            "location": "header",
	            "locationName": "x-amzn-principal"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "things": {
	            "type": "list",
	            "member": {}
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListThingPrincipals": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/things/{thingName}/principals"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "thingName"
	        ],
	        "members": {
	          "thingName": {
	            "location": "uri",
	            "locationName": "thingName"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "principals": {
	            "shape": "S55"
	          }
	        }
	      }
	    },
	    "ListThingTypes": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/thing-types"
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "nextToken": {
	            "location": "querystring",
	            "locationName": "nextToken"
	          },
	          "maxResults": {
	            "location": "querystring",
	            "locationName": "maxResults",
	            "type": "integer"
	          },
	          "thingTypeName": {
	            "location": "querystring",
	            "locationName": "thingTypeName"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "thingTypes": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "thingTypeName": {},
	                "thingTypeProperties": {
	                  "shape": "S14"
	                },
	                "thingTypeMetadata": {
	                  "shape": "S3u"
	                }
	              }
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListThings": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/things"
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "nextToken": {
	            "location": "querystring",
	            "locationName": "nextToken"
	          },
	          "maxResults": {
	            "location": "querystring",
	            "locationName": "maxResults",
	            "type": "integer"
	          },
	          "attributeName": {
	            "location": "querystring",
	            "locationName": "attributeName"
	          },
	          "attributeValue": {
	            "location": "querystring",
	            "locationName": "attributeValue"
	          },
	          "thingTypeName": {
	            "location": "querystring",
	            "locationName": "thingTypeName"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "things": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "thingName": {},
	                "thingTypeName": {},
	                "attributes": {
	                  "shape": "Sx"
	                },
	                "version": {
	                  "type": "long"
	                }
	              }
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListTopicRules": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/rules"
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "topic": {
	            "location": "querystring",
	            "locationName": "topic"
	          },
	          "maxResults": {
	            "location": "querystring",
	            "locationName": "maxResults",
	            "type": "integer"
	          },
	          "nextToken": {
	            "location": "querystring",
	            "locationName": "nextToken"
	          },
	          "ruleDisabled": {
	            "location": "querystring",
	            "locationName": "ruleDisabled",
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "rules": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "ruleArn": {},
	                "ruleName": {},
	                "topicPattern": {},
	                "createdAt": {
	                  "type": "timestamp"
	                },
	                "ruleDisabled": {
	                  "type": "boolean"
	                }
	              }
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "RegisterCACertificate": {
	      "http": {
	        "requestUri": "/cacertificate"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "caCertificate",
	          "verificationCertificate"
	        ],
	        "members": {
	          "caCertificate": {},
	          "verificationCertificate": {},
	          "setAsActive": {
	            "location": "querystring",
	            "locationName": "setAsActive",
	            "type": "boolean"
	          },
	          "allowAutoRegistration": {
	            "location": "querystring",
	            "locationName": "allowAutoRegistration",
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "certificateArn": {},
	          "certificateId": {}
	        }
	      }
	    },
	    "RegisterCertificate": {
	      "http": {
	        "requestUri": "/certificate/register"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "certificatePem"
	        ],
	        "members": {
	          "certificatePem": {},
	          "caCertificatePem": {},
	          "setAsActive": {
	            "deprecated": true,
	            "location": "querystring",
	            "locationName": "setAsActive",
	            "type": "boolean"
	          },
	          "status": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "certificateArn": {},
	          "certificateId": {}
	        }
	      }
	    },
	    "RejectCertificateTransfer": {
	      "http": {
	        "method": "PATCH",
	        "requestUri": "/reject-certificate-transfer/{certificateId}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "certificateId"
	        ],
	        "members": {
	          "certificateId": {
	            "location": "uri",
	            "locationName": "certificateId"
	          },
	          "rejectReason": {}
	        }
	      }
	    },
	    "ReplaceTopicRule": {
	      "http": {
	        "method": "PATCH",
	        "requestUri": "/rules/{ruleName}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "ruleName",
	          "topicRulePayload"
	        ],
	        "members": {
	          "ruleName": {
	            "location": "uri",
	            "locationName": "ruleName"
	          },
	          "topicRulePayload": {
	            "shape": "S1b"
	          }
	        },
	        "payload": "topicRulePayload"
	      }
	    },
	    "SetDefaultPolicyVersion": {
	      "http": {
	        "method": "PATCH",
	        "requestUri": "/policies/{policyName}/version/{policyVersionId}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "policyName",
	          "policyVersionId"
	        ],
	        "members": {
	          "policyName": {
	            "location": "uri",
	            "locationName": "policyName"
	          },
	          "policyVersionId": {
	            "location": "uri",
	            "locationName": "policyVersionId"
	          }
	        }
	      }
	    },
	    "SetLoggingOptions": {
	      "http": {
	        "requestUri": "/loggingOptions"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "loggingOptionsPayload"
	        ],
	        "members": {
	          "loggingOptionsPayload": {
	            "type": "structure",
	            "required": [
	              "roleArn"
	            ],
	            "members": {
	              "roleArn": {},
	              "logLevel": {}
	            }
	          }
	        },
	        "payload": "loggingOptionsPayload"
	      }
	    },
	    "TransferCertificate": {
	      "http": {
	        "method": "PATCH",
	        "requestUri": "/transfer-certificate/{certificateId}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "certificateId",
	          "targetAwsAccount"
	        ],
	        "members": {
	          "certificateId": {
	            "location": "uri",
	            "locationName": "certificateId"
	          },
	          "targetAwsAccount": {
	            "location": "querystring",
	            "locationName": "targetAwsAccount"
	          },
	          "transferMessage": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "transferredCertificateArn": {}
	        }
	      }
	    },
	    "UpdateCACertificate": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/cacertificate/{caCertificateId}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "certificateId"
	        ],
	        "members": {
	          "certificateId": {
	            "location": "uri",
	            "locationName": "caCertificateId"
	          },
	          "newStatus": {
	            "location": "querystring",
	            "locationName": "newStatus"
	          },
	          "newAutoRegistrationStatus": {
	            "location": "querystring",
	            "locationName": "newAutoRegistrationStatus"
	          }
	        }
	      }
	    },
	    "UpdateCertificate": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/certificates/{certificateId}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "certificateId",
	          "newStatus"
	        ],
	        "members": {
	          "certificateId": {
	            "location": "uri",
	            "locationName": "certificateId"
	          },
	          "newStatus": {
	            "location": "querystring",
	            "locationName": "newStatus"
	          }
	        }
	      }
	    },
	    "UpdateThing": {
	      "http": {
	        "method": "PATCH",
	        "requestUri": "/things/{thingName}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "thingName"
	        ],
	        "members": {
	          "thingName": {
	            "location": "uri",
	            "locationName": "thingName"
	          },
	          "thingTypeName": {},
	          "attributePayload": {
	            "shape": "Sw"
	          },
	          "expectedVersion": {
	            "type": "long"
	          },
	          "removeThingType": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    }
	  },
	  "shapes": {
	    "Sw": {
	      "type": "structure",
	      "members": {
	        "attributes": {
	          "shape": "Sx"
	        },
	        "merge": {
	          "type": "boolean"
	        }
	      }
	    },
	    "Sx": {
	      "type": "map",
	      "key": {},
	      "value": {}
	    },
	    "S14": {
	      "type": "structure",
	      "members": {
	        "thingTypeDescription": {},
	        "searchableAttributes": {
	          "type": "list",
	          "member": {}
	        }
	      }
	    },
	    "S1b": {
	      "type": "structure",
	      "required": [
	        "sql",
	        "actions"
	      ],
	      "members": {
	        "sql": {},
	        "description": {},
	        "actions": {
	          "shape": "S1e"
	        },
	        "ruleDisabled": {
	          "type": "boolean"
	        },
	        "awsIotSqlVersion": {}
	      }
	    },
	    "S1e": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "dynamoDB": {
	            "type": "structure",
	            "required": [
	              "tableName",
	              "roleArn",
	              "hashKeyField",
	              "hashKeyValue"
	            ],
	            "members": {
	              "tableName": {},
	              "roleArn": {},
	              "operation": {},
	              "hashKeyField": {},
	              "hashKeyValue": {},
	              "hashKeyType": {},
	              "rangeKeyField": {},
	              "rangeKeyValue": {},
	              "rangeKeyType": {},
	              "payloadField": {}
	            }
	          },
	          "dynamoDBv2": {
	            "type": "structure",
	            "members": {
	              "roleArn": {},
	              "putItem": {
	                "type": "structure",
	                "required": [
	                  "tableName"
	                ],
	                "members": {
	                  "tableName": {}
	                }
	              }
	            }
	          },
	          "lambda": {
	            "type": "structure",
	            "required": [
	              "functionArn"
	            ],
	            "members": {
	              "functionArn": {}
	            }
	          },
	          "sns": {
	            "type": "structure",
	            "required": [
	              "targetArn",
	              "roleArn"
	            ],
	            "members": {
	              "targetArn": {},
	              "roleArn": {},
	              "messageFormat": {}
	            }
	          },
	          "sqs": {
	            "type": "structure",
	            "required": [
	              "roleArn",
	              "queueUrl"
	            ],
	            "members": {
	              "roleArn": {},
	              "queueUrl": {},
	              "useBase64": {
	                "type": "boolean"
	              }
	            }
	          },
	          "kinesis": {
	            "type": "structure",
	            "required": [
	              "roleArn",
	              "streamName"
	            ],
	            "members": {
	              "roleArn": {},
	              "streamName": {},
	              "partitionKey": {}
	            }
	          },
	          "republish": {
	            "type": "structure",
	            "required": [
	              "roleArn",
	              "topic"
	            ],
	            "members": {
	              "roleArn": {},
	              "topic": {}
	            }
	          },
	          "s3": {
	            "type": "structure",
	            "required": [
	              "roleArn",
	              "bucketName",
	              "key"
	            ],
	            "members": {
	              "roleArn": {},
	              "bucketName": {},
	              "key": {},
	              "cannedAcl": {}
	            }
	          },
	          "firehose": {
	            "type": "structure",
	            "required": [
	              "roleArn",
	              "deliveryStreamName"
	            ],
	            "members": {
	              "roleArn": {},
	              "deliveryStreamName": {},
	              "separator": {}
	            }
	          },
	          "cloudwatchMetric": {
	            "type": "structure",
	            "required": [
	              "roleArn",
	              "metricNamespace",
	              "metricName",
	              "metricValue",
	              "metricUnit"
	            ],
	            "members": {
	              "roleArn": {},
	              "metricNamespace": {},
	              "metricName": {},
	              "metricValue": {},
	              "metricUnit": {},
	              "metricTimestamp": {}
	            }
	          },
	          "cloudwatchAlarm": {
	            "type": "structure",
	            "required": [
	              "roleArn",
	              "alarmName",
	              "stateReason",
	              "stateValue"
	            ],
	            "members": {
	              "roleArn": {},
	              "alarmName": {},
	              "stateReason": {},
	              "stateValue": {}
	            }
	          },
	          "elasticsearch": {
	            "type": "structure",
	            "required": [
	              "roleArn",
	              "endpoint",
	              "index",
	              "type",
	              "id"
	            ],
	            "members": {
	              "roleArn": {},
	              "endpoint": {},
	              "index": {},
	              "type": {},
	              "id": {}
	            }
	          }
	        }
	      }
	    },
	    "S3u": {
	      "type": "structure",
	      "members": {
	        "deprecated": {
	          "type": "boolean"
	        },
	        "deprecationDate": {
	          "type": "timestamp"
	        },
	        "creationDate": {
	          "type": "timestamp"
	        }
	      }
	    },
	    "S4r": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "certificateArn": {},
	          "certificateId": {},
	          "status": {},
	          "creationDate": {
	            "type": "timestamp"
	          }
	        }
	      }
	    },
	    "S51": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "policyName": {},
	          "policyArn": {}
	        }
	      }
	    },
	    "S55": {
	      "type": "list",
	      "member": {}
	    }
	  },
	  "examples": {}
	}
	},{}],74:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "uid": "iot-data-2015-05-28",
	    "apiVersion": "2015-05-28",
	    "endpointPrefix": "data.iot",
	    "protocol": "rest-json",
	    "serviceFullName": "AWS IoT Data Plane",
	    "signatureVersion": "v4",
	    "signingName": "iotdata"
	  },
	  "operations": {
	    "DeleteThingShadow": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/things/{thingName}/shadow"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "thingName"
	        ],
	        "members": {
	          "thingName": {
	            "location": "uri",
	            "locationName": "thingName"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "payload"
	        ],
	        "members": {
	          "payload": {
	            "type": "blob"
	          }
	        },
	        "payload": "payload"
	      }
	    },
	    "GetThingShadow": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/things/{thingName}/shadow"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "thingName"
	        ],
	        "members": {
	          "thingName": {
	            "location": "uri",
	            "locationName": "thingName"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "payload": {
	            "type": "blob"
	          }
	        },
	        "payload": "payload"
	      }
	    },
	    "Publish": {
	      "http": {
	        "requestUri": "/topics/{topic}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "topic"
	        ],
	        "members": {
	          "topic": {
	            "location": "uri",
	            "locationName": "topic"
	          },
	          "qos": {
	            "location": "querystring",
	            "locationName": "qos",
	            "type": "integer"
	          },
	          "payload": {
	            "type": "blob"
	          }
	        },
	        "payload": "payload"
	      }
	    },
	    "UpdateThingShadow": {
	      "http": {
	        "requestUri": "/things/{thingName}/shadow"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "thingName",
	          "payload"
	        ],
	        "members": {
	          "thingName": {
	            "location": "uri",
	            "locationName": "thingName"
	          },
	          "payload": {
	            "type": "blob"
	          }
	        },
	        "payload": "payload"
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "payload": {
	            "type": "blob"
	          }
	        },
	        "payload": "payload"
	      }
	    }
	  },
	  "shapes": {}
	}
	},{}],75:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "uid": "kinesis-2013-12-02",
	    "apiVersion": "2013-12-02",
	    "endpointPrefix": "kinesis",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceAbbreviation": "Kinesis",
	    "serviceFullName": "Amazon Kinesis",
	    "signatureVersion": "v4",
	    "targetPrefix": "Kinesis_20131202"
	  },
	  "operations": {
	    "AddTagsToStream": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StreamName",
	          "Tags"
	        ],
	        "members": {
	          "StreamName": {},
	          "Tags": {
	            "type": "map",
	            "key": {},
	            "value": {}
	          }
	        }
	      }
	    },
	    "CreateStream": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StreamName",
	          "ShardCount"
	        ],
	        "members": {
	          "StreamName": {},
	          "ShardCount": {
	            "type": "integer"
	          }
	        }
	      }
	    },
	    "DecreaseStreamRetentionPeriod": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StreamName",
	          "RetentionPeriodHours"
	        ],
	        "members": {
	          "StreamName": {},
	          "RetentionPeriodHours": {
	            "type": "integer"
	          }
	        }
	      }
	    },
	    "DeleteStream": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StreamName"
	        ],
	        "members": {
	          "StreamName": {}
	        }
	      }
	    },
	    "DescribeLimits": {
	      "input": {
	        "type": "structure",
	        "members": {}
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "ShardLimit",
	          "OpenShardCount"
	        ],
	        "members": {
	          "ShardLimit": {
	            "type": "integer"
	          },
	          "OpenShardCount": {
	            "type": "integer"
	          }
	        }
	      }
	    },
	    "DescribeStream": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StreamName"
	        ],
	        "members": {
	          "StreamName": {},
	          "Limit": {
	            "type": "integer"
	          },
	          "ExclusiveStartShardId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "StreamDescription"
	        ],
	        "members": {
	          "StreamDescription": {
	            "type": "structure",
	            "required": [
	              "StreamName",
	              "StreamARN",
	              "StreamStatus",
	              "Shards",
	              "HasMoreShards",
	              "RetentionPeriodHours",
	              "StreamCreationTimestamp",
	              "EnhancedMonitoring"
	            ],
	            "members": {
	              "StreamName": {},
	              "StreamARN": {},
	              "StreamStatus": {},
	              "Shards": {
	                "type": "list",
	                "member": {
	                  "type": "structure",
	                  "required": [
	                    "ShardId",
	                    "HashKeyRange",
	                    "SequenceNumberRange"
	                  ],
	                  "members": {
	                    "ShardId": {},
	                    "ParentShardId": {},
	                    "AdjacentParentShardId": {},
	                    "HashKeyRange": {
	                      "type": "structure",
	                      "required": [
	                        "StartingHashKey",
	                        "EndingHashKey"
	                      ],
	                      "members": {
	                        "StartingHashKey": {},
	                        "EndingHashKey": {}
	                      }
	                    },
	                    "SequenceNumberRange": {
	                      "type": "structure",
	                      "required": [
	                        "StartingSequenceNumber"
	                      ],
	                      "members": {
	                        "StartingSequenceNumber": {},
	                        "EndingSequenceNumber": {}
	                      }
	                    }
	                  }
	                }
	              },
	              "HasMoreShards": {
	                "type": "boolean"
	              },
	              "RetentionPeriodHours": {
	                "type": "integer"
	              },
	              "StreamCreationTimestamp": {
	                "type": "timestamp"
	              },
	              "EnhancedMonitoring": {
	                "type": "list",
	                "member": {
	                  "type": "structure",
	                  "members": {
	                    "ShardLevelMetrics": {
	                      "shape": "Su"
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DisableEnhancedMonitoring": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StreamName",
	          "ShardLevelMetrics"
	        ],
	        "members": {
	          "StreamName": {},
	          "ShardLevelMetrics": {
	            "shape": "Su"
	          }
	        }
	      },
	      "output": {
	        "shape": "Sx"
	      }
	    },
	    "EnableEnhancedMonitoring": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StreamName",
	          "ShardLevelMetrics"
	        ],
	        "members": {
	          "StreamName": {},
	          "ShardLevelMetrics": {
	            "shape": "Su"
	          }
	        }
	      },
	      "output": {
	        "shape": "Sx"
	      }
	    },
	    "GetRecords": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ShardIterator"
	        ],
	        "members": {
	          "ShardIterator": {},
	          "Limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "Records"
	        ],
	        "members": {
	          "Records": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "SequenceNumber",
	                "Data",
	                "PartitionKey"
	              ],
	              "members": {
	                "SequenceNumber": {},
	                "ApproximateArrivalTimestamp": {
	                  "type": "timestamp"
	                },
	                "Data": {
	                  "type": "blob"
	                },
	                "PartitionKey": {}
	              }
	            }
	          },
	          "NextShardIterator": {},
	          "MillisBehindLatest": {
	            "type": "long"
	          }
	        }
	      }
	    },
	    "GetShardIterator": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StreamName",
	          "ShardId",
	          "ShardIteratorType"
	        ],
	        "members": {
	          "StreamName": {},
	          "ShardId": {},
	          "ShardIteratorType": {},
	          "StartingSequenceNumber": {},
	          "Timestamp": {
	            "type": "timestamp"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ShardIterator": {}
	        }
	      }
	    },
	    "IncreaseStreamRetentionPeriod": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StreamName",
	          "RetentionPeriodHours"
	        ],
	        "members": {
	          "StreamName": {},
	          "RetentionPeriodHours": {
	            "type": "integer"
	          }
	        }
	      }
	    },
	    "ListStreams": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Limit": {
	            "type": "integer"
	          },
	          "ExclusiveStartStreamName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "StreamNames",
	          "HasMoreStreams"
	        ],
	        "members": {
	          "StreamNames": {
	            "type": "list",
	            "member": {}
	          },
	          "HasMoreStreams": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "ListTagsForStream": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StreamName"
	        ],
	        "members": {
	          "StreamName": {},
	          "ExclusiveStartTagKey": {},
	          "Limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "Tags",
	          "HasMoreTags"
	        ],
	        "members": {
	          "Tags": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "Key"
	              ],
	              "members": {
	                "Key": {},
	                "Value": {}
	              }
	            }
	          },
	          "HasMoreTags": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "MergeShards": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StreamName",
	          "ShardToMerge",
	          "AdjacentShardToMerge"
	        ],
	        "members": {
	          "StreamName": {},
	          "ShardToMerge": {},
	          "AdjacentShardToMerge": {}
	        }
	      }
	    },
	    "PutRecord": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StreamName",
	          "Data",
	          "PartitionKey"
	        ],
	        "members": {
	          "StreamName": {},
	          "Data": {
	            "type": "blob"
	          },
	          "PartitionKey": {},
	          "ExplicitHashKey": {},
	          "SequenceNumberForOrdering": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "ShardId",
	          "SequenceNumber"
	        ],
	        "members": {
	          "ShardId": {},
	          "SequenceNumber": {}
	        }
	      }
	    },
	    "PutRecords": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Records",
	          "StreamName"
	        ],
	        "members": {
	          "Records": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "Data",
	                "PartitionKey"
	              ],
	              "members": {
	                "Data": {
	                  "type": "blob"
	                },
	                "ExplicitHashKey": {},
	                "PartitionKey": {}
	              }
	            }
	          },
	          "StreamName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "Records"
	        ],
	        "members": {
	          "FailedRecordCount": {
	            "type": "integer"
	          },
	          "Records": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "SequenceNumber": {},
	                "ShardId": {},
	                "ErrorCode": {},
	                "ErrorMessage": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "RemoveTagsFromStream": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StreamName",
	          "TagKeys"
	        ],
	        "members": {
	          "StreamName": {},
	          "TagKeys": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      }
	    },
	    "SplitShard": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StreamName",
	          "ShardToSplit",
	          "NewStartingHashKey"
	        ],
	        "members": {
	          "StreamName": {},
	          "ShardToSplit": {},
	          "NewStartingHashKey": {}
	        }
	      }
	    },
	    "UpdateShardCount": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StreamName",
	          "TargetShardCount",
	          "ScalingType"
	        ],
	        "members": {
	          "StreamName": {},
	          "TargetShardCount": {
	            "type": "integer"
	          },
	          "ScalingType": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "StreamName": {},
	          "CurrentShardCount": {
	            "type": "integer"
	          },
	          "TargetShardCount": {
	            "type": "integer"
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "Su": {
	      "type": "list",
	      "member": {}
	    },
	    "Sx": {
	      "type": "structure",
	      "members": {
	        "StreamName": {},
	        "CurrentShardLevelMetrics": {
	          "shape": "Su"
	        },
	        "DesiredShardLevelMetrics": {
	          "shape": "Su"
	        }
	      }
	    }
	  }
	}
	},{}],76:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "DescribeStream": {
	      "input_token": "ExclusiveStartShardId",
	      "limit_key": "Limit",
	      "more_results": "StreamDescription.HasMoreShards",
	      "output_token": "StreamDescription.Shards[-1].ShardId",
	      "result_key": "StreamDescription.Shards"
	    },
	    "ListStreams": {
	      "input_token": "ExclusiveStartStreamName",
	      "limit_key": "Limit",
	      "more_results": "HasMoreStreams",
	      "output_token": "StreamNames[-1]",
	      "result_key": "StreamNames"
	    }
	  }
	}
	
	},{}],77:[function(require,module,exports){
	module.exports={
	  "version": 2,
	  "waiters": {
	    "StreamExists": {
	      "delay": 10,
	      "operation": "DescribeStream",
	      "maxAttempts": 18,
	      "acceptors": [
	        {
	          "expected": "ACTIVE",
	          "matcher": "path",
	          "state": "success",
	          "argument": "StreamDescription.StreamStatus"
	        }
	      ]
	    }
	  }
	}
	
	},{}],78:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2014-11-01",
	    "endpointPrefix": "kms",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceAbbreviation": "KMS",
	    "serviceFullName": "AWS Key Management Service",
	    "signatureVersion": "v4",
	    "targetPrefix": "TrentService",
	    "uid": "kms-2014-11-01"
	  },
	  "operations": {
	    "CancelKeyDeletion": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "KeyId"
	        ],
	        "members": {
	          "KeyId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "KeyId": {}
	        }
	      }
	    },
	    "CreateAlias": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AliasName",
	          "TargetKeyId"
	        ],
	        "members": {
	          "AliasName": {},
	          "TargetKeyId": {}
	        }
	      }
	    },
	    "CreateGrant": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "KeyId",
	          "GranteePrincipal"
	        ],
	        "members": {
	          "KeyId": {},
	          "GranteePrincipal": {},
	          "RetiringPrincipal": {},
	          "Operations": {
	            "shape": "S8"
	          },
	          "Constraints": {
	            "shape": "Sa"
	          },
	          "GrantTokens": {
	            "shape": "Se"
	          },
	          "Name": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GrantToken": {},
	          "GrantId": {}
	        }
	      }
	    },
	    "CreateKey": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Policy": {},
	          "Description": {},
	          "KeyUsage": {},
	          "Origin": {},
	          "BypassPolicyLockoutSafetyCheck": {
	            "type": "boolean"
	          },
	          "Tags": {
	            "shape": "Sp"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "KeyMetadata": {
	            "shape": "Su"
	          }
	        }
	      }
	    },
	    "Decrypt": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CiphertextBlob"
	        ],
	        "members": {
	          "CiphertextBlob": {
	            "type": "blob"
	          },
	          "EncryptionContext": {
	            "shape": "Sb"
	          },
	          "GrantTokens": {
	            "shape": "Se"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "KeyId": {},
	          "Plaintext": {
	            "shape": "S13"
	          }
	        }
	      }
	    },
	    "DeleteAlias": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AliasName"
	        ],
	        "members": {
	          "AliasName": {}
	        }
	      }
	    },
	    "DeleteImportedKeyMaterial": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "KeyId"
	        ],
	        "members": {
	          "KeyId": {}
	        }
	      }
	    },
	    "DescribeKey": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "KeyId"
	        ],
	        "members": {
	          "KeyId": {},
	          "GrantTokens": {
	            "shape": "Se"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "KeyMetadata": {
	            "shape": "Su"
	          }
	        }
	      }
	    },
	    "DisableKey": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "KeyId"
	        ],
	        "members": {
	          "KeyId": {}
	        }
	      }
	    },
	    "DisableKeyRotation": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "KeyId"
	        ],
	        "members": {
	          "KeyId": {}
	        }
	      }
	    },
	    "EnableKey": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "KeyId"
	        ],
	        "members": {
	          "KeyId": {}
	        }
	      }
	    },
	    "EnableKeyRotation": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "KeyId"
	        ],
	        "members": {
	          "KeyId": {}
	        }
	      }
	    },
	    "Encrypt": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "KeyId",
	          "Plaintext"
	        ],
	        "members": {
	          "KeyId": {},
	          "Plaintext": {
	            "shape": "S13"
	          },
	          "EncryptionContext": {
	            "shape": "Sb"
	          },
	          "GrantTokens": {
	            "shape": "Se"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "CiphertextBlob": {
	            "type": "blob"
	          },
	          "KeyId": {}
	        }
	      }
	    },
	    "GenerateDataKey": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "KeyId"
	        ],
	        "members": {
	          "KeyId": {},
	          "EncryptionContext": {
	            "shape": "Sb"
	          },
	          "NumberOfBytes": {
	            "type": "integer"
	          },
	          "KeySpec": {},
	          "GrantTokens": {
	            "shape": "Se"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "CiphertextBlob": {
	            "type": "blob"
	          },
	          "Plaintext": {
	            "shape": "S13"
	          },
	          "KeyId": {}
	        }
	      }
	    },
	    "GenerateDataKeyWithoutPlaintext": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "KeyId"
	        ],
	        "members": {
	          "KeyId": {},
	          "EncryptionContext": {
	            "shape": "Sb"
	          },
	          "KeySpec": {},
	          "NumberOfBytes": {
	            "type": "integer"
	          },
	          "GrantTokens": {
	            "shape": "Se"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "CiphertextBlob": {
	            "type": "blob"
	          },
	          "KeyId": {}
	        }
	      }
	    },
	    "GenerateRandom": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "NumberOfBytes": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Plaintext": {
	            "shape": "S13"
	          }
	        }
	      }
	    },
	    "GetKeyPolicy": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "KeyId",
	          "PolicyName"
	        ],
	        "members": {
	          "KeyId": {},
	          "PolicyName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Policy": {}
	        }
	      }
	    },
	    "GetKeyRotationStatus": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "KeyId"
	        ],
	        "members": {
	          "KeyId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "KeyRotationEnabled": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "GetParametersForImport": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "KeyId",
	          "WrappingAlgorithm",
	          "WrappingKeySpec"
	        ],
	        "members": {
	          "KeyId": {},
	          "WrappingAlgorithm": {},
	          "WrappingKeySpec": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "KeyId": {},
	          "ImportToken": {
	            "type": "blob"
	          },
	          "PublicKey": {
	            "shape": "S13"
	          },
	          "ParametersValidTo": {
	            "type": "timestamp"
	          }
	        }
	      }
	    },
	    "ImportKeyMaterial": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "KeyId",
	          "ImportToken",
	          "EncryptedKeyMaterial"
	        ],
	        "members": {
	          "KeyId": {},
	          "ImportToken": {
	            "type": "blob"
	          },
	          "EncryptedKeyMaterial": {
	            "type": "blob"
	          },
	          "ValidTo": {
	            "type": "timestamp"
	          },
	          "ExpirationModel": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "ListAliases": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Limit": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Aliases": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "AliasName": {},
	                "AliasArn": {},
	                "TargetKeyId": {}
	              }
	            }
	          },
	          "NextMarker": {},
	          "Truncated": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "ListGrants": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "KeyId"
	        ],
	        "members": {
	          "Limit": {
	            "type": "integer"
	          },
	          "Marker": {},
	          "KeyId": {}
	        }
	      },
	      "output": {
	        "shape": "S24"
	      }
	    },
	    "ListKeyPolicies": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "KeyId"
	        ],
	        "members": {
	          "KeyId": {},
	          "Limit": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "PolicyNames": {
	            "type": "list",
	            "member": {}
	          },
	          "NextMarker": {},
	          "Truncated": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "ListKeys": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Limit": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Keys": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "KeyId": {},
	                "KeyArn": {}
	              }
	            }
	          },
	          "NextMarker": {},
	          "Truncated": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "ListResourceTags": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "KeyId"
	        ],
	        "members": {
	          "KeyId": {},
	          "Limit": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Tags": {
	            "shape": "Sp"
	          },
	          "NextMarker": {},
	          "Truncated": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "ListRetirableGrants": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RetiringPrincipal"
	        ],
	        "members": {
	          "Limit": {
	            "type": "integer"
	          },
	          "Marker": {},
	          "RetiringPrincipal": {}
	        }
	      },
	      "output": {
	        "shape": "S24"
	      }
	    },
	    "PutKeyPolicy": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "KeyId",
	          "PolicyName",
	          "Policy"
	        ],
	        "members": {
	          "KeyId": {},
	          "PolicyName": {},
	          "Policy": {},
	          "BypassPolicyLockoutSafetyCheck": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "ReEncrypt": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CiphertextBlob",
	          "DestinationKeyId"
	        ],
	        "members": {
	          "CiphertextBlob": {
	            "type": "blob"
	          },
	          "SourceEncryptionContext": {
	            "shape": "Sb"
	          },
	          "DestinationKeyId": {},
	          "DestinationEncryptionContext": {
	            "shape": "Sb"
	          },
	          "GrantTokens": {
	            "shape": "Se"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "CiphertextBlob": {
	            "type": "blob"
	          },
	          "SourceKeyId": {},
	          "KeyId": {}
	        }
	      }
	    },
	    "RetireGrant": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "GrantToken": {},
	          "KeyId": {},
	          "GrantId": {}
	        }
	      }
	    },
	    "RevokeGrant": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "KeyId",
	          "GrantId"
	        ],
	        "members": {
	          "KeyId": {},
	          "GrantId": {}
	        }
	      }
	    },
	    "ScheduleKeyDeletion": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "KeyId"
	        ],
	        "members": {
	          "KeyId": {},
	          "PendingWindowInDays": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "KeyId": {},
	          "DeletionDate": {
	            "type": "timestamp"
	          }
	        }
	      }
	    },
	    "TagResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "KeyId",
	          "Tags"
	        ],
	        "members": {
	          "KeyId": {},
	          "Tags": {
	            "shape": "Sp"
	          }
	        }
	      }
	    },
	    "UntagResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "KeyId",
	          "TagKeys"
	        ],
	        "members": {
	          "KeyId": {},
	          "TagKeys": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      }
	    },
	    "UpdateAlias": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AliasName",
	          "TargetKeyId"
	        ],
	        "members": {
	          "AliasName": {},
	          "TargetKeyId": {}
	        }
	      }
	    },
	    "UpdateKeyDescription": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "KeyId",
	          "Description"
	        ],
	        "members": {
	          "KeyId": {},
	          "Description": {}
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S8": {
	      "type": "list",
	      "member": {}
	    },
	    "Sa": {
	      "type": "structure",
	      "members": {
	        "EncryptionContextSubset": {
	          "shape": "Sb"
	        },
	        "EncryptionContextEquals": {
	          "shape": "Sb"
	        }
	      }
	    },
	    "Sb": {
	      "type": "map",
	      "key": {},
	      "value": {}
	    },
	    "Se": {
	      "type": "list",
	      "member": {}
	    },
	    "Sp": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "TagKey",
	          "TagValue"
	        ],
	        "members": {
	          "TagKey": {},
	          "TagValue": {}
	        }
	      }
	    },
	    "Su": {
	      "type": "structure",
	      "required": [
	        "KeyId"
	      ],
	      "members": {
	        "AWSAccountId": {},
	        "KeyId": {},
	        "Arn": {},
	        "CreationDate": {
	          "type": "timestamp"
	        },
	        "Enabled": {
	          "type": "boolean"
	        },
	        "Description": {},
	        "KeyUsage": {},
	        "KeyState": {},
	        "DeletionDate": {
	          "type": "timestamp"
	        },
	        "ValidTo": {
	          "type": "timestamp"
	        },
	        "Origin": {},
	        "ExpirationModel": {}
	      }
	    },
	    "S13": {
	      "type": "blob",
	      "sensitive": true
	    },
	    "S24": {
	      "type": "structure",
	      "members": {
	        "Grants": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "members": {
	              "KeyId": {},
	              "GrantId": {},
	              "Name": {},
	              "CreationDate": {
	                "type": "timestamp"
	              },
	              "GranteePrincipal": {},
	              "RetiringPrincipal": {},
	              "IssuingAccount": {},
	              "Operations": {
	                "shape": "S8"
	              },
	              "Constraints": {
	                "shape": "Sa"
	              }
	            }
	          }
	        },
	        "NextMarker": {},
	        "Truncated": {
	          "type": "boolean"
	        }
	      }
	    }
	  }
	}
	},{}],79:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "ListAliases": {
	      "input_token": "Marker",
	      "limit_key": "Limit",
	      "more_results": "Truncated",
	      "output_token": "NextMarker",
	      "result_key": "Aliases"
	    },
	    "ListGrants": {
	      "input_token": "Marker",
	      "limit_key": "Limit",
	      "more_results": "Truncated",
	      "output_token": "NextMarker",
	      "result_key": "Grants"
	    },
	    "ListKeyPolicies": {
	      "input_token": "Marker",
	      "limit_key": "Limit",
	      "more_results": "Truncated",
	      "output_token": "NextMarker",
	      "result_key": "PolicyNames"
	    },
	    "ListKeys": {
	      "input_token": "Marker",
	      "limit_key": "Limit",
	      "more_results": "Truncated",
	      "output_token": "NextMarker",
	      "result_key": "Keys"
	    }
	  }
	}
	},{}],80:[function(require,module,exports){
	module.exports={
	  "metadata": {
	    "apiVersion": "2014-11-11",
	    "endpointPrefix": "lambda",
	    "serviceFullName": "AWS Lambda",
	    "signatureVersion": "v4",
	    "protocol": "rest-json"
	  },
	  "operations": {
	    "AddEventSource": {
	      "http": {
	        "requestUri": "/2014-11-13/event-source-mappings/"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "EventSource",
	          "FunctionName",
	          "Role"
	        ],
	        "members": {
	          "EventSource": {},
	          "FunctionName": {},
	          "Role": {},
	          "BatchSize": {
	            "type": "integer"
	          },
	          "Parameters": {
	            "shape": "S6"
	          }
	        }
	      },
	      "output": {
	        "shape": "S7"
	      }
	    },
	    "DeleteFunction": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/2014-11-13/functions/{FunctionName}",
	        "responseCode": 204
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "FunctionName"
	        ],
	        "members": {
	          "FunctionName": {
	            "location": "uri",
	            "locationName": "FunctionName"
	          }
	        }
	      }
	    },
	    "GetEventSource": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2014-11-13/event-source-mappings/{UUID}",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "UUID"
	        ],
	        "members": {
	          "UUID": {
	            "location": "uri",
	            "locationName": "UUID"
	          }
	        }
	      },
	      "output": {
	        "shape": "S7"
	      }
	    },
	    "GetFunction": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2014-11-13/functions/{FunctionName}",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "FunctionName"
	        ],
	        "members": {
	          "FunctionName": {
	            "location": "uri",
	            "locationName": "FunctionName"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Configuration": {
	            "shape": "Se"
	          },
	          "Code": {
	            "type": "structure",
	            "members": {
	              "RepositoryType": {},
	              "Location": {}
	            }
	          }
	        }
	      }
	    },
	    "GetFunctionConfiguration": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2014-11-13/functions/{FunctionName}/configuration",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "FunctionName"
	        ],
	        "members": {
	          "FunctionName": {
	            "location": "uri",
	            "locationName": "FunctionName"
	          }
	        }
	      },
	      "output": {
	        "shape": "Se"
	      }
	    },
	    "InvokeAsync": {
	      "http": {
	        "requestUri": "/2014-11-13/functions/{FunctionName}/invoke-async/",
	        "responseCode": 202
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "FunctionName",
	          "InvokeArgs"
	        ],
	        "members": {
	          "FunctionName": {
	            "location": "uri",
	            "locationName": "FunctionName"
	          },
	          "InvokeArgs": {
	            "shape": "Sq"
	          }
	        },
	        "payload": "InvokeArgs"
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Status": {
	            "location": "statusCode",
	            "type": "integer"
	          }
	        }
	      }
	    },
	    "ListEventSources": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2014-11-13/event-source-mappings/",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "EventSourceArn": {
	            "location": "querystring",
	            "locationName": "EventSource"
	          },
	          "FunctionName": {
	            "location": "querystring",
	            "locationName": "FunctionName"
	          },
	          "Marker": {
	            "location": "querystring",
	            "locationName": "Marker"
	          },
	          "MaxItems": {
	            "location": "querystring",
	            "locationName": "MaxItems",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NextMarker": {},
	          "EventSources": {
	            "type": "list",
	            "member": {
	              "shape": "S7"
	            }
	          }
	        }
	      }
	    },
	    "ListFunctions": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2014-11-13/functions/",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "Marker": {
	            "location": "querystring",
	            "locationName": "Marker"
	          },
	          "MaxItems": {
	            "location": "querystring",
	            "locationName": "MaxItems",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NextMarker": {},
	          "Functions": {
	            "type": "list",
	            "member": {
	              "shape": "Se"
	            }
	          }
	        }
	      }
	    },
	    "RemoveEventSource": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/2014-11-13/event-source-mappings/{UUID}",
	        "responseCode": 204
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "UUID"
	        ],
	        "members": {
	          "UUID": {
	            "location": "uri",
	            "locationName": "UUID"
	          }
	        }
	      }
	    },
	    "UpdateFunctionConfiguration": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/2014-11-13/functions/{FunctionName}/configuration",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "FunctionName"
	        ],
	        "members": {
	          "FunctionName": {
	            "location": "uri",
	            "locationName": "FunctionName"
	          },
	          "Role": {
	            "location": "querystring",
	            "locationName": "Role"
	          },
	          "Handler": {
	            "location": "querystring",
	            "locationName": "Handler"
	          },
	          "Description": {
	            "location": "querystring",
	            "locationName": "Description"
	          },
	          "Timeout": {
	            "location": "querystring",
	            "locationName": "Timeout",
	            "type": "integer"
	          },
	          "MemorySize": {
	            "location": "querystring",
	            "locationName": "MemorySize",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "shape": "Se"
	      }
	    },
	    "UploadFunction": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/2014-11-13/functions/{FunctionName}",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "FunctionName",
	          "FunctionZip",
	          "Runtime",
	          "Role",
	          "Handler",
	          "Mode"
	        ],
	        "members": {
	          "FunctionName": {
	            "location": "uri",
	            "locationName": "FunctionName"
	          },
	          "FunctionZip": {
	            "shape": "Sq"
	          },
	          "Runtime": {
	            "location": "querystring",
	            "locationName": "Runtime"
	          },
	          "Role": {
	            "location": "querystring",
	            "locationName": "Role"
	          },
	          "Handler": {
	            "location": "querystring",
	            "locationName": "Handler"
	          },
	          "Mode": {
	            "location": "querystring",
	            "locationName": "Mode"
	          },
	          "Description": {
	            "location": "querystring",
	            "locationName": "Description"
	          },
	          "Timeout": {
	            "location": "querystring",
	            "locationName": "Timeout",
	            "type": "integer"
	          },
	          "MemorySize": {
	            "location": "querystring",
	            "locationName": "MemorySize",
	            "type": "integer"
	          }
	        },
	        "payload": "FunctionZip"
	      },
	      "output": {
	        "shape": "Se"
	      }
	    }
	  },
	  "shapes": {
	    "S6": {
	      "type": "map",
	      "key": {},
	      "value": {}
	    },
	    "S7": {
	      "type": "structure",
	      "members": {
	        "UUID": {},
	        "BatchSize": {
	          "type": "integer"
	        },
	        "EventSource": {},
	        "FunctionName": {},
	        "Parameters": {
	          "shape": "S6"
	        },
	        "Role": {},
	        "LastModified": {
	          "type": "timestamp"
	        },
	        "IsActive": {
	          "type": "boolean"
	        },
	        "Status": {}
	      }
	    },
	    "Se": {
	      "type": "structure",
	      "members": {
	        "FunctionName": {},
	        "FunctionARN": {},
	        "ConfigurationId": {},
	        "Runtime": {},
	        "Role": {},
	        "Handler": {},
	        "Mode": {},
	        "CodeSize": {
	          "type": "long"
	        },
	        "Description": {},
	        "Timeout": {
	          "type": "integer"
	        },
	        "MemorySize": {
	          "type": "integer"
	        },
	        "LastModified": {
	          "type": "timestamp"
	        }
	      }
	    },
	    "Sq": {
	      "type": "blob",
	      "streaming": true
	    }
	  }
	}
	},{}],81:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "ListEventSources": {
	      "input_token": "Marker",
	      "output_token": "NextMarker",
	      "limit_key": "MaxItems",
	      "result_key": "EventSources"
	    },
	    "ListFunctions": {
	      "input_token": "Marker",
	      "output_token": "NextMarker",
	      "limit_key": "MaxItems",
	      "result_key": "Functions"
	    }
	  }
	}
	
	},{}],82:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2015-03-31",
	    "endpointPrefix": "lambda",
	    "protocol": "rest-json",
	    "serviceFullName": "AWS Lambda",
	    "signatureVersion": "v4",
	    "uid": "lambda-2015-03-31"
	  },
	  "operations": {
	    "AddPermission": {
	      "http": {
	        "requestUri": "/2015-03-31/functions/{FunctionName}/policy",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "FunctionName",
	          "StatementId",
	          "Action",
	          "Principal"
	        ],
	        "members": {
	          "FunctionName": {
	            "location": "uri",
	            "locationName": "FunctionName"
	          },
	          "StatementId": {},
	          "Action": {},
	          "Principal": {},
	          "SourceArn": {},
	          "SourceAccount": {},
	          "EventSourceToken": {},
	          "Qualifier": {
	            "location": "querystring",
	            "locationName": "Qualifier"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Statement": {}
	        }
	      }
	    },
	    "CreateAlias": {
	      "http": {
	        "requestUri": "/2015-03-31/functions/{FunctionName}/aliases",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "FunctionName",
	          "Name",
	          "FunctionVersion"
	        ],
	        "members": {
	          "FunctionName": {
	            "location": "uri",
	            "locationName": "FunctionName"
	          },
	          "Name": {},
	          "FunctionVersion": {},
	          "Description": {}
	        }
	      },
	      "output": {
	        "shape": "Sg"
	      }
	    },
	    "CreateEventSourceMapping": {
	      "http": {
	        "requestUri": "/2015-03-31/event-source-mappings/",
	        "responseCode": 202
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "EventSourceArn",
	          "FunctionName",
	          "StartingPosition"
	        ],
	        "members": {
	          "EventSourceArn": {},
	          "FunctionName": {},
	          "Enabled": {
	            "type": "boolean"
	          },
	          "BatchSize": {
	            "type": "integer"
	          },
	          "StartingPosition": {},
	          "StartingPositionTimestamp": {
	            "type": "timestamp"
	          }
	        }
	      },
	      "output": {
	        "shape": "Sn"
	      }
	    },
	    "CreateFunction": {
	      "http": {
	        "requestUri": "/2015-03-31/functions",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "FunctionName",
	          "Runtime",
	          "Role",
	          "Handler",
	          "Code"
	        ],
	        "members": {
	          "FunctionName": {},
	          "Runtime": {},
	          "Role": {},
	          "Handler": {},
	          "Code": {
	            "type": "structure",
	            "members": {
	              "ZipFile": {
	                "shape": "St"
	              },
	              "S3Bucket": {},
	              "S3Key": {},
	              "S3ObjectVersion": {}
	            }
	          },
	          "Description": {},
	          "Timeout": {
	            "type": "integer"
	          },
	          "MemorySize": {
	            "type": "integer"
	          },
	          "Publish": {
	            "type": "boolean"
	          },
	          "VpcConfig": {
	            "shape": "S10"
	          },
	          "DeadLetterConfig": {
	            "shape": "S15"
	          },
	          "Environment": {
	            "shape": "S17"
	          },
	          "KMSKeyArn": {}
	        }
	      },
	      "output": {
	        "shape": "S1c"
	      }
	    },
	    "DeleteAlias": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/2015-03-31/functions/{FunctionName}/aliases/{Name}",
	        "responseCode": 204
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "FunctionName",
	          "Name"
	        ],
	        "members": {
	          "FunctionName": {
	            "location": "uri",
	            "locationName": "FunctionName"
	          },
	          "Name": {
	            "location": "uri",
	            "locationName": "Name"
	          }
	        }
	      }
	    },
	    "DeleteEventSourceMapping": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/2015-03-31/event-source-mappings/{UUID}",
	        "responseCode": 202
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "UUID"
	        ],
	        "members": {
	          "UUID": {
	            "location": "uri",
	            "locationName": "UUID"
	          }
	        }
	      },
	      "output": {
	        "shape": "Sn"
	      }
	    },
	    "DeleteFunction": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/2015-03-31/functions/{FunctionName}",
	        "responseCode": 204
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "FunctionName"
	        ],
	        "members": {
	          "FunctionName": {
	            "location": "uri",
	            "locationName": "FunctionName"
	          },
	          "Qualifier": {
	            "location": "querystring",
	            "locationName": "Qualifier"
	          }
	        }
	      }
	    },
	    "GetAccountSettings": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2016-08-19/account-settings/",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "members": {}
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "AccountLimit": {
	            "type": "structure",
	            "members": {
	              "TotalCodeSize": {
	                "type": "long"
	              },
	              "CodeSizeUnzipped": {
	                "type": "long"
	              },
	              "CodeSizeZipped": {
	                "type": "long"
	              },
	              "ConcurrentExecutions": {
	                "type": "integer"
	              }
	            }
	          },
	          "AccountUsage": {
	            "type": "structure",
	            "members": {
	              "TotalCodeSize": {
	                "type": "long"
	              },
	              "FunctionCount": {
	                "type": "long"
	              }
	            }
	          }
	        }
	      }
	    },
	    "GetAlias": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2015-03-31/functions/{FunctionName}/aliases/{Name}",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "FunctionName",
	          "Name"
	        ],
	        "members": {
	          "FunctionName": {
	            "location": "uri",
	            "locationName": "FunctionName"
	          },
	          "Name": {
	            "location": "uri",
	            "locationName": "Name"
	          }
	        }
	      },
	      "output": {
	        "shape": "Sg"
	      }
	    },
	    "GetEventSourceMapping": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2015-03-31/event-source-mappings/{UUID}",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "UUID"
	        ],
	        "members": {
	          "UUID": {
	            "location": "uri",
	            "locationName": "UUID"
	          }
	        }
	      },
	      "output": {
	        "shape": "Sn"
	      }
	    },
	    "GetFunction": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2015-03-31/functions/{FunctionName}",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "FunctionName"
	        ],
	        "members": {
	          "FunctionName": {
	            "location": "uri",
	            "locationName": "FunctionName"
	          },
	          "Qualifier": {
	            "location": "querystring",
	            "locationName": "Qualifier"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Configuration": {
	            "shape": "S1c"
	          },
	          "Code": {
	            "type": "structure",
	            "members": {
	              "RepositoryType": {},
	              "Location": {}
	            }
	          }
	        }
	      }
	    },
	    "GetFunctionConfiguration": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2015-03-31/functions/{FunctionName}/configuration",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "FunctionName"
	        ],
	        "members": {
	          "FunctionName": {
	            "location": "uri",
	            "locationName": "FunctionName"
	          },
	          "Qualifier": {
	            "location": "querystring",
	            "locationName": "Qualifier"
	          }
	        }
	      },
	      "output": {
	        "shape": "S1c"
	      }
	    },
	    "GetPolicy": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2015-03-31/functions/{FunctionName}/policy",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "FunctionName"
	        ],
	        "members": {
	          "FunctionName": {
	            "location": "uri",
	            "locationName": "FunctionName"
	          },
	          "Qualifier": {
	            "location": "querystring",
	            "locationName": "Qualifier"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Policy": {}
	        }
	      }
	    },
	    "Invoke": {
	      "http": {
	        "requestUri": "/2015-03-31/functions/{FunctionName}/invocations"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "FunctionName"
	        ],
	        "members": {
	          "FunctionName": {
	            "location": "uri",
	            "locationName": "FunctionName"
	          },
	          "InvocationType": {
	            "location": "header",
	            "locationName": "X-Amz-Invocation-Type"
	          },
	          "LogType": {
	            "location": "header",
	            "locationName": "X-Amz-Log-Type"
	          },
	          "ClientContext": {
	            "location": "header",
	            "locationName": "X-Amz-Client-Context"
	          },
	          "Payload": {
	            "shape": "St"
	          },
	          "Qualifier": {
	            "location": "querystring",
	            "locationName": "Qualifier"
	          }
	        },
	        "payload": "Payload"
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "StatusCode": {
	            "location": "statusCode",
	            "type": "integer"
	          },
	          "FunctionError": {
	            "location": "header",
	            "locationName": "X-Amz-Function-Error"
	          },
	          "LogResult": {
	            "location": "header",
	            "locationName": "X-Amz-Log-Result"
	          },
	          "Payload": {
	            "shape": "St"
	          }
	        },
	        "payload": "Payload"
	      }
	    },
	    "InvokeAsync": {
	      "http": {
	        "requestUri": "/2014-11-13/functions/{FunctionName}/invoke-async/",
	        "responseCode": 202
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "FunctionName",
	          "InvokeArgs"
	        ],
	        "members": {
	          "FunctionName": {
	            "location": "uri",
	            "locationName": "FunctionName"
	          },
	          "InvokeArgs": {
	            "type": "blob",
	            "streaming": true
	          }
	        },
	        "deprecated": true,
	        "payload": "InvokeArgs"
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Status": {
	            "location": "statusCode",
	            "type": "integer"
	          }
	        },
	        "deprecated": true
	      },
	      "deprecated": true
	    },
	    "ListAliases": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2015-03-31/functions/{FunctionName}/aliases",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "FunctionName"
	        ],
	        "members": {
	          "FunctionName": {
	            "location": "uri",
	            "locationName": "FunctionName"
	          },
	          "FunctionVersion": {
	            "location": "querystring",
	            "locationName": "FunctionVersion"
	          },
	          "Marker": {
	            "location": "querystring",
	            "locationName": "Marker"
	          },
	          "MaxItems": {
	            "location": "querystring",
	            "locationName": "MaxItems",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NextMarker": {},
	          "Aliases": {
	            "type": "list",
	            "member": {
	              "shape": "Sg"
	            }
	          }
	        }
	      }
	    },
	    "ListEventSourceMappings": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2015-03-31/event-source-mappings/",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "EventSourceArn": {
	            "location": "querystring",
	            "locationName": "EventSourceArn"
	          },
	          "FunctionName": {
	            "location": "querystring",
	            "locationName": "FunctionName"
	          },
	          "Marker": {
	            "location": "querystring",
	            "locationName": "Marker"
	          },
	          "MaxItems": {
	            "location": "querystring",
	            "locationName": "MaxItems",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NextMarker": {},
	          "EventSourceMappings": {
	            "type": "list",
	            "member": {
	              "shape": "Sn"
	            }
	          }
	        }
	      }
	    },
	    "ListFunctions": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2015-03-31/functions/",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "Marker": {
	            "location": "querystring",
	            "locationName": "Marker"
	          },
	          "MaxItems": {
	            "location": "querystring",
	            "locationName": "MaxItems",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NextMarker": {},
	          "Functions": {
	            "shape": "S2h"
	          }
	        }
	      }
	    },
	    "ListVersionsByFunction": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2015-03-31/functions/{FunctionName}/versions",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "FunctionName"
	        ],
	        "members": {
	          "FunctionName": {
	            "location": "uri",
	            "locationName": "FunctionName"
	          },
	          "Marker": {
	            "location": "querystring",
	            "locationName": "Marker"
	          },
	          "MaxItems": {
	            "location": "querystring",
	            "locationName": "MaxItems",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NextMarker": {},
	          "Versions": {
	            "shape": "S2h"
	          }
	        }
	      }
	    },
	    "PublishVersion": {
	      "http": {
	        "requestUri": "/2015-03-31/functions/{FunctionName}/versions",
	        "responseCode": 201
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "FunctionName"
	        ],
	        "members": {
	          "FunctionName": {
	            "location": "uri",
	            "locationName": "FunctionName"
	          },
	          "CodeSha256": {},
	          "Description": {}
	        }
	      },
	      "output": {
	        "shape": "S1c"
	      }
	    },
	    "RemovePermission": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/2015-03-31/functions/{FunctionName}/policy/{StatementId}",
	        "responseCode": 204
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "FunctionName",
	          "StatementId"
	        ],
	        "members": {
	          "FunctionName": {
	            "location": "uri",
	            "locationName": "FunctionName"
	          },
	          "StatementId": {
	            "location": "uri",
	            "locationName": "StatementId"
	          },
	          "Qualifier": {
	            "location": "querystring",
	            "locationName": "Qualifier"
	          }
	        }
	      }
	    },
	    "UpdateAlias": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/2015-03-31/functions/{FunctionName}/aliases/{Name}",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "FunctionName",
	          "Name"
	        ],
	        "members": {
	          "FunctionName": {
	            "location": "uri",
	            "locationName": "FunctionName"
	          },
	          "Name": {
	            "location": "uri",
	            "locationName": "Name"
	          },
	          "FunctionVersion": {},
	          "Description": {}
	        }
	      },
	      "output": {
	        "shape": "Sg"
	      }
	    },
	    "UpdateEventSourceMapping": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/2015-03-31/event-source-mappings/{UUID}",
	        "responseCode": 202
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "UUID"
	        ],
	        "members": {
	          "UUID": {
	            "location": "uri",
	            "locationName": "UUID"
	          },
	          "FunctionName": {},
	          "Enabled": {
	            "type": "boolean"
	          },
	          "BatchSize": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "shape": "Sn"
	      }
	    },
	    "UpdateFunctionCode": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/2015-03-31/functions/{FunctionName}/code",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "FunctionName"
	        ],
	        "members": {
	          "FunctionName": {
	            "location": "uri",
	            "locationName": "FunctionName"
	          },
	          "ZipFile": {
	            "shape": "St"
	          },
	          "S3Bucket": {},
	          "S3Key": {},
	          "S3ObjectVersion": {},
	          "Publish": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "shape": "S1c"
	      }
	    },
	    "UpdateFunctionConfiguration": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/2015-03-31/functions/{FunctionName}/configuration",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "FunctionName"
	        ],
	        "members": {
	          "FunctionName": {
	            "location": "uri",
	            "locationName": "FunctionName"
	          },
	          "Role": {},
	          "Handler": {},
	          "Description": {},
	          "Timeout": {
	            "type": "integer"
	          },
	          "MemorySize": {
	            "type": "integer"
	          },
	          "VpcConfig": {
	            "shape": "S10"
	          },
	          "Environment": {
	            "shape": "S17"
	          },
	          "Runtime": {},
	          "DeadLetterConfig": {
	            "shape": "S15"
	          },
	          "KMSKeyArn": {}
	        }
	      },
	      "output": {
	        "shape": "S1c"
	      }
	    }
	  },
	  "shapes": {
	    "Sg": {
	      "type": "structure",
	      "members": {
	        "AliasArn": {},
	        "Name": {},
	        "FunctionVersion": {},
	        "Description": {}
	      }
	    },
	    "Sn": {
	      "type": "structure",
	      "members": {
	        "UUID": {},
	        "BatchSize": {
	          "type": "integer"
	        },
	        "EventSourceArn": {},
	        "FunctionArn": {},
	        "LastModified": {
	          "type": "timestamp"
	        },
	        "LastProcessingResult": {},
	        "State": {},
	        "StateTransitionReason": {}
	      }
	    },
	    "St": {
	      "type": "blob",
	      "sensitive": true
	    },
	    "S10": {
	      "type": "structure",
	      "members": {
	        "SubnetIds": {
	          "shape": "S11"
	        },
	        "SecurityGroupIds": {
	          "shape": "S13"
	        }
	      }
	    },
	    "S11": {
	      "type": "list",
	      "member": {}
	    },
	    "S13": {
	      "type": "list",
	      "member": {}
	    },
	    "S15": {
	      "type": "structure",
	      "members": {
	        "TargetArn": {}
	      }
	    },
	    "S17": {
	      "type": "structure",
	      "members": {
	        "Variables": {
	          "shape": "S18"
	        }
	      }
	    },
	    "S18": {
	      "type": "map",
	      "key": {
	        "type": "string",
	        "sensitive": true
	      },
	      "value": {
	        "type": "string",
	        "sensitive": true
	      },
	      "sensitive": true
	    },
	    "S1c": {
	      "type": "structure",
	      "members": {
	        "FunctionName": {},
	        "FunctionArn": {},
	        "Runtime": {},
	        "Role": {},
	        "Handler": {},
	        "CodeSize": {
	          "type": "long"
	        },
	        "Description": {},
	        "Timeout": {
	          "type": "integer"
	        },
	        "MemorySize": {
	          "type": "integer"
	        },
	        "LastModified": {},
	        "CodeSha256": {},
	        "Version": {},
	        "VpcConfig": {
	          "type": "structure",
	          "members": {
	            "SubnetIds": {
	              "shape": "S11"
	            },
	            "SecurityGroupIds": {
	              "shape": "S13"
	            },
	            "VpcId": {}
	          }
	        },
	        "DeadLetterConfig": {
	          "shape": "S15"
	        },
	        "Environment": {
	          "type": "structure",
	          "members": {
	            "Variables": {
	              "shape": "S18"
	            },
	            "Error": {
	              "type": "structure",
	              "members": {
	                "ErrorCode": {},
	                "Message": {
	                  "type": "string",
	                  "sensitive": true
	                }
	              }
	            }
	          }
	        },
	        "KMSKeyArn": {}
	      }
	    },
	    "S2h": {
	      "type": "list",
	      "member": {
	        "shape": "S1c"
	      }
	    }
	  }
	}
	},{}],83:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "ListEventSourceMappings": {
	      "input_token": "Marker",
	      "output_token": "NextMarker",
	      "limit_key": "MaxItems",
	      "result_key": "EventSourceMappings"
	    },
	    "ListFunctions": {
	      "input_token": "Marker",
	      "output_token": "NextMarker",
	      "limit_key": "MaxItems",
	      "result_key": "Functions"
	    }
	  }
	}
	
	},{}],84:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2014-03-28",
	    "endpointPrefix": "logs",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceFullName": "Amazon CloudWatch Logs",
	    "signatureVersion": "v4",
	    "targetPrefix": "Logs_20140328",
	    "uid": "logs-2014-03-28"
	  },
	  "operations": {
	    "CancelExportTask": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "taskId"
	        ],
	        "members": {
	          "taskId": {}
	        }
	      }
	    },
	    "CreateExportTask": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "logGroupName",
	          "from",
	          "to",
	          "destination"
	        ],
	        "members": {
	          "taskName": {},
	          "logGroupName": {},
	          "logStreamNamePrefix": {},
	          "from": {
	            "type": "long"
	          },
	          "to": {
	            "type": "long"
	          },
	          "destination": {},
	          "destinationPrefix": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "taskId": {}
	        }
	      }
	    },
	    "CreateLogGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "logGroupName"
	        ],
	        "members": {
	          "logGroupName": {},
	          "tags": {
	            "shape": "Sc"
	          }
	        }
	      }
	    },
	    "CreateLogStream": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "logGroupName",
	          "logStreamName"
	        ],
	        "members": {
	          "logGroupName": {},
	          "logStreamName": {}
	        }
	      }
	    },
	    "DeleteDestination": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "destinationName"
	        ],
	        "members": {
	          "destinationName": {}
	        }
	      }
	    },
	    "DeleteLogGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "logGroupName"
	        ],
	        "members": {
	          "logGroupName": {}
	        }
	      }
	    },
	    "DeleteLogStream": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "logGroupName",
	          "logStreamName"
	        ],
	        "members": {
	          "logGroupName": {},
	          "logStreamName": {}
	        }
	      }
	    },
	    "DeleteMetricFilter": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "logGroupName",
	          "filterName"
	        ],
	        "members": {
	          "logGroupName": {},
	          "filterName": {}
	        }
	      }
	    },
	    "DeleteRetentionPolicy": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "logGroupName"
	        ],
	        "members": {
	          "logGroupName": {}
	        }
	      }
	    },
	    "DeleteSubscriptionFilter": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "logGroupName",
	          "filterName"
	        ],
	        "members": {
	          "logGroupName": {},
	          "filterName": {}
	        }
	      }
	    },
	    "DescribeDestinations": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DestinationNamePrefix": {},
	          "nextToken": {},
	          "limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "destinations": {
	            "type": "list",
	            "member": {
	              "shape": "St"
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "DescribeExportTasks": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "taskId": {},
	          "statusCode": {},
	          "nextToken": {},
	          "limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "exportTasks": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "taskId": {},
	                "taskName": {},
	                "logGroupName": {},
	                "from": {
	                  "type": "long"
	                },
	                "to": {
	                  "type": "long"
	                },
	                "destination": {},
	                "destinationPrefix": {},
	                "status": {
	                  "type": "structure",
	                  "members": {
	                    "code": {},
	                    "message": {}
	                  }
	                },
	                "executionInfo": {
	                  "type": "structure",
	                  "members": {
	                    "creationTime": {
	                      "type": "long"
	                    },
	                    "completionTime": {
	                      "type": "long"
	                    }
	                  }
	                }
	              }
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "DescribeLogGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "logGroupNamePrefix": {},
	          "nextToken": {},
	          "limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "logGroups": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "logGroupName": {},
	                "creationTime": {
	                  "type": "long"
	                },
	                "retentionInDays": {
	                  "type": "integer"
	                },
	                "metricFilterCount": {
	                  "type": "integer"
	                },
	                "arn": {},
	                "storedBytes": {
	                  "type": "long"
	                }
	              }
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "DescribeLogStreams": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "logGroupName"
	        ],
	        "members": {
	          "logGroupName": {},
	          "logStreamNamePrefix": {},
	          "orderBy": {},
	          "descending": {
	            "type": "boolean"
	          },
	          "nextToken": {},
	          "limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "logStreams": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "logStreamName": {},
	                "creationTime": {
	                  "type": "long"
	                },
	                "firstEventTimestamp": {
	                  "type": "long"
	                },
	                "lastEventTimestamp": {
	                  "type": "long"
	                },
	                "lastIngestionTime": {
	                  "type": "long"
	                },
	                "uploadSequenceToken": {},
	                "arn": {},
	                "storedBytes": {
	                  "type": "long"
	                }
	              }
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "DescribeMetricFilters": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "logGroupName": {},
	          "filterNamePrefix": {},
	          "nextToken": {},
	          "limit": {
	            "type": "integer"
	          },
	          "metricName": {},
	          "metricNamespace": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "metricFilters": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "filterName": {},
	                "filterPattern": {},
	                "metricTransformations": {
	                  "shape": "S1r"
	                },
	                "creationTime": {
	                  "type": "long"
	                },
	                "logGroupName": {}
	              }
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "DescribeSubscriptionFilters": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "logGroupName"
	        ],
	        "members": {
	          "logGroupName": {},
	          "filterNamePrefix": {},
	          "nextToken": {},
	          "limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "subscriptionFilters": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "filterName": {},
	                "logGroupName": {},
	                "filterPattern": {},
	                "destinationArn": {},
	                "roleArn": {},
	                "distribution": {},
	                "creationTime": {
	                  "type": "long"
	                }
	              }
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "FilterLogEvents": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "logGroupName"
	        ],
	        "members": {
	          "logGroupName": {},
	          "logStreamNames": {
	            "type": "list",
	            "member": {}
	          },
	          "startTime": {
	            "type": "long"
	          },
	          "endTime": {
	            "type": "long"
	          },
	          "filterPattern": {},
	          "nextToken": {},
	          "limit": {
	            "type": "integer"
	          },
	          "interleaved": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "events": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "logStreamName": {},
	                "timestamp": {
	                  "type": "long"
	                },
	                "message": {},
	                "ingestionTime": {
	                  "type": "long"
	                },
	                "eventId": {}
	              }
	            }
	          },
	          "searchedLogStreams": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "logStreamName": {},
	                "searchedCompletely": {
	                  "type": "boolean"
	                }
	              }
	            }
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "GetLogEvents": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "logGroupName",
	          "logStreamName"
	        ],
	        "members": {
	          "logGroupName": {},
	          "logStreamName": {},
	          "startTime": {
	            "type": "long"
	          },
	          "endTime": {
	            "type": "long"
	          },
	          "nextToken": {},
	          "limit": {
	            "type": "integer"
	          },
	          "startFromHead": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "events": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "timestamp": {
	                  "type": "long"
	                },
	                "message": {},
	                "ingestionTime": {
	                  "type": "long"
	                }
	              }
	            }
	          },
	          "nextForwardToken": {},
	          "nextBackwardToken": {}
	        }
	      }
	    },
	    "ListTagsLogGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "logGroupName"
	        ],
	        "members": {
	          "logGroupName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "tags": {
	            "shape": "Sc"
	          }
	        }
	      }
	    },
	    "PutDestination": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "destinationName",
	          "targetArn",
	          "roleArn"
	        ],
	        "members": {
	          "destinationName": {},
	          "targetArn": {},
	          "roleArn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "destination": {
	            "shape": "St"
	          }
	        }
	      }
	    },
	    "PutDestinationPolicy": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "destinationName",
	          "accessPolicy"
	        ],
	        "members": {
	          "destinationName": {},
	          "accessPolicy": {}
	        }
	      }
	    },
	    "PutLogEvents": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "logGroupName",
	          "logStreamName",
	          "logEvents"
	        ],
	        "members": {
	          "logGroupName": {},
	          "logStreamName": {},
	          "logEvents": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "timestamp",
	                "message"
	              ],
	              "members": {
	                "timestamp": {
	                  "type": "long"
	                },
	                "message": {}
	              }
	            }
	          },
	          "sequenceToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "nextSequenceToken": {},
	          "rejectedLogEventsInfo": {
	            "type": "structure",
	            "members": {
	              "tooNewLogEventStartIndex": {
	                "type": "integer"
	              },
	              "tooOldLogEventEndIndex": {
	                "type": "integer"
	              },
	              "expiredLogEventEndIndex": {
	                "type": "integer"
	              }
	            }
	          }
	        }
	      }
	    },
	    "PutMetricFilter": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "logGroupName",
	          "filterName",
	          "filterPattern",
	          "metricTransformations"
	        ],
	        "members": {
	          "logGroupName": {},
	          "filterName": {},
	          "filterPattern": {},
	          "metricTransformations": {
	            "shape": "S1r"
	          }
	        }
	      }
	    },
	    "PutRetentionPolicy": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "logGroupName",
	          "retentionInDays"
	        ],
	        "members": {
	          "logGroupName": {},
	          "retentionInDays": {
	            "type": "integer"
	          }
	        }
	      }
	    },
	    "PutSubscriptionFilter": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "logGroupName",
	          "filterName",
	          "filterPattern",
	          "destinationArn"
	        ],
	        "members": {
	          "logGroupName": {},
	          "filterName": {},
	          "filterPattern": {},
	          "destinationArn": {},
	          "roleArn": {},
	          "distribution": {}
	        }
	      }
	    },
	    "TagLogGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "logGroupName",
	          "tags"
	        ],
	        "members": {
	          "logGroupName": {},
	          "tags": {
	            "shape": "Sc"
	          }
	        }
	      }
	    },
	    "TestMetricFilter": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "filterPattern",
	          "logEventMessages"
	        ],
	        "members": {
	          "filterPattern": {},
	          "logEventMessages": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "matches": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "eventNumber": {
	                  "type": "long"
	                },
	                "eventMessage": {},
	                "extractedValues": {
	                  "type": "map",
	                  "key": {},
	                  "value": {}
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "UntagLogGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "logGroupName",
	          "tags"
	        ],
	        "members": {
	          "logGroupName": {},
	          "tags": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "Sc": {
	      "type": "map",
	      "key": {},
	      "value": {}
	    },
	    "St": {
	      "type": "structure",
	      "members": {
	        "destinationName": {},
	        "targetArn": {},
	        "roleArn": {},
	        "accessPolicy": {},
	        "arn": {},
	        "creationTime": {
	          "type": "long"
	        }
	      }
	    },
	    "S1r": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "metricName",
	          "metricNamespace",
	          "metricValue"
	        ],
	        "members": {
	          "metricName": {},
	          "metricNamespace": {},
	          "metricValue": {},
	          "defaultValue": {
	            "type": "double"
	          }
	        }
	      }
	    }
	  }
	}
	},{}],85:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "DescribeDestinations": {
	      "input_token": "nextToken",
	      "output_token": "nextToken",
	      "limit_key": "limit",
	      "result_key": "destinations"
	    },
	    "DescribeLogGroups": {
	      "input_token": "nextToken",
	      "output_token": "nextToken",
	      "limit_key": "limit",
	      "result_key": "logGroups"
	    },
	    "DescribeLogStreams": {
	      "input_token": "nextToken",
	      "output_token": "nextToken",
	      "limit_key": "limit",
	      "result_key": "logStreams"
	    },
	    "DescribeMetricFilters": {
	      "input_token": "nextToken",
	      "output_token": "nextToken",
	      "limit_key": "limit",
	      "result_key": "metricFilters"
	    },
	    "DescribeSubscriptionFilters": {
	      "input_token": "nextToken",
	      "output_token": "nextToken",
	      "limit_key": "limit",
	      "result_key": "subscriptionFilters"
	    },
	    "FilterLogEvents": {
	      "input_token": "nextToken",
	      "output_token": "nextToken",
	      "limit_key": "limit",
	      "result_key": [
	        "events",
	        "searchedLogStreams"
	      ]
	    },
	    "GetLogEvents": {
	      "input_token": "nextToken",
	      "output_token": "nextForwardToken",
	      "limit_key": "limit",
	      "result_key": "events"
	    }
	  }
	}
	
	},{}],86:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "uid": "machinelearning-2014-12-12",
	    "apiVersion": "2014-12-12",
	    "endpointPrefix": "machinelearning",
	    "jsonVersion": "1.1",
	    "serviceFullName": "Amazon Machine Learning",
	    "signatureVersion": "v4",
	    "targetPrefix": "AmazonML_20141212",
	    "protocol": "json"
	  },
	  "operations": {
	    "AddTags": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Tags",
	          "ResourceId",
	          "ResourceType"
	        ],
	        "members": {
	          "Tags": {
	            "shape": "S2"
	          },
	          "ResourceId": {},
	          "ResourceType": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ResourceId": {},
	          "ResourceType": {}
	        }
	      }
	    },
	    "CreateBatchPrediction": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "BatchPredictionId",
	          "MLModelId",
	          "BatchPredictionDataSourceId",
	          "OutputUri"
	        ],
	        "members": {
	          "BatchPredictionId": {},
	          "BatchPredictionName": {},
	          "MLModelId": {},
	          "BatchPredictionDataSourceId": {},
	          "OutputUri": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "BatchPredictionId": {}
	        }
	      }
	    },
	    "CreateDataSourceFromRDS": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DataSourceId",
	          "RDSData",
	          "RoleARN"
	        ],
	        "members": {
	          "DataSourceId": {},
	          "DataSourceName": {},
	          "RDSData": {
	            "type": "structure",
	            "required": [
	              "DatabaseInformation",
	              "SelectSqlQuery",
	              "DatabaseCredentials",
	              "S3StagingLocation",
	              "ResourceRole",
	              "ServiceRole",
	              "SubnetId",
	              "SecurityGroupIds"
	            ],
	            "members": {
	              "DatabaseInformation": {
	                "shape": "Sf"
	              },
	              "SelectSqlQuery": {},
	              "DatabaseCredentials": {
	                "type": "structure",
	                "required": [
	                  "Username",
	                  "Password"
	                ],
	                "members": {
	                  "Username": {},
	                  "Password": {}
	                }
	              },
	              "S3StagingLocation": {},
	              "DataRearrangement": {},
	              "DataSchema": {},
	              "DataSchemaUri": {},
	              "ResourceRole": {},
	              "ServiceRole": {},
	              "SubnetId": {},
	              "SecurityGroupIds": {
	                "type": "list",
	                "member": {}
	              }
	            }
	          },
	          "RoleARN": {},
	          "ComputeStatistics": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "DataSourceId": {}
	        }
	      }
	    },
	    "CreateDataSourceFromRedshift": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DataSourceId",
	          "DataSpec",
	          "RoleARN"
	        ],
	        "members": {
	          "DataSourceId": {},
	          "DataSourceName": {},
	          "DataSpec": {
	            "type": "structure",
	            "required": [
	              "DatabaseInformation",
	              "SelectSqlQuery",
	              "DatabaseCredentials",
	              "S3StagingLocation"
	            ],
	            "members": {
	              "DatabaseInformation": {
	                "shape": "Sy"
	              },
	              "SelectSqlQuery": {},
	              "DatabaseCredentials": {
	                "type": "structure",
	                "required": [
	                  "Username",
	                  "Password"
	                ],
	                "members": {
	                  "Username": {},
	                  "Password": {}
	                }
	              },
	              "S3StagingLocation": {},
	              "DataRearrangement": {},
	              "DataSchema": {},
	              "DataSchemaUri": {}
	            }
	          },
	          "RoleARN": {},
	          "ComputeStatistics": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "DataSourceId": {}
	        }
	      }
	    },
	    "CreateDataSourceFromS3": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DataSourceId",
	          "DataSpec"
	        ],
	        "members": {
	          "DataSourceId": {},
	          "DataSourceName": {},
	          "DataSpec": {
	            "type": "structure",
	            "required": [
	              "DataLocationS3"
	            ],
	            "members": {
	              "DataLocationS3": {},
	              "DataRearrangement": {},
	              "DataSchema": {},
	              "DataSchemaLocationS3": {}
	            }
	          },
	          "ComputeStatistics": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "DataSourceId": {}
	        }
	      }
	    },
	    "CreateEvaluation": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "EvaluationId",
	          "MLModelId",
	          "EvaluationDataSourceId"
	        ],
	        "members": {
	          "EvaluationId": {},
	          "EvaluationName": {},
	          "MLModelId": {},
	          "EvaluationDataSourceId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "EvaluationId": {}
	        }
	      }
	    },
	    "CreateMLModel": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "MLModelId",
	          "MLModelType",
	          "TrainingDataSourceId"
	        ],
	        "members": {
	          "MLModelId": {},
	          "MLModelName": {},
	          "MLModelType": {},
	          "Parameters": {
	            "shape": "S1d"
	          },
	          "TrainingDataSourceId": {},
	          "Recipe": {},
	          "RecipeUri": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "MLModelId": {}
	        }
	      }
	    },
	    "CreateRealtimeEndpoint": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "MLModelId"
	        ],
	        "members": {
	          "MLModelId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "MLModelId": {},
	          "RealtimeEndpointInfo": {
	            "shape": "S1j"
	          }
	        }
	      }
	    },
	    "DeleteBatchPrediction": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "BatchPredictionId"
	        ],
	        "members": {
	          "BatchPredictionId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "BatchPredictionId": {}
	        }
	      }
	    },
	    "DeleteDataSource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DataSourceId"
	        ],
	        "members": {
	          "DataSourceId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "DataSourceId": {}
	        }
	      }
	    },
	    "DeleteEvaluation": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "EvaluationId"
	        ],
	        "members": {
	          "EvaluationId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "EvaluationId": {}
	        }
	      }
	    },
	    "DeleteMLModel": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "MLModelId"
	        ],
	        "members": {
	          "MLModelId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "MLModelId": {}
	        }
	      }
	    },
	    "DeleteRealtimeEndpoint": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "MLModelId"
	        ],
	        "members": {
	          "MLModelId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "MLModelId": {},
	          "RealtimeEndpointInfo": {
	            "shape": "S1j"
	          }
	        }
	      }
	    },
	    "DeleteTags": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TagKeys",
	          "ResourceId",
	          "ResourceType"
	        ],
	        "members": {
	          "TagKeys": {
	            "type": "list",
	            "member": {}
	          },
	          "ResourceId": {},
	          "ResourceType": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ResourceId": {},
	          "ResourceType": {}
	        }
	      }
	    },
	    "DescribeBatchPredictions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "FilterVariable": {},
	          "EQ": {},
	          "GT": {},
	          "LT": {},
	          "GE": {},
	          "LE": {},
	          "NE": {},
	          "Prefix": {},
	          "SortOrder": {},
	          "NextToken": {},
	          "Limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Results": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "BatchPredictionId": {},
	                "MLModelId": {},
	                "BatchPredictionDataSourceId": {},
	                "InputDataLocationS3": {},
	                "CreatedByIamUser": {},
	                "CreatedAt": {
	                  "type": "timestamp"
	                },
	                "LastUpdatedAt": {
	                  "type": "timestamp"
	                },
	                "Name": {},
	                "Status": {},
	                "OutputUri": {},
	                "Message": {},
	                "ComputeTime": {
	                  "type": "long"
	                },
	                "FinishedAt": {
	                  "type": "timestamp"
	                },
	                "StartedAt": {
	                  "type": "timestamp"
	                },
	                "TotalRecordCount": {
	                  "type": "long"
	                },
	                "InvalidRecordCount": {
	                  "type": "long"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeDataSources": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "FilterVariable": {},
	          "EQ": {},
	          "GT": {},
	          "LT": {},
	          "GE": {},
	          "LE": {},
	          "NE": {},
	          "Prefix": {},
	          "SortOrder": {},
	          "NextToken": {},
	          "Limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Results": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "DataSourceId": {},
	                "DataLocationS3": {},
	                "DataRearrangement": {},
	                "CreatedByIamUser": {},
	                "CreatedAt": {
	                  "type": "timestamp"
	                },
	                "LastUpdatedAt": {
	                  "type": "timestamp"
	                },
	                "DataSizeInBytes": {
	                  "type": "long"
	                },
	                "NumberOfFiles": {
	                  "type": "long"
	                },
	                "Name": {},
	                "Status": {},
	                "Message": {},
	                "RedshiftMetadata": {
	                  "shape": "S2i"
	                },
	                "RDSMetadata": {
	                  "shape": "S2j"
	                },
	                "RoleARN": {},
	                "ComputeStatistics": {
	                  "type": "boolean"
	                },
	                "ComputeTime": {
	                  "type": "long"
	                },
	                "FinishedAt": {
	                  "type": "timestamp"
	                },
	                "StartedAt": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeEvaluations": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "FilterVariable": {},
	          "EQ": {},
	          "GT": {},
	          "LT": {},
	          "GE": {},
	          "LE": {},
	          "NE": {},
	          "Prefix": {},
	          "SortOrder": {},
	          "NextToken": {},
	          "Limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Results": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "EvaluationId": {},
	                "MLModelId": {},
	                "EvaluationDataSourceId": {},
	                "InputDataLocationS3": {},
	                "CreatedByIamUser": {},
	                "CreatedAt": {
	                  "type": "timestamp"
	                },
	                "LastUpdatedAt": {
	                  "type": "timestamp"
	                },
	                "Name": {},
	                "Status": {},
	                "PerformanceMetrics": {
	                  "shape": "S2q"
	                },
	                "Message": {},
	                "ComputeTime": {
	                  "type": "long"
	                },
	                "FinishedAt": {
	                  "type": "timestamp"
	                },
	                "StartedAt": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeMLModels": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "FilterVariable": {},
	          "EQ": {},
	          "GT": {},
	          "LT": {},
	          "GE": {},
	          "LE": {},
	          "NE": {},
	          "Prefix": {},
	          "SortOrder": {},
	          "NextToken": {},
	          "Limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Results": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "MLModelId": {},
	                "TrainingDataSourceId": {},
	                "CreatedByIamUser": {},
	                "CreatedAt": {
	                  "type": "timestamp"
	                },
	                "LastUpdatedAt": {
	                  "type": "timestamp"
	                },
	                "Name": {},
	                "Status": {},
	                "SizeInBytes": {
	                  "type": "long"
	                },
	                "EndpointInfo": {
	                  "shape": "S1j"
	                },
	                "TrainingParameters": {
	                  "shape": "S1d"
	                },
	                "InputDataLocationS3": {},
	                "Algorithm": {},
	                "MLModelType": {},
	                "ScoreThreshold": {
	                  "type": "float"
	                },
	                "ScoreThresholdLastUpdatedAt": {
	                  "type": "timestamp"
	                },
	                "Message": {},
	                "ComputeTime": {
	                  "type": "long"
	                },
	                "FinishedAt": {
	                  "type": "timestamp"
	                },
	                "StartedAt": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeTags": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceId",
	          "ResourceType"
	        ],
	        "members": {
	          "ResourceId": {},
	          "ResourceType": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ResourceId": {},
	          "ResourceType": {},
	          "Tags": {
	            "shape": "S2"
	          }
	        }
	      }
	    },
	    "GetBatchPrediction": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "BatchPredictionId"
	        ],
	        "members": {
	          "BatchPredictionId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "BatchPredictionId": {},
	          "MLModelId": {},
	          "BatchPredictionDataSourceId": {},
	          "InputDataLocationS3": {},
	          "CreatedByIamUser": {},
	          "CreatedAt": {
	            "type": "timestamp"
	          },
	          "LastUpdatedAt": {
	            "type": "timestamp"
	          },
	          "Name": {},
	          "Status": {},
	          "OutputUri": {},
	          "LogUri": {},
	          "Message": {},
	          "ComputeTime": {
	            "type": "long"
	          },
	          "FinishedAt": {
	            "type": "timestamp"
	          },
	          "StartedAt": {
	            "type": "timestamp"
	          },
	          "TotalRecordCount": {
	            "type": "long"
	          },
	          "InvalidRecordCount": {
	            "type": "long"
	          }
	        }
	      }
	    },
	    "GetDataSource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DataSourceId"
	        ],
	        "members": {
	          "DataSourceId": {},
	          "Verbose": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "DataSourceId": {},
	          "DataLocationS3": {},
	          "DataRearrangement": {},
	          "CreatedByIamUser": {},
	          "CreatedAt": {
	            "type": "timestamp"
	          },
	          "LastUpdatedAt": {
	            "type": "timestamp"
	          },
	          "DataSizeInBytes": {
	            "type": "long"
	          },
	          "NumberOfFiles": {
	            "type": "long"
	          },
	          "Name": {},
	          "Status": {},
	          "LogUri": {},
	          "Message": {},
	          "RedshiftMetadata": {
	            "shape": "S2i"
	          },
	          "RDSMetadata": {
	            "shape": "S2j"
	          },
	          "RoleARN": {},
	          "ComputeStatistics": {
	            "type": "boolean"
	          },
	          "ComputeTime": {
	            "type": "long"
	          },
	          "FinishedAt": {
	            "type": "timestamp"
	          },
	          "StartedAt": {
	            "type": "timestamp"
	          },
	          "DataSourceSchema": {}
	        }
	      }
	    },
	    "GetEvaluation": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "EvaluationId"
	        ],
	        "members": {
	          "EvaluationId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "EvaluationId": {},
	          "MLModelId": {},
	          "EvaluationDataSourceId": {},
	          "InputDataLocationS3": {},
	          "CreatedByIamUser": {},
	          "CreatedAt": {
	            "type": "timestamp"
	          },
	          "LastUpdatedAt": {
	            "type": "timestamp"
	          },
	          "Name": {},
	          "Status": {},
	          "PerformanceMetrics": {
	            "shape": "S2q"
	          },
	          "LogUri": {},
	          "Message": {},
	          "ComputeTime": {
	            "type": "long"
	          },
	          "FinishedAt": {
	            "type": "timestamp"
	          },
	          "StartedAt": {
	            "type": "timestamp"
	          }
	        }
	      }
	    },
	    "GetMLModel": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "MLModelId"
	        ],
	        "members": {
	          "MLModelId": {},
	          "Verbose": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "MLModelId": {},
	          "TrainingDataSourceId": {},
	          "CreatedByIamUser": {},
	          "CreatedAt": {
	            "type": "timestamp"
	          },
	          "LastUpdatedAt": {
	            "type": "timestamp"
	          },
	          "Name": {},
	          "Status": {},
	          "SizeInBytes": {
	            "type": "long"
	          },
	          "EndpointInfo": {
	            "shape": "S1j"
	          },
	          "TrainingParameters": {
	            "shape": "S1d"
	          },
	          "InputDataLocationS3": {},
	          "MLModelType": {},
	          "ScoreThreshold": {
	            "type": "float"
	          },
	          "ScoreThresholdLastUpdatedAt": {
	            "type": "timestamp"
	          },
	          "LogUri": {},
	          "Message": {},
	          "ComputeTime": {
	            "type": "long"
	          },
	          "FinishedAt": {
	            "type": "timestamp"
	          },
	          "StartedAt": {
	            "type": "timestamp"
	          },
	          "Recipe": {},
	          "Schema": {}
	        }
	      }
	    },
	    "Predict": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "MLModelId",
	          "Record",
	          "PredictEndpoint"
	        ],
	        "members": {
	          "MLModelId": {},
	          "Record": {
	            "type": "map",
	            "key": {},
	            "value": {}
	          },
	          "PredictEndpoint": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Prediction": {
	            "type": "structure",
	            "members": {
	              "predictedLabel": {},
	              "predictedValue": {
	                "type": "float"
	              },
	              "predictedScores": {
	                "type": "map",
	                "key": {},
	                "value": {
	                  "type": "float"
	                }
	              },
	              "details": {
	                "type": "map",
	                "key": {},
	                "value": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "UpdateBatchPrediction": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "BatchPredictionId",
	          "BatchPredictionName"
	        ],
	        "members": {
	          "BatchPredictionId": {},
	          "BatchPredictionName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "BatchPredictionId": {}
	        }
	      }
	    },
	    "UpdateDataSource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DataSourceId",
	          "DataSourceName"
	        ],
	        "members": {
	          "DataSourceId": {},
	          "DataSourceName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "DataSourceId": {}
	        }
	      }
	    },
	    "UpdateEvaluation": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "EvaluationId",
	          "EvaluationName"
	        ],
	        "members": {
	          "EvaluationId": {},
	          "EvaluationName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "EvaluationId": {}
	        }
	      }
	    },
	    "UpdateMLModel": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "MLModelId"
	        ],
	        "members": {
	          "MLModelId": {},
	          "MLModelName": {},
	          "ScoreThreshold": {
	            "type": "float"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "MLModelId": {}
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S2": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "Key": {},
	          "Value": {}
	        }
	      }
	    },
	    "Sf": {
	      "type": "structure",
	      "required": [
	        "InstanceIdentifier",
	        "DatabaseName"
	      ],
	      "members": {
	        "InstanceIdentifier": {},
	        "DatabaseName": {}
	      }
	    },
	    "Sy": {
	      "type": "structure",
	      "required": [
	        "DatabaseName",
	        "ClusterIdentifier"
	      ],
	      "members": {
	        "DatabaseName": {},
	        "ClusterIdentifier": {}
	      }
	    },
	    "S1d": {
	      "type": "map",
	      "key": {},
	      "value": {}
	    },
	    "S1j": {
	      "type": "structure",
	      "members": {
	        "PeakRequestsPerSecond": {
	          "type": "integer"
	        },
	        "CreatedAt": {
	          "type": "timestamp"
	        },
	        "EndpointUrl": {},
	        "EndpointStatus": {}
	      }
	    },
	    "S2i": {
	      "type": "structure",
	      "members": {
	        "RedshiftDatabase": {
	          "shape": "Sy"
	        },
	        "DatabaseUserName": {},
	        "SelectSqlQuery": {}
	      }
	    },
	    "S2j": {
	      "type": "structure",
	      "members": {
	        "Database": {
	          "shape": "Sf"
	        },
	        "DatabaseUserName": {},
	        "SelectSqlQuery": {},
	        "ResourceRole": {},
	        "ServiceRole": {},
	        "DataPipelineId": {}
	      }
	    },
	    "S2q": {
	      "type": "structure",
	      "members": {
	        "Properties": {
	          "type": "map",
	          "key": {},
	          "value": {}
	        }
	      }
	    }
	  },
	  "examples": {}
	}
	},{}],87:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "DescribeBatchPredictions": {
	      "limit_key": "Limit",
	      "output_token": "NextToken",
	      "input_token": "NextToken",
	      "result_key": "Results"
	    },
	    "DescribeDataSources": {
	      "limit_key": "Limit",
	      "output_token": "NextToken",
	      "input_token": "NextToken",
	      "result_key": "Results"
	    },
	    "DescribeEvaluations": {
	      "limit_key": "Limit",
	      "output_token": "NextToken",
	      "input_token": "NextToken",
	      "result_key": "Results"
	    },
	    "DescribeMLModels": {
	      "limit_key": "Limit",
	      "output_token": "NextToken",
	      "input_token": "NextToken",
	      "result_key": "Results"
	    }
	  }
	}
	
	},{}],88:[function(require,module,exports){
	module.exports={
	  "version": 2,
	  "waiters": {
	    "DataSourceAvailable": {
	      "delay": 30,
	      "operation": "DescribeDataSources",
	      "maxAttempts": 60,
	      "acceptors": [
	        {
	          "expected": "COMPLETED",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "Results[].Status"
	        },
	        {
	          "expected": "FAILED",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Results[].Status"
	        }
	      ]
	    },
	    "MLModelAvailable": {
	      "delay": 30,
	      "operation": "DescribeMLModels",
	      "maxAttempts": 60,
	      "acceptors": [
	        {
	          "expected": "COMPLETED",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "Results[].Status"
	        },
	        {
	          "expected": "FAILED",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Results[].Status"
	        }
	      ]
	    },
	    "EvaluationAvailable": {
	      "delay": 30,
	      "operation": "DescribeEvaluations",
	      "maxAttempts": 60,
	      "acceptors": [
	        {
	          "expected": "COMPLETED",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "Results[].Status"
	        },
	        {
	          "expected": "FAILED",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Results[].Status"
	        }
	      ]
	    },
	    "BatchPredictionAvailable": {
	      "delay": 30,
	      "operation": "DescribeBatchPredictions",
	      "maxAttempts": 60,
	      "acceptors": [
	        {
	          "expected": "COMPLETED",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "Results[].Status"
	        },
	        {
	          "expected": "FAILED",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Results[].Status"
	        }
	      ]
	    }
	  }
	}
	
	},{}],89:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2015-07-01",
	    "endpointPrefix": "marketplacecommerceanalytics",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceFullName": "AWS Marketplace Commerce Analytics",
	    "signatureVersion": "v4",
	    "signingName": "marketplacecommerceanalytics",
	    "targetPrefix": "MarketplaceCommerceAnalytics20150701",
	    "uid": "marketplacecommerceanalytics-2015-07-01"
	  },
	  "operations": {
	    "GenerateDataSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "dataSetType",
	          "dataSetPublicationDate",
	          "roleNameArn",
	          "destinationS3BucketName",
	          "snsTopicArn"
	        ],
	        "members": {
	          "dataSetType": {},
	          "dataSetPublicationDate": {
	            "type": "timestamp"
	          },
	          "roleNameArn": {},
	          "destinationS3BucketName": {},
	          "destinationS3Prefix": {},
	          "snsTopicArn": {},
	          "customerDefinedValues": {
	            "shape": "S8"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "dataSetRequestId": {}
	        }
	      }
	    },
	    "StartSupportDataExport": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "dataSetType",
	          "fromDate",
	          "roleNameArn",
	          "destinationS3BucketName",
	          "snsTopicArn"
	        ],
	        "members": {
	          "dataSetType": {},
	          "fromDate": {
	            "type": "timestamp"
	          },
	          "roleNameArn": {},
	          "destinationS3BucketName": {},
	          "destinationS3Prefix": {},
	          "snsTopicArn": {},
	          "customerDefinedValues": {
	            "shape": "S8"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "dataSetRequestId": {}
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S8": {
	      "type": "map",
	      "key": {},
	      "value": {}
	    }
	  }
	}
	},{}],90:[function(require,module,exports){
	module.exports={
	  "acm": {
	    "name": "ACM",
	    "cors": true
	  },
	  "apigateway": {
	    "name": "APIGateway",
	    "cors": true
	  },
	  "applicationautoscaling": {
	    "prefix": "application-autoscaling",
	    "name": "ApplicationAutoScaling",
	    "cors": true
	  },
	  "appstream": {
	    "name": "AppStream"
	  },
	  "autoscaling": {
	    "name": "AutoScaling",
	    "cors": true
	  },
	  "batch": {
	    "name": "Batch"
	  },
	  "budgets": {
	    "name": "Budgets"
	  },
	  "clouddirectory": {
	    "name": "CloudDirectory"
	  },
	  "cloudformation": {
	    "name": "CloudFormation",
	    "cors": true
	  },
	  "cloudfront": {
	    "name": "CloudFront",
	    "versions": [
	      "2013-05-12*",
	      "2013-11-11*",
	      "2014-05-31*",
	      "2014-10-21*",
	      "2014-11-06*",
	      "2015-04-17*",
	      "2015-07-27*",
	      "2015-09-17*",
	      "2016-01-13*",
	      "2016-01-28*",
	      "2016-08-01*",
	      "2016-08-20*",
	      "2016-09-07*",
	      "2016-09-29*"
	    ],
	    "cors": true
	  },
	  "cloudhsm": {
	    "name": "CloudHSM",
	    "cors": true
	  },
	  "cloudsearch": {
	    "name": "CloudSearch"
	  },
	  "cloudsearchdomain": {
	    "name": "CloudSearchDomain"
	  },
	  "cloudtrail": {
	    "name": "CloudTrail",
	    "cors": true
	  },
	  "cloudwatch": {
	    "prefix": "monitoring",
	    "name": "CloudWatch",
	    "cors": true
	  },
	  "cloudwatchevents": {
	    "prefix": "events",
	    "name": "CloudWatchEvents",
	    "versions": [
	      "2014-02-03*"
	    ],
	    "cors": true
	  },
	  "cloudwatchlogs": {
	    "prefix": "logs",
	    "name": "CloudWatchLogs",
	    "cors": true
	  },
	  "codebuild": {
	    "name": "CodeBuild"
	  },
	  "codecommit": {
	    "name": "CodeCommit",
	    "cors": true
	  },
	  "codedeploy": {
	    "name": "CodeDeploy",
	    "cors": true
	  },
	  "codepipeline": {
	    "name": "CodePipeline",
	    "cors": true
	  },
	  "cognitoidentity": {
	    "prefix": "cognito-identity",
	    "name": "CognitoIdentity",
	    "cors": true
	  },
	  "cognitoidentityserviceprovider": {
	    "prefix": "cognito-idp",
	    "name": "CognitoIdentityServiceProvider",
	    "cors": true
	  },
	  "cognitosync": {
	    "prefix": "cognito-sync",
	    "name": "CognitoSync",
	    "cors": true
	  },
	  "configservice": {
	    "prefix": "config",
	    "name": "ConfigService",
	    "cors": true
	  },
	  "cur": {
	    "name": "CUR",
	    "cors": true
	  },
	  "datapipeline": {
	    "name": "DataPipeline"
	  },
	  "devicefarm": {
	    "name": "DeviceFarm",
	    "cors": true
	  },
	  "directconnect": {
	    "name": "DirectConnect",
	    "cors": true
	  },
	  "directoryservice": {
	    "prefix": "ds",
	    "name": "DirectoryService"
	  },
	  "discovery": {
	    "name": "Discovery"
	  },
	  "dms": {
	    "name": "DMS"
	  },
	  "dynamodb": {
	    "name": "DynamoDB",
	    "cors": true
	  },
	  "dynamodbstreams": {
	    "prefix": "streams.dynamodb",
	    "name": "DynamoDBStreams",
	    "cors": true
	  },
	  "ec2": {
	    "name": "EC2",
	    "versions": [
	      "2013-06-15*",
	      "2013-10-15*",
	      "2014-02-01*",
	      "2014-05-01*",
	      "2014-06-15*",
	      "2014-09-01*",
	      "2014-10-01*",
	      "2015-03-01*",
	      "2015-04-15*",
	      "2015-10-01*",
	      "2016-04-01*",
	      "2016-09-15*"
	    ],
	    "cors": true
	  },
	  "ecr": {
	    "name": "ECR",
	    "cors": true
	  },
	  "ecs": {
	    "name": "ECS",
	    "cors": true
	  },
	  "efs": {
	    "prefix": "elasticfilesystem",
	    "name": "EFS"
	  },
	  "elasticache": {
	    "name": "ElastiCache",
	    "versions": [
	      "2012-11-15*",
	      "2014-03-24*",
	      "2014-07-15*",
	      "2014-09-30*"
	    ],
	    "cors": true
	  },
	  "elasticbeanstalk": {
	    "name": "ElasticBeanstalk",
	    "cors": true
	  },
	  "elb": {
	    "prefix": "elasticloadbalancing",
	    "name": "ELB",
	    "cors": true
	  },
	  "elbv2": {
	    "prefix": "elasticloadbalancingv2",
	    "name": "ELBv2",
	    "cors": true
	  },
	  "emr": {
	    "prefix": "elasticmapreduce",
	    "name": "EMR",
	    "cors": true
	  },
	  "es": {
	    "name": "ES"
	  },
	  "elastictranscoder": {
	    "name": "ElasticTranscoder",
	    "cors": true
	  },
	  "firehose": {
	    "name": "Firehose",
	    "cors": true
	  },
	  "gamelift": {
	    "name": "GameLift",
	    "cors": true
	  },
	  "glacier": {
	    "name": "Glacier"
	  },
	  "health": {
	    "name": "Health"
	  },
	  "iam": {
	    "name": "IAM"
	  },
	  "importexport": {
	    "name": "ImportExport"
	  },
	  "inspector": {
	    "name": "Inspector",
	    "versions": [
	      "2015-08-18*"
	    ],
	    "cors": true
	  },
	  "iot": {
	    "name": "Iot",
	    "cors": true
	  },
	  "iotdata": {
	    "prefix": "iot-data",
	    "name": "IotData",
	    "cors": true
	  },
	  "kinesis": {
	    "name": "Kinesis",
	    "cors": true
	  },
	  "kinesisanalytics": {
	    "name": "KinesisAnalytics"
	  },
	  "kms": {
	    "name": "KMS",
	    "cors": true
	  },
	  "lambda": {
	    "name": "Lambda",
	    "cors": true
	  },
	  "lexruntime": {
	    "prefix": "runtime.lex",
	    "name": "LexRuntime",
	    "cors": true
	  },
	  "lightsail": {
	    "name": "Lightsail"
	  },
	  "machinelearning": {
	    "name": "MachineLearning",
	    "cors": true
	  },
	  "marketplacecommerceanalytics": {
	    "name": "MarketplaceCommerceAnalytics",
	    "cors": true
	  },
	  "marketplacemetering": {
	    "prefix": "meteringmarketplace",
	    "name": "MarketplaceMetering"
	  },
	  "mobileanalytics": {
	    "name": "MobileAnalytics",
	    "cors": true
	  },
	  "opsworks": {
	    "name": "OpsWorks",
	    "cors": true
	  },
	  "opsworkscm": {
	    "name": "OpsWorksCM"
	  },
	  "pinpoint": {
	    "name": "Pinpoint"
	  },
	  "polly": {
	    "name": "Polly",
	    "cors": true
	  },
	  "rds": {
	    "name": "RDS",
	    "versions": [
	      "2014-09-01*"
	    ],
	    "cors": true
	  },
	  "redshift": {
	    "name": "Redshift",
	    "cors": true
	  },
	  "rekognition": {
	    "name": "Rekognition",
	    "cors": true
	  },
	  "route53": {
	    "name": "Route53",
	    "cors": true
	  },
	  "route53domains": {
	    "name": "Route53Domains",
	    "cors": true
	  },
	  "s3": {
	    "name": "S3",
	    "dualstackAvailable": true,
	    "cors": true
	  },
	  "servicecatalog": {
	    "name": "ServiceCatalog",
	    "cors": true
	  },
	  "ses": {
	    "prefix": "email",
	    "name": "SES",
	    "cors": true
	  },
	  "shield": {
	    "name": "Shield"
	  },
	  "simpledb": {
	    "prefix": "sdb",
	    "name": "SimpleDB"
	  },
	  "sms": {
	    "name": "SMS"
	  },
	  "snowball": {
	    "name": "Snowball"
	  },
	  "sns": {
	    "name": "SNS",
	    "cors": true
	  },
	  "sqs": {
	    "name": "SQS",
	    "cors": true
	  },
	  "ssm": {
	    "name": "SSM",
	    "cors": true
	  },
	  "storagegateway": {
	    "name": "StorageGateway",
	    "cors": true
	  },
	  "stepfunctions": {
	    "prefix": "states",
	    "name": "StepFunctions"
	  },
	  "sts": {
	    "name": "STS",
	    "cors": true
	  },
	  "support": {
	    "name": "Support"
	  },
	  "swf": {
	    "name": "SWF"
	  },
	  "xray": {
	    "name": "XRay"
	  },
	  "waf": {
	    "name": "WAF",
	    "cors": true
	  },
	  "wafregional": {
	    "prefix": "waf-regional",
	    "name": "WAFRegional"
	  },
	  "workspaces": {
	    "name": "WorkSpaces"
	  }
	}
	
	},{}],91:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2014-06-05",
	    "endpointPrefix": "mobileanalytics",
	    "serviceFullName": "Amazon Mobile Analytics",
	    "signatureVersion": "v4",
	    "protocol": "rest-json"
	  },
	  "operations": {
	    "PutEvents": {
	      "http": {
	        "requestUri": "/2014-06-05/events",
	        "responseCode": 202
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "events",
	          "clientContext"
	        ],
	        "members": {
	          "events": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "eventType",
	                "timestamp"
	              ],
	              "members": {
	                "eventType": {},
	                "timestamp": {},
	                "session": {
	                  "type": "structure",
	                  "members": {
	                    "id": {},
	                    "duration": {
	                      "type": "long"
	                    },
	                    "startTimestamp": {},
	                    "stopTimestamp": {}
	                  }
	                },
	                "version": {},
	                "attributes": {
	                  "type": "map",
	                  "key": {},
	                  "value": {}
	                },
	                "metrics": {
	                  "type": "map",
	                  "key": {},
	                  "value": {
	                    "type": "double"
	                  }
	                }
	              }
	            }
	          },
	          "clientContext": {
	            "location": "header",
	            "locationName": "x-amz-Client-Context"
	          },
	          "clientContextEncoding": {
	            "location": "header",
	            "locationName": "x-amz-Client-Context-Encoding"
	          }
	        }
	      }
	    }
	  },
	  "shapes": {}
	}
	},{}],92:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "uid": "monitoring-2010-08-01",
	    "apiVersion": "2010-08-01",
	    "endpointPrefix": "monitoring",
	    "protocol": "query",
	    "serviceAbbreviation": "CloudWatch",
	    "serviceFullName": "Amazon CloudWatch",
	    "signatureVersion": "v4",
	    "xmlNamespace": "http://monitoring.amazonaws.com/doc/2010-08-01/"
	  },
	  "operations": {
	    "DeleteAlarms": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AlarmNames"
	        ],
	        "members": {
	          "AlarmNames": {
	            "shape": "S2"
	          }
	        }
	      }
	    },
	    "DescribeAlarmHistory": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "AlarmName": {},
	          "HistoryItemType": {},
	          "StartDate": {
	            "type": "timestamp"
	          },
	          "EndDate": {
	            "type": "timestamp"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeAlarmHistoryResult",
	        "type": "structure",
	        "members": {
	          "AlarmHistoryItems": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "AlarmName": {},
	                "Timestamp": {
	                  "type": "timestamp"
	                },
	                "HistoryItemType": {},
	                "HistorySummary": {},
	                "HistoryData": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeAlarms": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "AlarmNames": {
	            "shape": "S2"
	          },
	          "AlarmNamePrefix": {},
	          "StateValue": {},
	          "ActionPrefix": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeAlarmsResult",
	        "type": "structure",
	        "members": {
	          "MetricAlarms": {
	            "shape": "Sj"
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeAlarmsForMetric": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "MetricName",
	          "Namespace"
	        ],
	        "members": {
	          "MetricName": {},
	          "Namespace": {},
	          "Statistic": {},
	          "ExtendedStatistic": {},
	          "Dimensions": {
	            "shape": "Sw"
	          },
	          "Period": {
	            "type": "integer"
	          },
	          "Unit": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeAlarmsForMetricResult",
	        "type": "structure",
	        "members": {
	          "MetricAlarms": {
	            "shape": "Sj"
	          }
	        }
	      }
	    },
	    "DisableAlarmActions": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AlarmNames"
	        ],
	        "members": {
	          "AlarmNames": {
	            "shape": "S2"
	          }
	        }
	      }
	    },
	    "EnableAlarmActions": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AlarmNames"
	        ],
	        "members": {
	          "AlarmNames": {
	            "shape": "S2"
	          }
	        }
	      }
	    },
	    "GetMetricStatistics": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Namespace",
	          "MetricName",
	          "StartTime",
	          "EndTime",
	          "Period"
	        ],
	        "members": {
	          "Namespace": {},
	          "MetricName": {},
	          "Dimensions": {
	            "shape": "Sw"
	          },
	          "StartTime": {
	            "type": "timestamp"
	          },
	          "EndTime": {
	            "type": "timestamp"
	          },
	          "Period": {
	            "type": "integer"
	          },
	          "Statistics": {
	            "type": "list",
	            "member": {}
	          },
	          "ExtendedStatistics": {
	            "type": "list",
	            "member": {}
	          },
	          "Unit": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "GetMetricStatisticsResult",
	        "type": "structure",
	        "members": {
	          "Label": {},
	          "Datapoints": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Timestamp": {
	                  "type": "timestamp"
	                },
	                "SampleCount": {
	                  "type": "double"
	                },
	                "Average": {
	                  "type": "double"
	                },
	                "Sum": {
	                  "type": "double"
	                },
	                "Minimum": {
	                  "type": "double"
	                },
	                "Maximum": {
	                  "type": "double"
	                },
	                "Unit": {},
	                "ExtendedStatistics": {
	                  "type": "map",
	                  "key": {},
	                  "value": {
	                    "type": "double"
	                  }
	                }
	              },
	              "xmlOrder": [
	                "Timestamp",
	                "SampleCount",
	                "Average",
	                "Sum",
	                "Minimum",
	                "Maximum",
	                "Unit",
	                "ExtendedStatistics"
	              ]
	            }
	          }
	        }
	      }
	    },
	    "ListMetrics": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Namespace": {},
	          "MetricName": {},
	          "Dimensions": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "Name"
	              ],
	              "members": {
	                "Name": {},
	                "Value": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ListMetricsResult",
	        "type": "structure",
	        "members": {
	          "Metrics": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Namespace": {},
	                "MetricName": {},
	                "Dimensions": {
	                  "shape": "Sw"
	                }
	              },
	              "xmlOrder": [
	                "Namespace",
	                "MetricName",
	                "Dimensions"
	              ]
	            }
	          },
	          "NextToken": {}
	        },
	        "xmlOrder": [
	          "Metrics",
	          "NextToken"
	        ]
	      }
	    },
	    "PutMetricAlarm": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AlarmName",
	          "MetricName",
	          "Namespace",
	          "Period",
	          "EvaluationPeriods",
	          "Threshold",
	          "ComparisonOperator"
	        ],
	        "members": {
	          "AlarmName": {},
	          "AlarmDescription": {},
	          "ActionsEnabled": {
	            "type": "boolean"
	          },
	          "OKActions": {
	            "shape": "So"
	          },
	          "AlarmActions": {
	            "shape": "So"
	          },
	          "InsufficientDataActions": {
	            "shape": "So"
	          },
	          "MetricName": {},
	          "Namespace": {},
	          "Statistic": {},
	          "ExtendedStatistic": {},
	          "Dimensions": {
	            "shape": "Sw"
	          },
	          "Period": {
	            "type": "integer"
	          },
	          "Unit": {},
	          "EvaluationPeriods": {
	            "type": "integer"
	          },
	          "Threshold": {
	            "type": "double"
	          },
	          "ComparisonOperator": {}
	        }
	      }
	    },
	    "PutMetricData": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Namespace",
	          "MetricData"
	        ],
	        "members": {
	          "Namespace": {},
	          "MetricData": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "MetricName"
	              ],
	              "members": {
	                "MetricName": {},
	                "Dimensions": {
	                  "shape": "Sw"
	                },
	                "Timestamp": {
	                  "type": "timestamp"
	                },
	                "Value": {
	                  "type": "double"
	                },
	                "StatisticValues": {
	                  "type": "structure",
	                  "required": [
	                    "SampleCount",
	                    "Sum",
	                    "Minimum",
	                    "Maximum"
	                  ],
	                  "members": {
	                    "SampleCount": {
	                      "type": "double"
	                    },
	                    "Sum": {
	                      "type": "double"
	                    },
	                    "Minimum": {
	                      "type": "double"
	                    },
	                    "Maximum": {
	                      "type": "double"
	                    }
	                  }
	                },
	                "Unit": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "SetAlarmState": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AlarmName",
	          "StateValue",
	          "StateReason"
	        ],
	        "members": {
	          "AlarmName": {},
	          "StateValue": {},
	          "StateReason": {},
	          "StateReasonData": {}
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S2": {
	      "type": "list",
	      "member": {}
	    },
	    "Sj": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "AlarmName": {},
	          "AlarmArn": {},
	          "AlarmDescription": {},
	          "AlarmConfigurationUpdatedTimestamp": {
	            "type": "timestamp"
	          },
	          "ActionsEnabled": {
	            "type": "boolean"
	          },
	          "OKActions": {
	            "shape": "So"
	          },
	          "AlarmActions": {
	            "shape": "So"
	          },
	          "InsufficientDataActions": {
	            "shape": "So"
	          },
	          "StateValue": {},
	          "StateReason": {},
	          "StateReasonData": {},
	          "StateUpdatedTimestamp": {
	            "type": "timestamp"
	          },
	          "MetricName": {},
	          "Namespace": {},
	          "Statistic": {},
	          "ExtendedStatistic": {},
	          "Dimensions": {
	            "shape": "Sw"
	          },
	          "Period": {
	            "type": "integer"
	          },
	          "Unit": {},
	          "EvaluationPeriods": {
	            "type": "integer"
	          },
	          "Threshold": {
	            "type": "double"
	          },
	          "ComparisonOperator": {}
	        },
	        "xmlOrder": [
	          "AlarmName",
	          "AlarmArn",
	          "AlarmDescription",
	          "AlarmConfigurationUpdatedTimestamp",
	          "ActionsEnabled",
	          "OKActions",
	          "AlarmActions",
	          "InsufficientDataActions",
	          "StateValue",
	          "StateReason",
	          "StateReasonData",
	          "StateUpdatedTimestamp",
	          "MetricName",
	          "Namespace",
	          "Statistic",
	          "Dimensions",
	          "Period",
	          "Unit",
	          "EvaluationPeriods",
	          "Threshold",
	          "ComparisonOperator",
	          "ExtendedStatistic"
	        ]
	      }
	    },
	    "So": {
	      "type": "list",
	      "member": {}
	    },
	    "Sw": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "Value"
	        ],
	        "members": {
	          "Name": {},
	          "Value": {}
	        },
	        "xmlOrder": [
	          "Name",
	          "Value"
	        ]
	      }
	    }
	  }
	}
	},{}],93:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "DescribeAlarmHistory": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "limit_key": "MaxRecords",
	      "result_key": "AlarmHistoryItems"
	    },
	    "DescribeAlarms": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "limit_key": "MaxRecords",
	      "result_key": "MetricAlarms"
	    },
	    "DescribeAlarmsForMetric": {
	      "result_key": "MetricAlarms"
	    },
	    "ListMetrics": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "result_key": "Metrics"
	    }
	  }
	}
	
	},{}],94:[function(require,module,exports){
	module.exports={
	  "version": 2,
	  "waiters": {
	    "AlarmExists": {
	      "delay": 5,
	      "maxAttempts": 40,
	      "operation": "DescribeAlarms",
	      "acceptors": [
	        {
	          "matcher": "path",
	          "expected": true,
	          "argument": "length(MetricAlarms[]) > `0`",
	          "state": "success"
	        }
	      ]
	    }
	  }
	}
	
	},{}],95:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "uid": "opsworks-2013-02-18",
	    "apiVersion": "2013-02-18",
	    "endpointPrefix": "opsworks",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceFullName": "AWS OpsWorks",
	    "signatureVersion": "v4",
	    "targetPrefix": "OpsWorks_20130218"
	  },
	  "operations": {
	    "AssignInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId",
	          "LayerIds"
	        ],
	        "members": {
	          "InstanceId": {},
	          "LayerIds": {
	            "shape": "S3"
	          }
	        }
	      }
	    },
	    "AssignVolume": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VolumeId"
	        ],
	        "members": {
	          "VolumeId": {},
	          "InstanceId": {}
	        }
	      }
	    },
	    "AssociateElasticIp": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ElasticIp"
	        ],
	        "members": {
	          "ElasticIp": {},
	          "InstanceId": {}
	        }
	      }
	    },
	    "AttachElasticLoadBalancer": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ElasticLoadBalancerName",
	          "LayerId"
	        ],
	        "members": {
	          "ElasticLoadBalancerName": {},
	          "LayerId": {}
	        }
	      }
	    },
	    "CloneStack": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SourceStackId",
	          "ServiceRoleArn"
	        ],
	        "members": {
	          "SourceStackId": {},
	          "Name": {},
	          "Region": {},
	          "VpcId": {},
	          "Attributes": {
	            "shape": "S8"
	          },
	          "ServiceRoleArn": {},
	          "DefaultInstanceProfileArn": {},
	          "DefaultOs": {},
	          "HostnameTheme": {},
	          "DefaultAvailabilityZone": {},
	          "DefaultSubnetId": {},
	          "CustomJson": {},
	          "ConfigurationManager": {
	            "shape": "Sa"
	          },
	          "ChefConfiguration": {
	            "shape": "Sb"
	          },
	          "UseCustomCookbooks": {
	            "type": "boolean"
	          },
	          "UseOpsworksSecurityGroups": {
	            "type": "boolean"
	          },
	          "CustomCookbooksSource": {
	            "shape": "Sd"
	          },
	          "DefaultSshKeyName": {},
	          "ClonePermissions": {
	            "type": "boolean"
	          },
	          "CloneAppIds": {
	            "shape": "S3"
	          },
	          "DefaultRootDeviceType": {},
	          "AgentVersion": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "StackId": {}
	        }
	      }
	    },
	    "CreateApp": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StackId",
	          "Name",
	          "Type"
	        ],
	        "members": {
	          "StackId": {},
	          "Shortname": {},
	          "Name": {},
	          "Description": {},
	          "DataSources": {
	            "shape": "Si"
	          },
	          "Type": {},
	          "AppSource": {
	            "shape": "Sd"
	          },
	          "Domains": {
	            "shape": "S3"
	          },
	          "EnableSsl": {
	            "type": "boolean"
	          },
	          "SslConfiguration": {
	            "shape": "Sl"
	          },
	          "Attributes": {
	            "shape": "Sm"
	          },
	          "Environment": {
	            "shape": "So"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "AppId": {}
	        }
	      }
	    },
	    "CreateDeployment": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StackId",
	          "Command"
	        ],
	        "members": {
	          "StackId": {},
	          "AppId": {},
	          "InstanceIds": {
	            "shape": "S3"
	          },
	          "LayerIds": {
	            "shape": "S3"
	          },
	          "Command": {
	            "shape": "Ss"
	          },
	          "Comment": {},
	          "CustomJson": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "DeploymentId": {}
	        }
	      }
	    },
	    "CreateInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StackId",
	          "LayerIds",
	          "InstanceType"
	        ],
	        "members": {
	          "StackId": {},
	          "LayerIds": {
	            "shape": "S3"
	          },
	          "InstanceType": {},
	          "AutoScalingType": {},
	          "Hostname": {},
	          "Os": {},
	          "AmiId": {},
	          "SshKeyName": {},
	          "AvailabilityZone": {},
	          "VirtualizationType": {},
	          "SubnetId": {},
	          "Architecture": {},
	          "RootDeviceType": {},
	          "BlockDeviceMappings": {
	            "shape": "Sz"
	          },
	          "InstallUpdatesOnBoot": {
	            "type": "boolean"
	          },
	          "EbsOptimized": {
	            "type": "boolean"
	          },
	          "AgentVersion": {},
	          "Tenancy": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "InstanceId": {}
	        }
	      }
	    },
	    "CreateLayer": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StackId",
	          "Type",
	          "Name",
	          "Shortname"
	        ],
	        "members": {
	          "StackId": {},
	          "Type": {},
	          "Name": {},
	          "Shortname": {},
	          "Attributes": {
	            "shape": "S17"
	          },
	          "CustomInstanceProfileArn": {},
	          "CustomJson": {},
	          "CustomSecurityGroupIds": {
	            "shape": "S3"
	          },
	          "Packages": {
	            "shape": "S3"
	          },
	          "VolumeConfigurations": {
	            "shape": "S19"
	          },
	          "EnableAutoHealing": {
	            "type": "boolean"
	          },
	          "AutoAssignElasticIps": {
	            "type": "boolean"
	          },
	          "AutoAssignPublicIps": {
	            "type": "boolean"
	          },
	          "CustomRecipes": {
	            "shape": "S1b"
	          },
	          "InstallUpdatesOnBoot": {
	            "type": "boolean"
	          },
	          "UseEbsOptimizedInstances": {
	            "type": "boolean"
	          },
	          "LifecycleEventConfiguration": {
	            "shape": "S1c"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "LayerId": {}
	        }
	      }
	    },
	    "CreateStack": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "Region",
	          "ServiceRoleArn",
	          "DefaultInstanceProfileArn"
	        ],
	        "members": {
	          "Name": {},
	          "Region": {},
	          "VpcId": {},
	          "Attributes": {
	            "shape": "S8"
	          },
	          "ServiceRoleArn": {},
	          "DefaultInstanceProfileArn": {},
	          "DefaultOs": {},
	          "HostnameTheme": {},
	          "DefaultAvailabilityZone": {},
	          "DefaultSubnetId": {},
	          "CustomJson": {},
	          "ConfigurationManager": {
	            "shape": "Sa"
	          },
	          "ChefConfiguration": {
	            "shape": "Sb"
	          },
	          "UseCustomCookbooks": {
	            "type": "boolean"
	          },
	          "UseOpsworksSecurityGroups": {
	            "type": "boolean"
	          },
	          "CustomCookbooksSource": {
	            "shape": "Sd"
	          },
	          "DefaultSshKeyName": {},
	          "DefaultRootDeviceType": {},
	          "AgentVersion": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "StackId": {}
	        }
	      }
	    },
	    "CreateUserProfile": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "IamUserArn"
	        ],
	        "members": {
	          "IamUserArn": {},
	          "SshUsername": {},
	          "SshPublicKey": {},
	          "AllowSelfManagement": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "IamUserArn": {}
	        }
	      }
	    },
	    "DeleteApp": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AppId"
	        ],
	        "members": {
	          "AppId": {}
	        }
	      }
	    },
	    "DeleteInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId"
	        ],
	        "members": {
	          "InstanceId": {},
	          "DeleteElasticIp": {
	            "type": "boolean"
	          },
	          "DeleteVolumes": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "DeleteLayer": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LayerId"
	        ],
	        "members": {
	          "LayerId": {}
	        }
	      }
	    },
	    "DeleteStack": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StackId"
	        ],
	        "members": {
	          "StackId": {}
	        }
	      }
	    },
	    "DeleteUserProfile": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "IamUserArn"
	        ],
	        "members": {
	          "IamUserArn": {}
	        }
	      }
	    },
	    "DeregisterEcsCluster": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "EcsClusterArn"
	        ],
	        "members": {
	          "EcsClusterArn": {}
	        }
	      }
	    },
	    "DeregisterElasticIp": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ElasticIp"
	        ],
	        "members": {
	          "ElasticIp": {}
	        }
	      }
	    },
	    "DeregisterInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId"
	        ],
	        "members": {
	          "InstanceId": {}
	        }
	      }
	    },
	    "DeregisterRdsDbInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RdsDbInstanceArn"
	        ],
	        "members": {
	          "RdsDbInstanceArn": {}
	        }
	      }
	    },
	    "DeregisterVolume": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VolumeId"
	        ],
	        "members": {
	          "VolumeId": {}
	        }
	      }
	    },
	    "DescribeAgentVersions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "StackId": {},
	          "ConfigurationManager": {
	            "shape": "Sa"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "AgentVersions": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Version": {},
	                "ConfigurationManager": {
	                  "shape": "Sa"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeApps": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "StackId": {},
	          "AppIds": {
	            "shape": "S3"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Apps": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "AppId": {},
	                "StackId": {},
	                "Shortname": {},
	                "Name": {},
	                "Description": {},
	                "DataSources": {
	                  "shape": "Si"
	                },
	                "Type": {},
	                "AppSource": {
	                  "shape": "Sd"
	                },
	                "Domains": {
	                  "shape": "S3"
	                },
	                "EnableSsl": {
	                  "type": "boolean"
	                },
	                "SslConfiguration": {
	                  "shape": "Sl"
	                },
	                "Attributes": {
	                  "shape": "Sm"
	                },
	                "CreatedAt": {},
	                "Environment": {
	                  "shape": "So"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeCommands": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DeploymentId": {},
	          "InstanceId": {},
	          "CommandIds": {
	            "shape": "S3"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Commands": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "CommandId": {},
	                "InstanceId": {},
	                "DeploymentId": {},
	                "CreatedAt": {},
	                "AcknowledgedAt": {},
	                "CompletedAt": {},
	                "Status": {},
	                "ExitCode": {
	                  "type": "integer"
	                },
	                "LogUrl": {},
	                "Type": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeDeployments": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "StackId": {},
	          "AppId": {},
	          "DeploymentIds": {
	            "shape": "S3"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Deployments": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "DeploymentId": {},
	                "StackId": {},
	                "AppId": {},
	                "CreatedAt": {},
	                "CompletedAt": {},
	                "Duration": {
	                  "type": "integer"
	                },
	                "IamUserArn": {},
	                "Comment": {},
	                "Command": {
	                  "shape": "Ss"
	                },
	                "Status": {},
	                "CustomJson": {},
	                "InstanceIds": {
	                  "shape": "S3"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeEcsClusters": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "EcsClusterArns": {
	            "shape": "S3"
	          },
	          "StackId": {},
	          "NextToken": {},
	          "MaxResults": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "EcsClusters": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "EcsClusterArn": {},
	                "EcsClusterName": {},
	                "StackId": {},
	                "RegisteredAt": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeElasticIps": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "InstanceId": {},
	          "StackId": {},
	          "Ips": {
	            "shape": "S3"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ElasticIps": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Ip": {},
	                "Name": {},
	                "Domain": {},
	                "Region": {},
	                "InstanceId": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeElasticLoadBalancers": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "StackId": {},
	          "LayerIds": {
	            "shape": "S3"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ElasticLoadBalancers": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "ElasticLoadBalancerName": {},
	                "Region": {},
	                "DnsName": {},
	                "StackId": {},
	                "LayerId": {},
	                "VpcId": {},
	                "AvailabilityZones": {
	                  "shape": "S3"
	                },
	                "SubnetIds": {
	                  "shape": "S3"
	                },
	                "Ec2InstanceIds": {
	                  "shape": "S3"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeInstances": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "StackId": {},
	          "LayerId": {},
	          "InstanceIds": {
	            "shape": "S3"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Instances": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "AgentVersion": {},
	                "AmiId": {},
	                "Architecture": {},
	                "AutoScalingType": {},
	                "AvailabilityZone": {},
	                "BlockDeviceMappings": {
	                  "shape": "Sz"
	                },
	                "CreatedAt": {},
	                "EbsOptimized": {
	                  "type": "boolean"
	                },
	                "Ec2InstanceId": {},
	                "EcsClusterArn": {},
	                "EcsContainerInstanceArn": {},
	                "ElasticIp": {},
	                "Hostname": {},
	                "InfrastructureClass": {},
	                "InstallUpdatesOnBoot": {
	                  "type": "boolean"
	                },
	                "InstanceId": {},
	                "InstanceProfileArn": {},
	                "InstanceType": {},
	                "LastServiceErrorId": {},
	                "LayerIds": {
	                  "shape": "S3"
	                },
	                "Os": {},
	                "Platform": {},
	                "PrivateDns": {},
	                "PrivateIp": {},
	                "PublicDns": {},
	                "PublicIp": {},
	                "RegisteredBy": {},
	                "ReportedAgentVersion": {},
	                "ReportedOs": {
	                  "type": "structure",
	                  "members": {
	                    "Family": {},
	                    "Name": {},
	                    "Version": {}
	                  }
	                },
	                "RootDeviceType": {},
	                "RootDeviceVolumeId": {},
	                "SecurityGroupIds": {
	                  "shape": "S3"
	                },
	                "SshHostDsaKeyFingerprint": {},
	                "SshHostRsaKeyFingerprint": {},
	                "SshKeyName": {},
	                "StackId": {},
	                "Status": {},
	                "SubnetId": {},
	                "Tenancy": {},
	                "VirtualizationType": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeLayers": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "StackId": {},
	          "LayerIds": {
	            "shape": "S3"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Layers": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "StackId": {},
	                "LayerId": {},
	                "Type": {},
	                "Name": {},
	                "Shortname": {},
	                "Attributes": {
	                  "shape": "S17"
	                },
	                "CustomInstanceProfileArn": {},
	                "CustomJson": {},
	                "CustomSecurityGroupIds": {
	                  "shape": "S3"
	                },
	                "DefaultSecurityGroupNames": {
	                  "shape": "S3"
	                },
	                "Packages": {
	                  "shape": "S3"
	                },
	                "VolumeConfigurations": {
	                  "shape": "S19"
	                },
	                "EnableAutoHealing": {
	                  "type": "boolean"
	                },
	                "AutoAssignElasticIps": {
	                  "type": "boolean"
	                },
	                "AutoAssignPublicIps": {
	                  "type": "boolean"
	                },
	                "DefaultRecipes": {
	                  "shape": "S1b"
	                },
	                "CustomRecipes": {
	                  "shape": "S1b"
	                },
	                "CreatedAt": {},
	                "InstallUpdatesOnBoot": {
	                  "type": "boolean"
	                },
	                "UseEbsOptimizedInstances": {
	                  "type": "boolean"
	                },
	                "LifecycleEventConfiguration": {
	                  "shape": "S1c"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeLoadBasedAutoScaling": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LayerIds"
	        ],
	        "members": {
	          "LayerIds": {
	            "shape": "S3"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "LoadBasedAutoScalingConfigurations": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "LayerId": {},
	                "Enable": {
	                  "type": "boolean"
	                },
	                "UpScaling": {
	                  "shape": "S30"
	                },
	                "DownScaling": {
	                  "shape": "S30"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeMyUserProfile": {
	      "output": {
	        "type": "structure",
	        "members": {
	          "UserProfile": {
	            "type": "structure",
	            "members": {
	              "IamUserArn": {},
	              "Name": {},
	              "SshUsername": {},
	              "SshPublicKey": {}
	            }
	          }
	        }
	      }
	    },
	    "DescribePermissions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "IamUserArn": {},
	          "StackId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Permissions": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "StackId": {},
	                "IamUserArn": {},
	                "AllowSsh": {
	                  "type": "boolean"
	                },
	                "AllowSudo": {
	                  "type": "boolean"
	                },
	                "Level": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeRaidArrays": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "InstanceId": {},
	          "StackId": {},
	          "RaidArrayIds": {
	            "shape": "S3"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "RaidArrays": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "RaidArrayId": {},
	                "InstanceId": {},
	                "Name": {},
	                "RaidLevel": {
	                  "type": "integer"
	                },
	                "NumberOfDisks": {
	                  "type": "integer"
	                },
	                "Size": {
	                  "type": "integer"
	                },
	                "Device": {},
	                "MountPoint": {},
	                "AvailabilityZone": {},
	                "CreatedAt": {},
	                "StackId": {},
	                "VolumeType": {},
	                "Iops": {
	                  "type": "integer"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeRdsDbInstances": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StackId"
	        ],
	        "members": {
	          "StackId": {},
	          "RdsDbInstanceArns": {
	            "shape": "S3"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "RdsDbInstances": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "RdsDbInstanceArn": {},
	                "DbInstanceIdentifier": {},
	                "DbUser": {},
	                "DbPassword": {},
	                "Region": {},
	                "Address": {},
	                "Engine": {},
	                "StackId": {},
	                "MissingOnRds": {
	                  "type": "boolean"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeServiceErrors": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "StackId": {},
	          "InstanceId": {},
	          "ServiceErrorIds": {
	            "shape": "S3"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ServiceErrors": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "ServiceErrorId": {},
	                "StackId": {},
	                "InstanceId": {},
	                "Type": {},
	                "Message": {},
	                "CreatedAt": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeStackProvisioningParameters": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StackId"
	        ],
	        "members": {
	          "StackId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "AgentInstallerUrl": {},
	          "Parameters": {
	            "type": "map",
	            "key": {},
	            "value": {}
	          }
	        }
	      }
	    },
	    "DescribeStackSummary": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StackId"
	        ],
	        "members": {
	          "StackId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "StackSummary": {
	            "type": "structure",
	            "members": {
	              "StackId": {},
	              "Name": {},
	              "Arn": {},
	              "LayersCount": {
	                "type": "integer"
	              },
	              "AppsCount": {
	                "type": "integer"
	              },
	              "InstancesCount": {
	                "type": "structure",
	                "members": {
	                  "Assigning": {
	                    "type": "integer"
	                  },
	                  "Booting": {
	                    "type": "integer"
	                  },
	                  "ConnectionLost": {
	                    "type": "integer"
	                  },
	                  "Deregistering": {
	                    "type": "integer"
	                  },
	                  "Online": {
	                    "type": "integer"
	                  },
	                  "Pending": {
	                    "type": "integer"
	                  },
	                  "Rebooting": {
	                    "type": "integer"
	                  },
	                  "Registered": {
	                    "type": "integer"
	                  },
	                  "Registering": {
	                    "type": "integer"
	                  },
	                  "Requested": {
	                    "type": "integer"
	                  },
	                  "RunningSetup": {
	                    "type": "integer"
	                  },
	                  "SetupFailed": {
	                    "type": "integer"
	                  },
	                  "ShuttingDown": {
	                    "type": "integer"
	                  },
	                  "StartFailed": {
	                    "type": "integer"
	                  },
	                  "Stopped": {
	                    "type": "integer"
	                  },
	                  "Stopping": {
	                    "type": "integer"
	                  },
	                  "Terminated": {
	                    "type": "integer"
	                  },
	                  "Terminating": {
	                    "type": "integer"
	                  },
	                  "Unassigning": {
	                    "type": "integer"
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeStacks": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "StackIds": {
	            "shape": "S3"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Stacks": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "StackId": {},
	                "Name": {},
	                "Arn": {},
	                "Region": {},
	                "VpcId": {},
	                "Attributes": {
	                  "shape": "S8"
	                },
	                "ServiceRoleArn": {},
	                "DefaultInstanceProfileArn": {},
	                "DefaultOs": {},
	                "HostnameTheme": {},
	                "DefaultAvailabilityZone": {},
	                "DefaultSubnetId": {},
	                "CustomJson": {},
	                "ConfigurationManager": {
	                  "shape": "Sa"
	                },
	                "ChefConfiguration": {
	                  "shape": "Sb"
	                },
	                "UseCustomCookbooks": {
	                  "type": "boolean"
	                },
	                "UseOpsworksSecurityGroups": {
	                  "type": "boolean"
	                },
	                "CustomCookbooksSource": {
	                  "shape": "Sd"
	                },
	                "DefaultSshKeyName": {},
	                "CreatedAt": {},
	                "DefaultRootDeviceType": {},
	                "AgentVersion": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeTimeBasedAutoScaling": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceIds"
	        ],
	        "members": {
	          "InstanceIds": {
	            "shape": "S3"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "TimeBasedAutoScalingConfigurations": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "InstanceId": {},
	                "AutoScalingSchedule": {
	                  "shape": "S40"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeUserProfiles": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "IamUserArns": {
	            "shape": "S3"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "UserProfiles": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "IamUserArn": {},
	                "Name": {},
	                "SshUsername": {},
	                "SshPublicKey": {},
	                "AllowSelfManagement": {
	                  "type": "boolean"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeVolumes": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "InstanceId": {},
	          "StackId": {},
	          "RaidArrayId": {},
	          "VolumeIds": {
	            "shape": "S3"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Volumes": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "VolumeId": {},
	                "Ec2VolumeId": {},
	                "Name": {},
	                "RaidArrayId": {},
	                "InstanceId": {},
	                "Status": {},
	                "Size": {
	                  "type": "integer"
	                },
	                "Device": {},
	                "MountPoint": {},
	                "Region": {},
	                "AvailabilityZone": {},
	                "VolumeType": {},
	                "Iops": {
	                  "type": "integer"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DetachElasticLoadBalancer": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ElasticLoadBalancerName",
	          "LayerId"
	        ],
	        "members": {
	          "ElasticLoadBalancerName": {},
	          "LayerId": {}
	        }
	      }
	    },
	    "DisassociateElasticIp": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ElasticIp"
	        ],
	        "members": {
	          "ElasticIp": {}
	        }
	      }
	    },
	    "GetHostnameSuggestion": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LayerId"
	        ],
	        "members": {
	          "LayerId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "LayerId": {},
	          "Hostname": {}
	        }
	      }
	    },
	    "GrantAccess": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId"
	        ],
	        "members": {
	          "InstanceId": {},
	          "ValidForInMinutes": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "TemporaryCredential": {
	            "type": "structure",
	            "members": {
	              "Username": {},
	              "Password": {},
	              "ValidForInMinutes": {
	                "type": "integer"
	              },
	              "InstanceId": {}
	            }
	          }
	        }
	      }
	    },
	    "RebootInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId"
	        ],
	        "members": {
	          "InstanceId": {}
	        }
	      }
	    },
	    "RegisterEcsCluster": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "EcsClusterArn",
	          "StackId"
	        ],
	        "members": {
	          "EcsClusterArn": {},
	          "StackId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "EcsClusterArn": {}
	        }
	      }
	    },
	    "RegisterElasticIp": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ElasticIp",
	          "StackId"
	        ],
	        "members": {
	          "ElasticIp": {},
	          "StackId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ElasticIp": {}
	        }
	      }
	    },
	    "RegisterInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StackId"
	        ],
	        "members": {
	          "StackId": {},
	          "Hostname": {},
	          "PublicIp": {},
	          "PrivateIp": {},
	          "RsaPublicKey": {},
	          "RsaPublicKeyFingerprint": {},
	          "InstanceIdentity": {
	            "type": "structure",
	            "members": {
	              "Document": {},
	              "Signature": {}
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "InstanceId": {}
	        }
	      }
	    },
	    "RegisterRdsDbInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StackId",
	          "RdsDbInstanceArn",
	          "DbUser",
	          "DbPassword"
	        ],
	        "members": {
	          "StackId": {},
	          "RdsDbInstanceArn": {},
	          "DbUser": {},
	          "DbPassword": {}
	        }
	      }
	    },
	    "RegisterVolume": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StackId"
	        ],
	        "members": {
	          "Ec2VolumeId": {},
	          "StackId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "VolumeId": {}
	        }
	      }
	    },
	    "SetLoadBasedAutoScaling": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LayerId"
	        ],
	        "members": {
	          "LayerId": {},
	          "Enable": {
	            "type": "boolean"
	          },
	          "UpScaling": {
	            "shape": "S30"
	          },
	          "DownScaling": {
	            "shape": "S30"
	          }
	        }
	      }
	    },
	    "SetPermission": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StackId",
	          "IamUserArn"
	        ],
	        "members": {
	          "StackId": {},
	          "IamUserArn": {},
	          "AllowSsh": {
	            "type": "boolean"
	          },
	          "AllowSudo": {
	            "type": "boolean"
	          },
	          "Level": {}
	        }
	      }
	    },
	    "SetTimeBasedAutoScaling": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId"
	        ],
	        "members": {
	          "InstanceId": {},
	          "AutoScalingSchedule": {
	            "shape": "S40"
	          }
	        }
	      }
	    },
	    "StartInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId"
	        ],
	        "members": {
	          "InstanceId": {}
	        }
	      }
	    },
	    "StartStack": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StackId"
	        ],
	        "members": {
	          "StackId": {}
	        }
	      }
	    },
	    "StopInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId"
	        ],
	        "members": {
	          "InstanceId": {}
	        }
	      }
	    },
	    "StopStack": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StackId"
	        ],
	        "members": {
	          "StackId": {}
	        }
	      }
	    },
	    "UnassignInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId"
	        ],
	        "members": {
	          "InstanceId": {}
	        }
	      }
	    },
	    "UnassignVolume": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VolumeId"
	        ],
	        "members": {
	          "VolumeId": {}
	        }
	      }
	    },
	    "UpdateApp": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AppId"
	        ],
	        "members": {
	          "AppId": {},
	          "Name": {},
	          "Description": {},
	          "DataSources": {
	            "shape": "Si"
	          },
	          "Type": {},
	          "AppSource": {
	            "shape": "Sd"
	          },
	          "Domains": {
	            "shape": "S3"
	          },
	          "EnableSsl": {
	            "type": "boolean"
	          },
	          "SslConfiguration": {
	            "shape": "Sl"
	          },
	          "Attributes": {
	            "shape": "Sm"
	          },
	          "Environment": {
	            "shape": "So"
	          }
	        }
	      }
	    },
	    "UpdateElasticIp": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ElasticIp"
	        ],
	        "members": {
	          "ElasticIp": {},
	          "Name": {}
	        }
	      }
	    },
	    "UpdateInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId"
	        ],
	        "members": {
	          "InstanceId": {},
	          "LayerIds": {
	            "shape": "S3"
	          },
	          "InstanceType": {},
	          "AutoScalingType": {},
	          "Hostname": {},
	          "Os": {},
	          "AmiId": {},
	          "SshKeyName": {},
	          "Architecture": {},
	          "InstallUpdatesOnBoot": {
	            "type": "boolean"
	          },
	          "EbsOptimized": {
	            "type": "boolean"
	          },
	          "AgentVersion": {}
	        }
	      }
	    },
	    "UpdateLayer": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "LayerId"
	        ],
	        "members": {
	          "LayerId": {},
	          "Name": {},
	          "Shortname": {},
	          "Attributes": {
	            "shape": "S17"
	          },
	          "CustomInstanceProfileArn": {},
	          "CustomJson": {},
	          "CustomSecurityGroupIds": {
	            "shape": "S3"
	          },
	          "Packages": {
	            "shape": "S3"
	          },
	          "VolumeConfigurations": {
	            "shape": "S19"
	          },
	          "EnableAutoHealing": {
	            "type": "boolean"
	          },
	          "AutoAssignElasticIps": {
	            "type": "boolean"
	          },
	          "AutoAssignPublicIps": {
	            "type": "boolean"
	          },
	          "CustomRecipes": {
	            "shape": "S1b"
	          },
	          "InstallUpdatesOnBoot": {
	            "type": "boolean"
	          },
	          "UseEbsOptimizedInstances": {
	            "type": "boolean"
	          },
	          "LifecycleEventConfiguration": {
	            "shape": "S1c"
	          }
	        }
	      }
	    },
	    "UpdateMyUserProfile": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "SshPublicKey": {}
	        }
	      }
	    },
	    "UpdateRdsDbInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RdsDbInstanceArn"
	        ],
	        "members": {
	          "RdsDbInstanceArn": {},
	          "DbUser": {},
	          "DbPassword": {}
	        }
	      }
	    },
	    "UpdateStack": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StackId"
	        ],
	        "members": {
	          "StackId": {},
	          "Name": {},
	          "Attributes": {
	            "shape": "S8"
	          },
	          "ServiceRoleArn": {},
	          "DefaultInstanceProfileArn": {},
	          "DefaultOs": {},
	          "HostnameTheme": {},
	          "DefaultAvailabilityZone": {},
	          "DefaultSubnetId": {},
	          "CustomJson": {},
	          "ConfigurationManager": {
	            "shape": "Sa"
	          },
	          "ChefConfiguration": {
	            "shape": "Sb"
	          },
	          "UseCustomCookbooks": {
	            "type": "boolean"
	          },
	          "CustomCookbooksSource": {
	            "shape": "Sd"
	          },
	          "DefaultSshKeyName": {},
	          "DefaultRootDeviceType": {},
	          "UseOpsworksSecurityGroups": {
	            "type": "boolean"
	          },
	          "AgentVersion": {}
	        }
	      }
	    },
	    "UpdateUserProfile": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "IamUserArn"
	        ],
	        "members": {
	          "IamUserArn": {},
	          "SshUsername": {},
	          "SshPublicKey": {},
	          "AllowSelfManagement": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "UpdateVolume": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VolumeId"
	        ],
	        "members": {
	          "VolumeId": {},
	          "Name": {},
	          "MountPoint": {}
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S3": {
	      "type": "list",
	      "member": {}
	    },
	    "S8": {
	      "type": "map",
	      "key": {},
	      "value": {}
	    },
	    "Sa": {
	      "type": "structure",
	      "members": {
	        "Name": {},
	        "Version": {}
	      }
	    },
	    "Sb": {
	      "type": "structure",
	      "members": {
	        "ManageBerkshelf": {
	          "type": "boolean"
	        },
	        "BerkshelfVersion": {}
	      }
	    },
	    "Sd": {
	      "type": "structure",
	      "members": {
	        "Type": {},
	        "Url": {},
	        "Username": {},
	        "Password": {},
	        "SshKey": {},
	        "Revision": {}
	      }
	    },
	    "Si": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "Type": {},
	          "Arn": {},
	          "DatabaseName": {}
	        }
	      }
	    },
	    "Sl": {
	      "type": "structure",
	      "required": [
	        "Certificate",
	        "PrivateKey"
	      ],
	      "members": {
	        "Certificate": {},
	        "PrivateKey": {},
	        "Chain": {}
	      }
	    },
	    "Sm": {
	      "type": "map",
	      "key": {},
	      "value": {}
	    },
	    "So": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "Key",
	          "Value"
	        ],
	        "members": {
	          "Key": {},
	          "Value": {},
	          "Secure": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "Ss": {
	      "type": "structure",
	      "required": [
	        "Name"
	      ],
	      "members": {
	        "Name": {},
	        "Args": {
	          "type": "map",
	          "key": {},
	          "value": {
	            "shape": "S3"
	          }
	        }
	      }
	    },
	    "Sz": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "DeviceName": {},
	          "NoDevice": {},
	          "VirtualName": {},
	          "Ebs": {
	            "type": "structure",
	            "members": {
	              "SnapshotId": {},
	              "Iops": {
	                "type": "integer"
	              },
	              "VolumeSize": {
	                "type": "integer"
	              },
	              "VolumeType": {},
	              "DeleteOnTermination": {
	                "type": "boolean"
	              }
	            }
	          }
	        }
	      }
	    },
	    "S17": {
	      "type": "map",
	      "key": {},
	      "value": {}
	    },
	    "S19": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "MountPoint",
	          "NumberOfDisks",
	          "Size"
	        ],
	        "members": {
	          "MountPoint": {},
	          "RaidLevel": {
	            "type": "integer"
	          },
	          "NumberOfDisks": {
	            "type": "integer"
	          },
	          "Size": {
	            "type": "integer"
	          },
	          "VolumeType": {},
	          "Iops": {
	            "type": "integer"
	          }
	        }
	      }
	    },
	    "S1b": {
	      "type": "structure",
	      "members": {
	        "Setup": {
	          "shape": "S3"
	        },
	        "Configure": {
	          "shape": "S3"
	        },
	        "Deploy": {
	          "shape": "S3"
	        },
	        "Undeploy": {
	          "shape": "S3"
	        },
	        "Shutdown": {
	          "shape": "S3"
	        }
	      }
	    },
	    "S1c": {
	      "type": "structure",
	      "members": {
	        "Shutdown": {
	          "type": "structure",
	          "members": {
	            "ExecutionTimeout": {
	              "type": "integer"
	            },
	            "DelayUntilElbConnectionsDrained": {
	              "type": "boolean"
	            }
	          }
	        }
	      }
	    },
	    "S30": {
	      "type": "structure",
	      "members": {
	        "InstanceCount": {
	          "type": "integer"
	        },
	        "ThresholdsWaitTime": {
	          "type": "integer"
	        },
	        "IgnoreMetricsTime": {
	          "type": "integer"
	        },
	        "CpuThreshold": {
	          "type": "double"
	        },
	        "MemoryThreshold": {
	          "type": "double"
	        },
	        "LoadThreshold": {
	          "type": "double"
	        },
	        "Alarms": {
	          "shape": "S3"
	        }
	      }
	    },
	    "S40": {
	      "type": "structure",
	      "members": {
	        "Monday": {
	          "shape": "S41"
	        },
	        "Tuesday": {
	          "shape": "S41"
	        },
	        "Wednesday": {
	          "shape": "S41"
	        },
	        "Thursday": {
	          "shape": "S41"
	        },
	        "Friday": {
	          "shape": "S41"
	        },
	        "Saturday": {
	          "shape": "S41"
	        },
	        "Sunday": {
	          "shape": "S41"
	        }
	      }
	    },
	    "S41": {
	      "type": "map",
	      "key": {},
	      "value": {}
	    }
	  }
	}
	},{}],96:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "DescribeApps": {
	      "result_key": "Apps"
	    },
	    "DescribeCommands": {
	      "result_key": "Commands"
	    },
	    "DescribeDeployments": {
	      "result_key": "Deployments"
	    },
	    "DescribeEcsClusters": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "limit_key": "MaxResults",
	      "result_key": "EcsClusters"
	    },
	    "DescribeElasticIps": {
	      "result_key": "ElasticIps"
	    },
	    "DescribeElasticLoadBalancers": {
	      "result_key": "ElasticLoadBalancers"
	    },
	    "DescribeInstances": {
	      "result_key": "Instances"
	    },
	    "DescribeLayers": {
	      "result_key": "Layers"
	    },
	    "DescribeLoadBasedAutoScaling": {
	      "result_key": "LoadBasedAutoScalingConfigurations"
	    },
	    "DescribePermissions": {
	      "result_key": "Permissions"
	    },
	    "DescribeRaidArrays": {
	      "result_key": "RaidArrays"
	    },
	    "DescribeServiceErrors": {
	      "result_key": "ServiceErrors"
	    },
	    "DescribeStacks": {
	      "result_key": "Stacks"
	    },
	    "DescribeTimeBasedAutoScaling": {
	      "result_key": "TimeBasedAutoScalingConfigurations"
	    },
	    "DescribeUserProfiles": {
	      "result_key": "UserProfiles"
	    },
	    "DescribeVolumes": {
	      "result_key": "Volumes"
	    }
	  }
	}
	
	},{}],97:[function(require,module,exports){
	module.exports={
	  "version": 2,
	  "waiters": {
	    "AppExists": {
	      "delay": 1,
	      "operation": "DescribeApps",
	      "maxAttempts": 40,
	      "acceptors": [
	        {
	          "expected": 200,
	          "matcher": "status",
	          "state": "success"
	        },
	        {
	          "matcher": "status",
	          "expected": 400,
	          "state": "failure"
	        }
	      ]
	    },
	    "DeploymentSuccessful": {
	      "delay": 15,
	      "operation": "DescribeDeployments",
	      "maxAttempts": 40,
	      "description": "Wait until a deployment has completed successfully",
	      "acceptors": [
	        {
	          "expected": "successful",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "Deployments[].Status"
	        },
	        {
	          "expected": "failed",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Deployments[].Status"
	        }
	      ]
	    },
	    "InstanceOnline": {
	      "delay": 15,
	      "operation": "DescribeInstances",
	      "maxAttempts": 40,
	      "description": "Wait until OpsWorks instance is online.",
	      "acceptors": [
	        {
	          "expected": "online",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "setup_failed",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "shutting_down",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "start_failed",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "stopped",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "stopping",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "terminating",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "terminated",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "stop_failed",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        }
	      ]
	    },
	    "InstanceRegistered": {
	      "delay": 15,
	      "operation": "DescribeInstances",
	      "maxAttempts": 40,
	      "description": "Wait until OpsWorks instance is registered.",
	      "acceptors": [
	        {
	          "expected": "registered",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "setup_failed",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "shutting_down",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "stopped",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "stopping",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "terminating",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "terminated",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "stop_failed",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        }
	      ]
	    },
	    "InstanceStopped": {
	      "delay": 15,
	      "operation": "DescribeInstances",
	      "maxAttempts": 40,
	      "description": "Wait until OpsWorks instance is stopped.",
	      "acceptors": [
	        {
	          "expected": "stopped",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "booting",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "online",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "pending",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "rebooting",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "requested",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "running_setup",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "setup_failed",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "start_failed",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "stop_failed",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        }
	      ]
	    },
	    "InstanceTerminated": {
	      "delay": 15,
	      "operation": "DescribeInstances",
	      "maxAttempts": 40,
	      "description": "Wait until OpsWorks instance is terminated.",
	      "acceptors": [
	        {
	          "expected": "terminated",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "ResourceNotFoundException",
	          "matcher": "error",
	          "state": "success"
	        },
	        {
	          "expected": "booting",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "online",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "pending",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "rebooting",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "requested",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "running_setup",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "setup_failed",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        },
	        {
	          "expected": "start_failed",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Instances[].Status"
	        }
	      ]
	    }
	  }
	}
	
	},{}],98:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2016-06-10",
	    "endpointPrefix": "polly",
	    "protocol": "rest-json",
	    "serviceFullName": "Amazon Polly",
	    "signatureVersion": "v4",
	    "uid": "polly-2016-06-10"
	  },
	  "operations": {
	    "DeleteLexicon": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/v1/lexicons/{LexiconName}",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name"
	        ],
	        "members": {
	          "Name": {
	            "shape": "S2",
	            "location": "uri",
	            "locationName": "LexiconName"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DescribeVoices": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/v1/voices",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "LanguageCode": {
	            "location": "querystring",
	            "locationName": "LanguageCode"
	          },
	          "NextToken": {
	            "location": "querystring",
	            "locationName": "NextToken"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Voices": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Gender": {},
	                "Id": {},
	                "LanguageCode": {},
	                "LanguageName": {},
	                "Name": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "GetLexicon": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/v1/lexicons/{LexiconName}",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name"
	        ],
	        "members": {
	          "Name": {
	            "shape": "S2",
	            "location": "uri",
	            "locationName": "LexiconName"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Lexicon": {
	            "type": "structure",
	            "members": {
	              "Content": {},
	              "Name": {
	                "shape": "S2"
	              }
	            }
	          },
	          "LexiconAttributes": {
	            "shape": "Si"
	          }
	        }
	      }
	    },
	    "ListLexicons": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/v1/lexicons",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "NextToken": {
	            "location": "querystring",
	            "locationName": "NextToken"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Lexicons": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Name": {
	                  "shape": "S2"
	                },
	                "Attributes": {
	                  "shape": "Si"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "PutLexicon": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/v1/lexicons/{LexiconName}",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "Content"
	        ],
	        "members": {
	          "Name": {
	            "shape": "S2",
	            "location": "uri",
	            "locationName": "LexiconName"
	          },
	          "Content": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "SynthesizeSpeech": {
	      "http": {
	        "requestUri": "/v1/speech",
	        "responseCode": 200
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "OutputFormat",
	          "Text",
	          "VoiceId"
	        ],
	        "members": {
	          "LexiconNames": {
	            "type": "list",
	            "member": {
	              "shape": "S2"
	            }
	          },
	          "OutputFormat": {},
	          "SampleRate": {},
	          "Text": {},
	          "TextType": {},
	          "VoiceId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "AudioStream": {
	            "type": "blob",
	            "streaming": true
	          },
	          "ContentType": {
	            "location": "header",
	            "locationName": "Content-Type"
	          },
	          "RequestCharacters": {
	            "location": "header",
	            "locationName": "x-amzn-RequestCharacters",
	            "type": "integer"
	          }
	        },
	        "payload": "AudioStream"
	      }
	    }
	  },
	  "shapes": {
	    "S2": {
	      "type": "string",
	      "sensitive": true
	    },
	    "Si": {
	      "type": "structure",
	      "members": {
	        "Alphabet": {},
	        "LanguageCode": {},
	        "LastModified": {
	          "type": "timestamp"
	        },
	        "LexiconArn": {},
	        "LexemesCount": {
	          "type": "integer"
	        },
	        "Size": {
	          "type": "integer"
	        }
	      }
	    }
	  }
	}
	},{}],99:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2013-01-10",
	    "endpointPrefix": "rds",
	    "protocol": "query",
	    "serviceAbbreviation": "Amazon RDS",
	    "serviceFullName": "Amazon Relational Database Service",
	    "signatureVersion": "v4",
	    "uid": "rds-2013-01-10",
	    "xmlNamespace": "http://rds.amazonaws.com/doc/2013-01-10/"
	  },
	  "operations": {
	    "AddSourceIdentifierToSubscription": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubscriptionName",
	          "SourceIdentifier"
	        ],
	        "members": {
	          "SubscriptionName": {},
	          "SourceIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "AddSourceIdentifierToSubscriptionResult",
	        "type": "structure",
	        "members": {
	          "EventSubscription": {
	            "shape": "S4"
	          }
	        }
	      }
	    },
	    "AddTagsToResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceName",
	          "Tags"
	        ],
	        "members": {
	          "ResourceName": {},
	          "Tags": {
	            "shape": "S9"
	          }
	        }
	      }
	    },
	    "AuthorizeDBSecurityGroupIngress": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSecurityGroupName"
	        ],
	        "members": {
	          "DBSecurityGroupName": {},
	          "CIDRIP": {},
	          "EC2SecurityGroupName": {},
	          "EC2SecurityGroupId": {},
	          "EC2SecurityGroupOwnerId": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "AuthorizeDBSecurityGroupIngressResult",
	        "type": "structure",
	        "members": {
	          "DBSecurityGroup": {
	            "shape": "Sd"
	          }
	        }
	      }
	    },
	    "CopyDBSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SourceDBSnapshotIdentifier",
	          "TargetDBSnapshotIdentifier"
	        ],
	        "members": {
	          "SourceDBSnapshotIdentifier": {},
	          "TargetDBSnapshotIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CopyDBSnapshotResult",
	        "type": "structure",
	        "members": {
	          "DBSnapshot": {
	            "shape": "Sk"
	          }
	        }
	      }
	    },
	    "CreateDBInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier",
	          "AllocatedStorage",
	          "DBInstanceClass",
	          "Engine",
	          "MasterUsername",
	          "MasterUserPassword"
	        ],
	        "members": {
	          "DBName": {},
	          "DBInstanceIdentifier": {},
	          "AllocatedStorage": {
	            "type": "integer"
	          },
	          "DBInstanceClass": {},
	          "Engine": {},
	          "MasterUsername": {},
	          "MasterUserPassword": {},
	          "DBSecurityGroups": {
	            "shape": "Sp"
	          },
	          "VpcSecurityGroupIds": {
	            "shape": "Sq"
	          },
	          "AvailabilityZone": {},
	          "DBSubnetGroupName": {},
	          "PreferredMaintenanceWindow": {},
	          "DBParameterGroupName": {},
	          "BackupRetentionPeriod": {
	            "type": "integer"
	          },
	          "PreferredBackupWindow": {},
	          "Port": {
	            "type": "integer"
	          },
	          "MultiAZ": {
	            "type": "boolean"
	          },
	          "EngineVersion": {},
	          "AutoMinorVersionUpgrade": {
	            "type": "boolean"
	          },
	          "LicenseModel": {},
	          "Iops": {
	            "type": "integer"
	          },
	          "OptionGroupName": {},
	          "CharacterSetName": {},
	          "PubliclyAccessible": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateDBInstanceResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "St"
	          }
	        }
	      }
	    },
	    "CreateDBInstanceReadReplica": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier",
	          "SourceDBInstanceIdentifier"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "SourceDBInstanceIdentifier": {},
	          "DBInstanceClass": {},
	          "AvailabilityZone": {},
	          "Port": {
	            "type": "integer"
	          },
	          "AutoMinorVersionUpgrade": {
	            "type": "boolean"
	          },
	          "Iops": {
	            "type": "integer"
	          },
	          "OptionGroupName": {},
	          "PubliclyAccessible": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateDBInstanceReadReplicaResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "St"
	          }
	        }
	      }
	    },
	    "CreateDBParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBParameterGroupName",
	          "DBParameterGroupFamily",
	          "Description"
	        ],
	        "members": {
	          "DBParameterGroupName": {},
	          "DBParameterGroupFamily": {},
	          "Description": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateDBParameterGroupResult",
	        "type": "structure",
	        "members": {
	          "DBParameterGroup": {
	            "shape": "S1c"
	          }
	        }
	      }
	    },
	    "CreateDBSecurityGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSecurityGroupName",
	          "DBSecurityGroupDescription"
	        ],
	        "members": {
	          "DBSecurityGroupName": {},
	          "DBSecurityGroupDescription": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateDBSecurityGroupResult",
	        "type": "structure",
	        "members": {
	          "DBSecurityGroup": {
	            "shape": "Sd"
	          }
	        }
	      }
	    },
	    "CreateDBSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSnapshotIdentifier",
	          "DBInstanceIdentifier"
	        ],
	        "members": {
	          "DBSnapshotIdentifier": {},
	          "DBInstanceIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateDBSnapshotResult",
	        "type": "structure",
	        "members": {
	          "DBSnapshot": {
	            "shape": "Sk"
	          }
	        }
	      }
	    },
	    "CreateDBSubnetGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSubnetGroupName",
	          "DBSubnetGroupDescription",
	          "SubnetIds"
	        ],
	        "members": {
	          "DBSubnetGroupName": {},
	          "DBSubnetGroupDescription": {},
	          "SubnetIds": {
	            "shape": "S1i"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateDBSubnetGroupResult",
	        "type": "structure",
	        "members": {
	          "DBSubnetGroup": {
	            "shape": "S11"
	          }
	        }
	      }
	    },
	    "CreateEventSubscription": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubscriptionName",
	          "SnsTopicArn"
	        ],
	        "members": {
	          "SubscriptionName": {},
	          "SnsTopicArn": {},
	          "SourceType": {},
	          "EventCategories": {
	            "shape": "S6"
	          },
	          "SourceIds": {
	            "shape": "S5"
	          },
	          "Enabled": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateEventSubscriptionResult",
	        "type": "structure",
	        "members": {
	          "EventSubscription": {
	            "shape": "S4"
	          }
	        }
	      }
	    },
	    "CreateOptionGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "OptionGroupName",
	          "EngineName",
	          "MajorEngineVersion",
	          "OptionGroupDescription"
	        ],
	        "members": {
	          "OptionGroupName": {},
	          "EngineName": {},
	          "MajorEngineVersion": {},
	          "OptionGroupDescription": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateOptionGroupResult",
	        "type": "structure",
	        "members": {
	          "OptionGroup": {
	            "shape": "S1o"
	          }
	        }
	      }
	    },
	    "DeleteDBInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "SkipFinalSnapshot": {
	            "type": "boolean"
	          },
	          "FinalDBSnapshotIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteDBInstanceResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "St"
	          }
	        }
	      }
	    },
	    "DeleteDBParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBParameterGroupName"
	        ],
	        "members": {
	          "DBParameterGroupName": {}
	        }
	      }
	    },
	    "DeleteDBSecurityGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSecurityGroupName"
	        ],
	        "members": {
	          "DBSecurityGroupName": {}
	        }
	      }
	    },
	    "DeleteDBSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSnapshotIdentifier"
	        ],
	        "members": {
	          "DBSnapshotIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteDBSnapshotResult",
	        "type": "structure",
	        "members": {
	          "DBSnapshot": {
	            "shape": "Sk"
	          }
	        }
	      }
	    },
	    "DeleteDBSubnetGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSubnetGroupName"
	        ],
	        "members": {
	          "DBSubnetGroupName": {}
	        }
	      }
	    },
	    "DeleteEventSubscription": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubscriptionName"
	        ],
	        "members": {
	          "SubscriptionName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteEventSubscriptionResult",
	        "type": "structure",
	        "members": {
	          "EventSubscription": {
	            "shape": "S4"
	          }
	        }
	      }
	    },
	    "DeleteOptionGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "OptionGroupName"
	        ],
	        "members": {
	          "OptionGroupName": {}
	        }
	      }
	    },
	    "DescribeDBEngineVersions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Engine": {},
	          "EngineVersion": {},
	          "DBParameterGroupFamily": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {},
	          "DefaultOnly": {
	            "type": "boolean"
	          },
	          "ListSupportedCharacterSets": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBEngineVersionsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "DBEngineVersions": {
	            "type": "list",
	            "member": {
	              "locationName": "DBEngineVersion",
	              "type": "structure",
	              "members": {
	                "Engine": {},
	                "EngineVersion": {},
	                "DBParameterGroupFamily": {},
	                "DBEngineDescription": {},
	                "DBEngineVersionDescription": {},
	                "DefaultCharacterSet": {
	                  "shape": "S25"
	                },
	                "SupportedCharacterSets": {
	                  "type": "list",
	                  "member": {
	                    "shape": "S25",
	                    "locationName": "CharacterSet"
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeDBInstances": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DBInstanceIdentifier": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBInstancesResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "DBInstances": {
	            "type": "list",
	            "member": {
	              "shape": "St",
	              "locationName": "DBInstance"
	            }
	          }
	        }
	      }
	    },
	    "DescribeDBParameterGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DBParameterGroupName": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBParameterGroupsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "DBParameterGroups": {
	            "type": "list",
	            "member": {
	              "shape": "S1c",
	              "locationName": "DBParameterGroup"
	            }
	          }
	        }
	      }
	    },
	    "DescribeDBParameters": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBParameterGroupName"
	        ],
	        "members": {
	          "DBParameterGroupName": {},
	          "Source": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBParametersResult",
	        "type": "structure",
	        "members": {
	          "Parameters": {
	            "shape": "S2f"
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DescribeDBSecurityGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DBSecurityGroupName": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBSecurityGroupsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "DBSecurityGroups": {
	            "type": "list",
	            "member": {
	              "shape": "Sd",
	              "locationName": "DBSecurityGroup"
	            }
	          }
	        }
	      }
	    },
	    "DescribeDBSnapshots": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DBInstanceIdentifier": {},
	          "DBSnapshotIdentifier": {},
	          "SnapshotType": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBSnapshotsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "DBSnapshots": {
	            "type": "list",
	            "member": {
	              "shape": "Sk",
	              "locationName": "DBSnapshot"
	            }
	          }
	        }
	      }
	    },
	    "DescribeDBSubnetGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DBSubnetGroupName": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBSubnetGroupsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "DBSubnetGroups": {
	            "type": "list",
	            "member": {
	              "shape": "S11",
	              "locationName": "DBSubnetGroup"
	            }
	          }
	        }
	      }
	    },
	    "DescribeEngineDefaultParameters": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBParameterGroupFamily"
	        ],
	        "members": {
	          "DBParameterGroupFamily": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeEngineDefaultParametersResult",
	        "type": "structure",
	        "members": {
	          "EngineDefaults": {
	            "type": "structure",
	            "members": {
	              "DBParameterGroupFamily": {},
	              "Marker": {},
	              "Parameters": {
	                "shape": "S2f"
	              }
	            },
	            "wrapper": true
	          }
	        }
	      }
	    },
	    "DescribeEventCategories": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "SourceType": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeEventCategoriesResult",
	        "type": "structure",
	        "members": {
	          "EventCategoriesMapList": {
	            "type": "list",
	            "member": {
	              "locationName": "EventCategoriesMap",
	              "type": "structure",
	              "members": {
	                "SourceType": {},
	                "EventCategories": {
	                  "shape": "S6"
	                }
	              },
	              "wrapper": true
	            }
	          }
	        }
	      }
	    },
	    "DescribeEventSubscriptions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "SubscriptionName": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeEventSubscriptionsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "EventSubscriptionsList": {
	            "type": "list",
	            "member": {
	              "shape": "S4",
	              "locationName": "EventSubscription"
	            }
	          }
	        }
	      }
	    },
	    "DescribeEvents": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "SourceIdentifier": {},
	          "SourceType": {},
	          "StartTime": {
	            "type": "timestamp"
	          },
	          "EndTime": {
	            "type": "timestamp"
	          },
	          "Duration": {
	            "type": "integer"
	          },
	          "EventCategories": {
	            "shape": "S6"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeEventsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "Events": {
	            "type": "list",
	            "member": {
	              "locationName": "Event",
	              "type": "structure",
	              "members": {
	                "SourceIdentifier": {},
	                "SourceType": {},
	                "Message": {},
	                "EventCategories": {
	                  "shape": "S6"
	                },
	                "Date": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeOptionGroupOptions": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "EngineName"
	        ],
	        "members": {
	          "EngineName": {},
	          "MajorEngineVersion": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeOptionGroupOptionsResult",
	        "type": "structure",
	        "members": {
	          "OptionGroupOptions": {
	            "type": "list",
	            "member": {
	              "locationName": "OptionGroupOption",
	              "type": "structure",
	              "members": {
	                "Name": {},
	                "Description": {},
	                "EngineName": {},
	                "MajorEngineVersion": {},
	                "MinimumRequiredMinorEngineVersion": {},
	                "PortRequired": {
	                  "type": "boolean"
	                },
	                "DefaultPort": {
	                  "type": "integer"
	                },
	                "OptionsDependedOn": {
	                  "type": "list",
	                  "member": {
	                    "locationName": "OptionName"
	                  }
	                }
	              }
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DescribeOptionGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "OptionGroupName": {},
	          "Marker": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "EngineName": {},
	          "MajorEngineVersion": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeOptionGroupsResult",
	        "type": "structure",
	        "members": {
	          "OptionGroupsList": {
	            "type": "list",
	            "member": {
	              "shape": "S1o",
	              "locationName": "OptionGroup"
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DescribeOrderableDBInstanceOptions": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Engine"
	        ],
	        "members": {
	          "Engine": {},
	          "EngineVersion": {},
	          "DBInstanceClass": {},
	          "LicenseModel": {},
	          "Vpc": {
	            "type": "boolean"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeOrderableDBInstanceOptionsResult",
	        "type": "structure",
	        "members": {
	          "OrderableDBInstanceOptions": {
	            "type": "list",
	            "member": {
	              "locationName": "OrderableDBInstanceOption",
	              "type": "structure",
	              "members": {
	                "Engine": {},
	                "EngineVersion": {},
	                "DBInstanceClass": {},
	                "LicenseModel": {},
	                "AvailabilityZones": {
	                  "type": "list",
	                  "member": {
	                    "shape": "S14",
	                    "locationName": "AvailabilityZone"
	                  }
	                },
	                "MultiAZCapable": {
	                  "type": "boolean"
	                },
	                "ReadReplicaCapable": {
	                  "type": "boolean"
	                },
	                "Vpc": {
	                  "type": "boolean"
	                }
	              },
	              "wrapper": true
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DescribeReservedDBInstances": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ReservedDBInstanceId": {},
	          "ReservedDBInstancesOfferingId": {},
	          "DBInstanceClass": {},
	          "Duration": {},
	          "ProductDescription": {},
	          "OfferingType": {},
	          "MultiAZ": {
	            "type": "boolean"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeReservedDBInstancesResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "ReservedDBInstances": {
	            "type": "list",
	            "member": {
	              "shape": "S3m",
	              "locationName": "ReservedDBInstance"
	            }
	          }
	        }
	      }
	    },
	    "DescribeReservedDBInstancesOfferings": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ReservedDBInstancesOfferingId": {},
	          "DBInstanceClass": {},
	          "Duration": {},
	          "ProductDescription": {},
	          "OfferingType": {},
	          "MultiAZ": {
	            "type": "boolean"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeReservedDBInstancesOfferingsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "ReservedDBInstancesOfferings": {
	            "type": "list",
	            "member": {
	              "locationName": "ReservedDBInstancesOffering",
	              "type": "structure",
	              "members": {
	                "ReservedDBInstancesOfferingId": {},
	                "DBInstanceClass": {},
	                "Duration": {
	                  "type": "integer"
	                },
	                "FixedPrice": {
	                  "type": "double"
	                },
	                "UsagePrice": {
	                  "type": "double"
	                },
	                "CurrencyCode": {},
	                "ProductDescription": {},
	                "OfferingType": {},
	                "MultiAZ": {
	                  "type": "boolean"
	                },
	                "RecurringCharges": {
	                  "shape": "S3o"
	                }
	              },
	              "wrapper": true
	            }
	          }
	        }
	      }
	    },
	    "ListTagsForResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceName"
	        ],
	        "members": {
	          "ResourceName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ListTagsForResourceResult",
	        "type": "structure",
	        "members": {
	          "TagList": {
	            "shape": "S9"
	          }
	        }
	      }
	    },
	    "ModifyDBInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "AllocatedStorage": {
	            "type": "integer"
	          },
	          "DBInstanceClass": {},
	          "DBSecurityGroups": {
	            "shape": "Sp"
	          },
	          "VpcSecurityGroupIds": {
	            "shape": "Sq"
	          },
	          "ApplyImmediately": {
	            "type": "boolean"
	          },
	          "MasterUserPassword": {},
	          "DBParameterGroupName": {},
	          "BackupRetentionPeriod": {
	            "type": "integer"
	          },
	          "PreferredBackupWindow": {},
	          "PreferredMaintenanceWindow": {},
	          "MultiAZ": {
	            "type": "boolean"
	          },
	          "EngineVersion": {},
	          "AllowMajorVersionUpgrade": {
	            "type": "boolean"
	          },
	          "AutoMinorVersionUpgrade": {
	            "type": "boolean"
	          },
	          "Iops": {
	            "type": "integer"
	          },
	          "OptionGroupName": {},
	          "NewDBInstanceIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyDBInstanceResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "St"
	          }
	        }
	      }
	    },
	    "ModifyDBParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBParameterGroupName",
	          "Parameters"
	        ],
	        "members": {
	          "DBParameterGroupName": {},
	          "Parameters": {
	            "shape": "S2f"
	          }
	        }
	      },
	      "output": {
	        "shape": "S3z",
	        "resultWrapper": "ModifyDBParameterGroupResult"
	      }
	    },
	    "ModifyDBSubnetGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSubnetGroupName",
	          "SubnetIds"
	        ],
	        "members": {
	          "DBSubnetGroupName": {},
	          "DBSubnetGroupDescription": {},
	          "SubnetIds": {
	            "shape": "S1i"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyDBSubnetGroupResult",
	        "type": "structure",
	        "members": {
	          "DBSubnetGroup": {
	            "shape": "S11"
	          }
	        }
	      }
	    },
	    "ModifyEventSubscription": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubscriptionName"
	        ],
	        "members": {
	          "SubscriptionName": {},
	          "SnsTopicArn": {},
	          "SourceType": {},
	          "EventCategories": {
	            "shape": "S6"
	          },
	          "Enabled": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyEventSubscriptionResult",
	        "type": "structure",
	        "members": {
	          "EventSubscription": {
	            "shape": "S4"
	          }
	        }
	      }
	    },
	    "ModifyOptionGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "OptionGroupName"
	        ],
	        "members": {
	          "OptionGroupName": {},
	          "OptionsToInclude": {
	            "type": "list",
	            "member": {
	              "locationName": "OptionConfiguration",
	              "type": "structure",
	              "required": [
	                "OptionName"
	              ],
	              "members": {
	                "OptionName": {},
	                "Port": {
	                  "type": "integer"
	                },
	                "DBSecurityGroupMemberships": {
	                  "shape": "Sp"
	                },
	                "VpcSecurityGroupMemberships": {
	                  "shape": "Sq"
	                }
	              }
	            }
	          },
	          "OptionsToRemove": {
	            "type": "list",
	            "member": {}
	          },
	          "ApplyImmediately": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyOptionGroupResult",
	        "type": "structure",
	        "members": {
	          "OptionGroup": {
	            "shape": "S1o"
	          }
	        }
	      }
	    },
	    "PromoteReadReplica": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "BackupRetentionPeriod": {
	            "type": "integer"
	          },
	          "PreferredBackupWindow": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "PromoteReadReplicaResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "St"
	          }
	        }
	      }
	    },
	    "PurchaseReservedDBInstancesOffering": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ReservedDBInstancesOfferingId"
	        ],
	        "members": {
	          "ReservedDBInstancesOfferingId": {},
	          "ReservedDBInstanceId": {},
	          "DBInstanceCount": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "PurchaseReservedDBInstancesOfferingResult",
	        "type": "structure",
	        "members": {
	          "ReservedDBInstance": {
	            "shape": "S3m"
	          }
	        }
	      }
	    },
	    "RebootDBInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "ForceFailover": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "RebootDBInstanceResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "St"
	          }
	        }
	      }
	    },
	    "RemoveSourceIdentifierFromSubscription": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubscriptionName",
	          "SourceIdentifier"
	        ],
	        "members": {
	          "SubscriptionName": {},
	          "SourceIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "RemoveSourceIdentifierFromSubscriptionResult",
	        "type": "structure",
	        "members": {
	          "EventSubscription": {
	            "shape": "S4"
	          }
	        }
	      }
	    },
	    "RemoveTagsFromResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceName",
	          "TagKeys"
	        ],
	        "members": {
	          "ResourceName": {},
	          "TagKeys": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      }
	    },
	    "ResetDBParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBParameterGroupName"
	        ],
	        "members": {
	          "DBParameterGroupName": {},
	          "ResetAllParameters": {
	            "type": "boolean"
	          },
	          "Parameters": {
	            "shape": "S2f"
	          }
	        }
	      },
	      "output": {
	        "shape": "S3z",
	        "resultWrapper": "ResetDBParameterGroupResult"
	      }
	    },
	    "RestoreDBInstanceFromDBSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier",
	          "DBSnapshotIdentifier"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "DBSnapshotIdentifier": {},
	          "DBInstanceClass": {},
	          "Port": {
	            "type": "integer"
	          },
	          "AvailabilityZone": {},
	          "DBSubnetGroupName": {},
	          "MultiAZ": {
	            "type": "boolean"
	          },
	          "PubliclyAccessible": {
	            "type": "boolean"
	          },
	          "AutoMinorVersionUpgrade": {
	            "type": "boolean"
	          },
	          "LicenseModel": {},
	          "DBName": {},
	          "Engine": {},
	          "Iops": {
	            "type": "integer"
	          },
	          "OptionGroupName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "RestoreDBInstanceFromDBSnapshotResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "St"
	          }
	        }
	      }
	    },
	    "RestoreDBInstanceToPointInTime": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SourceDBInstanceIdentifier",
	          "TargetDBInstanceIdentifier"
	        ],
	        "members": {
	          "SourceDBInstanceIdentifier": {},
	          "TargetDBInstanceIdentifier": {},
	          "RestoreTime": {
	            "type": "timestamp"
	          },
	          "UseLatestRestorableTime": {
	            "type": "boolean"
	          },
	          "DBInstanceClass": {},
	          "Port": {
	            "type": "integer"
	          },
	          "AvailabilityZone": {},
	          "DBSubnetGroupName": {},
	          "MultiAZ": {
	            "type": "boolean"
	          },
	          "PubliclyAccessible": {
	            "type": "boolean"
	          },
	          "AutoMinorVersionUpgrade": {
	            "type": "boolean"
	          },
	          "LicenseModel": {},
	          "DBName": {},
	          "Engine": {},
	          "Iops": {
	            "type": "integer"
	          },
	          "OptionGroupName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "RestoreDBInstanceToPointInTimeResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "St"
	          }
	        }
	      }
	    },
	    "RevokeDBSecurityGroupIngress": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSecurityGroupName"
	        ],
	        "members": {
	          "DBSecurityGroupName": {},
	          "CIDRIP": {},
	          "EC2SecurityGroupName": {},
	          "EC2SecurityGroupId": {},
	          "EC2SecurityGroupOwnerId": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "RevokeDBSecurityGroupIngressResult",
	        "type": "structure",
	        "members": {
	          "DBSecurityGroup": {
	            "shape": "Sd"
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S4": {
	      "type": "structure",
	      "members": {
	        "Id": {},
	        "CustomerAwsId": {},
	        "CustSubscriptionId": {},
	        "SnsTopicArn": {},
	        "Status": {},
	        "SubscriptionCreationTime": {},
	        "SourceType": {},
	        "SourceIdsList": {
	          "shape": "S5"
	        },
	        "EventCategoriesList": {
	          "shape": "S6"
	        },
	        "Enabled": {
	          "type": "boolean"
	        }
	      },
	      "wrapper": true
	    },
	    "S5": {
	      "type": "list",
	      "member": {
	        "locationName": "SourceId"
	      }
	    },
	    "S6": {
	      "type": "list",
	      "member": {
	        "locationName": "EventCategory"
	      }
	    },
	    "S9": {
	      "type": "list",
	      "member": {
	        "locationName": "Tag",
	        "type": "structure",
	        "members": {
	          "Key": {},
	          "Value": {}
	        }
	      }
	    },
	    "Sd": {
	      "type": "structure",
	      "members": {
	        "OwnerId": {},
	        "DBSecurityGroupName": {},
	        "DBSecurityGroupDescription": {},
	        "VpcId": {},
	        "EC2SecurityGroups": {
	          "type": "list",
	          "member": {
	            "locationName": "EC2SecurityGroup",
	            "type": "structure",
	            "members": {
	              "Status": {},
	              "EC2SecurityGroupName": {},
	              "EC2SecurityGroupId": {},
	              "EC2SecurityGroupOwnerId": {}
	            }
	          }
	        },
	        "IPRanges": {
	          "type": "list",
	          "member": {
	            "locationName": "IPRange",
	            "type": "structure",
	            "members": {
	              "Status": {},
	              "CIDRIP": {}
	            }
	          }
	        }
	      },
	      "wrapper": true
	    },
	    "Sk": {
	      "type": "structure",
	      "members": {
	        "DBSnapshotIdentifier": {},
	        "DBInstanceIdentifier": {},
	        "SnapshotCreateTime": {
	          "type": "timestamp"
	        },
	        "Engine": {},
	        "AllocatedStorage": {
	          "type": "integer"
	        },
	        "Status": {},
	        "Port": {
	          "type": "integer"
	        },
	        "AvailabilityZone": {},
	        "VpcId": {},
	        "InstanceCreateTime": {
	          "type": "timestamp"
	        },
	        "MasterUsername": {},
	        "EngineVersion": {},
	        "LicenseModel": {},
	        "SnapshotType": {},
	        "Iops": {
	          "type": "integer"
	        }
	      },
	      "wrapper": true
	    },
	    "Sp": {
	      "type": "list",
	      "member": {
	        "locationName": "DBSecurityGroupName"
	      }
	    },
	    "Sq": {
	      "type": "list",
	      "member": {
	        "locationName": "VpcSecurityGroupId"
	      }
	    },
	    "St": {
	      "type": "structure",
	      "members": {
	        "DBInstanceIdentifier": {},
	        "DBInstanceClass": {},
	        "Engine": {},
	        "DBInstanceStatus": {},
	        "MasterUsername": {},
	        "DBName": {},
	        "Endpoint": {
	          "type": "structure",
	          "members": {
	            "Address": {},
	            "Port": {
	              "type": "integer"
	            }
	          }
	        },
	        "AllocatedStorage": {
	          "type": "integer"
	        },
	        "InstanceCreateTime": {
	          "type": "timestamp"
	        },
	        "PreferredBackupWindow": {},
	        "BackupRetentionPeriod": {
	          "type": "integer"
	        },
	        "DBSecurityGroups": {
	          "shape": "Sv"
	        },
	        "VpcSecurityGroups": {
	          "shape": "Sx"
	        },
	        "DBParameterGroups": {
	          "type": "list",
	          "member": {
	            "locationName": "DBParameterGroup",
	            "type": "structure",
	            "members": {
	              "DBParameterGroupName": {},
	              "ParameterApplyStatus": {}
	            }
	          }
	        },
	        "AvailabilityZone": {},
	        "DBSubnetGroup": {
	          "shape": "S11"
	        },
	        "PreferredMaintenanceWindow": {},
	        "PendingModifiedValues": {
	          "type": "structure",
	          "members": {
	            "DBInstanceClass": {},
	            "AllocatedStorage": {
	              "type": "integer"
	            },
	            "MasterUserPassword": {},
	            "Port": {
	              "type": "integer"
	            },
	            "BackupRetentionPeriod": {
	              "type": "integer"
	            },
	            "MultiAZ": {
	              "type": "boolean"
	            },
	            "EngineVersion": {},
	            "Iops": {
	              "type": "integer"
	            },
	            "DBInstanceIdentifier": {}
	          }
	        },
	        "LatestRestorableTime": {
	          "type": "timestamp"
	        },
	        "MultiAZ": {
	          "type": "boolean"
	        },
	        "EngineVersion": {},
	        "AutoMinorVersionUpgrade": {
	          "type": "boolean"
	        },
	        "ReadReplicaSourceDBInstanceIdentifier": {},
	        "ReadReplicaDBInstanceIdentifiers": {
	          "type": "list",
	          "member": {
	            "locationName": "ReadReplicaDBInstanceIdentifier"
	          }
	        },
	        "LicenseModel": {},
	        "Iops": {
	          "type": "integer"
	        },
	        "OptionGroupMembership": {
	          "type": "structure",
	          "members": {
	            "OptionGroupName": {},
	            "Status": {}
	          }
	        },
	        "CharacterSetName": {},
	        "SecondaryAvailabilityZone": {},
	        "PubliclyAccessible": {
	          "type": "boolean"
	        }
	      },
	      "wrapper": true
	    },
	    "Sv": {
	      "type": "list",
	      "member": {
	        "locationName": "DBSecurityGroup",
	        "type": "structure",
	        "members": {
	          "DBSecurityGroupName": {},
	          "Status": {}
	        }
	      }
	    },
	    "Sx": {
	      "type": "list",
	      "member": {
	        "locationName": "VpcSecurityGroupMembership",
	        "type": "structure",
	        "members": {
	          "VpcSecurityGroupId": {},
	          "Status": {}
	        }
	      }
	    },
	    "S11": {
	      "type": "structure",
	      "members": {
	        "DBSubnetGroupName": {},
	        "DBSubnetGroupDescription": {},
	        "VpcId": {},
	        "SubnetGroupStatus": {},
	        "Subnets": {
	          "type": "list",
	          "member": {
	            "locationName": "Subnet",
	            "type": "structure",
	            "members": {
	              "SubnetIdentifier": {},
	              "SubnetAvailabilityZone": {
	                "shape": "S14"
	              },
	              "SubnetStatus": {}
	            }
	          }
	        }
	      },
	      "wrapper": true
	    },
	    "S14": {
	      "type": "structure",
	      "members": {
	        "Name": {},
	        "ProvisionedIopsCapable": {
	          "type": "boolean"
	        }
	      },
	      "wrapper": true
	    },
	    "S1c": {
	      "type": "structure",
	      "members": {
	        "DBParameterGroupName": {},
	        "DBParameterGroupFamily": {},
	        "Description": {}
	      },
	      "wrapper": true
	    },
	    "S1i": {
	      "type": "list",
	      "member": {
	        "locationName": "SubnetIdentifier"
	      }
	    },
	    "S1o": {
	      "type": "structure",
	      "members": {
	        "OptionGroupName": {},
	        "OptionGroupDescription": {},
	        "EngineName": {},
	        "MajorEngineVersion": {},
	        "Options": {
	          "type": "list",
	          "member": {
	            "locationName": "Option",
	            "type": "structure",
	            "members": {
	              "OptionName": {},
	              "OptionDescription": {},
	              "Port": {
	                "type": "integer"
	              },
	              "DBSecurityGroupMemberships": {
	                "shape": "Sv"
	              },
	              "VpcSecurityGroupMemberships": {
	                "shape": "Sx"
	              }
	            }
	          }
	        },
	        "AllowsVpcAndNonVpcInstanceMemberships": {
	          "type": "boolean"
	        },
	        "VpcId": {}
	      },
	      "wrapper": true
	    },
	    "S25": {
	      "type": "structure",
	      "members": {
	        "CharacterSetName": {},
	        "CharacterSetDescription": {}
	      }
	    },
	    "S2f": {
	      "type": "list",
	      "member": {
	        "locationName": "Parameter",
	        "type": "structure",
	        "members": {
	          "ParameterName": {},
	          "ParameterValue": {},
	          "Description": {},
	          "Source": {},
	          "ApplyType": {},
	          "DataType": {},
	          "AllowedValues": {},
	          "IsModifiable": {
	            "type": "boolean"
	          },
	          "MinimumEngineVersion": {},
	          "ApplyMethod": {}
	        }
	      }
	    },
	    "S3m": {
	      "type": "structure",
	      "members": {
	        "ReservedDBInstanceId": {},
	        "ReservedDBInstancesOfferingId": {},
	        "DBInstanceClass": {},
	        "StartTime": {
	          "type": "timestamp"
	        },
	        "Duration": {
	          "type": "integer"
	        },
	        "FixedPrice": {
	          "type": "double"
	        },
	        "UsagePrice": {
	          "type": "double"
	        },
	        "CurrencyCode": {},
	        "DBInstanceCount": {
	          "type": "integer"
	        },
	        "ProductDescription": {},
	        "OfferingType": {},
	        "MultiAZ": {
	          "type": "boolean"
	        },
	        "State": {},
	        "RecurringCharges": {
	          "shape": "S3o"
	        }
	      },
	      "wrapper": true
	    },
	    "S3o": {
	      "type": "list",
	      "member": {
	        "locationName": "RecurringCharge",
	        "type": "structure",
	        "members": {
	          "RecurringChargeAmount": {
	            "type": "double"
	          },
	          "RecurringChargeFrequency": {}
	        },
	        "wrapper": true
	      }
	    },
	    "S3z": {
	      "type": "structure",
	      "members": {
	        "DBParameterGroupName": {}
	      }
	    }
	  }
	}
	},{}],100:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "DescribeDBEngineVersions": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "Marker",
	      "result_key": "DBEngineVersions"
	    },
	    "DescribeDBInstances": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "Marker",
	      "result_key": "DBInstances"
	    },
	    "DescribeDBParameterGroups": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "Marker",
	      "result_key": "DBParameterGroups"
	    },
	    "DescribeDBParameters": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "Marker",
	      "result_key": "Parameters"
	    },
	    "DescribeDBSecurityGroups": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "Marker",
	      "result_key": "DBSecurityGroups"
	    },
	    "DescribeDBSnapshots": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "Marker",
	      "result_key": "DBSnapshots"
	    },
	    "DescribeDBSubnetGroups": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "Marker",
	      "result_key": "DBSubnetGroups"
	    },
	    "DescribeEngineDefaultParameters": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "EngineDefaults.Marker",
	      "result_key": "EngineDefaults.Parameters"
	    },
	    "DescribeEventSubscriptions": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "Marker",
	      "result_key": "EventSubscriptionsList"
	    },
	    "DescribeEvents": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "Marker",
	      "result_key": "Events"
	    },
	    "DescribeOptionGroupOptions": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "Marker",
	      "result_key": "OptionGroupOptions"
	    },
	    "DescribeOptionGroups": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "Marker",
	      "result_key": "OptionGroupsList"
	    },
	    "DescribeOrderableDBInstanceOptions": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "Marker",
	      "result_key": "OrderableDBInstanceOptions"
	    },
	    "DescribeReservedDBInstances": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "Marker",
	      "result_key": "ReservedDBInstances"
	    },
	    "DescribeReservedDBInstancesOfferings": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "Marker",
	      "result_key": "ReservedDBInstancesOfferings"
	    },
	    "ListTagsForResource": {
	      "result_key": "TagList"
	    }
	  }
	}
	},{}],101:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2013-02-12",
	    "endpointPrefix": "rds",
	    "protocol": "query",
	    "serviceAbbreviation": "Amazon RDS",
	    "serviceFullName": "Amazon Relational Database Service",
	    "signatureVersion": "v4",
	    "uid": "rds-2013-02-12",
	    "xmlNamespace": "http://rds.amazonaws.com/doc/2013-02-12/"
	  },
	  "operations": {
	    "AddSourceIdentifierToSubscription": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubscriptionName",
	          "SourceIdentifier"
	        ],
	        "members": {
	          "SubscriptionName": {},
	          "SourceIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "AddSourceIdentifierToSubscriptionResult",
	        "type": "structure",
	        "members": {
	          "EventSubscription": {
	            "shape": "S4"
	          }
	        }
	      }
	    },
	    "AddTagsToResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceName",
	          "Tags"
	        ],
	        "members": {
	          "ResourceName": {},
	          "Tags": {
	            "shape": "S9"
	          }
	        }
	      }
	    },
	    "AuthorizeDBSecurityGroupIngress": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSecurityGroupName"
	        ],
	        "members": {
	          "DBSecurityGroupName": {},
	          "CIDRIP": {},
	          "EC2SecurityGroupName": {},
	          "EC2SecurityGroupId": {},
	          "EC2SecurityGroupOwnerId": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "AuthorizeDBSecurityGroupIngressResult",
	        "type": "structure",
	        "members": {
	          "DBSecurityGroup": {
	            "shape": "Sd"
	          }
	        }
	      }
	    },
	    "CopyDBSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SourceDBSnapshotIdentifier",
	          "TargetDBSnapshotIdentifier"
	        ],
	        "members": {
	          "SourceDBSnapshotIdentifier": {},
	          "TargetDBSnapshotIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CopyDBSnapshotResult",
	        "type": "structure",
	        "members": {
	          "DBSnapshot": {
	            "shape": "Sk"
	          }
	        }
	      }
	    },
	    "CreateDBInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier",
	          "AllocatedStorage",
	          "DBInstanceClass",
	          "Engine",
	          "MasterUsername",
	          "MasterUserPassword"
	        ],
	        "members": {
	          "DBName": {},
	          "DBInstanceIdentifier": {},
	          "AllocatedStorage": {
	            "type": "integer"
	          },
	          "DBInstanceClass": {},
	          "Engine": {},
	          "MasterUsername": {},
	          "MasterUserPassword": {},
	          "DBSecurityGroups": {
	            "shape": "Sp"
	          },
	          "VpcSecurityGroupIds": {
	            "shape": "Sq"
	          },
	          "AvailabilityZone": {},
	          "DBSubnetGroupName": {},
	          "PreferredMaintenanceWindow": {},
	          "DBParameterGroupName": {},
	          "BackupRetentionPeriod": {
	            "type": "integer"
	          },
	          "PreferredBackupWindow": {},
	          "Port": {
	            "type": "integer"
	          },
	          "MultiAZ": {
	            "type": "boolean"
	          },
	          "EngineVersion": {},
	          "AutoMinorVersionUpgrade": {
	            "type": "boolean"
	          },
	          "LicenseModel": {},
	          "Iops": {
	            "type": "integer"
	          },
	          "OptionGroupName": {},
	          "CharacterSetName": {},
	          "PubliclyAccessible": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateDBInstanceResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "St"
	          }
	        }
	      }
	    },
	    "CreateDBInstanceReadReplica": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier",
	          "SourceDBInstanceIdentifier"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "SourceDBInstanceIdentifier": {},
	          "DBInstanceClass": {},
	          "AvailabilityZone": {},
	          "Port": {
	            "type": "integer"
	          },
	          "AutoMinorVersionUpgrade": {
	            "type": "boolean"
	          },
	          "Iops": {
	            "type": "integer"
	          },
	          "OptionGroupName": {},
	          "PubliclyAccessible": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateDBInstanceReadReplicaResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "St"
	          }
	        }
	      }
	    },
	    "CreateDBParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBParameterGroupName",
	          "DBParameterGroupFamily",
	          "Description"
	        ],
	        "members": {
	          "DBParameterGroupName": {},
	          "DBParameterGroupFamily": {},
	          "Description": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateDBParameterGroupResult",
	        "type": "structure",
	        "members": {
	          "DBParameterGroup": {
	            "shape": "S1d"
	          }
	        }
	      }
	    },
	    "CreateDBSecurityGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSecurityGroupName",
	          "DBSecurityGroupDescription"
	        ],
	        "members": {
	          "DBSecurityGroupName": {},
	          "DBSecurityGroupDescription": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateDBSecurityGroupResult",
	        "type": "structure",
	        "members": {
	          "DBSecurityGroup": {
	            "shape": "Sd"
	          }
	        }
	      }
	    },
	    "CreateDBSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSnapshotIdentifier",
	          "DBInstanceIdentifier"
	        ],
	        "members": {
	          "DBSnapshotIdentifier": {},
	          "DBInstanceIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateDBSnapshotResult",
	        "type": "structure",
	        "members": {
	          "DBSnapshot": {
	            "shape": "Sk"
	          }
	        }
	      }
	    },
	    "CreateDBSubnetGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSubnetGroupName",
	          "DBSubnetGroupDescription",
	          "SubnetIds"
	        ],
	        "members": {
	          "DBSubnetGroupName": {},
	          "DBSubnetGroupDescription": {},
	          "SubnetIds": {
	            "shape": "S1j"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateDBSubnetGroupResult",
	        "type": "structure",
	        "members": {
	          "DBSubnetGroup": {
	            "shape": "S11"
	          }
	        }
	      }
	    },
	    "CreateEventSubscription": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubscriptionName",
	          "SnsTopicArn"
	        ],
	        "members": {
	          "SubscriptionName": {},
	          "SnsTopicArn": {},
	          "SourceType": {},
	          "EventCategories": {
	            "shape": "S6"
	          },
	          "SourceIds": {
	            "shape": "S5"
	          },
	          "Enabled": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateEventSubscriptionResult",
	        "type": "structure",
	        "members": {
	          "EventSubscription": {
	            "shape": "S4"
	          }
	        }
	      }
	    },
	    "CreateOptionGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "OptionGroupName",
	          "EngineName",
	          "MajorEngineVersion",
	          "OptionGroupDescription"
	        ],
	        "members": {
	          "OptionGroupName": {},
	          "EngineName": {},
	          "MajorEngineVersion": {},
	          "OptionGroupDescription": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateOptionGroupResult",
	        "type": "structure",
	        "members": {
	          "OptionGroup": {
	            "shape": "S1p"
	          }
	        }
	      }
	    },
	    "DeleteDBInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "SkipFinalSnapshot": {
	            "type": "boolean"
	          },
	          "FinalDBSnapshotIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteDBInstanceResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "St"
	          }
	        }
	      }
	    },
	    "DeleteDBParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBParameterGroupName"
	        ],
	        "members": {
	          "DBParameterGroupName": {}
	        }
	      }
	    },
	    "DeleteDBSecurityGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSecurityGroupName"
	        ],
	        "members": {
	          "DBSecurityGroupName": {}
	        }
	      }
	    },
	    "DeleteDBSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSnapshotIdentifier"
	        ],
	        "members": {
	          "DBSnapshotIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteDBSnapshotResult",
	        "type": "structure",
	        "members": {
	          "DBSnapshot": {
	            "shape": "Sk"
	          }
	        }
	      }
	    },
	    "DeleteDBSubnetGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSubnetGroupName"
	        ],
	        "members": {
	          "DBSubnetGroupName": {}
	        }
	      }
	    },
	    "DeleteEventSubscription": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubscriptionName"
	        ],
	        "members": {
	          "SubscriptionName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteEventSubscriptionResult",
	        "type": "structure",
	        "members": {
	          "EventSubscription": {
	            "shape": "S4"
	          }
	        }
	      }
	    },
	    "DeleteOptionGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "OptionGroupName"
	        ],
	        "members": {
	          "OptionGroupName": {}
	        }
	      }
	    },
	    "DescribeDBEngineVersions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Engine": {},
	          "EngineVersion": {},
	          "DBParameterGroupFamily": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {},
	          "DefaultOnly": {
	            "type": "boolean"
	          },
	          "ListSupportedCharacterSets": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBEngineVersionsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "DBEngineVersions": {
	            "type": "list",
	            "member": {
	              "locationName": "DBEngineVersion",
	              "type": "structure",
	              "members": {
	                "Engine": {},
	                "EngineVersion": {},
	                "DBParameterGroupFamily": {},
	                "DBEngineDescription": {},
	                "DBEngineVersionDescription": {},
	                "DefaultCharacterSet": {
	                  "shape": "S28"
	                },
	                "SupportedCharacterSets": {
	                  "type": "list",
	                  "member": {
	                    "shape": "S28",
	                    "locationName": "CharacterSet"
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeDBInstances": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DBInstanceIdentifier": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBInstancesResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "DBInstances": {
	            "type": "list",
	            "member": {
	              "shape": "St",
	              "locationName": "DBInstance"
	            }
	          }
	        }
	      }
	    },
	    "DescribeDBLogFiles": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "FilenameContains": {},
	          "FileLastWritten": {
	            "type": "long"
	          },
	          "FileSize": {
	            "type": "long"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBLogFilesResult",
	        "type": "structure",
	        "members": {
	          "DescribeDBLogFiles": {
	            "type": "list",
	            "member": {
	              "locationName": "DescribeDBLogFilesDetails",
	              "type": "structure",
	              "members": {
	                "LogFileName": {},
	                "LastWritten": {
	                  "type": "long"
	                },
	                "Size": {
	                  "type": "long"
	                }
	              }
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DescribeDBParameterGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DBParameterGroupName": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBParameterGroupsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "DBParameterGroups": {
	            "type": "list",
	            "member": {
	              "shape": "S1d",
	              "locationName": "DBParameterGroup"
	            }
	          }
	        }
	      }
	    },
	    "DescribeDBParameters": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBParameterGroupName"
	        ],
	        "members": {
	          "DBParameterGroupName": {},
	          "Source": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBParametersResult",
	        "type": "structure",
	        "members": {
	          "Parameters": {
	            "shape": "S2n"
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DescribeDBSecurityGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DBSecurityGroupName": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBSecurityGroupsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "DBSecurityGroups": {
	            "type": "list",
	            "member": {
	              "shape": "Sd",
	              "locationName": "DBSecurityGroup"
	            }
	          }
	        }
	      }
	    },
	    "DescribeDBSnapshots": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DBInstanceIdentifier": {},
	          "DBSnapshotIdentifier": {},
	          "SnapshotType": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBSnapshotsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "DBSnapshots": {
	            "type": "list",
	            "member": {
	              "shape": "Sk",
	              "locationName": "DBSnapshot"
	            }
	          }
	        }
	      }
	    },
	    "DescribeDBSubnetGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DBSubnetGroupName": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBSubnetGroupsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "DBSubnetGroups": {
	            "type": "list",
	            "member": {
	              "shape": "S11",
	              "locationName": "DBSubnetGroup"
	            }
	          }
	        }
	      }
	    },
	    "DescribeEngineDefaultParameters": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBParameterGroupFamily"
	        ],
	        "members": {
	          "DBParameterGroupFamily": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeEngineDefaultParametersResult",
	        "type": "structure",
	        "members": {
	          "EngineDefaults": {
	            "type": "structure",
	            "members": {
	              "DBParameterGroupFamily": {},
	              "Marker": {},
	              "Parameters": {
	                "shape": "S2n"
	              }
	            },
	            "wrapper": true
	          }
	        }
	      }
	    },
	    "DescribeEventCategories": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "SourceType": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeEventCategoriesResult",
	        "type": "structure",
	        "members": {
	          "EventCategoriesMapList": {
	            "type": "list",
	            "member": {
	              "locationName": "EventCategoriesMap",
	              "type": "structure",
	              "members": {
	                "SourceType": {},
	                "EventCategories": {
	                  "shape": "S6"
	                }
	              },
	              "wrapper": true
	            }
	          }
	        }
	      }
	    },
	    "DescribeEventSubscriptions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "SubscriptionName": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeEventSubscriptionsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "EventSubscriptionsList": {
	            "type": "list",
	            "member": {
	              "shape": "S4",
	              "locationName": "EventSubscription"
	            }
	          }
	        }
	      }
	    },
	    "DescribeEvents": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "SourceIdentifier": {},
	          "SourceType": {},
	          "StartTime": {
	            "type": "timestamp"
	          },
	          "EndTime": {
	            "type": "timestamp"
	          },
	          "Duration": {
	            "type": "integer"
	          },
	          "EventCategories": {
	            "shape": "S6"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeEventsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "Events": {
	            "type": "list",
	            "member": {
	              "locationName": "Event",
	              "type": "structure",
	              "members": {
	                "SourceIdentifier": {},
	                "SourceType": {},
	                "Message": {},
	                "EventCategories": {
	                  "shape": "S6"
	                },
	                "Date": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeOptionGroupOptions": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "EngineName"
	        ],
	        "members": {
	          "EngineName": {},
	          "MajorEngineVersion": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeOptionGroupOptionsResult",
	        "type": "structure",
	        "members": {
	          "OptionGroupOptions": {
	            "type": "list",
	            "member": {
	              "locationName": "OptionGroupOption",
	              "type": "structure",
	              "members": {
	                "Name": {},
	                "Description": {},
	                "EngineName": {},
	                "MajorEngineVersion": {},
	                "MinimumRequiredMinorEngineVersion": {},
	                "PortRequired": {
	                  "type": "boolean"
	                },
	                "DefaultPort": {
	                  "type": "integer"
	                },
	                "OptionsDependedOn": {
	                  "type": "list",
	                  "member": {
	                    "locationName": "OptionName"
	                  }
	                },
	                "Persistent": {
	                  "type": "boolean"
	                },
	                "OptionGroupOptionSettings": {
	                  "type": "list",
	                  "member": {
	                    "locationName": "OptionGroupOptionSetting",
	                    "type": "structure",
	                    "members": {
	                      "SettingName": {},
	                      "SettingDescription": {},
	                      "DefaultValue": {},
	                      "ApplyType": {},
	                      "AllowedValues": {},
	                      "IsModifiable": {
	                        "type": "boolean"
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DescribeOptionGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "OptionGroupName": {},
	          "Marker": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "EngineName": {},
	          "MajorEngineVersion": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeOptionGroupsResult",
	        "type": "structure",
	        "members": {
	          "OptionGroupsList": {
	            "type": "list",
	            "member": {
	              "shape": "S1p",
	              "locationName": "OptionGroup"
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DescribeOrderableDBInstanceOptions": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Engine"
	        ],
	        "members": {
	          "Engine": {},
	          "EngineVersion": {},
	          "DBInstanceClass": {},
	          "LicenseModel": {},
	          "Vpc": {
	            "type": "boolean"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeOrderableDBInstanceOptionsResult",
	        "type": "structure",
	        "members": {
	          "OrderableDBInstanceOptions": {
	            "type": "list",
	            "member": {
	              "locationName": "OrderableDBInstanceOption",
	              "type": "structure",
	              "members": {
	                "Engine": {},
	                "EngineVersion": {},
	                "DBInstanceClass": {},
	                "LicenseModel": {},
	                "AvailabilityZones": {
	                  "type": "list",
	                  "member": {
	                    "shape": "S14",
	                    "locationName": "AvailabilityZone"
	                  }
	                },
	                "MultiAZCapable": {
	                  "type": "boolean"
	                },
	                "ReadReplicaCapable": {
	                  "type": "boolean"
	                },
	                "Vpc": {
	                  "type": "boolean"
	                }
	              },
	              "wrapper": true
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DescribeReservedDBInstances": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ReservedDBInstanceId": {},
	          "ReservedDBInstancesOfferingId": {},
	          "DBInstanceClass": {},
	          "Duration": {},
	          "ProductDescription": {},
	          "OfferingType": {},
	          "MultiAZ": {
	            "type": "boolean"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeReservedDBInstancesResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "ReservedDBInstances": {
	            "type": "list",
	            "member": {
	              "shape": "S3w",
	              "locationName": "ReservedDBInstance"
	            }
	          }
	        }
	      }
	    },
	    "DescribeReservedDBInstancesOfferings": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ReservedDBInstancesOfferingId": {},
	          "DBInstanceClass": {},
	          "Duration": {},
	          "ProductDescription": {},
	          "OfferingType": {},
	          "MultiAZ": {
	            "type": "boolean"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeReservedDBInstancesOfferingsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "ReservedDBInstancesOfferings": {
	            "type": "list",
	            "member": {
	              "locationName": "ReservedDBInstancesOffering",
	              "type": "structure",
	              "members": {
	                "ReservedDBInstancesOfferingId": {},
	                "DBInstanceClass": {},
	                "Duration": {
	                  "type": "integer"
	                },
	                "FixedPrice": {
	                  "type": "double"
	                },
	                "UsagePrice": {
	                  "type": "double"
	                },
	                "CurrencyCode": {},
	                "ProductDescription": {},
	                "OfferingType": {},
	                "MultiAZ": {
	                  "type": "boolean"
	                },
	                "RecurringCharges": {
	                  "shape": "S3y"
	                }
	              },
	              "wrapper": true
	            }
	          }
	        }
	      }
	    },
	    "DownloadDBLogFilePortion": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier",
	          "LogFileName"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "LogFileName": {},
	          "Marker": {},
	          "NumberOfLines": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DownloadDBLogFilePortionResult",
	        "type": "structure",
	        "members": {
	          "LogFileData": {},
	          "Marker": {},
	          "AdditionalDataPending": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "ListTagsForResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceName"
	        ],
	        "members": {
	          "ResourceName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ListTagsForResourceResult",
	        "type": "structure",
	        "members": {
	          "TagList": {
	            "shape": "S9"
	          }
	        }
	      }
	    },
	    "ModifyDBInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "AllocatedStorage": {
	            "type": "integer"
	          },
	          "DBInstanceClass": {},
	          "DBSecurityGroups": {
	            "shape": "Sp"
	          },
	          "VpcSecurityGroupIds": {
	            "shape": "Sq"
	          },
	          "ApplyImmediately": {
	            "type": "boolean"
	          },
	          "MasterUserPassword": {},
	          "DBParameterGroupName": {},
	          "BackupRetentionPeriod": {
	            "type": "integer"
	          },
	          "PreferredBackupWindow": {},
	          "PreferredMaintenanceWindow": {},
	          "MultiAZ": {
	            "type": "boolean"
	          },
	          "EngineVersion": {},
	          "AllowMajorVersionUpgrade": {
	            "type": "boolean"
	          },
	          "AutoMinorVersionUpgrade": {
	            "type": "boolean"
	          },
	          "Iops": {
	            "type": "integer"
	          },
	          "OptionGroupName": {},
	          "NewDBInstanceIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyDBInstanceResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "St"
	          }
	        }
	      }
	    },
	    "ModifyDBParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBParameterGroupName",
	          "Parameters"
	        ],
	        "members": {
	          "DBParameterGroupName": {},
	          "Parameters": {
	            "shape": "S2n"
	          }
	        }
	      },
	      "output": {
	        "shape": "S4b",
	        "resultWrapper": "ModifyDBParameterGroupResult"
	      }
	    },
	    "ModifyDBSubnetGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSubnetGroupName",
	          "SubnetIds"
	        ],
	        "members": {
	          "DBSubnetGroupName": {},
	          "DBSubnetGroupDescription": {},
	          "SubnetIds": {
	            "shape": "S1j"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyDBSubnetGroupResult",
	        "type": "structure",
	        "members": {
	          "DBSubnetGroup": {
	            "shape": "S11"
	          }
	        }
	      }
	    },
	    "ModifyEventSubscription": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubscriptionName"
	        ],
	        "members": {
	          "SubscriptionName": {},
	          "SnsTopicArn": {},
	          "SourceType": {},
	          "EventCategories": {
	            "shape": "S6"
	          },
	          "Enabled": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyEventSubscriptionResult",
	        "type": "structure",
	        "members": {
	          "EventSubscription": {
	            "shape": "S4"
	          }
	        }
	      }
	    },
	    "ModifyOptionGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "OptionGroupName"
	        ],
	        "members": {
	          "OptionGroupName": {},
	          "OptionsToInclude": {
	            "type": "list",
	            "member": {
	              "locationName": "OptionConfiguration",
	              "type": "structure",
	              "required": [
	                "OptionName"
	              ],
	              "members": {
	                "OptionName": {},
	                "Port": {
	                  "type": "integer"
	                },
	                "DBSecurityGroupMemberships": {
	                  "shape": "Sp"
	                },
	                "VpcSecurityGroupMemberships": {
	                  "shape": "Sq"
	                },
	                "OptionSettings": {
	                  "type": "list",
	                  "member": {
	                    "shape": "S1t",
	                    "locationName": "OptionSetting"
	                  }
	                }
	              }
	            }
	          },
	          "OptionsToRemove": {
	            "type": "list",
	            "member": {}
	          },
	          "ApplyImmediately": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyOptionGroupResult",
	        "type": "structure",
	        "members": {
	          "OptionGroup": {
	            "shape": "S1p"
	          }
	        }
	      }
	    },
	    "PromoteReadReplica": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "BackupRetentionPeriod": {
	            "type": "integer"
	          },
	          "PreferredBackupWindow": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "PromoteReadReplicaResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "St"
	          }
	        }
	      }
	    },
	    "PurchaseReservedDBInstancesOffering": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ReservedDBInstancesOfferingId"
	        ],
	        "members": {
	          "ReservedDBInstancesOfferingId": {},
	          "ReservedDBInstanceId": {},
	          "DBInstanceCount": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "PurchaseReservedDBInstancesOfferingResult",
	        "type": "structure",
	        "members": {
	          "ReservedDBInstance": {
	            "shape": "S3w"
	          }
	        }
	      }
	    },
	    "RebootDBInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "ForceFailover": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "RebootDBInstanceResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "St"
	          }
	        }
	      }
	    },
	    "RemoveSourceIdentifierFromSubscription": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubscriptionName",
	          "SourceIdentifier"
	        ],
	        "members": {
	          "SubscriptionName": {},
	          "SourceIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "RemoveSourceIdentifierFromSubscriptionResult",
	        "type": "structure",
	        "members": {
	          "EventSubscription": {
	            "shape": "S4"
	          }
	        }
	      }
	    },
	    "RemoveTagsFromResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceName",
	          "TagKeys"
	        ],
	        "members": {
	          "ResourceName": {},
	          "TagKeys": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      }
	    },
	    "ResetDBParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBParameterGroupName"
	        ],
	        "members": {
	          "DBParameterGroupName": {},
	          "ResetAllParameters": {
	            "type": "boolean"
	          },
	          "Parameters": {
	            "shape": "S2n"
	          }
	        }
	      },
	      "output": {
	        "shape": "S4b",
	        "resultWrapper": "ResetDBParameterGroupResult"
	      }
	    },
	    "RestoreDBInstanceFromDBSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier",
	          "DBSnapshotIdentifier"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "DBSnapshotIdentifier": {},
	          "DBInstanceClass": {},
	          "Port": {
	            "type": "integer"
	          },
	          "AvailabilityZone": {},
	          "DBSubnetGroupName": {},
	          "MultiAZ": {
	            "type": "boolean"
	          },
	          "PubliclyAccessible": {
	            "type": "boolean"
	          },
	          "AutoMinorVersionUpgrade": {
	            "type": "boolean"
	          },
	          "LicenseModel": {},
	          "DBName": {},
	          "Engine": {},
	          "Iops": {
	            "type": "integer"
	          },
	          "OptionGroupName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "RestoreDBInstanceFromDBSnapshotResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "St"
	          }
	        }
	      }
	    },
	    "RestoreDBInstanceToPointInTime": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SourceDBInstanceIdentifier",
	          "TargetDBInstanceIdentifier"
	        ],
	        "members": {
	          "SourceDBInstanceIdentifier": {},
	          "TargetDBInstanceIdentifier": {},
	          "RestoreTime": {
	            "type": "timestamp"
	          },
	          "UseLatestRestorableTime": {
	            "type": "boolean"
	          },
	          "DBInstanceClass": {},
	          "Port": {
	            "type": "integer"
	          },
	          "AvailabilityZone": {},
	          "DBSubnetGroupName": {},
	          "MultiAZ": {
	            "type": "boolean"
	          },
	          "PubliclyAccessible": {
	            "type": "boolean"
	          },
	          "AutoMinorVersionUpgrade": {
	            "type": "boolean"
	          },
	          "LicenseModel": {},
	          "DBName": {},
	          "Engine": {},
	          "Iops": {
	            "type": "integer"
	          },
	          "OptionGroupName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "RestoreDBInstanceToPointInTimeResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "St"
	          }
	        }
	      }
	    },
	    "RevokeDBSecurityGroupIngress": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSecurityGroupName"
	        ],
	        "members": {
	          "DBSecurityGroupName": {},
	          "CIDRIP": {},
	          "EC2SecurityGroupName": {},
	          "EC2SecurityGroupId": {},
	          "EC2SecurityGroupOwnerId": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "RevokeDBSecurityGroupIngressResult",
	        "type": "structure",
	        "members": {
	          "DBSecurityGroup": {
	            "shape": "Sd"
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S4": {
	      "type": "structure",
	      "members": {
	        "CustomerAwsId": {},
	        "CustSubscriptionId": {},
	        "SnsTopicArn": {},
	        "Status": {},
	        "SubscriptionCreationTime": {},
	        "SourceType": {},
	        "SourceIdsList": {
	          "shape": "S5"
	        },
	        "EventCategoriesList": {
	          "shape": "S6"
	        },
	        "Enabled": {
	          "type": "boolean"
	        }
	      },
	      "wrapper": true
	    },
	    "S5": {
	      "type": "list",
	      "member": {
	        "locationName": "SourceId"
	      }
	    },
	    "S6": {
	      "type": "list",
	      "member": {
	        "locationName": "EventCategory"
	      }
	    },
	    "S9": {
	      "type": "list",
	      "member": {
	        "locationName": "Tag",
	        "type": "structure",
	        "members": {
	          "Key": {},
	          "Value": {}
	        }
	      }
	    },
	    "Sd": {
	      "type": "structure",
	      "members": {
	        "OwnerId": {},
	        "DBSecurityGroupName": {},
	        "DBSecurityGroupDescription": {},
	        "VpcId": {},
	        "EC2SecurityGroups": {
	          "type": "list",
	          "member": {
	            "locationName": "EC2SecurityGroup",
	            "type": "structure",
	            "members": {
	              "Status": {},
	              "EC2SecurityGroupName": {},
	              "EC2SecurityGroupId": {},
	              "EC2SecurityGroupOwnerId": {}
	            }
	          }
	        },
	        "IPRanges": {
	          "type": "list",
	          "member": {
	            "locationName": "IPRange",
	            "type": "structure",
	            "members": {
	              "Status": {},
	              "CIDRIP": {}
	            }
	          }
	        }
	      },
	      "wrapper": true
	    },
	    "Sk": {
	      "type": "structure",
	      "members": {
	        "DBSnapshotIdentifier": {},
	        "DBInstanceIdentifier": {},
	        "SnapshotCreateTime": {
	          "type": "timestamp"
	        },
	        "Engine": {},
	        "AllocatedStorage": {
	          "type": "integer"
	        },
	        "Status": {},
	        "Port": {
	          "type": "integer"
	        },
	        "AvailabilityZone": {},
	        "VpcId": {},
	        "InstanceCreateTime": {
	          "type": "timestamp"
	        },
	        "MasterUsername": {},
	        "EngineVersion": {},
	        "LicenseModel": {},
	        "SnapshotType": {},
	        "Iops": {
	          "type": "integer"
	        },
	        "OptionGroupName": {}
	      },
	      "wrapper": true
	    },
	    "Sp": {
	      "type": "list",
	      "member": {
	        "locationName": "DBSecurityGroupName"
	      }
	    },
	    "Sq": {
	      "type": "list",
	      "member": {
	        "locationName": "VpcSecurityGroupId"
	      }
	    },
	    "St": {
	      "type": "structure",
	      "members": {
	        "DBInstanceIdentifier": {},
	        "DBInstanceClass": {},
	        "Engine": {},
	        "DBInstanceStatus": {},
	        "MasterUsername": {},
	        "DBName": {},
	        "Endpoint": {
	          "type": "structure",
	          "members": {
	            "Address": {},
	            "Port": {
	              "type": "integer"
	            }
	          }
	        },
	        "AllocatedStorage": {
	          "type": "integer"
	        },
	        "InstanceCreateTime": {
	          "type": "timestamp"
	        },
	        "PreferredBackupWindow": {},
	        "BackupRetentionPeriod": {
	          "type": "integer"
	        },
	        "DBSecurityGroups": {
	          "shape": "Sv"
	        },
	        "VpcSecurityGroups": {
	          "shape": "Sx"
	        },
	        "DBParameterGroups": {
	          "type": "list",
	          "member": {
	            "locationName": "DBParameterGroup",
	            "type": "structure",
	            "members": {
	              "DBParameterGroupName": {},
	              "ParameterApplyStatus": {}
	            }
	          }
	        },
	        "AvailabilityZone": {},
	        "DBSubnetGroup": {
	          "shape": "S11"
	        },
	        "PreferredMaintenanceWindow": {},
	        "PendingModifiedValues": {
	          "type": "structure",
	          "members": {
	            "DBInstanceClass": {},
	            "AllocatedStorage": {
	              "type": "integer"
	            },
	            "MasterUserPassword": {},
	            "Port": {
	              "type": "integer"
	            },
	            "BackupRetentionPeriod": {
	              "type": "integer"
	            },
	            "MultiAZ": {
	              "type": "boolean"
	            },
	            "EngineVersion": {},
	            "Iops": {
	              "type": "integer"
	            },
	            "DBInstanceIdentifier": {}
	          }
	        },
	        "LatestRestorableTime": {
	          "type": "timestamp"
	        },
	        "MultiAZ": {
	          "type": "boolean"
	        },
	        "EngineVersion": {},
	        "AutoMinorVersionUpgrade": {
	          "type": "boolean"
	        },
	        "ReadReplicaSourceDBInstanceIdentifier": {},
	        "ReadReplicaDBInstanceIdentifiers": {
	          "type": "list",
	          "member": {
	            "locationName": "ReadReplicaDBInstanceIdentifier"
	          }
	        },
	        "LicenseModel": {},
	        "Iops": {
	          "type": "integer"
	        },
	        "OptionGroupMemberships": {
	          "type": "list",
	          "member": {
	            "locationName": "OptionGroupMembership",
	            "type": "structure",
	            "members": {
	              "OptionGroupName": {},
	              "Status": {}
	            }
	          }
	        },
	        "CharacterSetName": {},
	        "SecondaryAvailabilityZone": {},
	        "PubliclyAccessible": {
	          "type": "boolean"
	        }
	      },
	      "wrapper": true
	    },
	    "Sv": {
	      "type": "list",
	      "member": {
	        "locationName": "DBSecurityGroup",
	        "type": "structure",
	        "members": {
	          "DBSecurityGroupName": {},
	          "Status": {}
	        }
	      }
	    },
	    "Sx": {
	      "type": "list",
	      "member": {
	        "locationName": "VpcSecurityGroupMembership",
	        "type": "structure",
	        "members": {
	          "VpcSecurityGroupId": {},
	          "Status": {}
	        }
	      }
	    },
	    "S11": {
	      "type": "structure",
	      "members": {
	        "DBSubnetGroupName": {},
	        "DBSubnetGroupDescription": {},
	        "VpcId": {},
	        "SubnetGroupStatus": {},
	        "Subnets": {
	          "type": "list",
	          "member": {
	            "locationName": "Subnet",
	            "type": "structure",
	            "members": {
	              "SubnetIdentifier": {},
	              "SubnetAvailabilityZone": {
	                "shape": "S14"
	              },
	              "SubnetStatus": {}
	            }
	          }
	        }
	      },
	      "wrapper": true
	    },
	    "S14": {
	      "type": "structure",
	      "members": {
	        "Name": {},
	        "ProvisionedIopsCapable": {
	          "type": "boolean"
	        }
	      },
	      "wrapper": true
	    },
	    "S1d": {
	      "type": "structure",
	      "members": {
	        "DBParameterGroupName": {},
	        "DBParameterGroupFamily": {},
	        "Description": {}
	      },
	      "wrapper": true
	    },
	    "S1j": {
	      "type": "list",
	      "member": {
	        "locationName": "SubnetIdentifier"
	      }
	    },
	    "S1p": {
	      "type": "structure",
	      "members": {
	        "OptionGroupName": {},
	        "OptionGroupDescription": {},
	        "EngineName": {},
	        "MajorEngineVersion": {},
	        "Options": {
	          "type": "list",
	          "member": {
	            "locationName": "Option",
	            "type": "structure",
	            "members": {
	              "OptionName": {},
	              "OptionDescription": {},
	              "Persistent": {
	                "type": "boolean"
	              },
	              "Port": {
	                "type": "integer"
	              },
	              "OptionSettings": {
	                "type": "list",
	                "member": {
	                  "shape": "S1t",
	                  "locationName": "OptionSetting"
	                }
	              },
	              "DBSecurityGroupMemberships": {
	                "shape": "Sv"
	              },
	              "VpcSecurityGroupMemberships": {
	                "shape": "Sx"
	              }
	            }
	          }
	        },
	        "AllowsVpcAndNonVpcInstanceMemberships": {
	          "type": "boolean"
	        },
	        "VpcId": {}
	      },
	      "wrapper": true
	    },
	    "S1t": {
	      "type": "structure",
	      "members": {
	        "Name": {},
	        "Value": {},
	        "DefaultValue": {},
	        "Description": {},
	        "ApplyType": {},
	        "DataType": {},
	        "AllowedValues": {},
	        "IsModifiable": {
	          "type": "boolean"
	        },
	        "IsCollection": {
	          "type": "boolean"
	        }
	      }
	    },
	    "S28": {
	      "type": "structure",
	      "members": {
	        "CharacterSetName": {},
	        "CharacterSetDescription": {}
	      }
	    },
	    "S2n": {
	      "type": "list",
	      "member": {
	        "locationName": "Parameter",
	        "type": "structure",
	        "members": {
	          "ParameterName": {},
	          "ParameterValue": {},
	          "Description": {},
	          "Source": {},
	          "ApplyType": {},
	          "DataType": {},
	          "AllowedValues": {},
	          "IsModifiable": {
	            "type": "boolean"
	          },
	          "MinimumEngineVersion": {},
	          "ApplyMethod": {}
	        }
	      }
	    },
	    "S3w": {
	      "type": "structure",
	      "members": {
	        "ReservedDBInstanceId": {},
	        "ReservedDBInstancesOfferingId": {},
	        "DBInstanceClass": {},
	        "StartTime": {
	          "type": "timestamp"
	        },
	        "Duration": {
	          "type": "integer"
	        },
	        "FixedPrice": {
	          "type": "double"
	        },
	        "UsagePrice": {
	          "type": "double"
	        },
	        "CurrencyCode": {},
	        "DBInstanceCount": {
	          "type": "integer"
	        },
	        "ProductDescription": {},
	        "OfferingType": {},
	        "MultiAZ": {
	          "type": "boolean"
	        },
	        "State": {},
	        "RecurringCharges": {
	          "shape": "S3y"
	        }
	      },
	      "wrapper": true
	    },
	    "S3y": {
	      "type": "list",
	      "member": {
	        "locationName": "RecurringCharge",
	        "type": "structure",
	        "members": {
	          "RecurringChargeAmount": {
	            "type": "double"
	          },
	          "RecurringChargeFrequency": {}
	        },
	        "wrapper": true
	      }
	    },
	    "S4b": {
	      "type": "structure",
	      "members": {
	        "DBParameterGroupName": {}
	      }
	    }
	  }
	}
	},{}],102:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "DescribeDBEngineVersions": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "Marker",
	      "result_key": "DBEngineVersions"
	    },
	    "DescribeDBInstances": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "Marker",
	      "result_key": "DBInstances"
	    },
	    "DescribeDBLogFiles": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "Marker",
	      "result_key": "DescribeDBLogFiles"
	    },
	    "DescribeDBParameterGroups": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "Marker",
	      "result_key": "DBParameterGroups"
	    },
	    "DescribeDBParameters": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "Marker",
	      "result_key": "Parameters"
	    },
	    "DescribeDBSecurityGroups": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "Marker",
	      "result_key": "DBSecurityGroups"
	    },
	    "DescribeDBSnapshots": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "Marker",
	      "result_key": "DBSnapshots"
	    },
	    "DescribeDBSubnetGroups": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "Marker",
	      "result_key": "DBSubnetGroups"
	    },
	    "DescribeEngineDefaultParameters": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "EngineDefaults.Marker",
	      "result_key": "EngineDefaults.Parameters"
	    },
	    "DescribeEventSubscriptions": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "Marker",
	      "result_key": "EventSubscriptionsList"
	    },
	    "DescribeEvents": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "Marker",
	      "result_key": "Events"
	    },
	    "DescribeOptionGroupOptions": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "Marker",
	      "result_key": "OptionGroupOptions"
	    },
	    "DescribeOptionGroups": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "Marker",
	      "result_key": "OptionGroupsList"
	    },
	    "DescribeOrderableDBInstanceOptions": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "Marker",
	      "result_key": "OrderableDBInstanceOptions"
	    },
	    "DescribeReservedDBInstances": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "Marker",
	      "result_key": "ReservedDBInstances"
	    },
	    "DescribeReservedDBInstancesOfferings": {
	      "input_token": "Marker",
	      "limit_key": "MaxRecords",
	      "output_token": "Marker",
	      "result_key": "ReservedDBInstancesOfferings"
	    },
	    "DownloadDBLogFilePortion": {
	      "input_token": "Marker",
	      "limit_key": "NumberOfLines",
	      "more_results": "AdditionalDataPending",
	      "output_token": "Marker",
	      "result_key": "LogFileData"
	    },
	    "ListTagsForResource": {
	      "result_key": "TagList"
	    }
	  }
	}
	},{}],103:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2013-09-09",
	    "endpointPrefix": "rds",
	    "protocol": "query",
	    "serviceAbbreviation": "Amazon RDS",
	    "serviceFullName": "Amazon Relational Database Service",
	    "signatureVersion": "v4",
	    "uid": "rds-2013-09-09",
	    "xmlNamespace": "http://rds.amazonaws.com/doc/2013-09-09/"
	  },
	  "operations": {
	    "AddSourceIdentifierToSubscription": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubscriptionName",
	          "SourceIdentifier"
	        ],
	        "members": {
	          "SubscriptionName": {},
	          "SourceIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "AddSourceIdentifierToSubscriptionResult",
	        "type": "structure",
	        "members": {
	          "EventSubscription": {
	            "shape": "S4"
	          }
	        }
	      }
	    },
	    "AddTagsToResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceName",
	          "Tags"
	        ],
	        "members": {
	          "ResourceName": {},
	          "Tags": {
	            "shape": "S9"
	          }
	        }
	      }
	    },
	    "AuthorizeDBSecurityGroupIngress": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSecurityGroupName"
	        ],
	        "members": {
	          "DBSecurityGroupName": {},
	          "CIDRIP": {},
	          "EC2SecurityGroupName": {},
	          "EC2SecurityGroupId": {},
	          "EC2SecurityGroupOwnerId": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "AuthorizeDBSecurityGroupIngressResult",
	        "type": "structure",
	        "members": {
	          "DBSecurityGroup": {
	            "shape": "Sd"
	          }
	        }
	      }
	    },
	    "CopyDBSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SourceDBSnapshotIdentifier",
	          "TargetDBSnapshotIdentifier"
	        ],
	        "members": {
	          "SourceDBSnapshotIdentifier": {},
	          "TargetDBSnapshotIdentifier": {},
	          "Tags": {
	            "shape": "S9"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CopyDBSnapshotResult",
	        "type": "structure",
	        "members": {
	          "DBSnapshot": {
	            "shape": "Sk"
	          }
	        }
	      }
	    },
	    "CreateDBInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier",
	          "AllocatedStorage",
	          "DBInstanceClass",
	          "Engine",
	          "MasterUsername",
	          "MasterUserPassword"
	        ],
	        "members": {
	          "DBName": {},
	          "DBInstanceIdentifier": {},
	          "AllocatedStorage": {
	            "type": "integer"
	          },
	          "DBInstanceClass": {},
	          "Engine": {},
	          "MasterUsername": {},
	          "MasterUserPassword": {},
	          "DBSecurityGroups": {
	            "shape": "Sp"
	          },
	          "VpcSecurityGroupIds": {
	            "shape": "Sq"
	          },
	          "AvailabilityZone": {},
	          "DBSubnetGroupName": {},
	          "PreferredMaintenanceWindow": {},
	          "DBParameterGroupName": {},
	          "BackupRetentionPeriod": {
	            "type": "integer"
	          },
	          "PreferredBackupWindow": {},
	          "Port": {
	            "type": "integer"
	          },
	          "MultiAZ": {
	            "type": "boolean"
	          },
	          "EngineVersion": {},
	          "AutoMinorVersionUpgrade": {
	            "type": "boolean"
	          },
	          "LicenseModel": {},
	          "Iops": {
	            "type": "integer"
	          },
	          "OptionGroupName": {},
	          "CharacterSetName": {},
	          "PubliclyAccessible": {
	            "type": "boolean"
	          },
	          "Tags": {
	            "shape": "S9"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateDBInstanceResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "St"
	          }
	        }
	      }
	    },
	    "CreateDBInstanceReadReplica": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier",
	          "SourceDBInstanceIdentifier"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "SourceDBInstanceIdentifier": {},
	          "DBInstanceClass": {},
	          "AvailabilityZone": {},
	          "Port": {
	            "type": "integer"
	          },
	          "AutoMinorVersionUpgrade": {
	            "type": "boolean"
	          },
	          "Iops": {
	            "type": "integer"
	          },
	          "OptionGroupName": {},
	          "PubliclyAccessible": {
	            "type": "boolean"
	          },
	          "Tags": {
	            "shape": "S9"
	          },
	          "DBSubnetGroupName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateDBInstanceReadReplicaResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "St"
	          }
	        }
	      }
	    },
	    "CreateDBParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBParameterGroupName",
	          "DBParameterGroupFamily",
	          "Description"
	        ],
	        "members": {
	          "DBParameterGroupName": {},
	          "DBParameterGroupFamily": {},
	          "Description": {},
	          "Tags": {
	            "shape": "S9"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateDBParameterGroupResult",
	        "type": "structure",
	        "members": {
	          "DBParameterGroup": {
	            "shape": "S1f"
	          }
	        }
	      }
	    },
	    "CreateDBSecurityGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSecurityGroupName",
	          "DBSecurityGroupDescription"
	        ],
	        "members": {
	          "DBSecurityGroupName": {},
	          "DBSecurityGroupDescription": {},
	          "Tags": {
	            "shape": "S9"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateDBSecurityGroupResult",
	        "type": "structure",
	        "members": {
	          "DBSecurityGroup": {
	            "shape": "Sd"
	          }
	        }
	      }
	    },
	    "CreateDBSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSnapshotIdentifier",
	          "DBInstanceIdentifier"
	        ],
	        "members": {
	          "DBSnapshotIdentifier": {},
	          "DBInstanceIdentifier": {},
	          "Tags": {
	            "shape": "S9"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateDBSnapshotResult",
	        "type": "structure",
	        "members": {
	          "DBSnapshot": {
	            "shape": "Sk"
	          }
	        }
	      }
	    },
	    "CreateDBSubnetGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSubnetGroupName",
	          "DBSubnetGroupDescription",
	          "SubnetIds"
	        ],
	        "members": {
	          "DBSubnetGroupName": {},
	          "DBSubnetGroupDescription": {},
	          "SubnetIds": {
	            "shape": "S1l"
	          },
	          "Tags": {
	            "shape": "S9"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateDBSubnetGroupResult",
	        "type": "structure",
	        "members": {
	          "DBSubnetGroup": {
	            "shape": "S11"
	          }
	        }
	      }
	    },
	    "CreateEventSubscription": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubscriptionName",
	          "SnsTopicArn"
	        ],
	        "members": {
	          "SubscriptionName": {},
	          "SnsTopicArn": {},
	          "SourceType": {},
	          "EventCategories": {
	            "shape": "S6"
	          },
	          "SourceIds": {
	            "shape": "S5"
	          },
	          "Enabled": {
	            "type": "boolean"
	          },
	          "Tags": {
	            "shape": "S9"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateEventSubscriptionResult",
	        "type": "structure",
	        "members": {
	          "EventSubscription": {
	            "shape": "S4"
	          }
	        }
	      }
	    },
	    "CreateOptionGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "OptionGroupName",
	          "EngineName",
	          "MajorEngineVersion",
	          "OptionGroupDescription"
	        ],
	        "members": {
	          "OptionGroupName": {},
	          "EngineName": {},
	          "MajorEngineVersion": {},
	          "OptionGroupDescription": {},
	          "Tags": {
	            "shape": "S9"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateOptionGroupResult",
	        "type": "structure",
	        "members": {
	          "OptionGroup": {
	            "shape": "S1r"
	          }
	        }
	      }
	    },
	    "DeleteDBInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "SkipFinalSnapshot": {
	            "type": "boolean"
	          },
	          "FinalDBSnapshotIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteDBInstanceResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "St"
	          }
	        }
	      }
	    },
	    "DeleteDBParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBParameterGroupName"
	        ],
	        "members": {
	          "DBParameterGroupName": {}
	        }
	      }
	    },
	    "DeleteDBSecurityGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSecurityGroupName"
	        ],
	        "members": {
	          "DBSecurityGroupName": {}
	        }
	      }
	    },
	    "DeleteDBSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSnapshotIdentifier"
	        ],
	        "members": {
	          "DBSnapshotIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteDBSnapshotResult",
	        "type": "structure",
	        "members": {
	          "DBSnapshot": {
	            "shape": "Sk"
	          }
	        }
	      }
	    },
	    "DeleteDBSubnetGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSubnetGroupName"
	        ],
	        "members": {
	          "DBSubnetGroupName": {}
	        }
	      }
	    },
	    "DeleteEventSubscription": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubscriptionName"
	        ],
	        "members": {
	          "SubscriptionName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteEventSubscriptionResult",
	        "type": "structure",
	        "members": {
	          "EventSubscription": {
	            "shape": "S4"
	          }
	        }
	      }
	    },
	    "DeleteOptionGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "OptionGroupName"
	        ],
	        "members": {
	          "OptionGroupName": {}
	        }
	      }
	    },
	    "DescribeDBEngineVersions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Engine": {},
	          "EngineVersion": {},
	          "DBParameterGroupFamily": {},
	          "Filters": {
	            "shape": "S27"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {},
	          "DefaultOnly": {
	            "type": "boolean"
	          },
	          "ListSupportedCharacterSets": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBEngineVersionsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "DBEngineVersions": {
	            "type": "list",
	            "member": {
	              "locationName": "DBEngineVersion",
	              "type": "structure",
	              "members": {
	                "Engine": {},
	                "EngineVersion": {},
	                "DBParameterGroupFamily": {},
	                "DBEngineDescription": {},
	                "DBEngineVersionDescription": {},
	                "DefaultCharacterSet": {
	                  "shape": "S2d"
	                },
	                "SupportedCharacterSets": {
	                  "type": "list",
	                  "member": {
	                    "shape": "S2d",
	                    "locationName": "CharacterSet"
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeDBInstances": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DBInstanceIdentifier": {},
	          "Filters": {
	            "shape": "S27"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBInstancesResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "DBInstances": {
	            "type": "list",
	            "member": {
	              "shape": "St",
	              "locationName": "DBInstance"
	            }
	          }
	        }
	      }
	    },
	    "DescribeDBLogFiles": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "FilenameContains": {},
	          "FileLastWritten": {
	            "type": "long"
	          },
	          "FileSize": {
	            "type": "long"
	          },
	          "Filters": {
	            "shape": "S27"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBLogFilesResult",
	        "type": "structure",
	        "members": {
	          "DescribeDBLogFiles": {
	            "type": "list",
	            "member": {
	              "locationName": "DescribeDBLogFilesDetails",
	              "type": "structure",
	              "members": {
	                "LogFileName": {},
	                "LastWritten": {
	                  "type": "long"
	                },
	                "Size": {
	                  "type": "long"
	                }
	              }
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DescribeDBParameterGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DBParameterGroupName": {},
	          "Filters": {
	            "shape": "S27"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBParameterGroupsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "DBParameterGroups": {
	            "type": "list",
	            "member": {
	              "shape": "S1f",
	              "locationName": "DBParameterGroup"
	            }
	          }
	        }
	      }
	    },
	    "DescribeDBParameters": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBParameterGroupName"
	        ],
	        "members": {
	          "DBParameterGroupName": {},
	          "Source": {},
	          "Filters": {
	            "shape": "S27"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBParametersResult",
	        "type": "structure",
	        "members": {
	          "Parameters": {
	            "shape": "S2s"
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DescribeDBSecurityGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DBSecurityGroupName": {},
	          "Filters": {
	            "shape": "S27"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBSecurityGroupsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "DBSecurityGroups": {
	            "type": "list",
	            "member": {
	              "shape": "Sd",
	              "locationName": "DBSecurityGroup"
	            }
	          }
	        }
	      }
	    },
	    "DescribeDBSnapshots": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DBInstanceIdentifier": {},
	          "DBSnapshotIdentifier": {},
	          "SnapshotType": {},
	          "Filters": {
	            "shape": "S27"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBSnapshotsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "DBSnapshots": {
	            "type": "list",
	            "member": {
	              "shape": "Sk",
	              "locationName": "DBSnapshot"
	            }
	          }
	        }
	      }
	    },
	    "DescribeDBSubnetGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DBSubnetGroupName": {},
	          "Filters": {
	            "shape": "S27"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBSubnetGroupsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "DBSubnetGroups": {
	            "type": "list",
	            "member": {
	              "shape": "S11",
	              "locationName": "DBSubnetGroup"
	            }
	          }
	        }
	      }
	    },
	    "DescribeEngineDefaultParameters": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBParameterGroupFamily"
	        ],
	        "members": {
	          "DBParameterGroupFamily": {},
	          "Filters": {
	            "shape": "S27"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeEngineDefaultParametersResult",
	        "type": "structure",
	        "members": {
	          "EngineDefaults": {
	            "type": "structure",
	            "members": {
	              "DBParameterGroupFamily": {},
	              "Marker": {},
	              "Parameters": {
	                "shape": "S2s"
	              }
	            },
	            "wrapper": true
	          }
	        }
	      }
	    },
	    "DescribeEventCategories": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "SourceType": {},
	          "Filters": {
	            "shape": "S27"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeEventCategoriesResult",
	        "type": "structure",
	        "members": {
	          "EventCategoriesMapList": {
	            "type": "list",
	            "member": {
	              "locationName": "EventCategoriesMap",
	              "type": "structure",
	              "members": {
	                "SourceType": {},
	                "EventCategories": {
	                  "shape": "S6"
	                }
	              },
	              "wrapper": true
	            }
	          }
	        }
	      }
	    },
	    "DescribeEventSubscriptions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "SubscriptionName": {},
	          "Filters": {
	            "shape": "S27"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeEventSubscriptionsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "EventSubscriptionsList": {
	            "type": "list",
	            "member": {
	              "shape": "S4",
	              "locationName": "EventSubscription"
	            }
	          }
	        }
	      }
	    },
	    "DescribeEvents": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "SourceIdentifier": {},
	          "SourceType": {},
	          "StartTime": {
	            "type": "timestamp"
	          },
	          "EndTime": {
	            "type": "timestamp"
	          },
	          "Duration": {
	            "type": "integer"
	          },
	          "EventCategories": {
	            "shape": "S6"
	          },
	          "Filters": {
	            "shape": "S27"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeEventsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "Events": {
	            "type": "list",
	            "member": {
	              "locationName": "Event",
	              "type": "structure",
	              "members": {
	                "SourceIdentifier": {},
	                "SourceType": {},
	                "Message": {},
	                "EventCategories": {
	                  "shape": "S6"
	                },
	                "Date": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeOptionGroupOptions": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "EngineName"
	        ],
	        "members": {
	          "EngineName": {},
	          "MajorEngineVersion": {},
	          "Filters": {
	            "shape": "S27"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeOptionGroupOptionsResult",
	        "type": "structure",
	        "members": {
	          "OptionGroupOptions": {
	            "type": "list",
	            "member": {
	              "locationName": "OptionGroupOption",
	              "type": "structure",
	              "members": {
	                "Name": {},
	                "Description": {},
	                "EngineName": {},
	                "MajorEngineVersion": {},
	                "MinimumRequiredMinorEngineVersion": {},
	                "PortRequired": {
	                  "type": "boolean"
	                },
	                "DefaultPort": {
	                  "type": "integer"
	                },
	                "OptionsDependedOn": {
	                  "type": "list",
	                  "member": {
	                    "locationName": "OptionName"
	                  }
	                },
	                "Persistent": {
	                  "type": "boolean"
	                },
	                "Permanent": {
	                  "type": "boolean"
	                },
	                "OptionGroupOptionSettings": {
	                  "type": "list",
	                  "member": {
	                    "locationName": "OptionGroupOptionSetting",
	                    "type": "structure",
	                    "members": {
	                      "SettingName": {},
	                      "SettingDescription": {},
	                      "DefaultValue": {},
	                      "ApplyType": {},
	                      "AllowedValues": {},
	                      "IsModifiable": {
	                        "type": "boolean"
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DescribeOptionGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "OptionGroupName": {},
	          "Filters": {
	            "shape": "S27"
	          },
	          "Marker": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "EngineName": {},
	          "MajorEngineVersion": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeOptionGroupsResult",
	        "type": "structure",
	        "members": {
	          "OptionGroupsList": {
	            "type": "list",
	            "member": {
	              "shape": "S1r",
	              "locationName": "OptionGroup"
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DescribeOrderableDBInstanceOptions": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Engine"
	        ],
	        "members": {
	          "Engine": {},
	          "EngineVersion": {},
	          "DBInstanceClass": {},
	          "LicenseModel": {},
	          "Vpc": {
	            "type": "boolean"
	          },
	          "Filters": {
	            "shape": "S27"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeOrderableDBInstanceOptionsResult",
	        "type": "structure",
	        "members": {
	          "OrderableDBInstanceOptions": {
	            "type": "list",
	            "member": {
	              "locationName": "OrderableDBInstanceOption",
	              "type": "structure",
	              "members": {
	                "Engine": {},
	                "EngineVersion": {},
	                "DBInstanceClass": {},
	                "LicenseModel": {},
	                "AvailabilityZones": {
	                  "type": "list",
	                  "member": {
	                    "shape": "S14",
	                    "locationName": "AvailabilityZone"
	                  }
	                },
	                "MultiAZCapable": {
	                  "type": "boolean"
	                },
	                "ReadReplicaCapable": {
	                  "type": "boolean"
	                },
	                "Vpc": {
	                  "type": "boolean"
	                }
	              },
	              "wrapper": true
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DescribeReservedDBInstances": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ReservedDBInstanceId": {},
	          "ReservedDBInstancesOfferingId": {},
	          "DBInstanceClass": {},
	          "Duration": {},
	          "ProductDescription": {},
	          "OfferingType": {},
	          "MultiAZ": {
	            "type": "boolean"
	          },
	          "Filters": {
	            "shape": "S27"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeReservedDBInstancesResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "ReservedDBInstances": {
	            "type": "list",
	            "member": {
	              "shape": "S41",
	              "locationName": "ReservedDBInstance"
	            }
	          }
	        }
	      }
	    },
	    "DescribeReservedDBInstancesOfferings": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ReservedDBInstancesOfferingId": {},
	          "DBInstanceClass": {},
	          "Duration": {},
	          "ProductDescription": {},
	          "OfferingType": {},
	          "MultiAZ": {
	            "type": "boolean"
	          },
	          "Filters": {
	            "shape": "S27"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeReservedDBInstancesOfferingsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "ReservedDBInstancesOfferings": {
	            "type": "list",
	            "member": {
	              "locationName": "ReservedDBInstancesOffering",
	              "type": "structure",
	              "members": {
	                "ReservedDBInstancesOfferingId": {},
	                "DBInstanceClass": {},
	                "Duration": {
	                  "type": "integer"
	                },
	                "FixedPrice": {
	                  "type": "double"
	                },
	                "UsagePrice": {
	                  "type": "double"
	                },
	                "CurrencyCode": {},
	                "ProductDescription": {},
	                "OfferingType": {},
	                "MultiAZ": {
	                  "type": "boolean"
	                },
	                "RecurringCharges": {
	                  "shape": "S43"
	                }
	              },
	              "wrapper": true
	            }
	          }
	        }
	      }
	    },
	    "DownloadDBLogFilePortion": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier",
	          "LogFileName"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "LogFileName": {},
	          "Marker": {},
	          "NumberOfLines": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DownloadDBLogFilePortionResult",
	        "type": "structure",
	        "members": {
	          "LogFileData": {},
	          "Marker": {},
	          "AdditionalDataPending": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "ListTagsForResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceName"
	        ],
	        "members": {
	          "ResourceName": {},
	          "Filters": {
	            "shape": "S27"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ListTagsForResourceResult",
	        "type": "structure",
	        "members": {
	          "TagList": {
	            "shape": "S9"
	          }
	        }
	      }
	    },
	    "ModifyDBInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "AllocatedStorage": {
	            "type": "integer"
	          },
	          "DBInstanceClass": {},
	          "DBSecurityGroups": {
	            "shape": "Sp"
	          },
	          "VpcSecurityGroupIds": {
	            "shape": "Sq"
	          },
	          "ApplyImmediately": {
	            "type": "boolean"
	          },
	          "MasterUserPassword": {},
	          "DBParameterGroupName": {},
	          "BackupRetentionPeriod": {
	            "type": "integer"
	          },
	          "PreferredBackupWindow": {},
	          "PreferredMaintenanceWindow": {},
	          "MultiAZ": {
	            "type": "boolean"
	          },
	          "EngineVersion": {},
	          "AllowMajorVersionUpgrade": {
	            "type": "boolean"
	          },
	          "AutoMinorVersionUpgrade": {
	            "type": "boolean"
	          },
	          "Iops": {
	            "type": "integer"
	          },
	          "OptionGroupName": {},
	          "NewDBInstanceIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyDBInstanceResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "St"
	          }
	        }
	      }
	    },
	    "ModifyDBParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBParameterGroupName",
	          "Parameters"
	        ],
	        "members": {
	          "DBParameterGroupName": {},
	          "Parameters": {
	            "shape": "S2s"
	          }
	        }
	      },
	      "output": {
	        "shape": "S4g",
	        "resultWrapper": "ModifyDBParameterGroupResult"
	      }
	    },
	    "ModifyDBSubnetGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSubnetGroupName",
	          "SubnetIds"
	        ],
	        "members": {
	          "DBSubnetGroupName": {},
	          "DBSubnetGroupDescription": {},
	          "SubnetIds": {
	            "shape": "S1l"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyDBSubnetGroupResult",
	        "type": "structure",
	        "members": {
	          "DBSubnetGroup": {
	            "shape": "S11"
	          }
	        }
	      }
	    },
	    "ModifyEventSubscription": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubscriptionName"
	        ],
	        "members": {
	          "SubscriptionName": {},
	          "SnsTopicArn": {},
	          "SourceType": {},
	          "EventCategories": {
	            "shape": "S6"
	          },
	          "Enabled": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyEventSubscriptionResult",
	        "type": "structure",
	        "members": {
	          "EventSubscription": {
	            "shape": "S4"
	          }
	        }
	      }
	    },
	    "ModifyOptionGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "OptionGroupName"
	        ],
	        "members": {
	          "OptionGroupName": {},
	          "OptionsToInclude": {
	            "type": "list",
	            "member": {
	              "locationName": "OptionConfiguration",
	              "type": "structure",
	              "required": [
	                "OptionName"
	              ],
	              "members": {
	                "OptionName": {},
	                "Port": {
	                  "type": "integer"
	                },
	                "DBSecurityGroupMemberships": {
	                  "shape": "Sp"
	                },
	                "VpcSecurityGroupMemberships": {
	                  "shape": "Sq"
	                },
	                "OptionSettings": {
	                  "type": "list",
	                  "member": {
	                    "shape": "S1v",
	                    "locationName": "OptionSetting"
	                  }
	                }
	              }
	            }
	          },
	          "OptionsToRemove": {
	            "type": "list",
	            "member": {}
	          },
	          "ApplyImmediately": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyOptionGroupResult",
	        "type": "structure",
	        "members": {
	          "OptionGroup": {
	            "shape": "S1r"
	          }
	        }
	      }
	    },
	    "PromoteReadReplica": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "BackupRetentionPeriod": {
	            "type": "integer"
	          },
	          "PreferredBackupWindow": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "PromoteReadReplicaResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "St"
	          }
	        }
	      }
	    },
	    "PurchaseReservedDBInstancesOffering": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ReservedDBInstancesOfferingId"
	        ],
	        "members": {
	          "ReservedDBInstancesOfferingId": {},
	          "ReservedDBInstanceId": {},
	          "DBInstanceCount": {
	            "type": "integer"
	          },
	          "Tags": {
	            "shape": "S9"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "PurchaseReservedDBInstancesOfferingResult",
	        "type": "structure",
	        "members": {
	          "ReservedDBInstance": {
	            "shape": "S41"
	          }
	        }
	      }
	    },
	    "RebootDBInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "ForceFailover": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "RebootDBInstanceResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "St"
	          }
	        }
	      }
	    },
	    "RemoveSourceIdentifierFromSubscription": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubscriptionName",
	          "SourceIdentifier"
	        ],
	        "members": {
	          "SubscriptionName": {},
	          "SourceIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "RemoveSourceIdentifierFromSubscriptionResult",
	        "type": "structure",
	        "members": {
	          "EventSubscription": {
	            "shape": "S4"
	          }
	        }
	      }
	    },
	    "RemoveTagsFromResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceName",
	          "TagKeys"
	        ],
	        "members": {
	          "ResourceName": {},
	          "TagKeys": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      }
	    },
	    "ResetDBParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBParameterGroupName"
	        ],
	        "members": {
	          "DBParameterGroupName": {},
	          "ResetAllParameters": {
	            "type": "boolean"
	          },
	          "Parameters": {
	            "shape": "S2s"
	          }
	        }
	      },
	      "output": {
	        "shape": "S4g",
	        "resultWrapper": "ResetDBParameterGroupResult"
	      }
	    },
	    "RestoreDBInstanceFromDBSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier",
	          "DBSnapshotIdentifier"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "DBSnapshotIdentifier": {},
	          "DBInstanceClass": {},
	          "Port": {
	            "type": "integer"
	          },
	          "AvailabilityZone": {},
	          "DBSubnetGroupName": {},
	          "MultiAZ": {
	            "type": "boolean"
	          },
	          "PubliclyAccessible": {
	            "type": "boolean"
	          },
	          "AutoMinorVersionUpgrade": {
	            "type": "boolean"
	          },
	          "LicenseModel": {},
	          "DBName": {},
	          "Engine": {},
	          "Iops": {
	            "type": "integer"
	          },
	          "OptionGroupName": {},
	          "Tags": {
	            "shape": "S9"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "RestoreDBInstanceFromDBSnapshotResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "St"
	          }
	        }
	      }
	    },
	    "RestoreDBInstanceToPointInTime": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SourceDBInstanceIdentifier",
	          "TargetDBInstanceIdentifier"
	        ],
	        "members": {
	          "SourceDBInstanceIdentifier": {},
	          "TargetDBInstanceIdentifier": {},
	          "RestoreTime": {
	            "type": "timestamp"
	          },
	          "UseLatestRestorableTime": {
	            "type": "boolean"
	          },
	          "DBInstanceClass": {},
	          "Port": {
	            "type": "integer"
	          },
	          "AvailabilityZone": {},
	          "DBSubnetGroupName": {},
	          "MultiAZ": {
	            "type": "boolean"
	          },
	          "PubliclyAccessible": {
	            "type": "boolean"
	          },
	          "AutoMinorVersionUpgrade": {
	            "type": "boolean"
	          },
	          "LicenseModel": {},
	          "DBName": {},
	          "Engine": {},
	          "Iops": {
	            "type": "integer"
	          },
	          "OptionGroupName": {},
	          "Tags": {
	            "shape": "S9"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "RestoreDBInstanceToPointInTimeResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "St"
	          }
	        }
	      }
	    },
	    "RevokeDBSecurityGroupIngress": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSecurityGroupName"
	        ],
	        "members": {
	          "DBSecurityGroupName": {},
	          "CIDRIP": {},
	          "EC2SecurityGroupName": {},
	          "EC2SecurityGroupId": {},
	          "EC2SecurityGroupOwnerId": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "RevokeDBSecurityGroupIngressResult",
	        "type": "structure",
	        "members": {
	          "DBSecurityGroup": {
	            "shape": "Sd"
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S4": {
	      "type": "structure",
	      "members": {
	        "CustomerAwsId": {},
	        "CustSubscriptionId": {},
	        "SnsTopicArn": {},
	        "Status": {},
	        "SubscriptionCreationTime": {},
	        "SourceType": {},
	        "SourceIdsList": {
	          "shape": "S5"
	        },
	        "EventCategoriesList": {
	          "shape": "S6"
	        },
	        "Enabled": {
	          "type": "boolean"
	        }
	      },
	      "wrapper": true
	    },
	    "S5": {
	      "type": "list",
	      "member": {
	        "locationName": "SourceId"
	      }
	    },
	    "S6": {
	      "type": "list",
	      "member": {
	        "locationName": "EventCategory"
	      }
	    },
	    "S9": {
	      "type": "list",
	      "member": {
	        "locationName": "Tag",
	        "type": "structure",
	        "members": {
	          "Key": {},
	          "Value": {}
	        }
	      }
	    },
	    "Sd": {
	      "type": "structure",
	      "members": {
	        "OwnerId": {},
	        "DBSecurityGroupName": {},
	        "DBSecurityGroupDescription": {},
	        "VpcId": {},
	        "EC2SecurityGroups": {
	          "type": "list",
	          "member": {
	            "locationName": "EC2SecurityGroup",
	            "type": "structure",
	            "members": {
	              "Status": {},
	              "EC2SecurityGroupName": {},
	              "EC2SecurityGroupId": {},
	              "EC2SecurityGroupOwnerId": {}
	            }
	          }
	        },
	        "IPRanges": {
	          "type": "list",
	          "member": {
	            "locationName": "IPRange",
	            "type": "structure",
	            "members": {
	              "Status": {},
	              "CIDRIP": {}
	            }
	          }
	        }
	      },
	      "wrapper": true
	    },
	    "Sk": {
	      "type": "structure",
	      "members": {
	        "DBSnapshotIdentifier": {},
	        "DBInstanceIdentifier": {},
	        "SnapshotCreateTime": {
	          "type": "timestamp"
	        },
	        "Engine": {},
	        "AllocatedStorage": {
	          "type": "integer"
	        },
	        "Status": {},
	        "Port": {
	          "type": "integer"
	        },
	        "AvailabilityZone": {},
	        "VpcId": {},
	        "InstanceCreateTime": {
	          "type": "timestamp"
	        },
	        "MasterUsername": {},
	        "EngineVersion": {},
	        "LicenseModel": {},
	        "SnapshotType": {},
	        "Iops": {
	          "type": "integer"
	        },
	        "OptionGroupName": {},
	        "PercentProgress": {
	          "type": "integer"
	        },
	        "SourceRegion": {}
	      },
	      "wrapper": true
	    },
	    "Sp": {
	      "type": "list",
	      "member": {
	        "locationName": "DBSecurityGroupName"
	      }
	    },
	    "Sq": {
	      "type": "list",
	      "member": {
	        "locationName": "VpcSecurityGroupId"
	      }
	    },
	    "St": {
	      "type": "structure",
	      "members": {
	        "DBInstanceIdentifier": {},
	        "DBInstanceClass": {},
	        "Engine": {},
	        "DBInstanceStatus": {},
	        "MasterUsername": {},
	        "DBName": {},
	        "Endpoint": {
	          "type": "structure",
	          "members": {
	            "Address": {},
	            "Port": {
	              "type": "integer"
	            }
	          }
	        },
	        "AllocatedStorage": {
	          "type": "integer"
	        },
	        "InstanceCreateTime": {
	          "type": "timestamp"
	        },
	        "PreferredBackupWindow": {},
	        "BackupRetentionPeriod": {
	          "type": "integer"
	        },
	        "DBSecurityGroups": {
	          "shape": "Sv"
	        },
	        "VpcSecurityGroups": {
	          "shape": "Sx"
	        },
	        "DBParameterGroups": {
	          "type": "list",
	          "member": {
	            "locationName": "DBParameterGroup",
	            "type": "structure",
	            "members": {
	              "DBParameterGroupName": {},
	              "ParameterApplyStatus": {}
	            }
	          }
	        },
	        "AvailabilityZone": {},
	        "DBSubnetGroup": {
	          "shape": "S11"
	        },
	        "PreferredMaintenanceWindow": {},
	        "PendingModifiedValues": {
	          "type": "structure",
	          "members": {
	            "DBInstanceClass": {},
	            "AllocatedStorage": {
	              "type": "integer"
	            },
	            "MasterUserPassword": {},
	            "Port": {
	              "type": "integer"
	            },
	            "BackupRetentionPeriod": {
	              "type": "integer"
	            },
	            "MultiAZ": {
	              "type": "boolean"
	            },
	            "EngineVersion": {},
	            "Iops": {
	              "type": "integer"
	            },
	            "DBInstanceIdentifier": {}
	          }
	        },
	        "LatestRestorableTime": {
	          "type": "timestamp"
	        },
	        "MultiAZ": {
	          "type": "boolean"
	        },
	        "EngineVersion": {},
	        "AutoMinorVersionUpgrade": {
	          "type": "boolean"
	        },
	        "ReadReplicaSourceDBInstanceIdentifier": {},
	        "ReadReplicaDBInstanceIdentifiers": {
	          "type": "list",
	          "member": {
	            "locationName": "ReadReplicaDBInstanceIdentifier"
	          }
	        },
	        "LicenseModel": {},
	        "Iops": {
	          "type": "integer"
	        },
	        "OptionGroupMemberships": {
	          "type": "list",
	          "member": {
	            "locationName": "OptionGroupMembership",
	            "type": "structure",
	            "members": {
	              "OptionGroupName": {},
	              "Status": {}
	            }
	          }
	        },
	        "CharacterSetName": {},
	        "SecondaryAvailabilityZone": {},
	        "PubliclyAccessible": {
	          "type": "boolean"
	        },
	        "StatusInfos": {
	          "type": "list",
	          "member": {
	            "locationName": "DBInstanceStatusInfo",
	            "type": "structure",
	            "members": {
	              "StatusType": {},
	              "Normal": {
	                "type": "boolean"
	              },
	              "Status": {},
	              "Message": {}
	            }
	          }
	        }
	      },
	      "wrapper": true
	    },
	    "Sv": {
	      "type": "list",
	      "member": {
	        "locationName": "DBSecurityGroup",
	        "type": "structure",
	        "members": {
	          "DBSecurityGroupName": {},
	          "Status": {}
	        }
	      }
	    },
	    "Sx": {
	      "type": "list",
	      "member": {
	        "locationName": "VpcSecurityGroupMembership",
	        "type": "structure",
	        "members": {
	          "VpcSecurityGroupId": {},
	          "Status": {}
	        }
	      }
	    },
	    "S11": {
	      "type": "structure",
	      "members": {
	        "DBSubnetGroupName": {},
	        "DBSubnetGroupDescription": {},
	        "VpcId": {},
	        "SubnetGroupStatus": {},
	        "Subnets": {
	          "type": "list",
	          "member": {
	            "locationName": "Subnet",
	            "type": "structure",
	            "members": {
	              "SubnetIdentifier": {},
	              "SubnetAvailabilityZone": {
	                "shape": "S14"
	              },
	              "SubnetStatus": {}
	            }
	          }
	        }
	      },
	      "wrapper": true
	    },
	    "S14": {
	      "type": "structure",
	      "members": {
	        "Name": {},
	        "ProvisionedIopsCapable": {
	          "type": "boolean"
	        }
	      },
	      "wrapper": true
	    },
	    "S1f": {
	      "type": "structure",
	      "members": {
	        "DBParameterGroupName": {},
	        "DBParameterGroupFamily": {},
	        "Description": {}
	      },
	      "wrapper": true
	    },
	    "S1l": {
	      "type": "list",
	      "member": {
	        "locationName": "SubnetIdentifier"
	      }
	    },
	    "S1r": {
	      "type": "structure",
	      "members": {
	        "OptionGroupName": {},
	        "OptionGroupDescription": {},
	        "EngineName": {},
	        "MajorEngineVersion": {},
	        "Options": {
	          "type": "list",
	          "member": {
	            "locationName": "Option",
	            "type": "structure",
	            "members": {
	              "OptionName": {},
	              "OptionDescription": {},
	              "Persistent": {
	                "type": "boolean"
	              },
	              "Permanent": {
	                "type": "boolean"
	              },
	              "Port": {
	                "type": "integer"
	              },
	              "OptionSettings": {
	                "type": "list",
	                "member": {
	                  "shape": "S1v",
	                  "locationName": "OptionSetting"
	                }
	              },
	              "DBSecurityGroupMemberships": {
	                "shape": "Sv"
	              },
	              "VpcSecurityGroupMemberships": {
	                "shape": "Sx"
	              }
	            }
	          }
	        },
	        "AllowsVpcAndNonVpcInstanceMemberships": {
	          "type": "boolean"
	        },
	        "VpcId": {}
	      },
	      "wrapper": true
	    },
	    "S1v": {
	      "type": "structure",
	      "members": {
	        "Name": {},
	        "Value": {},
	        "DefaultValue": {},
	        "Description": {},
	        "ApplyType": {},
	        "DataType": {},
	        "AllowedValues": {},
	        "IsModifiable": {
	          "type": "boolean"
	        },
	        "IsCollection": {
	          "type": "boolean"
	        }
	      }
	    },
	    "S27": {
	      "type": "list",
	      "member": {
	        "locationName": "Filter",
	        "type": "structure",
	        "required": [
	          "Name",
	          "Values"
	        ],
	        "members": {
	          "Name": {},
	          "Values": {
	            "type": "list",
	            "member": {
	              "locationName": "Value"
	            }
	          }
	        }
	      }
	    },
	    "S2d": {
	      "type": "structure",
	      "members": {
	        "CharacterSetName": {},
	        "CharacterSetDescription": {}
	      }
	    },
	    "S2s": {
	      "type": "list",
	      "member": {
	        "locationName": "Parameter",
	        "type": "structure",
	        "members": {
	          "ParameterName": {},
	          "ParameterValue": {},
	          "Description": {},
	          "Source": {},
	          "ApplyType": {},
	          "DataType": {},
	          "AllowedValues": {},
	          "IsModifiable": {
	            "type": "boolean"
	          },
	          "MinimumEngineVersion": {},
	          "ApplyMethod": {}
	        }
	      }
	    },
	    "S41": {
	      "type": "structure",
	      "members": {
	        "ReservedDBInstanceId": {},
	        "ReservedDBInstancesOfferingId": {},
	        "DBInstanceClass": {},
	        "StartTime": {
	          "type": "timestamp"
	        },
	        "Duration": {
	          "type": "integer"
	        },
	        "FixedPrice": {
	          "type": "double"
	        },
	        "UsagePrice": {
	          "type": "double"
	        },
	        "CurrencyCode": {},
	        "DBInstanceCount": {
	          "type": "integer"
	        },
	        "ProductDescription": {},
	        "OfferingType": {},
	        "MultiAZ": {
	          "type": "boolean"
	        },
	        "State": {},
	        "RecurringCharges": {
	          "shape": "S43"
	        }
	      },
	      "wrapper": true
	    },
	    "S43": {
	      "type": "list",
	      "member": {
	        "locationName": "RecurringCharge",
	        "type": "structure",
	        "members": {
	          "RecurringChargeAmount": {
	            "type": "double"
	          },
	          "RecurringChargeFrequency": {}
	        },
	        "wrapper": true
	      }
	    },
	    "S4g": {
	      "type": "structure",
	      "members": {
	        "DBParameterGroupName": {}
	      }
	    }
	  }
	}
	},{}],104:[function(require,module,exports){
	arguments[4][102][0].apply(exports,arguments)
	},{"dup":102}],105:[function(require,module,exports){
	module.exports={
	  "version": 2,
	  "waiters": {
	    "DBInstanceAvailable": {
	      "delay": 30,
	      "operation": "DescribeDBInstances",
	      "maxAttempts": 60,
	      "acceptors": [
	        {
	          "expected": "available",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "DBInstances[].DBInstanceStatus"
	        },
	        {
	          "expected": "deleted",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "DBInstances[].DBInstanceStatus"
	        },
	        {
	          "expected": "deleting",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "DBInstances[].DBInstanceStatus"
	        },
	        {
	          "expected": "failed",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "DBInstances[].DBInstanceStatus"
	        },
	        {
	          "expected": "incompatible-restore",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "DBInstances[].DBInstanceStatus"
	        },
	        {
	          "expected": "incompatible-parameters",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "DBInstances[].DBInstanceStatus"
	        },
	        {
	          "expected": "incompatible-parameters",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "DBInstances[].DBInstanceStatus"
	        },
	        {
	          "expected": "incompatible-restore",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "DBInstances[].DBInstanceStatus"
	        }
	      ]
	    },
	    "DBInstanceDeleted": {
	      "delay": 30,
	      "operation": "DescribeDBInstances",
	      "maxAttempts": 60,
	      "acceptors": [
	        {
	          "expected": "deleted",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "DBInstances[].DBInstanceStatus"
	        },
	        {
	          "expected": "creating",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "DBInstances[].DBInstanceStatus"
	        },
	        {
	          "expected": "modifying",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "DBInstances[].DBInstanceStatus"
	        },
	        {
	          "expected": "rebooting",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "DBInstances[].DBInstanceStatus"
	        },
	        {
	          "expected": "resetting-master-credentials",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "DBInstances[].DBInstanceStatus"
	        }
	      ]
	    }
	  }
	}
	
	},{}],106:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2014-10-31",
	    "endpointPrefix": "rds",
	    "protocol": "query",
	    "serviceAbbreviation": "Amazon RDS",
	    "serviceFullName": "Amazon Relational Database Service",
	    "signatureVersion": "v4",
	    "uid": "rds-2014-10-31",
	    "xmlNamespace": "http://rds.amazonaws.com/doc/2014-10-31/"
	  },
	  "operations": {
	    "AddRoleToDBCluster": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBClusterIdentifier",
	          "RoleArn"
	        ],
	        "members": {
	          "DBClusterIdentifier": {},
	          "RoleArn": {}
	        }
	      }
	    },
	    "AddSourceIdentifierToSubscription": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubscriptionName",
	          "SourceIdentifier"
	        ],
	        "members": {
	          "SubscriptionName": {},
	          "SourceIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "AddSourceIdentifierToSubscriptionResult",
	        "type": "structure",
	        "members": {
	          "EventSubscription": {
	            "shape": "S5"
	          }
	        }
	      }
	    },
	    "AddTagsToResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceName",
	          "Tags"
	        ],
	        "members": {
	          "ResourceName": {},
	          "Tags": {
	            "shape": "Sa"
	          }
	        }
	      }
	    },
	    "ApplyPendingMaintenanceAction": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceIdentifier",
	          "ApplyAction",
	          "OptInType"
	        ],
	        "members": {
	          "ResourceIdentifier": {},
	          "ApplyAction": {},
	          "OptInType": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ApplyPendingMaintenanceActionResult",
	        "type": "structure",
	        "members": {
	          "ResourcePendingMaintenanceActions": {
	            "shape": "Se"
	          }
	        }
	      }
	    },
	    "AuthorizeDBSecurityGroupIngress": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSecurityGroupName"
	        ],
	        "members": {
	          "DBSecurityGroupName": {},
	          "CIDRIP": {},
	          "EC2SecurityGroupName": {},
	          "EC2SecurityGroupId": {},
	          "EC2SecurityGroupOwnerId": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "AuthorizeDBSecurityGroupIngressResult",
	        "type": "structure",
	        "members": {
	          "DBSecurityGroup": {
	            "shape": "Sk"
	          }
	        }
	      }
	    },
	    "CopyDBClusterParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SourceDBClusterParameterGroupIdentifier",
	          "TargetDBClusterParameterGroupIdentifier",
	          "TargetDBClusterParameterGroupDescription"
	        ],
	        "members": {
	          "SourceDBClusterParameterGroupIdentifier": {},
	          "TargetDBClusterParameterGroupIdentifier": {},
	          "TargetDBClusterParameterGroupDescription": {},
	          "Tags": {
	            "shape": "Sa"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CopyDBClusterParameterGroupResult",
	        "type": "structure",
	        "members": {
	          "DBClusterParameterGroup": {
	            "shape": "Sr"
	          }
	        }
	      }
	    },
	    "CopyDBClusterSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SourceDBClusterSnapshotIdentifier",
	          "TargetDBClusterSnapshotIdentifier"
	        ],
	        "members": {
	          "SourceDBClusterSnapshotIdentifier": {},
	          "TargetDBClusterSnapshotIdentifier": {},
	          "Tags": {
	            "shape": "Sa"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CopyDBClusterSnapshotResult",
	        "type": "structure",
	        "members": {
	          "DBClusterSnapshot": {
	            "shape": "Su"
	          }
	        }
	      }
	    },
	    "CopyDBParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SourceDBParameterGroupIdentifier",
	          "TargetDBParameterGroupIdentifier",
	          "TargetDBParameterGroupDescription"
	        ],
	        "members": {
	          "SourceDBParameterGroupIdentifier": {},
	          "TargetDBParameterGroupIdentifier": {},
	          "TargetDBParameterGroupDescription": {},
	          "Tags": {
	            "shape": "Sa"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CopyDBParameterGroupResult",
	        "type": "structure",
	        "members": {
	          "DBParameterGroup": {
	            "shape": "Sz"
	          }
	        }
	      }
	    },
	    "CopyDBSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SourceDBSnapshotIdentifier",
	          "TargetDBSnapshotIdentifier"
	        ],
	        "members": {
	          "SourceDBSnapshotIdentifier": {},
	          "TargetDBSnapshotIdentifier": {},
	          "KmsKeyId": {},
	          "Tags": {
	            "shape": "Sa"
	          },
	          "CopyTags": {
	            "type": "boolean"
	          },
	          "PreSignedUrl": {},
	          "SourceRegion": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CopyDBSnapshotResult",
	        "type": "structure",
	        "members": {
	          "DBSnapshot": {
	            "shape": "S13"
	          }
	        }
	      }
	    },
	    "CopyOptionGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SourceOptionGroupIdentifier",
	          "TargetOptionGroupIdentifier",
	          "TargetOptionGroupDescription"
	        ],
	        "members": {
	          "SourceOptionGroupIdentifier": {},
	          "TargetOptionGroupIdentifier": {},
	          "TargetOptionGroupDescription": {},
	          "Tags": {
	            "shape": "Sa"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CopyOptionGroupResult",
	        "type": "structure",
	        "members": {
	          "OptionGroup": {
	            "shape": "S17"
	          }
	        }
	      }
	    },
	    "CreateDBCluster": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBClusterIdentifier",
	          "Engine"
	        ],
	        "members": {
	          "AvailabilityZones": {
	            "shape": "Sv"
	          },
	          "BackupRetentionPeriod": {
	            "type": "integer"
	          },
	          "CharacterSetName": {},
	          "DatabaseName": {},
	          "DBClusterIdentifier": {},
	          "DBClusterParameterGroupName": {},
	          "VpcSecurityGroupIds": {
	            "shape": "S1h"
	          },
	          "DBSubnetGroupName": {},
	          "Engine": {},
	          "EngineVersion": {},
	          "Port": {
	            "type": "integer"
	          },
	          "MasterUsername": {},
	          "MasterUserPassword": {},
	          "OptionGroupName": {},
	          "PreferredBackupWindow": {},
	          "PreferredMaintenanceWindow": {},
	          "ReplicationSourceIdentifier": {},
	          "Tags": {
	            "shape": "Sa"
	          },
	          "StorageEncrypted": {
	            "type": "boolean"
	          },
	          "KmsKeyId": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateDBClusterResult",
	        "type": "structure",
	        "members": {
	          "DBCluster": {
	            "shape": "S1j"
	          }
	        }
	      }
	    },
	    "CreateDBClusterParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBClusterParameterGroupName",
	          "DBParameterGroupFamily",
	          "Description"
	        ],
	        "members": {
	          "DBClusterParameterGroupName": {},
	          "DBParameterGroupFamily": {},
	          "Description": {},
	          "Tags": {
	            "shape": "Sa"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateDBClusterParameterGroupResult",
	        "type": "structure",
	        "members": {
	          "DBClusterParameterGroup": {
	            "shape": "Sr"
	          }
	        }
	      }
	    },
	    "CreateDBClusterSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBClusterSnapshotIdentifier",
	          "DBClusterIdentifier"
	        ],
	        "members": {
	          "DBClusterSnapshotIdentifier": {},
	          "DBClusterIdentifier": {},
	          "Tags": {
	            "shape": "Sa"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateDBClusterSnapshotResult",
	        "type": "structure",
	        "members": {
	          "DBClusterSnapshot": {
	            "shape": "Su"
	          }
	        }
	      }
	    },
	    "CreateDBInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier",
	          "DBInstanceClass",
	          "Engine"
	        ],
	        "members": {
	          "DBName": {},
	          "DBInstanceIdentifier": {},
	          "AllocatedStorage": {
	            "type": "integer"
	          },
	          "DBInstanceClass": {},
	          "Engine": {},
	          "MasterUsername": {},
	          "MasterUserPassword": {},
	          "DBSecurityGroups": {
	            "shape": "S1w"
	          },
	          "VpcSecurityGroupIds": {
	            "shape": "S1h"
	          },
	          "AvailabilityZone": {},
	          "DBSubnetGroupName": {},
	          "PreferredMaintenanceWindow": {},
	          "DBParameterGroupName": {},
	          "BackupRetentionPeriod": {
	            "type": "integer"
	          },
	          "PreferredBackupWindow": {},
	          "Port": {
	            "type": "integer"
	          },
	          "MultiAZ": {
	            "type": "boolean"
	          },
	          "EngineVersion": {},
	          "AutoMinorVersionUpgrade": {
	            "type": "boolean"
	          },
	          "LicenseModel": {},
	          "Iops": {
	            "type": "integer"
	          },
	          "OptionGroupName": {},
	          "CharacterSetName": {},
	          "PubliclyAccessible": {
	            "type": "boolean"
	          },
	          "Tags": {
	            "shape": "Sa"
	          },
	          "DBClusterIdentifier": {},
	          "StorageType": {},
	          "TdeCredentialArn": {},
	          "TdeCredentialPassword": {},
	          "StorageEncrypted": {
	            "type": "boolean"
	          },
	          "KmsKeyId": {},
	          "Domain": {},
	          "CopyTagsToSnapshot": {
	            "type": "boolean"
	          },
	          "MonitoringInterval": {
	            "type": "integer"
	          },
	          "MonitoringRoleArn": {},
	          "DomainIAMRoleName": {},
	          "PromotionTier": {
	            "type": "integer"
	          },
	          "Timezone": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateDBInstanceResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "S1y"
	          }
	        }
	      }
	    },
	    "CreateDBInstanceReadReplica": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier",
	          "SourceDBInstanceIdentifier"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "SourceDBInstanceIdentifier": {},
	          "DBInstanceClass": {},
	          "AvailabilityZone": {},
	          "Port": {
	            "type": "integer"
	          },
	          "AutoMinorVersionUpgrade": {
	            "type": "boolean"
	          },
	          "Iops": {
	            "type": "integer"
	          },
	          "OptionGroupName": {},
	          "PubliclyAccessible": {
	            "type": "boolean"
	          },
	          "Tags": {
	            "shape": "Sa"
	          },
	          "DBSubnetGroupName": {},
	          "StorageType": {},
	          "CopyTagsToSnapshot": {
	            "type": "boolean"
	          },
	          "MonitoringInterval": {
	            "type": "integer"
	          },
	          "MonitoringRoleArn": {},
	          "KmsKeyId": {},
	          "PreSignedUrl": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateDBInstanceReadReplicaResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "S1y"
	          }
	        }
	      }
	    },
	    "CreateDBParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBParameterGroupName",
	          "DBParameterGroupFamily",
	          "Description"
	        ],
	        "members": {
	          "DBParameterGroupName": {},
	          "DBParameterGroupFamily": {},
	          "Description": {},
	          "Tags": {
	            "shape": "Sa"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateDBParameterGroupResult",
	        "type": "structure",
	        "members": {
	          "DBParameterGroup": {
	            "shape": "Sz"
	          }
	        }
	      }
	    },
	    "CreateDBSecurityGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSecurityGroupName",
	          "DBSecurityGroupDescription"
	        ],
	        "members": {
	          "DBSecurityGroupName": {},
	          "DBSecurityGroupDescription": {},
	          "Tags": {
	            "shape": "Sa"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateDBSecurityGroupResult",
	        "type": "structure",
	        "members": {
	          "DBSecurityGroup": {
	            "shape": "Sk"
	          }
	        }
	      }
	    },
	    "CreateDBSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSnapshotIdentifier",
	          "DBInstanceIdentifier"
	        ],
	        "members": {
	          "DBSnapshotIdentifier": {},
	          "DBInstanceIdentifier": {},
	          "Tags": {
	            "shape": "Sa"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateDBSnapshotResult",
	        "type": "structure",
	        "members": {
	          "DBSnapshot": {
	            "shape": "S13"
	          }
	        }
	      }
	    },
	    "CreateDBSubnetGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSubnetGroupName",
	          "DBSubnetGroupDescription",
	          "SubnetIds"
	        ],
	        "members": {
	          "DBSubnetGroupName": {},
	          "DBSubnetGroupDescription": {},
	          "SubnetIds": {
	            "shape": "S2o"
	          },
	          "Tags": {
	            "shape": "Sa"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateDBSubnetGroupResult",
	        "type": "structure",
	        "members": {
	          "DBSubnetGroup": {
	            "shape": "S22"
	          }
	        }
	      }
	    },
	    "CreateEventSubscription": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubscriptionName",
	          "SnsTopicArn"
	        ],
	        "members": {
	          "SubscriptionName": {},
	          "SnsTopicArn": {},
	          "SourceType": {},
	          "EventCategories": {
	            "shape": "S7"
	          },
	          "SourceIds": {
	            "shape": "S6"
	          },
	          "Enabled": {
	            "type": "boolean"
	          },
	          "Tags": {
	            "shape": "Sa"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateEventSubscriptionResult",
	        "type": "structure",
	        "members": {
	          "EventSubscription": {
	            "shape": "S5"
	          }
	        }
	      }
	    },
	    "CreateOptionGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "OptionGroupName",
	          "EngineName",
	          "MajorEngineVersion",
	          "OptionGroupDescription"
	        ],
	        "members": {
	          "OptionGroupName": {},
	          "EngineName": {},
	          "MajorEngineVersion": {},
	          "OptionGroupDescription": {},
	          "Tags": {
	            "shape": "Sa"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateOptionGroupResult",
	        "type": "structure",
	        "members": {
	          "OptionGroup": {
	            "shape": "S17"
	          }
	        }
	      }
	    },
	    "DeleteDBCluster": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBClusterIdentifier"
	        ],
	        "members": {
	          "DBClusterIdentifier": {},
	          "SkipFinalSnapshot": {
	            "type": "boolean"
	          },
	          "FinalDBSnapshotIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteDBClusterResult",
	        "type": "structure",
	        "members": {
	          "DBCluster": {
	            "shape": "S1j"
	          }
	        }
	      }
	    },
	    "DeleteDBClusterParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBClusterParameterGroupName"
	        ],
	        "members": {
	          "DBClusterParameterGroupName": {}
	        }
	      }
	    },
	    "DeleteDBClusterSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBClusterSnapshotIdentifier"
	        ],
	        "members": {
	          "DBClusterSnapshotIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteDBClusterSnapshotResult",
	        "type": "structure",
	        "members": {
	          "DBClusterSnapshot": {
	            "shape": "Su"
	          }
	        }
	      }
	    },
	    "DeleteDBInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "SkipFinalSnapshot": {
	            "type": "boolean"
	          },
	          "FinalDBSnapshotIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteDBInstanceResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "S1y"
	          }
	        }
	      }
	    },
	    "DeleteDBParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBParameterGroupName"
	        ],
	        "members": {
	          "DBParameterGroupName": {}
	        }
	      }
	    },
	    "DeleteDBSecurityGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSecurityGroupName"
	        ],
	        "members": {
	          "DBSecurityGroupName": {}
	        }
	      }
	    },
	    "DeleteDBSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSnapshotIdentifier"
	        ],
	        "members": {
	          "DBSnapshotIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteDBSnapshotResult",
	        "type": "structure",
	        "members": {
	          "DBSnapshot": {
	            "shape": "S13"
	          }
	        }
	      }
	    },
	    "DeleteDBSubnetGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSubnetGroupName"
	        ],
	        "members": {
	          "DBSubnetGroupName": {}
	        }
	      }
	    },
	    "DeleteEventSubscription": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubscriptionName"
	        ],
	        "members": {
	          "SubscriptionName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteEventSubscriptionResult",
	        "type": "structure",
	        "members": {
	          "EventSubscription": {
	            "shape": "S5"
	          }
	        }
	      }
	    },
	    "DeleteOptionGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "OptionGroupName"
	        ],
	        "members": {
	          "OptionGroupName": {}
	        }
	      }
	    },
	    "DescribeAccountAttributes": {
	      "input": {
	        "type": "structure",
	        "members": {}
	      },
	      "output": {
	        "resultWrapper": "DescribeAccountAttributesResult",
	        "type": "structure",
	        "members": {
	          "AccountQuotas": {
	            "type": "list",
	            "member": {
	              "locationName": "AccountQuota",
	              "type": "structure",
	              "members": {
	                "AccountQuotaName": {},
	                "Used": {
	                  "type": "long"
	                },
	                "Max": {
	                  "type": "long"
	                }
	              },
	              "wrapper": true
	            }
	          }
	        }
	      }
	    },
	    "DescribeCertificates": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "CertificateIdentifier": {},
	          "Filters": {
	            "shape": "S3f"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeCertificatesResult",
	        "type": "structure",
	        "members": {
	          "Certificates": {
	            "type": "list",
	            "member": {
	              "locationName": "Certificate",
	              "type": "structure",
	              "members": {
	                "CertificateIdentifier": {},
	                "CertificateType": {},
	                "Thumbprint": {},
	                "ValidFrom": {
	                  "type": "timestamp"
	                },
	                "ValidTill": {
	                  "type": "timestamp"
	                },
	                "CertificateArn": {}
	              },
	              "wrapper": true
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DescribeDBClusterParameterGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DBClusterParameterGroupName": {},
	          "Filters": {
	            "shape": "S3f"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBClusterParameterGroupsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "DBClusterParameterGroups": {
	            "type": "list",
	            "member": {
	              "shape": "Sr",
	              "locationName": "DBClusterParameterGroup"
	            }
	          }
	        }
	      }
	    },
	    "DescribeDBClusterParameters": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBClusterParameterGroupName"
	        ],
	        "members": {
	          "DBClusterParameterGroupName": {},
	          "Source": {},
	          "Filters": {
	            "shape": "S3f"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBClusterParametersResult",
	        "type": "structure",
	        "members": {
	          "Parameters": {
	            "shape": "S3q"
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DescribeDBClusterSnapshotAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBClusterSnapshotIdentifier"
	        ],
	        "members": {
	          "DBClusterSnapshotIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBClusterSnapshotAttributesResult",
	        "type": "structure",
	        "members": {
	          "DBClusterSnapshotAttributesResult": {
	            "shape": "S3v"
	          }
	        }
	      }
	    },
	    "DescribeDBClusterSnapshots": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DBClusterIdentifier": {},
	          "DBClusterSnapshotIdentifier": {},
	          "SnapshotType": {},
	          "Filters": {
	            "shape": "S3f"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {},
	          "IncludeShared": {
	            "type": "boolean"
	          },
	          "IncludePublic": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBClusterSnapshotsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "DBClusterSnapshots": {
	            "type": "list",
	            "member": {
	              "shape": "Su",
	              "locationName": "DBClusterSnapshot"
	            }
	          }
	        }
	      }
	    },
	    "DescribeDBClusters": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DBClusterIdentifier": {},
	          "Filters": {
	            "shape": "S3f"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBClustersResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "DBClusters": {
	            "type": "list",
	            "member": {
	              "shape": "S1j",
	              "locationName": "DBCluster"
	            }
	          }
	        }
	      }
	    },
	    "DescribeDBEngineVersions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Engine": {},
	          "EngineVersion": {},
	          "DBParameterGroupFamily": {},
	          "Filters": {
	            "shape": "S3f"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {},
	          "DefaultOnly": {
	            "type": "boolean"
	          },
	          "ListSupportedCharacterSets": {
	            "type": "boolean"
	          },
	          "ListSupportedTimezones": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBEngineVersionsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "DBEngineVersions": {
	            "type": "list",
	            "member": {
	              "locationName": "DBEngineVersion",
	              "type": "structure",
	              "members": {
	                "Engine": {},
	                "EngineVersion": {},
	                "DBParameterGroupFamily": {},
	                "DBEngineDescription": {},
	                "DBEngineVersionDescription": {},
	                "DefaultCharacterSet": {
	                  "shape": "S49"
	                },
	                "SupportedCharacterSets": {
	                  "type": "list",
	                  "member": {
	                    "shape": "S49",
	                    "locationName": "CharacterSet"
	                  }
	                },
	                "ValidUpgradeTarget": {
	                  "type": "list",
	                  "member": {
	                    "locationName": "UpgradeTarget",
	                    "type": "structure",
	                    "members": {
	                      "Engine": {},
	                      "EngineVersion": {},
	                      "Description": {},
	                      "AutoUpgrade": {
	                        "type": "boolean"
	                      },
	                      "IsMajorVersionUpgrade": {
	                        "type": "boolean"
	                      }
	                    }
	                  }
	                },
	                "SupportedTimezones": {
	                  "type": "list",
	                  "member": {
	                    "locationName": "Timezone",
	                    "type": "structure",
	                    "members": {
	                      "TimezoneName": {}
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeDBInstances": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DBInstanceIdentifier": {},
	          "Filters": {
	            "shape": "S3f"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBInstancesResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "DBInstances": {
	            "type": "list",
	            "member": {
	              "shape": "S1y",
	              "locationName": "DBInstance"
	            }
	          }
	        }
	      }
	    },
	    "DescribeDBLogFiles": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "FilenameContains": {},
	          "FileLastWritten": {
	            "type": "long"
	          },
	          "FileSize": {
	            "type": "long"
	          },
	          "Filters": {
	            "shape": "S3f"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBLogFilesResult",
	        "type": "structure",
	        "members": {
	          "DescribeDBLogFiles": {
	            "type": "list",
	            "member": {
	              "locationName": "DescribeDBLogFilesDetails",
	              "type": "structure",
	              "members": {
	                "LogFileName": {},
	                "LastWritten": {
	                  "type": "long"
	                },
	                "Size": {
	                  "type": "long"
	                }
	              }
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DescribeDBParameterGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DBParameterGroupName": {},
	          "Filters": {
	            "shape": "S3f"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBParameterGroupsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "DBParameterGroups": {
	            "type": "list",
	            "member": {
	              "shape": "Sz",
	              "locationName": "DBParameterGroup"
	            }
	          }
	        }
	      }
	    },
	    "DescribeDBParameters": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBParameterGroupName"
	        ],
	        "members": {
	          "DBParameterGroupName": {},
	          "Source": {},
	          "Filters": {
	            "shape": "S3f"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBParametersResult",
	        "type": "structure",
	        "members": {
	          "Parameters": {
	            "shape": "S3q"
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DescribeDBSecurityGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DBSecurityGroupName": {},
	          "Filters": {
	            "shape": "S3f"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBSecurityGroupsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "DBSecurityGroups": {
	            "type": "list",
	            "member": {
	              "shape": "Sk",
	              "locationName": "DBSecurityGroup"
	            }
	          }
	        }
	      }
	    },
	    "DescribeDBSnapshotAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSnapshotIdentifier"
	        ],
	        "members": {
	          "DBSnapshotIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBSnapshotAttributesResult",
	        "type": "structure",
	        "members": {
	          "DBSnapshotAttributesResult": {
	            "shape": "S4w"
	          }
	        }
	      }
	    },
	    "DescribeDBSnapshots": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DBInstanceIdentifier": {},
	          "DBSnapshotIdentifier": {},
	          "SnapshotType": {},
	          "Filters": {
	            "shape": "S3f"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {},
	          "IncludeShared": {
	            "type": "boolean"
	          },
	          "IncludePublic": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBSnapshotsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "DBSnapshots": {
	            "type": "list",
	            "member": {
	              "shape": "S13",
	              "locationName": "DBSnapshot"
	            }
	          }
	        }
	      }
	    },
	    "DescribeDBSubnetGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DBSubnetGroupName": {},
	          "Filters": {
	            "shape": "S3f"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDBSubnetGroupsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "DBSubnetGroups": {
	            "type": "list",
	            "member": {
	              "shape": "S22",
	              "locationName": "DBSubnetGroup"
	            }
	          }
	        }
	      }
	    },
	    "DescribeEngineDefaultClusterParameters": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBParameterGroupFamily"
	        ],
	        "members": {
	          "DBParameterGroupFamily": {},
	          "Filters": {
	            "shape": "S3f"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeEngineDefaultClusterParametersResult",
	        "type": "structure",
	        "members": {
	          "EngineDefaults": {
	            "shape": "S57"
	          }
	        }
	      }
	    },
	    "DescribeEngineDefaultParameters": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBParameterGroupFamily"
	        ],
	        "members": {
	          "DBParameterGroupFamily": {},
	          "Filters": {
	            "shape": "S3f"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeEngineDefaultParametersResult",
	        "type": "structure",
	        "members": {
	          "EngineDefaults": {
	            "shape": "S57"
	          }
	        }
	      }
	    },
	    "DescribeEventCategories": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "SourceType": {},
	          "Filters": {
	            "shape": "S3f"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeEventCategoriesResult",
	        "type": "structure",
	        "members": {
	          "EventCategoriesMapList": {
	            "type": "list",
	            "member": {
	              "locationName": "EventCategoriesMap",
	              "type": "structure",
	              "members": {
	                "SourceType": {},
	                "EventCategories": {
	                  "shape": "S7"
	                }
	              },
	              "wrapper": true
	            }
	          }
	        }
	      }
	    },
	    "DescribeEventSubscriptions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "SubscriptionName": {},
	          "Filters": {
	            "shape": "S3f"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeEventSubscriptionsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "EventSubscriptionsList": {
	            "type": "list",
	            "member": {
	              "shape": "S5",
	              "locationName": "EventSubscription"
	            }
	          }
	        }
	      }
	    },
	    "DescribeEvents": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "SourceIdentifier": {},
	          "SourceType": {},
	          "StartTime": {
	            "type": "timestamp"
	          },
	          "EndTime": {
	            "type": "timestamp"
	          },
	          "Duration": {
	            "type": "integer"
	          },
	          "EventCategories": {
	            "shape": "S7"
	          },
	          "Filters": {
	            "shape": "S3f"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeEventsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "Events": {
	            "type": "list",
	            "member": {
	              "locationName": "Event",
	              "type": "structure",
	              "members": {
	                "SourceIdentifier": {},
	                "SourceType": {},
	                "Message": {},
	                "EventCategories": {
	                  "shape": "S7"
	                },
	                "Date": {
	                  "type": "timestamp"
	                },
	                "SourceArn": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeOptionGroupOptions": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "EngineName"
	        ],
	        "members": {
	          "EngineName": {},
	          "MajorEngineVersion": {},
	          "Filters": {
	            "shape": "S3f"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeOptionGroupOptionsResult",
	        "type": "structure",
	        "members": {
	          "OptionGroupOptions": {
	            "type": "list",
	            "member": {
	              "locationName": "OptionGroupOption",
	              "type": "structure",
	              "members": {
	                "Name": {},
	                "Description": {},
	                "EngineName": {},
	                "MajorEngineVersion": {},
	                "MinimumRequiredMinorEngineVersion": {},
	                "PortRequired": {
	                  "type": "boolean"
	                },
	                "DefaultPort": {
	                  "type": "integer"
	                },
	                "OptionsDependedOn": {
	                  "type": "list",
	                  "member": {
	                    "locationName": "OptionName"
	                  }
	                },
	                "OptionsConflictsWith": {
	                  "type": "list",
	                  "member": {
	                    "locationName": "OptionConflictName"
	                  }
	                },
	                "Persistent": {
	                  "type": "boolean"
	                },
	                "Permanent": {
	                  "type": "boolean"
	                },
	                "OptionGroupOptionSettings": {
	                  "type": "list",
	                  "member": {
	                    "locationName": "OptionGroupOptionSetting",
	                    "type": "structure",
	                    "members": {
	                      "SettingName": {},
	                      "SettingDescription": {},
	                      "DefaultValue": {},
	                      "ApplyType": {},
	                      "AllowedValues": {},
	                      "IsModifiable": {
	                        "type": "boolean"
	                      }
	                    }
	                  }
	                },
	                "OptionGroupOptionVersions": {
	                  "type": "list",
	                  "member": {
	                    "locationName": "OptionVersion",
	                    "type": "structure",
	                    "members": {
	                      "Version": {},
	                      "IsDefault": {
	                        "type": "boolean"
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DescribeOptionGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "OptionGroupName": {},
	          "Filters": {
	            "shape": "S3f"
	          },
	          "Marker": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "EngineName": {},
	          "MajorEngineVersion": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeOptionGroupsResult",
	        "type": "structure",
	        "members": {
	          "OptionGroupsList": {
	            "type": "list",
	            "member": {
	              "shape": "S17",
	              "locationName": "OptionGroup"
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DescribeOrderableDBInstanceOptions": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Engine"
	        ],
	        "members": {
	          "Engine": {},
	          "EngineVersion": {},
	          "DBInstanceClass": {},
	          "LicenseModel": {},
	          "Vpc": {
	            "type": "boolean"
	          },
	          "Filters": {
	            "shape": "S3f"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeOrderableDBInstanceOptionsResult",
	        "type": "structure",
	        "members": {
	          "OrderableDBInstanceOptions": {
	            "type": "list",
	            "member": {
	              "locationName": "OrderableDBInstanceOption",
	              "type": "structure",
	              "members": {
	                "Engine": {},
	                "EngineVersion": {},
	                "DBInstanceClass": {},
	                "LicenseModel": {},
	                "AvailabilityZones": {
	                  "type": "list",
	                  "member": {
	                    "shape": "S25",
	                    "locationName": "AvailabilityZone"
	                  }
	                },
	                "MultiAZCapable": {
	                  "type": "boolean"
	                },
	                "ReadReplicaCapable": {
	                  "type": "boolean"
	                },
	                "Vpc": {
	                  "type": "boolean"
	                },
	                "SupportsStorageEncryption": {
	                  "type": "boolean"
	                },
	                "StorageType": {},
	                "SupportsIops": {
	                  "type": "boolean"
	                },
	                "SupportsEnhancedMonitoring": {
	                  "type": "boolean"
	                }
	              },
	              "wrapper": true
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DescribePendingMaintenanceActions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ResourceIdentifier": {},
	          "Filters": {
	            "shape": "S3f"
	          },
	          "Marker": {},
	          "MaxRecords": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribePendingMaintenanceActionsResult",
	        "type": "structure",
	        "members": {
	          "PendingMaintenanceActions": {
	            "type": "list",
	            "member": {
	              "shape": "Se",
	              "locationName": "ResourcePendingMaintenanceActions"
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DescribeReservedDBInstances": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ReservedDBInstanceId": {},
	          "ReservedDBInstancesOfferingId": {},
	          "DBInstanceClass": {},
	          "Duration": {},
	          "ProductDescription": {},
	          "OfferingType": {},
	          "MultiAZ": {
	            "type": "boolean"
	          },
	          "Filters": {
	            "shape": "S3f"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeReservedDBInstancesResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "ReservedDBInstances": {
	            "type": "list",
	            "member": {
	              "shape": "S6a",
	              "locationName": "ReservedDBInstance"
	            }
	          }
	        }
	      }
	    },
	    "DescribeReservedDBInstancesOfferings": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ReservedDBInstancesOfferingId": {},
	          "DBInstanceClass": {},
	          "Duration": {},
	          "ProductDescription": {},
	          "OfferingType": {},
	          "MultiAZ": {
	            "type": "boolean"
	          },
	          "Filters": {
	            "shape": "S3f"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeReservedDBInstancesOfferingsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "ReservedDBInstancesOfferings": {
	            "type": "list",
	            "member": {
	              "locationName": "ReservedDBInstancesOffering",
	              "type": "structure",
	              "members": {
	                "ReservedDBInstancesOfferingId": {},
	                "DBInstanceClass": {},
	                "Duration": {
	                  "type": "integer"
	                },
	                "FixedPrice": {
	                  "type": "double"
	                },
	                "UsagePrice": {
	                  "type": "double"
	                },
	                "CurrencyCode": {},
	                "ProductDescription": {},
	                "OfferingType": {},
	                "MultiAZ": {
	                  "type": "boolean"
	                },
	                "RecurringCharges": {
	                  "shape": "S6c"
	                }
	              },
	              "wrapper": true
	            }
	          }
	        }
	      }
	    },
	    "DescribeSourceRegions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "RegionName": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {},
	          "Filters": {
	            "shape": "S3f"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeSourceRegionsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "SourceRegions": {
	            "type": "list",
	            "member": {
	              "locationName": "SourceRegion",
	              "type": "structure",
	              "members": {
	                "RegionName": {},
	                "Endpoint": {},
	                "Status": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "DownloadDBLogFilePortion": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier",
	          "LogFileName"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "LogFileName": {},
	          "Marker": {},
	          "NumberOfLines": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DownloadDBLogFilePortionResult",
	        "type": "structure",
	        "members": {
	          "LogFileData": {},
	          "Marker": {},
	          "AdditionalDataPending": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "FailoverDBCluster": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DBClusterIdentifier": {},
	          "TargetDBInstanceIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "FailoverDBClusterResult",
	        "type": "structure",
	        "members": {
	          "DBCluster": {
	            "shape": "S1j"
	          }
	        }
	      }
	    },
	    "ListTagsForResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceName"
	        ],
	        "members": {
	          "ResourceName": {},
	          "Filters": {
	            "shape": "S3f"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ListTagsForResourceResult",
	        "type": "structure",
	        "members": {
	          "TagList": {
	            "shape": "Sa"
	          }
	        }
	      }
	    },
	    "ModifyDBCluster": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBClusterIdentifier"
	        ],
	        "members": {
	          "DBClusterIdentifier": {},
	          "NewDBClusterIdentifier": {},
	          "ApplyImmediately": {
	            "type": "boolean"
	          },
	          "BackupRetentionPeriod": {
	            "type": "integer"
	          },
	          "DBClusterParameterGroupName": {},
	          "VpcSecurityGroupIds": {
	            "shape": "S1h"
	          },
	          "Port": {
	            "type": "integer"
	          },
	          "MasterUserPassword": {},
	          "OptionGroupName": {},
	          "PreferredBackupWindow": {},
	          "PreferredMaintenanceWindow": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyDBClusterResult",
	        "type": "structure",
	        "members": {
	          "DBCluster": {
	            "shape": "S1j"
	          }
	        }
	      }
	    },
	    "ModifyDBClusterParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBClusterParameterGroupName",
	          "Parameters"
	        ],
	        "members": {
	          "DBClusterParameterGroupName": {},
	          "Parameters": {
	            "shape": "S3q"
	          }
	        }
	      },
	      "output": {
	        "shape": "S6v",
	        "resultWrapper": "ModifyDBClusterParameterGroupResult"
	      }
	    },
	    "ModifyDBClusterSnapshotAttribute": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBClusterSnapshotIdentifier",
	          "AttributeName"
	        ],
	        "members": {
	          "DBClusterSnapshotIdentifier": {},
	          "AttributeName": {},
	          "ValuesToAdd": {
	            "shape": "S3y"
	          },
	          "ValuesToRemove": {
	            "shape": "S3y"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyDBClusterSnapshotAttributeResult",
	        "type": "structure",
	        "members": {
	          "DBClusterSnapshotAttributesResult": {
	            "shape": "S3v"
	          }
	        }
	      }
	    },
	    "ModifyDBInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "AllocatedStorage": {
	            "type": "integer"
	          },
	          "DBInstanceClass": {},
	          "DBSubnetGroupName": {},
	          "DBSecurityGroups": {
	            "shape": "S1w"
	          },
	          "VpcSecurityGroupIds": {
	            "shape": "S1h"
	          },
	          "ApplyImmediately": {
	            "type": "boolean"
	          },
	          "MasterUserPassword": {},
	          "DBParameterGroupName": {},
	          "BackupRetentionPeriod": {
	            "type": "integer"
	          },
	          "PreferredBackupWindow": {},
	          "PreferredMaintenanceWindow": {},
	          "MultiAZ": {
	            "type": "boolean"
	          },
	          "EngineVersion": {},
	          "AllowMajorVersionUpgrade": {
	            "type": "boolean"
	          },
	          "AutoMinorVersionUpgrade": {
	            "type": "boolean"
	          },
	          "LicenseModel": {},
	          "Iops": {
	            "type": "integer"
	          },
	          "OptionGroupName": {},
	          "NewDBInstanceIdentifier": {},
	          "StorageType": {},
	          "TdeCredentialArn": {},
	          "TdeCredentialPassword": {},
	          "CACertificateIdentifier": {},
	          "Domain": {},
	          "CopyTagsToSnapshot": {
	            "type": "boolean"
	          },
	          "MonitoringInterval": {
	            "type": "integer"
	          },
	          "DBPortNumber": {
	            "type": "integer"
	          },
	          "PubliclyAccessible": {
	            "type": "boolean"
	          },
	          "MonitoringRoleArn": {},
	          "DomainIAMRoleName": {},
	          "PromotionTier": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyDBInstanceResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "S1y"
	          }
	        }
	      }
	    },
	    "ModifyDBParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBParameterGroupName",
	          "Parameters"
	        ],
	        "members": {
	          "DBParameterGroupName": {},
	          "Parameters": {
	            "shape": "S3q"
	          }
	        }
	      },
	      "output": {
	        "shape": "S71",
	        "resultWrapper": "ModifyDBParameterGroupResult"
	      }
	    },
	    "ModifyDBSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSnapshotIdentifier"
	        ],
	        "members": {
	          "DBSnapshotIdentifier": {},
	          "EngineVersion": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyDBSnapshotResult",
	        "type": "structure",
	        "members": {
	          "DBSnapshot": {
	            "shape": "S13"
	          }
	        }
	      }
	    },
	    "ModifyDBSnapshotAttribute": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSnapshotIdentifier",
	          "AttributeName"
	        ],
	        "members": {
	          "DBSnapshotIdentifier": {},
	          "AttributeName": {},
	          "ValuesToAdd": {
	            "shape": "S3y"
	          },
	          "ValuesToRemove": {
	            "shape": "S3y"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyDBSnapshotAttributeResult",
	        "type": "structure",
	        "members": {
	          "DBSnapshotAttributesResult": {
	            "shape": "S4w"
	          }
	        }
	      }
	    },
	    "ModifyDBSubnetGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSubnetGroupName",
	          "SubnetIds"
	        ],
	        "members": {
	          "DBSubnetGroupName": {},
	          "DBSubnetGroupDescription": {},
	          "SubnetIds": {
	            "shape": "S2o"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyDBSubnetGroupResult",
	        "type": "structure",
	        "members": {
	          "DBSubnetGroup": {
	            "shape": "S22"
	          }
	        }
	      }
	    },
	    "ModifyEventSubscription": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubscriptionName"
	        ],
	        "members": {
	          "SubscriptionName": {},
	          "SnsTopicArn": {},
	          "SourceType": {},
	          "EventCategories": {
	            "shape": "S7"
	          },
	          "Enabled": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyEventSubscriptionResult",
	        "type": "structure",
	        "members": {
	          "EventSubscription": {
	            "shape": "S5"
	          }
	        }
	      }
	    },
	    "ModifyOptionGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "OptionGroupName"
	        ],
	        "members": {
	          "OptionGroupName": {},
	          "OptionsToInclude": {
	            "type": "list",
	            "member": {
	              "locationName": "OptionConfiguration",
	              "type": "structure",
	              "required": [
	                "OptionName"
	              ],
	              "members": {
	                "OptionName": {},
	                "Port": {
	                  "type": "integer"
	                },
	                "OptionVersion": {},
	                "DBSecurityGroupMemberships": {
	                  "shape": "S1w"
	                },
	                "VpcSecurityGroupMemberships": {
	                  "shape": "S1h"
	                },
	                "OptionSettings": {
	                  "type": "list",
	                  "member": {
	                    "shape": "S1b",
	                    "locationName": "OptionSetting"
	                  }
	                }
	              }
	            }
	          },
	          "OptionsToRemove": {
	            "type": "list",
	            "member": {}
	          },
	          "ApplyImmediately": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyOptionGroupResult",
	        "type": "structure",
	        "members": {
	          "OptionGroup": {
	            "shape": "S17"
	          }
	        }
	      }
	    },
	    "PromoteReadReplica": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "BackupRetentionPeriod": {
	            "type": "integer"
	          },
	          "PreferredBackupWindow": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "PromoteReadReplicaResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "S1y"
	          }
	        }
	      }
	    },
	    "PromoteReadReplicaDBCluster": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBClusterIdentifier"
	        ],
	        "members": {
	          "DBClusterIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "PromoteReadReplicaDBClusterResult",
	        "type": "structure",
	        "members": {
	          "DBCluster": {
	            "shape": "S1j"
	          }
	        }
	      }
	    },
	    "PurchaseReservedDBInstancesOffering": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ReservedDBInstancesOfferingId"
	        ],
	        "members": {
	          "ReservedDBInstancesOfferingId": {},
	          "ReservedDBInstanceId": {},
	          "DBInstanceCount": {
	            "type": "integer"
	          },
	          "Tags": {
	            "shape": "Sa"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "PurchaseReservedDBInstancesOfferingResult",
	        "type": "structure",
	        "members": {
	          "ReservedDBInstance": {
	            "shape": "S6a"
	          }
	        }
	      }
	    },
	    "RebootDBInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "ForceFailover": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "RebootDBInstanceResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "S1y"
	          }
	        }
	      }
	    },
	    "RemoveRoleFromDBCluster": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBClusterIdentifier",
	          "RoleArn"
	        ],
	        "members": {
	          "DBClusterIdentifier": {},
	          "RoleArn": {}
	        }
	      }
	    },
	    "RemoveSourceIdentifierFromSubscription": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubscriptionName",
	          "SourceIdentifier"
	        ],
	        "members": {
	          "SubscriptionName": {},
	          "SourceIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "RemoveSourceIdentifierFromSubscriptionResult",
	        "type": "structure",
	        "members": {
	          "EventSubscription": {
	            "shape": "S5"
	          }
	        }
	      }
	    },
	    "RemoveTagsFromResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceName",
	          "TagKeys"
	        ],
	        "members": {
	          "ResourceName": {},
	          "TagKeys": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      }
	    },
	    "ResetDBClusterParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBClusterParameterGroupName"
	        ],
	        "members": {
	          "DBClusterParameterGroupName": {},
	          "ResetAllParameters": {
	            "type": "boolean"
	          },
	          "Parameters": {
	            "shape": "S3q"
	          }
	        }
	      },
	      "output": {
	        "shape": "S6v",
	        "resultWrapper": "ResetDBClusterParameterGroupResult"
	      }
	    },
	    "ResetDBParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBParameterGroupName"
	        ],
	        "members": {
	          "DBParameterGroupName": {},
	          "ResetAllParameters": {
	            "type": "boolean"
	          },
	          "Parameters": {
	            "shape": "S3q"
	          }
	        }
	      },
	      "output": {
	        "shape": "S71",
	        "resultWrapper": "ResetDBParameterGroupResult"
	      }
	    },
	    "RestoreDBClusterFromS3": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBClusterIdentifier",
	          "Engine",
	          "MasterUsername",
	          "MasterUserPassword",
	          "SourceEngine",
	          "SourceEngineVersion",
	          "S3BucketName",
	          "S3IngestionRoleArn"
	        ],
	        "members": {
	          "AvailabilityZones": {
	            "shape": "Sv"
	          },
	          "BackupRetentionPeriod": {
	            "type": "integer"
	          },
	          "CharacterSetName": {},
	          "DatabaseName": {},
	          "DBClusterIdentifier": {},
	          "DBClusterParameterGroupName": {},
	          "VpcSecurityGroupIds": {
	            "shape": "S1h"
	          },
	          "DBSubnetGroupName": {},
	          "Engine": {},
	          "EngineVersion": {},
	          "Port": {
	            "type": "integer"
	          },
	          "MasterUsername": {},
	          "MasterUserPassword": {},
	          "OptionGroupName": {},
	          "PreferredBackupWindow": {},
	          "PreferredMaintenanceWindow": {},
	          "Tags": {
	            "shape": "Sa"
	          },
	          "StorageEncrypted": {
	            "type": "boolean"
	          },
	          "KmsKeyId": {},
	          "SourceEngine": {},
	          "SourceEngineVersion": {},
	          "S3BucketName": {},
	          "S3Prefix": {},
	          "S3IngestionRoleArn": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "RestoreDBClusterFromS3Result",
	        "type": "structure",
	        "members": {
	          "DBCluster": {
	            "shape": "S1j"
	          }
	        }
	      }
	    },
	    "RestoreDBClusterFromSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBClusterIdentifier",
	          "SnapshotIdentifier",
	          "Engine"
	        ],
	        "members": {
	          "AvailabilityZones": {
	            "shape": "Sv"
	          },
	          "DBClusterIdentifier": {},
	          "SnapshotIdentifier": {},
	          "Engine": {},
	          "EngineVersion": {},
	          "Port": {
	            "type": "integer"
	          },
	          "DBSubnetGroupName": {},
	          "DatabaseName": {},
	          "OptionGroupName": {},
	          "VpcSecurityGroupIds": {
	            "shape": "S1h"
	          },
	          "Tags": {
	            "shape": "Sa"
	          },
	          "KmsKeyId": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "RestoreDBClusterFromSnapshotResult",
	        "type": "structure",
	        "members": {
	          "DBCluster": {
	            "shape": "S1j"
	          }
	        }
	      }
	    },
	    "RestoreDBClusterToPointInTime": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBClusterIdentifier",
	          "SourceDBClusterIdentifier"
	        ],
	        "members": {
	          "DBClusterIdentifier": {},
	          "SourceDBClusterIdentifier": {},
	          "RestoreToTime": {
	            "type": "timestamp"
	          },
	          "UseLatestRestorableTime": {
	            "type": "boolean"
	          },
	          "Port": {
	            "type": "integer"
	          },
	          "DBSubnetGroupName": {},
	          "OptionGroupName": {},
	          "VpcSecurityGroupIds": {
	            "shape": "S1h"
	          },
	          "Tags": {
	            "shape": "Sa"
	          },
	          "KmsKeyId": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "RestoreDBClusterToPointInTimeResult",
	        "type": "structure",
	        "members": {
	          "DBCluster": {
	            "shape": "S1j"
	          }
	        }
	      }
	    },
	    "RestoreDBInstanceFromDBSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBInstanceIdentifier",
	          "DBSnapshotIdentifier"
	        ],
	        "members": {
	          "DBInstanceIdentifier": {},
	          "DBSnapshotIdentifier": {},
	          "DBInstanceClass": {},
	          "Port": {
	            "type": "integer"
	          },
	          "AvailabilityZone": {},
	          "DBSubnetGroupName": {},
	          "MultiAZ": {
	            "type": "boolean"
	          },
	          "PubliclyAccessible": {
	            "type": "boolean"
	          },
	          "AutoMinorVersionUpgrade": {
	            "type": "boolean"
	          },
	          "LicenseModel": {},
	          "DBName": {},
	          "Engine": {},
	          "Iops": {
	            "type": "integer"
	          },
	          "OptionGroupName": {},
	          "Tags": {
	            "shape": "Sa"
	          },
	          "StorageType": {},
	          "TdeCredentialArn": {},
	          "TdeCredentialPassword": {},
	          "Domain": {},
	          "CopyTagsToSnapshot": {
	            "type": "boolean"
	          },
	          "DomainIAMRoleName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "RestoreDBInstanceFromDBSnapshotResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "S1y"
	          }
	        }
	      }
	    },
	    "RestoreDBInstanceToPointInTime": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SourceDBInstanceIdentifier",
	          "TargetDBInstanceIdentifier"
	        ],
	        "members": {
	          "SourceDBInstanceIdentifier": {},
	          "TargetDBInstanceIdentifier": {},
	          "RestoreTime": {
	            "type": "timestamp"
	          },
	          "UseLatestRestorableTime": {
	            "type": "boolean"
	          },
	          "DBInstanceClass": {},
	          "Port": {
	            "type": "integer"
	          },
	          "AvailabilityZone": {},
	          "DBSubnetGroupName": {},
	          "MultiAZ": {
	            "type": "boolean"
	          },
	          "PubliclyAccessible": {
	            "type": "boolean"
	          },
	          "AutoMinorVersionUpgrade": {
	            "type": "boolean"
	          },
	          "LicenseModel": {},
	          "DBName": {},
	          "Engine": {},
	          "Iops": {
	            "type": "integer"
	          },
	          "OptionGroupName": {},
	          "CopyTagsToSnapshot": {
	            "type": "boolean"
	          },
	          "Tags": {
	            "shape": "Sa"
	          },
	          "StorageType": {},
	          "TdeCredentialArn": {},
	          "TdeCredentialPassword": {},
	          "Domain": {},
	          "DomainIAMRoleName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "RestoreDBInstanceToPointInTimeResult",
	        "type": "structure",
	        "members": {
	          "DBInstance": {
	            "shape": "S1y"
	          }
	        }
	      }
	    },
	    "RevokeDBSecurityGroupIngress": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DBSecurityGroupName"
	        ],
	        "members": {
	          "DBSecurityGroupName": {},
	          "CIDRIP": {},
	          "EC2SecurityGroupName": {},
	          "EC2SecurityGroupId": {},
	          "EC2SecurityGroupOwnerId": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "RevokeDBSecurityGroupIngressResult",
	        "type": "structure",
	        "members": {
	          "DBSecurityGroup": {
	            "shape": "Sk"
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S5": {
	      "type": "structure",
	      "members": {
	        "CustomerAwsId": {},
	        "CustSubscriptionId": {},
	        "SnsTopicArn": {},
	        "Status": {},
	        "SubscriptionCreationTime": {},
	        "SourceType": {},
	        "SourceIdsList": {
	          "shape": "S6"
	        },
	        "EventCategoriesList": {
	          "shape": "S7"
	        },
	        "Enabled": {
	          "type": "boolean"
	        },
	        "EventSubscriptionArn": {}
	      },
	      "wrapper": true
	    },
	    "S6": {
	      "type": "list",
	      "member": {
	        "locationName": "SourceId"
	      }
	    },
	    "S7": {
	      "type": "list",
	      "member": {
	        "locationName": "EventCategory"
	      }
	    },
	    "Sa": {
	      "type": "list",
	      "member": {
	        "locationName": "Tag",
	        "type": "structure",
	        "members": {
	          "Key": {},
	          "Value": {}
	        }
	      }
	    },
	    "Se": {
	      "type": "structure",
	      "members": {
	        "ResourceIdentifier": {},
	        "PendingMaintenanceActionDetails": {
	          "type": "list",
	          "member": {
	            "locationName": "PendingMaintenanceAction",
	            "type": "structure",
	            "members": {
	              "Action": {},
	              "AutoAppliedAfterDate": {
	                "type": "timestamp"
	              },
	              "ForcedApplyDate": {
	                "type": "timestamp"
	              },
	              "OptInStatus": {},
	              "CurrentApplyDate": {
	                "type": "timestamp"
	              },
	              "Description": {}
	            }
	          }
	        }
	      },
	      "wrapper": true
	    },
	    "Sk": {
	      "type": "structure",
	      "members": {
	        "OwnerId": {},
	        "DBSecurityGroupName": {},
	        "DBSecurityGroupDescription": {},
	        "VpcId": {},
	        "EC2SecurityGroups": {
	          "type": "list",
	          "member": {
	            "locationName": "EC2SecurityGroup",
	            "type": "structure",
	            "members": {
	              "Status": {},
	              "EC2SecurityGroupName": {},
	              "EC2SecurityGroupId": {},
	              "EC2SecurityGroupOwnerId": {}
	            }
	          }
	        },
	        "IPRanges": {
	          "type": "list",
	          "member": {
	            "locationName": "IPRange",
	            "type": "structure",
	            "members": {
	              "Status": {},
	              "CIDRIP": {}
	            }
	          }
	        },
	        "DBSecurityGroupArn": {}
	      },
	      "wrapper": true
	    },
	    "Sr": {
	      "type": "structure",
	      "members": {
	        "DBClusterParameterGroupName": {},
	        "DBParameterGroupFamily": {},
	        "Description": {},
	        "DBClusterParameterGroupArn": {}
	      },
	      "wrapper": true
	    },
	    "Su": {
	      "type": "structure",
	      "members": {
	        "AvailabilityZones": {
	          "shape": "Sv"
	        },
	        "DBClusterSnapshotIdentifier": {},
	        "DBClusterIdentifier": {},
	        "SnapshotCreateTime": {
	          "type": "timestamp"
	        },
	        "Engine": {},
	        "AllocatedStorage": {
	          "type": "integer"
	        },
	        "Status": {},
	        "Port": {
	          "type": "integer"
	        },
	        "VpcId": {},
	        "ClusterCreateTime": {
	          "type": "timestamp"
	        },
	        "MasterUsername": {},
	        "EngineVersion": {},
	        "LicenseModel": {},
	        "SnapshotType": {},
	        "PercentProgress": {
	          "type": "integer"
	        },
	        "StorageEncrypted": {
	          "type": "boolean"
	        },
	        "KmsKeyId": {},
	        "DBClusterSnapshotArn": {}
	      },
	      "wrapper": true
	    },
	    "Sv": {
	      "type": "list",
	      "member": {
	        "locationName": "AvailabilityZone"
	      }
	    },
	    "Sz": {
	      "type": "structure",
	      "members": {
	        "DBParameterGroupName": {},
	        "DBParameterGroupFamily": {},
	        "Description": {},
	        "DBParameterGroupArn": {}
	      },
	      "wrapper": true
	    },
	    "S13": {
	      "type": "structure",
	      "members": {
	        "DBSnapshotIdentifier": {},
	        "DBInstanceIdentifier": {},
	        "SnapshotCreateTime": {
	          "type": "timestamp"
	        },
	        "Engine": {},
	        "AllocatedStorage": {
	          "type": "integer"
	        },
	        "Status": {},
	        "Port": {
	          "type": "integer"
	        },
	        "AvailabilityZone": {},
	        "VpcId": {},
	        "InstanceCreateTime": {
	          "type": "timestamp"
	        },
	        "MasterUsername": {},
	        "EngineVersion": {},
	        "LicenseModel": {},
	        "SnapshotType": {},
	        "Iops": {
	          "type": "integer"
	        },
	        "OptionGroupName": {},
	        "PercentProgress": {
	          "type": "integer"
	        },
	        "SourceRegion": {},
	        "SourceDBSnapshotIdentifier": {},
	        "StorageType": {},
	        "TdeCredentialArn": {},
	        "Encrypted": {
	          "type": "boolean"
	        },
	        "KmsKeyId": {},
	        "DBSnapshotArn": {},
	        "Timezone": {}
	      },
	      "wrapper": true
	    },
	    "S17": {
	      "type": "structure",
	      "members": {
	        "OptionGroupName": {},
	        "OptionGroupDescription": {},
	        "EngineName": {},
	        "MajorEngineVersion": {},
	        "Options": {
	          "type": "list",
	          "member": {
	            "locationName": "Option",
	            "type": "structure",
	            "members": {
	              "OptionName": {},
	              "OptionDescription": {},
	              "Persistent": {
	                "type": "boolean"
	              },
	              "Permanent": {
	                "type": "boolean"
	              },
	              "Port": {
	                "type": "integer"
	              },
	              "OptionVersion": {},
	              "OptionSettings": {
	                "type": "list",
	                "member": {
	                  "shape": "S1b",
	                  "locationName": "OptionSetting"
	                }
	              },
	              "DBSecurityGroupMemberships": {
	                "shape": "S1c"
	              },
	              "VpcSecurityGroupMemberships": {
	                "shape": "S1e"
	              }
	            }
	          }
	        },
	        "AllowsVpcAndNonVpcInstanceMemberships": {
	          "type": "boolean"
	        },
	        "VpcId": {},
	        "OptionGroupArn": {}
	      },
	      "wrapper": true
	    },
	    "S1b": {
	      "type": "structure",
	      "members": {
	        "Name": {},
	        "Value": {},
	        "DefaultValue": {},
	        "Description": {},
	        "ApplyType": {},
	        "DataType": {},
	        "AllowedValues": {},
	        "IsModifiable": {
	          "type": "boolean"
	        },
	        "IsCollection": {
	          "type": "boolean"
	        }
	      }
	    },
	    "S1c": {
	      "type": "list",
	      "member": {
	        "locationName": "DBSecurityGroup",
	        "type": "structure",
	        "members": {
	          "DBSecurityGroupName": {},
	          "Status": {}
	        }
	      }
	    },
	    "S1e": {
	      "type": "list",
	      "member": {
	        "locationName": "VpcSecurityGroupMembership",
	        "type": "structure",
	        "members": {
	          "VpcSecurityGroupId": {},
	          "Status": {}
	        }
	      }
	    },
	    "S1h": {
	      "type": "list",
	      "member": {
	        "locationName": "VpcSecurityGroupId"
	      }
	    },
	    "S1j": {
	      "type": "structure",
	      "members": {
	        "AllocatedStorage": {
	          "type": "integer"
	        },
	        "AvailabilityZones": {
	          "shape": "Sv"
	        },
	        "BackupRetentionPeriod": {
	          "type": "integer"
	        },
	        "CharacterSetName": {},
	        "DatabaseName": {},
	        "DBClusterIdentifier": {},
	        "DBClusterParameterGroup": {},
	        "DBSubnetGroup": {},
	        "Status": {},
	        "PercentProgress": {},
	        "EarliestRestorableTime": {
	          "type": "timestamp"
	        },
	        "Endpoint": {},
	        "ReaderEndpoint": {},
	        "MultiAZ": {
	          "type": "boolean"
	        },
	        "Engine": {},
	        "EngineVersion": {},
	        "LatestRestorableTime": {
	          "type": "timestamp"
	        },
	        "Port": {
	          "type": "integer"
	        },
	        "MasterUsername": {},
	        "DBClusterOptionGroupMemberships": {
	          "type": "list",
	          "member": {
	            "locationName": "DBClusterOptionGroup",
	            "type": "structure",
	            "members": {
	              "DBClusterOptionGroupName": {},
	              "Status": {}
	            }
	          }
	        },
	        "PreferredBackupWindow": {},
	        "PreferredMaintenanceWindow": {},
	        "ReplicationSourceIdentifier": {},
	        "ReadReplicaIdentifiers": {
	          "type": "list",
	          "member": {
	            "locationName": "ReadReplicaIdentifier"
	          }
	        },
	        "DBClusterMembers": {
	          "type": "list",
	          "member": {
	            "locationName": "DBClusterMember",
	            "type": "structure",
	            "members": {
	              "DBInstanceIdentifier": {},
	              "IsClusterWriter": {
	                "type": "boolean"
	              },
	              "DBClusterParameterGroupStatus": {},
	              "PromotionTier": {
	                "type": "integer"
	              }
	            },
	            "wrapper": true
	          }
	        },
	        "VpcSecurityGroups": {
	          "shape": "S1e"
	        },
	        "HostedZoneId": {},
	        "StorageEncrypted": {
	          "type": "boolean"
	        },
	        "KmsKeyId": {},
	        "DbClusterResourceId": {},
	        "DBClusterArn": {},
	        "AssociatedRoles": {
	          "type": "list",
	          "member": {
	            "locationName": "DBClusterRole",
	            "type": "structure",
	            "members": {
	              "RoleArn": {},
	              "Status": {}
	            }
	          }
	        },
	        "ClusterCreateTime": {
	          "type": "timestamp"
	        }
	      },
	      "wrapper": true
	    },
	    "S1w": {
	      "type": "list",
	      "member": {
	        "locationName": "DBSecurityGroupName"
	      }
	    },
	    "S1y": {
	      "type": "structure",
	      "members": {
	        "DBInstanceIdentifier": {},
	        "DBInstanceClass": {},
	        "Engine": {},
	        "DBInstanceStatus": {},
	        "MasterUsername": {},
	        "DBName": {},
	        "Endpoint": {
	          "type": "structure",
	          "members": {
	            "Address": {},
	            "Port": {
	              "type": "integer"
	            },
	            "HostedZoneId": {}
	          }
	        },
	        "AllocatedStorage": {
	          "type": "integer"
	        },
	        "InstanceCreateTime": {
	          "type": "timestamp"
	        },
	        "PreferredBackupWindow": {},
	        "BackupRetentionPeriod": {
	          "type": "integer"
	        },
	        "DBSecurityGroups": {
	          "shape": "S1c"
	        },
	        "VpcSecurityGroups": {
	          "shape": "S1e"
	        },
	        "DBParameterGroups": {
	          "type": "list",
	          "member": {
	            "locationName": "DBParameterGroup",
	            "type": "structure",
	            "members": {
	              "DBParameterGroupName": {},
	              "ParameterApplyStatus": {}
	            }
	          }
	        },
	        "AvailabilityZone": {},
	        "DBSubnetGroup": {
	          "shape": "S22"
	        },
	        "PreferredMaintenanceWindow": {},
	        "PendingModifiedValues": {
	          "type": "structure",
	          "members": {
	            "DBInstanceClass": {},
	            "AllocatedStorage": {
	              "type": "integer"
	            },
	            "MasterUserPassword": {},
	            "Port": {
	              "type": "integer"
	            },
	            "BackupRetentionPeriod": {
	              "type": "integer"
	            },
	            "MultiAZ": {
	              "type": "boolean"
	            },
	            "EngineVersion": {},
	            "LicenseModel": {},
	            "Iops": {
	              "type": "integer"
	            },
	            "DBInstanceIdentifier": {},
	            "StorageType": {},
	            "CACertificateIdentifier": {},
	            "DBSubnetGroupName": {}
	          }
	        },
	        "LatestRestorableTime": {
	          "type": "timestamp"
	        },
	        "MultiAZ": {
	          "type": "boolean"
	        },
	        "EngineVersion": {},
	        "AutoMinorVersionUpgrade": {
	          "type": "boolean"
	        },
	        "ReadReplicaSourceDBInstanceIdentifier": {},
	        "ReadReplicaDBInstanceIdentifiers": {
	          "type": "list",
	          "member": {
	            "locationName": "ReadReplicaDBInstanceIdentifier"
	          }
	        },
	        "ReadReplicaDBClusterIdentifiers": {
	          "type": "list",
	          "member": {
	            "locationName": "ReadReplicaDBClusterIdentifier"
	          }
	        },
	        "LicenseModel": {},
	        "Iops": {
	          "type": "integer"
	        },
	        "OptionGroupMemberships": {
	          "type": "list",
	          "member": {
	            "locationName": "OptionGroupMembership",
	            "type": "structure",
	            "members": {
	              "OptionGroupName": {},
	              "Status": {}
	            }
	          }
	        },
	        "CharacterSetName": {},
	        "SecondaryAvailabilityZone": {},
	        "PubliclyAccessible": {
	          "type": "boolean"
	        },
	        "StatusInfos": {
	          "type": "list",
	          "member": {
	            "locationName": "DBInstanceStatusInfo",
	            "type": "structure",
	            "members": {
	              "StatusType": {},
	              "Normal": {
	                "type": "boolean"
	              },
	              "Status": {},
	              "Message": {}
	            }
	          }
	        },
	        "StorageType": {},
	        "TdeCredentialArn": {},
	        "DbInstancePort": {
	          "type": "integer"
	        },
	        "DBClusterIdentifier": {},
	        "StorageEncrypted": {
	          "type": "boolean"
	        },
	        "KmsKeyId": {},
	        "DbiResourceId": {},
	        "CACertificateIdentifier": {},
	        "DomainMemberships": {
	          "type": "list",
	          "member": {
	            "locationName": "DomainMembership",
	            "type": "structure",
	            "members": {
	              "Domain": {},
	              "Status": {},
	              "FQDN": {},
	              "IAMRoleName": {}
	            }
	          }
	        },
	        "CopyTagsToSnapshot": {
	          "type": "boolean"
	        },
	        "MonitoringInterval": {
	          "type": "integer"
	        },
	        "EnhancedMonitoringResourceArn": {},
	        "MonitoringRoleArn": {},
	        "PromotionTier": {
	          "type": "integer"
	        },
	        "DBInstanceArn": {},
	        "Timezone": {}
	      },
	      "wrapper": true
	    },
	    "S22": {
	      "type": "structure",
	      "members": {
	        "DBSubnetGroupName": {},
	        "DBSubnetGroupDescription": {},
	        "VpcId": {},
	        "SubnetGroupStatus": {},
	        "Subnets": {
	          "type": "list",
	          "member": {
	            "locationName": "Subnet",
	            "type": "structure",
	            "members": {
	              "SubnetIdentifier": {},
	              "SubnetAvailabilityZone": {
	                "shape": "S25"
	              },
	              "SubnetStatus": {}
	            }
	          }
	        },
	        "DBSubnetGroupArn": {}
	      },
	      "wrapper": true
	    },
	    "S25": {
	      "type": "structure",
	      "members": {
	        "Name": {}
	      },
	      "wrapper": true
	    },
	    "S2o": {
	      "type": "list",
	      "member": {
	        "locationName": "SubnetIdentifier"
	      }
	    },
	    "S3f": {
	      "type": "list",
	      "member": {
	        "locationName": "Filter",
	        "type": "structure",
	        "required": [
	          "Name",
	          "Values"
	        ],
	        "members": {
	          "Name": {},
	          "Values": {
	            "type": "list",
	            "member": {
	              "locationName": "Value"
	            }
	          }
	        }
	      }
	    },
	    "S3q": {
	      "type": "list",
	      "member": {
	        "locationName": "Parameter",
	        "type": "structure",
	        "members": {
	          "ParameterName": {},
	          "ParameterValue": {},
	          "Description": {},
	          "Source": {},
	          "ApplyType": {},
	          "DataType": {},
	          "AllowedValues": {},
	          "IsModifiable": {
	            "type": "boolean"
	          },
	          "MinimumEngineVersion": {},
	          "ApplyMethod": {}
	        }
	      }
	    },
	    "S3v": {
	      "type": "structure",
	      "members": {
	        "DBClusterSnapshotIdentifier": {},
	        "DBClusterSnapshotAttributes": {
	          "type": "list",
	          "member": {
	            "locationName": "DBClusterSnapshotAttribute",
	            "type": "structure",
	            "members": {
	              "AttributeName": {},
	              "AttributeValues": {
	                "shape": "S3y"
	              }
	            }
	          }
	        }
	      },
	      "wrapper": true
	    },
	    "S3y": {
	      "type": "list",
	      "member": {
	        "locationName": "AttributeValue"
	      }
	    },
	    "S49": {
	      "type": "structure",
	      "members": {
	        "CharacterSetName": {},
	        "CharacterSetDescription": {}
	      }
	    },
	    "S4w": {
	      "type": "structure",
	      "members": {
	        "DBSnapshotIdentifier": {},
	        "DBSnapshotAttributes": {
	          "type": "list",
	          "member": {
	            "locationName": "DBSnapshotAttribute",
	            "type": "structure",
	            "members": {
	              "AttributeName": {},
	              "AttributeValues": {
	                "shape": "S3y"
	              }
	            },
	            "wrapper": true
	          }
	        }
	      },
	      "wrapper": true
	    },
	    "S57": {
	      "type": "structure",
	      "members": {
	        "DBParameterGroupFamily": {},
	        "Marker": {},
	        "Parameters": {
	          "shape": "S3q"
	        }
	      },
	      "wrapper": true
	    },
	    "S6a": {
	      "type": "structure",
	      "members": {
	        "ReservedDBInstanceId": {},
	        "ReservedDBInstancesOfferingId": {},
	        "DBInstanceClass": {},
	        "StartTime": {
	          "type": "timestamp"
	        },
	        "Duration": {
	          "type": "integer"
	        },
	        "FixedPrice": {
	          "type": "double"
	        },
	        "UsagePrice": {
	          "type": "double"
	        },
	        "CurrencyCode": {},
	        "DBInstanceCount": {
	          "type": "integer"
	        },
	        "ProductDescription": {},
	        "OfferingType": {},
	        "MultiAZ": {
	          "type": "boolean"
	        },
	        "State": {},
	        "RecurringCharges": {
	          "shape": "S6c"
	        },
	        "ReservedDBInstanceArn": {}
	      },
	      "wrapper": true
	    },
	    "S6c": {
	      "type": "list",
	      "member": {
	        "locationName": "RecurringCharge",
	        "type": "structure",
	        "members": {
	          "RecurringChargeAmount": {
	            "type": "double"
	          },
	          "RecurringChargeFrequency": {}
	        },
	        "wrapper": true
	      }
	    },
	    "S6v": {
	      "type": "structure",
	      "members": {
	        "DBClusterParameterGroupName": {}
	      }
	    },
	    "S71": {
	      "type": "structure",
	      "members": {
	        "DBParameterGroupName": {}
	      }
	    }
	  }
	}
	},{}],107:[function(require,module,exports){
	arguments[4][102][0].apply(exports,arguments)
	},{"dup":102}],108:[function(require,module,exports){
	module.exports={
	  "version": 2,
	  "waiters": {
	    "DBInstanceAvailable": {
	      "delay": 30,
	      "operation": "DescribeDBInstances",
	      "maxAttempts": 60,
	      "acceptors": [
	        {
	          "expected": "available",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "DBInstances[].DBInstanceStatus"
	        },
	        {
	          "expected": "deleted",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "DBInstances[].DBInstanceStatus"
	        },
	        {
	          "expected": "deleting",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "DBInstances[].DBInstanceStatus"
	        },
	        {
	          "expected": "failed",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "DBInstances[].DBInstanceStatus"
	        },
	        {
	          "expected": "incompatible-restore",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "DBInstances[].DBInstanceStatus"
	        },
	        {
	          "expected": "incompatible-parameters",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "DBInstances[].DBInstanceStatus"
	        }
	      ]
	    },
	    "DBInstanceDeleted": {
	      "delay": 30,
	      "operation": "DescribeDBInstances",
	      "maxAttempts": 60,
	      "acceptors": [
	        {
	          "expected": "deleted",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "DBInstances[].DBInstanceStatus"
	        },
	        {
	          "expected": "DBInstanceNotFound",
	          "matcher": "error",
	          "state": "success"
	        },
	        {
	          "expected": "creating",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "DBInstances[].DBInstanceStatus"
	        },
	        {
	          "expected": "modifying",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "DBInstances[].DBInstanceStatus"
	        },
	        {
	          "expected": "rebooting",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "DBInstances[].DBInstanceStatus"
	        },
	        {
	          "expected": "resetting-master-credentials",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "DBInstances[].DBInstanceStatus"
	        }
	      ]
	    }
	  }
	}
	
	},{}],109:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "uid": "redshift-2012-12-01",
	    "apiVersion": "2012-12-01",
	    "endpointPrefix": "redshift",
	    "protocol": "query",
	    "serviceFullName": "Amazon Redshift",
	    "signatureVersion": "v4",
	    "xmlNamespace": "http://redshift.amazonaws.com/doc/2012-12-01/"
	  },
	  "operations": {
	    "AuthorizeClusterSecurityGroupIngress": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterSecurityGroupName"
	        ],
	        "members": {
	          "ClusterSecurityGroupName": {},
	          "CIDRIP": {},
	          "EC2SecurityGroupName": {},
	          "EC2SecurityGroupOwnerId": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "AuthorizeClusterSecurityGroupIngressResult",
	        "type": "structure",
	        "members": {
	          "ClusterSecurityGroup": {
	            "shape": "S4"
	          }
	        }
	      }
	    },
	    "AuthorizeSnapshotAccess": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SnapshotIdentifier",
	          "AccountWithRestoreAccess"
	        ],
	        "members": {
	          "SnapshotIdentifier": {},
	          "SnapshotClusterIdentifier": {},
	          "AccountWithRestoreAccess": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "AuthorizeSnapshotAccessResult",
	        "type": "structure",
	        "members": {
	          "Snapshot": {
	            "shape": "Sd"
	          }
	        }
	      }
	    },
	    "CopyClusterSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SourceSnapshotIdentifier",
	          "TargetSnapshotIdentifier"
	        ],
	        "members": {
	          "SourceSnapshotIdentifier": {},
	          "SourceSnapshotClusterIdentifier": {},
	          "TargetSnapshotIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CopyClusterSnapshotResult",
	        "type": "structure",
	        "members": {
	          "Snapshot": {
	            "shape": "Sd"
	          }
	        }
	      }
	    },
	    "CreateCluster": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterIdentifier",
	          "NodeType",
	          "MasterUsername",
	          "MasterUserPassword"
	        ],
	        "members": {
	          "DBName": {},
	          "ClusterIdentifier": {},
	          "ClusterType": {},
	          "NodeType": {},
	          "MasterUsername": {},
	          "MasterUserPassword": {},
	          "ClusterSecurityGroups": {
	            "shape": "Sp"
	          },
	          "VpcSecurityGroupIds": {
	            "shape": "Sq"
	          },
	          "ClusterSubnetGroupName": {},
	          "AvailabilityZone": {},
	          "PreferredMaintenanceWindow": {},
	          "ClusterParameterGroupName": {},
	          "AutomatedSnapshotRetentionPeriod": {
	            "type": "integer"
	          },
	          "Port": {
	            "type": "integer"
	          },
	          "ClusterVersion": {},
	          "AllowVersionUpgrade": {
	            "type": "boolean"
	          },
	          "NumberOfNodes": {
	            "type": "integer"
	          },
	          "PubliclyAccessible": {
	            "type": "boolean"
	          },
	          "Encrypted": {
	            "type": "boolean"
	          },
	          "HsmClientCertificateIdentifier": {},
	          "HsmConfigurationIdentifier": {},
	          "ElasticIp": {},
	          "Tags": {
	            "shape": "S7"
	          },
	          "KmsKeyId": {},
	          "EnhancedVpcRouting": {
	            "type": "boolean"
	          },
	          "AdditionalInfo": {},
	          "IamRoles": {
	            "shape": "St"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateClusterResult",
	        "type": "structure",
	        "members": {
	          "Cluster": {
	            "shape": "Sv"
	          }
	        }
	      }
	    },
	    "CreateClusterParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ParameterGroupName",
	          "ParameterGroupFamily",
	          "Description"
	        ],
	        "members": {
	          "ParameterGroupName": {},
	          "ParameterGroupFamily": {},
	          "Description": {},
	          "Tags": {
	            "shape": "S7"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateClusterParameterGroupResult",
	        "type": "structure",
	        "members": {
	          "ClusterParameterGroup": {
	            "shape": "S1g"
	          }
	        }
	      }
	    },
	    "CreateClusterSecurityGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterSecurityGroupName",
	          "Description"
	        ],
	        "members": {
	          "ClusterSecurityGroupName": {},
	          "Description": {},
	          "Tags": {
	            "shape": "S7"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateClusterSecurityGroupResult",
	        "type": "structure",
	        "members": {
	          "ClusterSecurityGroup": {
	            "shape": "S4"
	          }
	        }
	      }
	    },
	    "CreateClusterSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SnapshotIdentifier",
	          "ClusterIdentifier"
	        ],
	        "members": {
	          "SnapshotIdentifier": {},
	          "ClusterIdentifier": {},
	          "Tags": {
	            "shape": "S7"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateClusterSnapshotResult",
	        "type": "structure",
	        "members": {
	          "Snapshot": {
	            "shape": "Sd"
	          }
	        }
	      }
	    },
	    "CreateClusterSubnetGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterSubnetGroupName",
	          "Description",
	          "SubnetIds"
	        ],
	        "members": {
	          "ClusterSubnetGroupName": {},
	          "Description": {},
	          "SubnetIds": {
	            "shape": "S1m"
	          },
	          "Tags": {
	            "shape": "S7"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateClusterSubnetGroupResult",
	        "type": "structure",
	        "members": {
	          "ClusterSubnetGroup": {
	            "shape": "S1o"
	          }
	        }
	      }
	    },
	    "CreateEventSubscription": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubscriptionName",
	          "SnsTopicArn"
	        ],
	        "members": {
	          "SubscriptionName": {},
	          "SnsTopicArn": {},
	          "SourceType": {},
	          "SourceIds": {
	            "shape": "S1t"
	          },
	          "EventCategories": {
	            "shape": "S1u"
	          },
	          "Severity": {},
	          "Enabled": {
	            "type": "boolean"
	          },
	          "Tags": {
	            "shape": "S7"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateEventSubscriptionResult",
	        "type": "structure",
	        "members": {
	          "EventSubscription": {
	            "shape": "S1w"
	          }
	        }
	      }
	    },
	    "CreateHsmClientCertificate": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "HsmClientCertificateIdentifier"
	        ],
	        "members": {
	          "HsmClientCertificateIdentifier": {},
	          "Tags": {
	            "shape": "S7"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateHsmClientCertificateResult",
	        "type": "structure",
	        "members": {
	          "HsmClientCertificate": {
	            "shape": "S1z"
	          }
	        }
	      }
	    },
	    "CreateHsmConfiguration": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "HsmConfigurationIdentifier",
	          "Description",
	          "HsmIpAddress",
	          "HsmPartitionName",
	          "HsmPartitionPassword",
	          "HsmServerPublicCertificate"
	        ],
	        "members": {
	          "HsmConfigurationIdentifier": {},
	          "Description": {},
	          "HsmIpAddress": {},
	          "HsmPartitionName": {},
	          "HsmPartitionPassword": {},
	          "HsmServerPublicCertificate": {},
	          "Tags": {
	            "shape": "S7"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateHsmConfigurationResult",
	        "type": "structure",
	        "members": {
	          "HsmConfiguration": {
	            "shape": "S22"
	          }
	        }
	      }
	    },
	    "CreateSnapshotCopyGrant": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SnapshotCopyGrantName"
	        ],
	        "members": {
	          "SnapshotCopyGrantName": {},
	          "KmsKeyId": {},
	          "Tags": {
	            "shape": "S7"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateSnapshotCopyGrantResult",
	        "type": "structure",
	        "members": {
	          "SnapshotCopyGrant": {
	            "shape": "S25"
	          }
	        }
	      }
	    },
	    "CreateTags": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceName",
	          "Tags"
	        ],
	        "members": {
	          "ResourceName": {},
	          "Tags": {
	            "shape": "S7"
	          }
	        }
	      }
	    },
	    "DeleteCluster": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterIdentifier"
	        ],
	        "members": {
	          "ClusterIdentifier": {},
	          "SkipFinalClusterSnapshot": {
	            "type": "boolean"
	          },
	          "FinalClusterSnapshotIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteClusterResult",
	        "type": "structure",
	        "members": {
	          "Cluster": {
	            "shape": "Sv"
	          }
	        }
	      }
	    },
	    "DeleteClusterParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ParameterGroupName"
	        ],
	        "members": {
	          "ParameterGroupName": {}
	        }
	      }
	    },
	    "DeleteClusterSecurityGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterSecurityGroupName"
	        ],
	        "members": {
	          "ClusterSecurityGroupName": {}
	        }
	      }
	    },
	    "DeleteClusterSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SnapshotIdentifier"
	        ],
	        "members": {
	          "SnapshotIdentifier": {},
	          "SnapshotClusterIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteClusterSnapshotResult",
	        "type": "structure",
	        "members": {
	          "Snapshot": {
	            "shape": "Sd"
	          }
	        }
	      }
	    },
	    "DeleteClusterSubnetGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterSubnetGroupName"
	        ],
	        "members": {
	          "ClusterSubnetGroupName": {}
	        }
	      }
	    },
	    "DeleteEventSubscription": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubscriptionName"
	        ],
	        "members": {
	          "SubscriptionName": {}
	        }
	      }
	    },
	    "DeleteHsmClientCertificate": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "HsmClientCertificateIdentifier"
	        ],
	        "members": {
	          "HsmClientCertificateIdentifier": {}
	        }
	      }
	    },
	    "DeleteHsmConfiguration": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "HsmConfigurationIdentifier"
	        ],
	        "members": {
	          "HsmConfigurationIdentifier": {}
	        }
	      }
	    },
	    "DeleteSnapshotCopyGrant": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SnapshotCopyGrantName"
	        ],
	        "members": {
	          "SnapshotCopyGrantName": {}
	        }
	      }
	    },
	    "DeleteTags": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceName",
	          "TagKeys"
	        ],
	        "members": {
	          "ResourceName": {},
	          "TagKeys": {
	            "shape": "S2j"
	          }
	        }
	      }
	    },
	    "DescribeClusterParameterGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ParameterGroupName": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {},
	          "TagKeys": {
	            "shape": "S2j"
	          },
	          "TagValues": {
	            "shape": "S2l"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeClusterParameterGroupsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "ParameterGroups": {
	            "type": "list",
	            "member": {
	              "shape": "S1g",
	              "locationName": "ClusterParameterGroup"
	            }
	          }
	        }
	      }
	    },
	    "DescribeClusterParameters": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ParameterGroupName"
	        ],
	        "members": {
	          "ParameterGroupName": {},
	          "Source": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeClusterParametersResult",
	        "type": "structure",
	        "members": {
	          "Parameters": {
	            "shape": "S2q"
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DescribeClusterSecurityGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ClusterSecurityGroupName": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {},
	          "TagKeys": {
	            "shape": "S2j"
	          },
	          "TagValues": {
	            "shape": "S2l"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeClusterSecurityGroupsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "ClusterSecurityGroups": {
	            "type": "list",
	            "member": {
	              "shape": "S4",
	              "locationName": "ClusterSecurityGroup"
	            }
	          }
	        }
	      }
	    },
	    "DescribeClusterSnapshots": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ClusterIdentifier": {},
	          "SnapshotIdentifier": {},
	          "SnapshotType": {},
	          "StartTime": {
	            "type": "timestamp"
	          },
	          "EndTime": {
	            "type": "timestamp"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {},
	          "OwnerAccount": {},
	          "TagKeys": {
	            "shape": "S2j"
	          },
	          "TagValues": {
	            "shape": "S2l"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeClusterSnapshotsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "Snapshots": {
	            "type": "list",
	            "member": {
	              "shape": "Sd",
	              "locationName": "Snapshot"
	            }
	          }
	        }
	      }
	    },
	    "DescribeClusterSubnetGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ClusterSubnetGroupName": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {},
	          "TagKeys": {
	            "shape": "S2j"
	          },
	          "TagValues": {
	            "shape": "S2l"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeClusterSubnetGroupsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "ClusterSubnetGroups": {
	            "type": "list",
	            "member": {
	              "shape": "S1o",
	              "locationName": "ClusterSubnetGroup"
	            }
	          }
	        }
	      }
	    },
	    "DescribeClusterVersions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ClusterVersion": {},
	          "ClusterParameterGroupFamily": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeClusterVersionsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "ClusterVersions": {
	            "type": "list",
	            "member": {
	              "locationName": "ClusterVersion",
	              "type": "structure",
	              "members": {
	                "ClusterVersion": {},
	                "ClusterParameterGroupFamily": {},
	                "Description": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeClusters": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ClusterIdentifier": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {},
	          "TagKeys": {
	            "shape": "S2j"
	          },
	          "TagValues": {
	            "shape": "S2l"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeClustersResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "Clusters": {
	            "type": "list",
	            "member": {
	              "shape": "Sv",
	              "locationName": "Cluster"
	            }
	          }
	        }
	      }
	    },
	    "DescribeDefaultClusterParameters": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ParameterGroupFamily"
	        ],
	        "members": {
	          "ParameterGroupFamily": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeDefaultClusterParametersResult",
	        "type": "structure",
	        "members": {
	          "DefaultClusterParameters": {
	            "type": "structure",
	            "members": {
	              "ParameterGroupFamily": {},
	              "Marker": {},
	              "Parameters": {
	                "shape": "S2q"
	              }
	            },
	            "wrapper": true
	          }
	        }
	      }
	    },
	    "DescribeEventCategories": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "SourceType": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeEventCategoriesResult",
	        "type": "structure",
	        "members": {
	          "EventCategoriesMapList": {
	            "type": "list",
	            "member": {
	              "locationName": "EventCategoriesMap",
	              "type": "structure",
	              "members": {
	                "SourceType": {},
	                "Events": {
	                  "type": "list",
	                  "member": {
	                    "locationName": "EventInfoMap",
	                    "type": "structure",
	                    "members": {
	                      "EventId": {},
	                      "EventCategories": {
	                        "shape": "S1u"
	                      },
	                      "EventDescription": {},
	                      "Severity": {}
	                    },
	                    "wrapper": true
	                  }
	                }
	              },
	              "wrapper": true
	            }
	          }
	        }
	      }
	    },
	    "DescribeEventSubscriptions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "SubscriptionName": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeEventSubscriptionsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "EventSubscriptionsList": {
	            "type": "list",
	            "member": {
	              "shape": "S1w",
	              "locationName": "EventSubscription"
	            }
	          }
	        }
	      }
	    },
	    "DescribeEvents": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "SourceIdentifier": {},
	          "SourceType": {},
	          "StartTime": {
	            "type": "timestamp"
	          },
	          "EndTime": {
	            "type": "timestamp"
	          },
	          "Duration": {
	            "type": "integer"
	          },
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeEventsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "Events": {
	            "type": "list",
	            "member": {
	              "locationName": "Event",
	              "type": "structure",
	              "members": {
	                "SourceIdentifier": {},
	                "SourceType": {},
	                "Message": {},
	                "EventCategories": {
	                  "shape": "S1u"
	                },
	                "Severity": {},
	                "Date": {
	                  "type": "timestamp"
	                },
	                "EventId": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeHsmClientCertificates": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "HsmClientCertificateIdentifier": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {},
	          "TagKeys": {
	            "shape": "S2j"
	          },
	          "TagValues": {
	            "shape": "S2l"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeHsmClientCertificatesResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "HsmClientCertificates": {
	            "type": "list",
	            "member": {
	              "shape": "S1z",
	              "locationName": "HsmClientCertificate"
	            }
	          }
	        }
	      }
	    },
	    "DescribeHsmConfigurations": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "HsmConfigurationIdentifier": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {},
	          "TagKeys": {
	            "shape": "S2j"
	          },
	          "TagValues": {
	            "shape": "S2l"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeHsmConfigurationsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "HsmConfigurations": {
	            "type": "list",
	            "member": {
	              "shape": "S22",
	              "locationName": "HsmConfiguration"
	            }
	          }
	        }
	      }
	    },
	    "DescribeLoggingStatus": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterIdentifier"
	        ],
	        "members": {
	          "ClusterIdentifier": {}
	        }
	      },
	      "output": {
	        "shape": "S3x",
	        "resultWrapper": "DescribeLoggingStatusResult"
	      }
	    },
	    "DescribeOrderableClusterOptions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ClusterVersion": {},
	          "NodeType": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeOrderableClusterOptionsResult",
	        "type": "structure",
	        "members": {
	          "OrderableClusterOptions": {
	            "type": "list",
	            "member": {
	              "locationName": "OrderableClusterOption",
	              "type": "structure",
	              "members": {
	                "ClusterVersion": {},
	                "ClusterType": {},
	                "NodeType": {},
	                "AvailabilityZones": {
	                  "type": "list",
	                  "member": {
	                    "shape": "S1r",
	                    "locationName": "AvailabilityZone"
	                  }
	                }
	              },
	              "wrapper": true
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DescribeReservedNodeOfferings": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ReservedNodeOfferingId": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeReservedNodeOfferingsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "ReservedNodeOfferings": {
	            "type": "list",
	            "member": {
	              "locationName": "ReservedNodeOffering",
	              "type": "structure",
	              "members": {
	                "ReservedNodeOfferingId": {},
	                "NodeType": {},
	                "Duration": {
	                  "type": "integer"
	                },
	                "FixedPrice": {
	                  "type": "double"
	                },
	                "UsagePrice": {
	                  "type": "double"
	                },
	                "CurrencyCode": {},
	                "OfferingType": {},
	                "RecurringCharges": {
	                  "shape": "S47"
	                }
	              },
	              "wrapper": true
	            }
	          }
	        }
	      }
	    },
	    "DescribeReservedNodes": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ReservedNodeId": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeReservedNodesResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "ReservedNodes": {
	            "type": "list",
	            "member": {
	              "shape": "S4c",
	              "locationName": "ReservedNode"
	            }
	          }
	        }
	      }
	    },
	    "DescribeResize": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterIdentifier"
	        ],
	        "members": {
	          "ClusterIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeResizeResult",
	        "type": "structure",
	        "members": {
	          "TargetNodeType": {},
	          "TargetNumberOfNodes": {
	            "type": "integer"
	          },
	          "TargetClusterType": {},
	          "Status": {},
	          "ImportTablesCompleted": {
	            "type": "list",
	            "member": {}
	          },
	          "ImportTablesInProgress": {
	            "type": "list",
	            "member": {}
	          },
	          "ImportTablesNotStarted": {
	            "type": "list",
	            "member": {}
	          },
	          "AvgResizeRateInMegaBytesPerSecond": {
	            "type": "double"
	          },
	          "TotalResizeDataInMegaBytes": {
	            "type": "long"
	          },
	          "ProgressInMegaBytes": {
	            "type": "long"
	          },
	          "ElapsedTimeInSeconds": {
	            "type": "long"
	          },
	          "EstimatedTimeToCompletionInSeconds": {
	            "type": "long"
	          }
	        }
	      }
	    },
	    "DescribeSnapshotCopyGrants": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "SnapshotCopyGrantName": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {},
	          "TagKeys": {
	            "shape": "S2j"
	          },
	          "TagValues": {
	            "shape": "S2l"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeSnapshotCopyGrantsResult",
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "SnapshotCopyGrants": {
	            "type": "list",
	            "member": {
	              "shape": "S25",
	              "locationName": "SnapshotCopyGrant"
	            }
	          }
	        }
	      }
	    },
	    "DescribeTableRestoreStatus": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ClusterIdentifier": {},
	          "TableRestoreRequestId": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeTableRestoreStatusResult",
	        "type": "structure",
	        "members": {
	          "TableRestoreStatusDetails": {
	            "type": "list",
	            "member": {
	              "shape": "S4q",
	              "locationName": "TableRestoreStatus"
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DescribeTags": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "ResourceName": {},
	          "ResourceType": {},
	          "MaxRecords": {
	            "type": "integer"
	          },
	          "Marker": {},
	          "TagKeys": {
	            "shape": "S2j"
	          },
	          "TagValues": {
	            "shape": "S2l"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DescribeTagsResult",
	        "type": "structure",
	        "members": {
	          "TaggedResources": {
	            "type": "list",
	            "member": {
	              "locationName": "TaggedResource",
	              "type": "structure",
	              "members": {
	                "Tag": {
	                  "shape": "S8"
	                },
	                "ResourceName": {},
	                "ResourceType": {}
	              }
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DisableLogging": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterIdentifier"
	        ],
	        "members": {
	          "ClusterIdentifier": {}
	        }
	      },
	      "output": {
	        "shape": "S3x",
	        "resultWrapper": "DisableLoggingResult"
	      }
	    },
	    "DisableSnapshotCopy": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterIdentifier"
	        ],
	        "members": {
	          "ClusterIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DisableSnapshotCopyResult",
	        "type": "structure",
	        "members": {
	          "Cluster": {
	            "shape": "Sv"
	          }
	        }
	      }
	    },
	    "EnableLogging": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterIdentifier",
	          "BucketName"
	        ],
	        "members": {
	          "ClusterIdentifier": {},
	          "BucketName": {},
	          "S3KeyPrefix": {}
	        }
	      },
	      "output": {
	        "shape": "S3x",
	        "resultWrapper": "EnableLoggingResult"
	      }
	    },
	    "EnableSnapshotCopy": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterIdentifier",
	          "DestinationRegion"
	        ],
	        "members": {
	          "ClusterIdentifier": {},
	          "DestinationRegion": {},
	          "RetentionPeriod": {
	            "type": "integer"
	          },
	          "SnapshotCopyGrantName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "EnableSnapshotCopyResult",
	        "type": "structure",
	        "members": {
	          "Cluster": {
	            "shape": "Sv"
	          }
	        }
	      }
	    },
	    "ModifyCluster": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterIdentifier"
	        ],
	        "members": {
	          "ClusterIdentifier": {},
	          "ClusterType": {},
	          "NodeType": {},
	          "NumberOfNodes": {
	            "type": "integer"
	          },
	          "ClusterSecurityGroups": {
	            "shape": "Sp"
	          },
	          "VpcSecurityGroupIds": {
	            "shape": "Sq"
	          },
	          "MasterUserPassword": {},
	          "ClusterParameterGroupName": {},
	          "AutomatedSnapshotRetentionPeriod": {
	            "type": "integer"
	          },
	          "PreferredMaintenanceWindow": {},
	          "ClusterVersion": {},
	          "AllowVersionUpgrade": {
	            "type": "boolean"
	          },
	          "HsmClientCertificateIdentifier": {},
	          "HsmConfigurationIdentifier": {},
	          "NewClusterIdentifier": {},
	          "PubliclyAccessible": {
	            "type": "boolean"
	          },
	          "ElasticIp": {},
	          "EnhancedVpcRouting": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyClusterResult",
	        "type": "structure",
	        "members": {
	          "Cluster": {
	            "shape": "Sv"
	          }
	        }
	      }
	    },
	    "ModifyClusterIamRoles": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterIdentifier"
	        ],
	        "members": {
	          "ClusterIdentifier": {},
	          "AddIamRoles": {
	            "shape": "St"
	          },
	          "RemoveIamRoles": {
	            "shape": "St"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyClusterIamRolesResult",
	        "type": "structure",
	        "members": {
	          "Cluster": {
	            "shape": "Sv"
	          }
	        }
	      }
	    },
	    "ModifyClusterParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ParameterGroupName",
	          "Parameters"
	        ],
	        "members": {
	          "ParameterGroupName": {},
	          "Parameters": {
	            "shape": "S2q"
	          }
	        }
	      },
	      "output": {
	        "shape": "S57",
	        "resultWrapper": "ModifyClusterParameterGroupResult"
	      }
	    },
	    "ModifyClusterSubnetGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterSubnetGroupName",
	          "SubnetIds"
	        ],
	        "members": {
	          "ClusterSubnetGroupName": {},
	          "Description": {},
	          "SubnetIds": {
	            "shape": "S1m"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyClusterSubnetGroupResult",
	        "type": "structure",
	        "members": {
	          "ClusterSubnetGroup": {
	            "shape": "S1o"
	          }
	        }
	      }
	    },
	    "ModifyEventSubscription": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubscriptionName"
	        ],
	        "members": {
	          "SubscriptionName": {},
	          "SnsTopicArn": {},
	          "SourceType": {},
	          "SourceIds": {
	            "shape": "S1t"
	          },
	          "EventCategories": {
	            "shape": "S1u"
	          },
	          "Severity": {},
	          "Enabled": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifyEventSubscriptionResult",
	        "type": "structure",
	        "members": {
	          "EventSubscription": {
	            "shape": "S1w"
	          }
	        }
	      }
	    },
	    "ModifySnapshotCopyRetentionPeriod": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterIdentifier",
	          "RetentionPeriod"
	        ],
	        "members": {
	          "ClusterIdentifier": {},
	          "RetentionPeriod": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ModifySnapshotCopyRetentionPeriodResult",
	        "type": "structure",
	        "members": {
	          "Cluster": {
	            "shape": "Sv"
	          }
	        }
	      }
	    },
	    "PurchaseReservedNodeOffering": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ReservedNodeOfferingId"
	        ],
	        "members": {
	          "ReservedNodeOfferingId": {},
	          "NodeCount": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "PurchaseReservedNodeOfferingResult",
	        "type": "structure",
	        "members": {
	          "ReservedNode": {
	            "shape": "S4c"
	          }
	        }
	      }
	    },
	    "RebootCluster": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterIdentifier"
	        ],
	        "members": {
	          "ClusterIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "RebootClusterResult",
	        "type": "structure",
	        "members": {
	          "Cluster": {
	            "shape": "Sv"
	          }
	        }
	      }
	    },
	    "ResetClusterParameterGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ParameterGroupName"
	        ],
	        "members": {
	          "ParameterGroupName": {},
	          "ResetAllParameters": {
	            "type": "boolean"
	          },
	          "Parameters": {
	            "shape": "S2q"
	          }
	        }
	      },
	      "output": {
	        "shape": "S57",
	        "resultWrapper": "ResetClusterParameterGroupResult"
	      }
	    },
	    "RestoreFromClusterSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterIdentifier",
	          "SnapshotIdentifier"
	        ],
	        "members": {
	          "ClusterIdentifier": {},
	          "SnapshotIdentifier": {},
	          "SnapshotClusterIdentifier": {},
	          "Port": {
	            "type": "integer"
	          },
	          "AvailabilityZone": {},
	          "AllowVersionUpgrade": {
	            "type": "boolean"
	          },
	          "ClusterSubnetGroupName": {},
	          "PubliclyAccessible": {
	            "type": "boolean"
	          },
	          "OwnerAccount": {},
	          "HsmClientCertificateIdentifier": {},
	          "HsmConfigurationIdentifier": {},
	          "ElasticIp": {},
	          "ClusterParameterGroupName": {},
	          "ClusterSecurityGroups": {
	            "shape": "Sp"
	          },
	          "VpcSecurityGroupIds": {
	            "shape": "Sq"
	          },
	          "PreferredMaintenanceWindow": {},
	          "AutomatedSnapshotRetentionPeriod": {
	            "type": "integer"
	          },
	          "KmsKeyId": {},
	          "NodeType": {},
	          "EnhancedVpcRouting": {
	            "type": "boolean"
	          },
	          "AdditionalInfo": {},
	          "IamRoles": {
	            "shape": "St"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "RestoreFromClusterSnapshotResult",
	        "type": "structure",
	        "members": {
	          "Cluster": {
	            "shape": "Sv"
	          }
	        }
	      }
	    },
	    "RestoreTableFromClusterSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterIdentifier",
	          "SnapshotIdentifier",
	          "SourceDatabaseName",
	          "SourceTableName",
	          "NewTableName"
	        ],
	        "members": {
	          "ClusterIdentifier": {},
	          "SnapshotIdentifier": {},
	          "SourceDatabaseName": {},
	          "SourceSchemaName": {},
	          "SourceTableName": {},
	          "TargetDatabaseName": {},
	          "TargetSchemaName": {},
	          "NewTableName": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "RestoreTableFromClusterSnapshotResult",
	        "type": "structure",
	        "members": {
	          "TableRestoreStatus": {
	            "shape": "S4q"
	          }
	        }
	      }
	    },
	    "RevokeClusterSecurityGroupIngress": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterSecurityGroupName"
	        ],
	        "members": {
	          "ClusterSecurityGroupName": {},
	          "CIDRIP": {},
	          "EC2SecurityGroupName": {},
	          "EC2SecurityGroupOwnerId": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "RevokeClusterSecurityGroupIngressResult",
	        "type": "structure",
	        "members": {
	          "ClusterSecurityGroup": {
	            "shape": "S4"
	          }
	        }
	      }
	    },
	    "RevokeSnapshotAccess": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SnapshotIdentifier",
	          "AccountWithRestoreAccess"
	        ],
	        "members": {
	          "SnapshotIdentifier": {},
	          "SnapshotClusterIdentifier": {},
	          "AccountWithRestoreAccess": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "RevokeSnapshotAccessResult",
	        "type": "structure",
	        "members": {
	          "Snapshot": {
	            "shape": "Sd"
	          }
	        }
	      }
	    },
	    "RotateEncryptionKey": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClusterIdentifier"
	        ],
	        "members": {
	          "ClusterIdentifier": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "RotateEncryptionKeyResult",
	        "type": "structure",
	        "members": {
	          "Cluster": {
	            "shape": "Sv"
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S4": {
	      "type": "structure",
	      "members": {
	        "ClusterSecurityGroupName": {},
	        "Description": {},
	        "EC2SecurityGroups": {
	          "type": "list",
	          "member": {
	            "locationName": "EC2SecurityGroup",
	            "type": "structure",
	            "members": {
	              "Status": {},
	              "EC2SecurityGroupName": {},
	              "EC2SecurityGroupOwnerId": {},
	              "Tags": {
	                "shape": "S7"
	              }
	            }
	          }
	        },
	        "IPRanges": {
	          "type": "list",
	          "member": {
	            "locationName": "IPRange",
	            "type": "structure",
	            "members": {
	              "Status": {},
	              "CIDRIP": {},
	              "Tags": {
	                "shape": "S7"
	              }
	            }
	          }
	        },
	        "Tags": {
	          "shape": "S7"
	        }
	      },
	      "wrapper": true
	    },
	    "S7": {
	      "type": "list",
	      "member": {
	        "shape": "S8",
	        "locationName": "Tag"
	      }
	    },
	    "S8": {
	      "type": "structure",
	      "members": {
	        "Key": {},
	        "Value": {}
	      }
	    },
	    "Sd": {
	      "type": "structure",
	      "members": {
	        "SnapshotIdentifier": {},
	        "ClusterIdentifier": {},
	        "SnapshotCreateTime": {
	          "type": "timestamp"
	        },
	        "Status": {},
	        "Port": {
	          "type": "integer"
	        },
	        "AvailabilityZone": {},
	        "ClusterCreateTime": {
	          "type": "timestamp"
	        },
	        "MasterUsername": {},
	        "ClusterVersion": {},
	        "SnapshotType": {},
	        "NodeType": {},
	        "NumberOfNodes": {
	          "type": "integer"
	        },
	        "DBName": {},
	        "VpcId": {},
	        "Encrypted": {
	          "type": "boolean"
	        },
	        "KmsKeyId": {},
	        "EncryptedWithHSM": {
	          "type": "boolean"
	        },
	        "AccountsWithRestoreAccess": {
	          "type": "list",
	          "member": {
	            "locationName": "AccountWithRestoreAccess",
	            "type": "structure",
	            "members": {
	              "AccountId": {}
	            }
	          }
	        },
	        "OwnerAccount": {},
	        "TotalBackupSizeInMegaBytes": {
	          "type": "double"
	        },
	        "ActualIncrementalBackupSizeInMegaBytes": {
	          "type": "double"
	        },
	        "BackupProgressInMegaBytes": {
	          "type": "double"
	        },
	        "CurrentBackupRateInMegaBytesPerSecond": {
	          "type": "double"
	        },
	        "EstimatedSecondsToCompletion": {
	          "type": "long"
	        },
	        "ElapsedTimeInSeconds": {
	          "type": "long"
	        },
	        "SourceRegion": {},
	        "Tags": {
	          "shape": "S7"
	        },
	        "RestorableNodeTypes": {
	          "type": "list",
	          "member": {
	            "locationName": "NodeType"
	          }
	        },
	        "EnhancedVpcRouting": {
	          "type": "boolean"
	        }
	      },
	      "wrapper": true
	    },
	    "Sp": {
	      "type": "list",
	      "member": {
	        "locationName": "ClusterSecurityGroupName"
	      }
	    },
	    "Sq": {
	      "type": "list",
	      "member": {
	        "locationName": "VpcSecurityGroupId"
	      }
	    },
	    "St": {
	      "type": "list",
	      "member": {
	        "locationName": "IamRoleArn"
	      }
	    },
	    "Sv": {
	      "type": "structure",
	      "members": {
	        "ClusterIdentifier": {},
	        "NodeType": {},
	        "ClusterStatus": {},
	        "ModifyStatus": {},
	        "MasterUsername": {},
	        "DBName": {},
	        "Endpoint": {
	          "type": "structure",
	          "members": {
	            "Address": {},
	            "Port": {
	              "type": "integer"
	            }
	          }
	        },
	        "ClusterCreateTime": {
	          "type": "timestamp"
	        },
	        "AutomatedSnapshotRetentionPeriod": {
	          "type": "integer"
	        },
	        "ClusterSecurityGroups": {
	          "type": "list",
	          "member": {
	            "locationName": "ClusterSecurityGroup",
	            "type": "structure",
	            "members": {
	              "ClusterSecurityGroupName": {},
	              "Status": {}
	            }
	          }
	        },
	        "VpcSecurityGroups": {
	          "type": "list",
	          "member": {
	            "locationName": "VpcSecurityGroup",
	            "type": "structure",
	            "members": {
	              "VpcSecurityGroupId": {},
	              "Status": {}
	            }
	          }
	        },
	        "ClusterParameterGroups": {
	          "type": "list",
	          "member": {
	            "locationName": "ClusterParameterGroup",
	            "type": "structure",
	            "members": {
	              "ParameterGroupName": {},
	              "ParameterApplyStatus": {},
	              "ClusterParameterStatusList": {
	                "type": "list",
	                "member": {
	                  "type": "structure",
	                  "members": {
	                    "ParameterName": {},
	                    "ParameterApplyStatus": {},
	                    "ParameterApplyErrorDescription": {}
	                  }
	                }
	              }
	            }
	          }
	        },
	        "ClusterSubnetGroupName": {},
	        "VpcId": {},
	        "AvailabilityZone": {},
	        "PreferredMaintenanceWindow": {},
	        "PendingModifiedValues": {
	          "type": "structure",
	          "members": {
	            "MasterUserPassword": {},
	            "NodeType": {},
	            "NumberOfNodes": {
	              "type": "integer"
	            },
	            "ClusterType": {},
	            "ClusterVersion": {},
	            "AutomatedSnapshotRetentionPeriod": {
	              "type": "integer"
	            },
	            "ClusterIdentifier": {},
	            "PubliclyAccessible": {
	              "type": "boolean"
	            },
	            "EnhancedVpcRouting": {
	              "type": "boolean"
	            }
	          }
	        },
	        "ClusterVersion": {},
	        "AllowVersionUpgrade": {
	          "type": "boolean"
	        },
	        "NumberOfNodes": {
	          "type": "integer"
	        },
	        "PubliclyAccessible": {
	          "type": "boolean"
	        },
	        "Encrypted": {
	          "type": "boolean"
	        },
	        "RestoreStatus": {
	          "type": "structure",
	          "members": {
	            "Status": {},
	            "CurrentRestoreRateInMegaBytesPerSecond": {
	              "type": "double"
	            },
	            "SnapshotSizeInMegaBytes": {
	              "type": "long"
	            },
	            "ProgressInMegaBytes": {
	              "type": "long"
	            },
	            "ElapsedTimeInSeconds": {
	              "type": "long"
	            },
	            "EstimatedTimeToCompletionInSeconds": {
	              "type": "long"
	            }
	          }
	        },
	        "HsmStatus": {
	          "type": "structure",
	          "members": {
	            "HsmClientCertificateIdentifier": {},
	            "HsmConfigurationIdentifier": {},
	            "Status": {}
	          }
	        },
	        "ClusterSnapshotCopyStatus": {
	          "type": "structure",
	          "members": {
	            "DestinationRegion": {},
	            "RetentionPeriod": {
	              "type": "long"
	            },
	            "SnapshotCopyGrantName": {}
	          }
	        },
	        "ClusterPublicKey": {},
	        "ClusterNodes": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "members": {
	              "NodeRole": {},
	              "PrivateIPAddress": {},
	              "PublicIPAddress": {}
	            }
	          }
	        },
	        "ElasticIpStatus": {
	          "type": "structure",
	          "members": {
	            "ElasticIp": {},
	            "Status": {}
	          }
	        },
	        "ClusterRevisionNumber": {},
	        "Tags": {
	          "shape": "S7"
	        },
	        "KmsKeyId": {},
	        "EnhancedVpcRouting": {
	          "type": "boolean"
	        },
	        "IamRoles": {
	          "type": "list",
	          "member": {
	            "locationName": "ClusterIamRole",
	            "type": "structure",
	            "members": {
	              "IamRoleArn": {},
	              "ApplyStatus": {}
	            }
	          }
	        }
	      },
	      "wrapper": true
	    },
	    "S1g": {
	      "type": "structure",
	      "members": {
	        "ParameterGroupName": {},
	        "ParameterGroupFamily": {},
	        "Description": {},
	        "Tags": {
	          "shape": "S7"
	        }
	      },
	      "wrapper": true
	    },
	    "S1m": {
	      "type": "list",
	      "member": {
	        "locationName": "SubnetIdentifier"
	      }
	    },
	    "S1o": {
	      "type": "structure",
	      "members": {
	        "ClusterSubnetGroupName": {},
	        "Description": {},
	        "VpcId": {},
	        "SubnetGroupStatus": {},
	        "Subnets": {
	          "type": "list",
	          "member": {
	            "locationName": "Subnet",
	            "type": "structure",
	            "members": {
	              "SubnetIdentifier": {},
	              "SubnetAvailabilityZone": {
	                "shape": "S1r"
	              },
	              "SubnetStatus": {}
	            }
	          }
	        },
	        "Tags": {
	          "shape": "S7"
	        }
	      },
	      "wrapper": true
	    },
	    "S1r": {
	      "type": "structure",
	      "members": {
	        "Name": {}
	      },
	      "wrapper": true
	    },
	    "S1t": {
	      "type": "list",
	      "member": {
	        "locationName": "SourceId"
	      }
	    },
	    "S1u": {
	      "type": "list",
	      "member": {
	        "locationName": "EventCategory"
	      }
	    },
	    "S1w": {
	      "type": "structure",
	      "members": {
	        "CustomerAwsId": {},
	        "CustSubscriptionId": {},
	        "SnsTopicArn": {},
	        "Status": {},
	        "SubscriptionCreationTime": {
	          "type": "timestamp"
	        },
	        "SourceType": {},
	        "SourceIdsList": {
	          "shape": "S1t"
	        },
	        "EventCategoriesList": {
	          "shape": "S1u"
	        },
	        "Severity": {},
	        "Enabled": {
	          "type": "boolean"
	        },
	        "Tags": {
	          "shape": "S7"
	        }
	      },
	      "wrapper": true
	    },
	    "S1z": {
	      "type": "structure",
	      "members": {
	        "HsmClientCertificateIdentifier": {},
	        "HsmClientCertificatePublicKey": {},
	        "Tags": {
	          "shape": "S7"
	        }
	      },
	      "wrapper": true
	    },
	    "S22": {
	      "type": "structure",
	      "members": {
	        "HsmConfigurationIdentifier": {},
	        "Description": {},
	        "HsmIpAddress": {},
	        "HsmPartitionName": {},
	        "Tags": {
	          "shape": "S7"
	        }
	      },
	      "wrapper": true
	    },
	    "S25": {
	      "type": "structure",
	      "members": {
	        "SnapshotCopyGrantName": {},
	        "KmsKeyId": {},
	        "Tags": {
	          "shape": "S7"
	        }
	      },
	      "wrapper": true
	    },
	    "S2j": {
	      "type": "list",
	      "member": {
	        "locationName": "TagKey"
	      }
	    },
	    "S2l": {
	      "type": "list",
	      "member": {
	        "locationName": "TagValue"
	      }
	    },
	    "S2q": {
	      "type": "list",
	      "member": {
	        "locationName": "Parameter",
	        "type": "structure",
	        "members": {
	          "ParameterName": {},
	          "ParameterValue": {},
	          "Description": {},
	          "Source": {},
	          "DataType": {},
	          "AllowedValues": {},
	          "ApplyType": {},
	          "IsModifiable": {
	            "type": "boolean"
	          },
	          "MinimumEngineVersion": {}
	        }
	      }
	    },
	    "S3x": {
	      "type": "structure",
	      "members": {
	        "LoggingEnabled": {
	          "type": "boolean"
	        },
	        "BucketName": {},
	        "S3KeyPrefix": {},
	        "LastSuccessfulDeliveryTime": {
	          "type": "timestamp"
	        },
	        "LastFailureTime": {
	          "type": "timestamp"
	        },
	        "LastFailureMessage": {}
	      }
	    },
	    "S47": {
	      "type": "list",
	      "member": {
	        "locationName": "RecurringCharge",
	        "type": "structure",
	        "members": {
	          "RecurringChargeAmount": {
	            "type": "double"
	          },
	          "RecurringChargeFrequency": {}
	        },
	        "wrapper": true
	      }
	    },
	    "S4c": {
	      "type": "structure",
	      "members": {
	        "ReservedNodeId": {},
	        "ReservedNodeOfferingId": {},
	        "NodeType": {},
	        "StartTime": {
	          "type": "timestamp"
	        },
	        "Duration": {
	          "type": "integer"
	        },
	        "FixedPrice": {
	          "type": "double"
	        },
	        "UsagePrice": {
	          "type": "double"
	        },
	        "CurrencyCode": {},
	        "NodeCount": {
	          "type": "integer"
	        },
	        "State": {},
	        "OfferingType": {},
	        "RecurringCharges": {
	          "shape": "S47"
	        }
	      },
	      "wrapper": true
	    },
	    "S4q": {
	      "type": "structure",
	      "members": {
	        "TableRestoreRequestId": {},
	        "Status": {},
	        "Message": {},
	        "RequestTime": {
	          "type": "timestamp"
	        },
	        "ProgressInMegaBytes": {
	          "type": "long"
	        },
	        "TotalDataInMegaBytes": {
	          "type": "long"
	        },
	        "ClusterIdentifier": {},
	        "SnapshotIdentifier": {},
	        "SourceDatabaseName": {},
	        "SourceSchemaName": {},
	        "SourceTableName": {},
	        "TargetDatabaseName": {},
	        "TargetSchemaName": {},
	        "NewTableName": {}
	      },
	      "wrapper": true
	    },
	    "S57": {
	      "type": "structure",
	      "members": {
	        "ParameterGroupName": {},
	        "ParameterGroupStatus": {}
	      }
	    }
	  }
	}
	},{}],110:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "DescribeClusterParameterGroups": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "limit_key": "MaxRecords",
	      "result_key": "ParameterGroups"
	    },
	    "DescribeClusterParameters": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "limit_key": "MaxRecords",
	      "result_key": "Parameters"
	    },
	    "DescribeClusterSecurityGroups": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "limit_key": "MaxRecords",
	      "result_key": "ClusterSecurityGroups"
	    },
	    "DescribeClusterSnapshots": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "limit_key": "MaxRecords",
	      "result_key": "Snapshots"
	    },
	    "DescribeClusterSubnetGroups": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "limit_key": "MaxRecords",
	      "result_key": "ClusterSubnetGroups"
	    },
	    "DescribeClusterVersions": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "limit_key": "MaxRecords",
	      "result_key": "ClusterVersions"
	    },
	    "DescribeClusters": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "limit_key": "MaxRecords",
	      "result_key": "Clusters"
	    },
	    "DescribeDefaultClusterParameters": {
	      "input_token": "Marker",
	      "output_token": "DefaultClusterParameters.Marker",
	      "limit_key": "MaxRecords",
	      "result_key": "DefaultClusterParameters.Parameters"
	    },
	    "DescribeEventSubscriptions": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "limit_key": "MaxRecords",
	      "result_key": "EventSubscriptionsList"
	    },
	    "DescribeEvents": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "limit_key": "MaxRecords",
	      "result_key": "Events"
	    },
	    "DescribeHsmClientCertificates": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "limit_key": "MaxRecords",
	      "result_key": "HsmClientCertificates"
	    },
	    "DescribeHsmConfigurations": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "limit_key": "MaxRecords",
	      "result_key": "HsmConfigurations"
	    },
	    "DescribeOrderableClusterOptions": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "limit_key": "MaxRecords",
	      "result_key": "OrderableClusterOptions"
	    },
	    "DescribeReservedNodeOfferings": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "limit_key": "MaxRecords",
	      "result_key": "ReservedNodeOfferings"
	    },
	    "DescribeReservedNodes": {
	      "input_token": "Marker",
	      "output_token": "Marker",
	      "limit_key": "MaxRecords",
	      "result_key": "ReservedNodes"
	    }
	  }
	}
	
	},{}],111:[function(require,module,exports){
	module.exports={
	  "version": 2,
	  "waiters": {
	    "ClusterAvailable": {
	      "delay": 60,
	      "operation": "DescribeClusters",
	      "maxAttempts": 30,
	      "acceptors": [
	        {
	          "expected": "available",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "Clusters[].ClusterStatus"
	        },
	        {
	          "expected": "deleting",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Clusters[].ClusterStatus"
	        },
	        {
	          "expected": "ClusterNotFound",
	          "matcher": "error",
	          "state": "retry"
	        }
	      ]
	    },
	    "ClusterDeleted": {
	      "delay": 60,
	      "operation": "DescribeClusters",
	      "maxAttempts": 30,
	      "acceptors": [
	        {
	          "expected": "ClusterNotFound",
	          "matcher": "error",
	          "state": "success"
	        },
	        {
	          "expected": "creating",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Clusters[].ClusterStatus"
	        },
	        {
	          "expected": "modifying",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Clusters[].ClusterStatus"
	        }
	      ]
	    },
	    "ClusterRestored": {
	      "operation": "DescribeClusters",
	      "maxAttempts": 30,
	      "delay": 60,
	      "acceptors": [
	        {
	          "state": "success",
	          "matcher": "pathAll",
	          "argument": "Clusters[].RestoreStatus.Status",
	          "expected": "completed"
	        },
	        {
	          "state": "failure",
	          "matcher": "pathAny",
	          "argument": "Clusters[].ClusterStatus",
	          "expected": "deleting"
	        }
	      ]
	    },
	    "SnapshotAvailable": {
	      "delay": 15,
	      "operation": "DescribeClusterSnapshots",
	      "maxAttempts": 20,
	      "acceptors": [
	        {
	          "expected": "available",
	          "matcher": "pathAll",
	          "state": "success",
	          "argument": "Snapshots[].Status"
	        },
	        {
	          "expected": "failed",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Snapshots[].Status"
	        },
	        {
	          "expected": "deleted",
	          "matcher": "pathAny",
	          "state": "failure",
	          "argument": "Snapshots[].Status"
	        }
	      ]
	    }
	  }
	}
	
	},{}],112:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2016-06-27",
	    "endpointPrefix": "rekognition",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceFullName": "Amazon Rekognition",
	    "signatureVersion": "v4",
	    "targetPrefix": "RekognitionService",
	    "uid": "rekognition-2016-06-27"
	  },
	  "operations": {
	    "CompareFaces": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SourceImage",
	          "TargetImage"
	        ],
	        "members": {
	          "SourceImage": {
	            "shape": "S2"
	          },
	          "TargetImage": {
	            "shape": "S2"
	          },
	          "SimilarityThreshold": {
	            "type": "float"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "SourceImageFace": {
	            "type": "structure",
	            "members": {
	              "BoundingBox": {
	                "shape": "Sb"
	              },
	              "Confidence": {
	                "type": "float"
	              }
	            }
	          },
	          "FaceMatches": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Similarity": {
	                  "type": "float"
	                },
	                "Face": {
	                  "type": "structure",
	                  "members": {
	                    "BoundingBox": {
	                      "shape": "Sb"
	                    },
	                    "Confidence": {
	                      "type": "float"
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "CreateCollection": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CollectionId"
	        ],
	        "members": {
	          "CollectionId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "StatusCode": {
	            "type": "integer"
	          },
	          "CollectionArn": {}
	        }
	      }
	    },
	    "DeleteCollection": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CollectionId"
	        ],
	        "members": {
	          "CollectionId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "StatusCode": {
	            "type": "integer"
	          }
	        }
	      }
	    },
	    "DeleteFaces": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CollectionId",
	          "FaceIds"
	        ],
	        "members": {
	          "CollectionId": {},
	          "FaceIds": {
	            "shape": "So"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "DeletedFaces": {
	            "shape": "So"
	          }
	        }
	      }
	    },
	    "DetectFaces": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Image"
	        ],
	        "members": {
	          "Image": {
	            "shape": "S2"
	          },
	          "Attributes": {
	            "shape": "Ss"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "FaceDetails": {
	            "type": "list",
	            "member": {
	              "shape": "Sw"
	            }
	          },
	          "OrientationCorrection": {}
	        }
	      }
	    },
	    "DetectLabels": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Image"
	        ],
	        "members": {
	          "Image": {
	            "shape": "S2"
	          },
	          "MaxLabels": {
	            "type": "integer"
	          },
	          "MinConfidence": {
	            "type": "float"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Labels": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Name": {},
	                "Confidence": {
	                  "type": "float"
	                }
	              }
	            }
	          },
	          "OrientationCorrection": {}
	        }
	      }
	    },
	    "IndexFaces": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CollectionId",
	          "Image"
	        ],
	        "members": {
	          "CollectionId": {},
	          "Image": {
	            "shape": "S2"
	          },
	          "ExternalImageId": {},
	          "DetectionAttributes": {
	            "shape": "Ss"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "FaceRecords": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Face": {
	                  "shape": "S1r"
	                },
	                "FaceDetail": {
	                  "shape": "Sw"
	                }
	              }
	            }
	          },
	          "OrientationCorrection": {}
	        }
	      }
	    },
	    "ListCollections": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "NextToken": {},
	          "MaxResults": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "CollectionIds": {
	            "type": "list",
	            "member": {}
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListFaces": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CollectionId"
	        ],
	        "members": {
	          "CollectionId": {},
	          "NextToken": {},
	          "MaxResults": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Faces": {
	            "type": "list",
	            "member": {
	              "shape": "S1r"
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "SearchFaces": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CollectionId",
	          "FaceId"
	        ],
	        "members": {
	          "CollectionId": {},
	          "FaceId": {},
	          "MaxFaces": {
	            "type": "integer"
	          },
	          "FaceMatchThreshold": {
	            "type": "float"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "SearchedFaceId": {},
	          "FaceMatches": {
	            "shape": "S24"
	          }
	        }
	      }
	    },
	    "SearchFacesByImage": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CollectionId",
	          "Image"
	        ],
	        "members": {
	          "CollectionId": {},
	          "Image": {
	            "shape": "S2"
	          },
	          "MaxFaces": {
	            "type": "integer"
	          },
	          "FaceMatchThreshold": {
	            "type": "float"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "SearchedFaceBoundingBox": {
	            "shape": "Sb"
	          },
	          "SearchedFaceConfidence": {
	            "type": "float"
	          },
	          "FaceMatches": {
	            "shape": "S24"
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S2": {
	      "type": "structure",
	      "members": {
	        "Bytes": {
	          "type": "blob"
	        },
	        "S3Object": {
	          "type": "structure",
	          "members": {
	            "Bucket": {},
	            "Name": {},
	            "Version": {}
	          }
	        }
	      }
	    },
	    "Sb": {
	      "type": "structure",
	      "members": {
	        "Width": {
	          "type": "float"
	        },
	        "Height": {
	          "type": "float"
	        },
	        "Left": {
	          "type": "float"
	        },
	        "Top": {
	          "type": "float"
	        }
	      }
	    },
	    "So": {
	      "type": "list",
	      "member": {}
	    },
	    "Ss": {
	      "type": "list",
	      "member": {}
	    },
	    "Sw": {
	      "type": "structure",
	      "members": {
	        "BoundingBox": {
	          "shape": "Sb"
	        },
	        "AgeRange": {
	          "type": "structure",
	          "members": {
	            "Low": {
	              "type": "integer"
	            },
	            "High": {
	              "type": "integer"
	            }
	          }
	        },
	        "Smile": {
	          "type": "structure",
	          "members": {
	            "Value": {
	              "type": "boolean"
	            },
	            "Confidence": {
	              "type": "float"
	            }
	          }
	        },
	        "Eyeglasses": {
	          "type": "structure",
	          "members": {
	            "Value": {
	              "type": "boolean"
	            },
	            "Confidence": {
	              "type": "float"
	            }
	          }
	        },
	        "Sunglasses": {
	          "type": "structure",
	          "members": {
	            "Value": {
	              "type": "boolean"
	            },
	            "Confidence": {
	              "type": "float"
	            }
	          }
	        },
	        "Gender": {
	          "type": "structure",
	          "members": {
	            "Value": {},
	            "Confidence": {
	              "type": "float"
	            }
	          }
	        },
	        "Beard": {
	          "type": "structure",
	          "members": {
	            "Value": {
	              "type": "boolean"
	            },
	            "Confidence": {
	              "type": "float"
	            }
	          }
	        },
	        "Mustache": {
	          "type": "structure",
	          "members": {
	            "Value": {
	              "type": "boolean"
	            },
	            "Confidence": {
	              "type": "float"
	            }
	          }
	        },
	        "EyesOpen": {
	          "type": "structure",
	          "members": {
	            "Value": {
	              "type": "boolean"
	            },
	            "Confidence": {
	              "type": "float"
	            }
	          }
	        },
	        "MouthOpen": {
	          "type": "structure",
	          "members": {
	            "Value": {
	              "type": "boolean"
	            },
	            "Confidence": {
	              "type": "float"
	            }
	          }
	        },
	        "Emotions": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "members": {
	              "Type": {},
	              "Confidence": {
	                "type": "float"
	              }
	            }
	          }
	        },
	        "Landmarks": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "members": {
	              "Type": {},
	              "X": {
	                "type": "float"
	              },
	              "Y": {
	                "type": "float"
	              }
	            }
	          }
	        },
	        "Pose": {
	          "type": "structure",
	          "members": {
	            "Roll": {
	              "type": "float"
	            },
	            "Yaw": {
	              "type": "float"
	            },
	            "Pitch": {
	              "type": "float"
	            }
	          }
	        },
	        "Quality": {
	          "type": "structure",
	          "members": {
	            "Brightness": {
	              "type": "float"
	            },
	            "Sharpness": {
	              "type": "float"
	            }
	          }
	        },
	        "Confidence": {
	          "type": "float"
	        }
	      }
	    },
	    "S1r": {
	      "type": "structure",
	      "members": {
	        "FaceId": {},
	        "BoundingBox": {
	          "shape": "Sb"
	        },
	        "ImageId": {},
	        "ExternalImageId": {},
	        "Confidence": {
	          "type": "float"
	        }
	      }
	    },
	    "S24": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "Similarity": {
	            "type": "float"
	          },
	          "Face": {
	            "shape": "S1r"
	          }
	        }
	      }
	    }
	  }
	}
	},{}],113:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "ListCollections": {
	      "input_token": "NextToken",
	      "limit_key": "MaxResults",
	      "output_token": "NextToken",
	      "result_key": "CollectionIds"
	    },
	    "ListFaces": {
	      "input_token": "NextToken",
	      "limit_key": "MaxResults",
	      "output_token": "NextToken",
	      "result_key": "Faces"
	    }
	  }
	}
	},{}],114:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2013-04-01",
	    "endpointPrefix": "route53",
	    "globalEndpoint": "route53.amazonaws.com",
	    "protocol": "rest-xml",
	    "serviceAbbreviation": "Route 53",
	    "serviceFullName": "Amazon Route 53",
	    "signatureVersion": "v4",
	    "uid": "route53-2013-04-01"
	  },
	  "operations": {
	    "AssociateVPCWithHostedZone": {
	      "http": {
	        "requestUri": "/2013-04-01/hostedzone/{Id}/associatevpc"
	      },
	      "input": {
	        "locationName": "AssociateVPCWithHostedZoneRequest",
	        "xmlNamespace": {
	          "uri": "https://route53.amazonaws.com/doc/2013-04-01/"
	        },
	        "type": "structure",
	        "required": [
	          "HostedZoneId",
	          "VPC"
	        ],
	        "members": {
	          "HostedZoneId": {
	            "location": "uri",
	            "locationName": "Id"
	          },
	          "VPC": {
	            "shape": "S3"
	          },
	          "Comment": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "ChangeInfo"
	        ],
	        "members": {
	          "ChangeInfo": {
	            "shape": "S8"
	          }
	        }
	      }
	    },
	    "ChangeResourceRecordSets": {
	      "http": {
	        "requestUri": "/2013-04-01/hostedzone/{Id}/rrset/"
	      },
	      "input": {
	        "locationName": "ChangeResourceRecordSetsRequest",
	        "xmlNamespace": {
	          "uri": "https://route53.amazonaws.com/doc/2013-04-01/"
	        },
	        "type": "structure",
	        "required": [
	          "HostedZoneId",
	          "ChangeBatch"
	        ],
	        "members": {
	          "HostedZoneId": {
	            "location": "uri",
	            "locationName": "Id"
	          },
	          "ChangeBatch": {
	            "type": "structure",
	            "required": [
	              "Changes"
	            ],
	            "members": {
	              "Comment": {},
	              "Changes": {
	                "type": "list",
	                "member": {
	                  "locationName": "Change",
	                  "type": "structure",
	                  "required": [
	                    "Action",
	                    "ResourceRecordSet"
	                  ],
	                  "members": {
	                    "Action": {},
	                    "ResourceRecordSet": {
	                      "shape": "Sh"
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "ChangeInfo"
	        ],
	        "members": {
	          "ChangeInfo": {
	            "shape": "S8"
	          }
	        }
	      }
	    },
	    "ChangeTagsForResource": {
	      "http": {
	        "requestUri": "/2013-04-01/tags/{ResourceType}/{ResourceId}"
	      },
	      "input": {
	        "locationName": "ChangeTagsForResourceRequest",
	        "xmlNamespace": {
	          "uri": "https://route53.amazonaws.com/doc/2013-04-01/"
	        },
	        "type": "structure",
	        "required": [
	          "ResourceType",
	          "ResourceId"
	        ],
	        "members": {
	          "ResourceType": {
	            "location": "uri",
	            "locationName": "ResourceType"
	          },
	          "ResourceId": {
	            "location": "uri",
	            "locationName": "ResourceId"
	          },
	          "AddTags": {
	            "shape": "S14"
	          },
	          "RemoveTagKeys": {
	            "type": "list",
	            "member": {
	              "locationName": "Key"
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "CreateHealthCheck": {
	      "http": {
	        "requestUri": "/2013-04-01/healthcheck",
	        "responseCode": 201
	      },
	      "input": {
	        "locationName": "CreateHealthCheckRequest",
	        "xmlNamespace": {
	          "uri": "https://route53.amazonaws.com/doc/2013-04-01/"
	        },
	        "type": "structure",
	        "required": [
	          "CallerReference",
	          "HealthCheckConfig"
	        ],
	        "members": {
	          "CallerReference": {},
	          "HealthCheckConfig": {
	            "shape": "S1c"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "HealthCheck",
	          "Location"
	        ],
	        "members": {
	          "HealthCheck": {
	            "shape": "S1x"
	          },
	          "Location": {
	            "location": "header",
	            "locationName": "Location"
	          }
	        }
	      }
	    },
	    "CreateHostedZone": {
	      "http": {
	        "requestUri": "/2013-04-01/hostedzone",
	        "responseCode": 201
	      },
	      "input": {
	        "locationName": "CreateHostedZoneRequest",
	        "xmlNamespace": {
	          "uri": "https://route53.amazonaws.com/doc/2013-04-01/"
	        },
	        "type": "structure",
	        "required": [
	          "Name",
	          "CallerReference"
	        ],
	        "members": {
	          "Name": {},
	          "VPC": {
	            "shape": "S3"
	          },
	          "CallerReference": {},
	          "HostedZoneConfig": {
	            "shape": "S2d"
	          },
	          "DelegationSetId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "HostedZone",
	          "ChangeInfo",
	          "DelegationSet",
	          "Location"
	        ],
	        "members": {
	          "HostedZone": {
	            "shape": "S2g"
	          },
	          "ChangeInfo": {
	            "shape": "S8"
	          },
	          "DelegationSet": {
	            "shape": "S2i"
	          },
	          "VPC": {
	            "shape": "S3"
	          },
	          "Location": {
	            "location": "header",
	            "locationName": "Location"
	          }
	        }
	      }
	    },
	    "CreateReusableDelegationSet": {
	      "http": {
	        "requestUri": "/2013-04-01/delegationset",
	        "responseCode": 201
	      },
	      "input": {
	        "locationName": "CreateReusableDelegationSetRequest",
	        "xmlNamespace": {
	          "uri": "https://route53.amazonaws.com/doc/2013-04-01/"
	        },
	        "type": "structure",
	        "required": [
	          "CallerReference"
	        ],
	        "members": {
	          "CallerReference": {},
	          "HostedZoneId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "DelegationSet",
	          "Location"
	        ],
	        "members": {
	          "DelegationSet": {
	            "shape": "S2i"
	          },
	          "Location": {
	            "location": "header",
	            "locationName": "Location"
	          }
	        }
	      }
	    },
	    "CreateTrafficPolicy": {
	      "http": {
	        "requestUri": "/2013-04-01/trafficpolicy",
	        "responseCode": 201
	      },
	      "input": {
	        "locationName": "CreateTrafficPolicyRequest",
	        "xmlNamespace": {
	          "uri": "https://route53.amazonaws.com/doc/2013-04-01/"
	        },
	        "type": "structure",
	        "required": [
	          "Name",
	          "Document"
	        ],
	        "members": {
	          "Name": {},
	          "Document": {},
	          "Comment": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "TrafficPolicy",
	          "Location"
	        ],
	        "members": {
	          "TrafficPolicy": {
	            "shape": "S2r"
	          },
	          "Location": {
	            "location": "header",
	            "locationName": "Location"
	          }
	        }
	      }
	    },
	    "CreateTrafficPolicyInstance": {
	      "http": {
	        "requestUri": "/2013-04-01/trafficpolicyinstance",
	        "responseCode": 201
	      },
	      "input": {
	        "locationName": "CreateTrafficPolicyInstanceRequest",
	        "xmlNamespace": {
	          "uri": "https://route53.amazonaws.com/doc/2013-04-01/"
	        },
	        "type": "structure",
	        "required": [
	          "HostedZoneId",
	          "Name",
	          "TTL",
	          "TrafficPolicyId",
	          "TrafficPolicyVersion"
	        ],
	        "members": {
	          "HostedZoneId": {},
	          "Name": {},
	          "TTL": {
	            "type": "long"
	          },
	          "TrafficPolicyId": {},
	          "TrafficPolicyVersion": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "TrafficPolicyInstance",
	          "Location"
	        ],
	        "members": {
	          "TrafficPolicyInstance": {
	            "shape": "S2w"
	          },
	          "Location": {
	            "location": "header",
	            "locationName": "Location"
	          }
	        }
	      }
	    },
	    "CreateTrafficPolicyVersion": {
	      "http": {
	        "requestUri": "/2013-04-01/trafficpolicy/{Id}",
	        "responseCode": 201
	      },
	      "input": {
	        "locationName": "CreateTrafficPolicyVersionRequest",
	        "xmlNamespace": {
	          "uri": "https://route53.amazonaws.com/doc/2013-04-01/"
	        },
	        "type": "structure",
	        "required": [
	          "Id",
	          "Document"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          },
	          "Document": {},
	          "Comment": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "TrafficPolicy",
	          "Location"
	        ],
	        "members": {
	          "TrafficPolicy": {
	            "shape": "S2r"
	          },
	          "Location": {
	            "location": "header",
	            "locationName": "Location"
	          }
	        }
	      }
	    },
	    "CreateVPCAssociationAuthorization": {
	      "http": {
	        "requestUri": "/2013-04-01/hostedzone/{Id}/authorizevpcassociation"
	      },
	      "input": {
	        "locationName": "CreateVPCAssociationAuthorizationRequest",
	        "xmlNamespace": {
	          "uri": "https://route53.amazonaws.com/doc/2013-04-01/"
	        },
	        "type": "structure",
	        "required": [
	          "HostedZoneId",
	          "VPC"
	        ],
	        "members": {
	          "HostedZoneId": {
	            "location": "uri",
	            "locationName": "Id"
	          },
	          "VPC": {
	            "shape": "S3"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "HostedZoneId",
	          "VPC"
	        ],
	        "members": {
	          "HostedZoneId": {},
	          "VPC": {
	            "shape": "S3"
	          }
	        }
	      }
	    },
	    "DeleteHealthCheck": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/2013-04-01/healthcheck/{HealthCheckId}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "HealthCheckId"
	        ],
	        "members": {
	          "HealthCheckId": {
	            "location": "uri",
	            "locationName": "HealthCheckId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteHostedZone": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/2013-04-01/hostedzone/{Id}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "ChangeInfo"
	        ],
	        "members": {
	          "ChangeInfo": {
	            "shape": "S8"
	          }
	        }
	      }
	    },
	    "DeleteReusableDelegationSet": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/2013-04-01/delegationset/{Id}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteTrafficPolicy": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/2013-04-01/trafficpolicy/{Id}/{Version}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id",
	          "Version"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          },
	          "Version": {
	            "location": "uri",
	            "locationName": "Version",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteTrafficPolicyInstance": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/2013-04-01/trafficpolicyinstance/{Id}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteVPCAssociationAuthorization": {
	      "http": {
	        "requestUri": "/2013-04-01/hostedzone/{Id}/deauthorizevpcassociation"
	      },
	      "input": {
	        "locationName": "DeleteVPCAssociationAuthorizationRequest",
	        "xmlNamespace": {
	          "uri": "https://route53.amazonaws.com/doc/2013-04-01/"
	        },
	        "type": "structure",
	        "required": [
	          "HostedZoneId",
	          "VPC"
	        ],
	        "members": {
	          "HostedZoneId": {
	            "location": "uri",
	            "locationName": "Id"
	          },
	          "VPC": {
	            "shape": "S3"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DisassociateVPCFromHostedZone": {
	      "http": {
	        "requestUri": "/2013-04-01/hostedzone/{Id}/disassociatevpc"
	      },
	      "input": {
	        "locationName": "DisassociateVPCFromHostedZoneRequest",
	        "xmlNamespace": {
	          "uri": "https://route53.amazonaws.com/doc/2013-04-01/"
	        },
	        "type": "structure",
	        "required": [
	          "HostedZoneId",
	          "VPC"
	        ],
	        "members": {
	          "HostedZoneId": {
	            "location": "uri",
	            "locationName": "Id"
	          },
	          "VPC": {
	            "shape": "S3"
	          },
	          "Comment": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "ChangeInfo"
	        ],
	        "members": {
	          "ChangeInfo": {
	            "shape": "S8"
	          }
	        }
	      }
	    },
	    "GetChange": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2013-04-01/change/{Id}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "ChangeInfo"
	        ],
	        "members": {
	          "ChangeInfo": {
	            "shape": "S8"
	          }
	        }
	      }
	    },
	    "GetCheckerIpRanges": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2013-04-01/checkeripranges"
	      },
	      "input": {
	        "type": "structure",
	        "members": {}
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "CheckerIpRanges"
	        ],
	        "members": {
	          "CheckerIpRanges": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      }
	    },
	    "GetGeoLocation": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2013-04-01/geolocation"
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "ContinentCode": {
	            "location": "querystring",
	            "locationName": "continentcode"
	          },
	          "CountryCode": {
	            "location": "querystring",
	            "locationName": "countrycode"
	          },
	          "SubdivisionCode": {
	            "location": "querystring",
	            "locationName": "subdivisioncode"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "GeoLocationDetails"
	        ],
	        "members": {
	          "GeoLocationDetails": {
	            "shape": "S3q"
	          }
	        }
	      }
	    },
	    "GetHealthCheck": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2013-04-01/healthcheck/{HealthCheckId}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "HealthCheckId"
	        ],
	        "members": {
	          "HealthCheckId": {
	            "location": "uri",
	            "locationName": "HealthCheckId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "HealthCheck"
	        ],
	        "members": {
	          "HealthCheck": {
	            "shape": "S1x"
	          }
	        }
	      }
	    },
	    "GetHealthCheckCount": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2013-04-01/healthcheckcount"
	      },
	      "input": {
	        "type": "structure",
	        "members": {}
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "HealthCheckCount"
	        ],
	        "members": {
	          "HealthCheckCount": {
	            "type": "long"
	          }
	        }
	      }
	    },
	    "GetHealthCheckLastFailureReason": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2013-04-01/healthcheck/{HealthCheckId}/lastfailurereason"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "HealthCheckId"
	        ],
	        "members": {
	          "HealthCheckId": {
	            "location": "uri",
	            "locationName": "HealthCheckId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "HealthCheckObservations"
	        ],
	        "members": {
	          "HealthCheckObservations": {
	            "shape": "S41"
	          }
	        }
	      }
	    },
	    "GetHealthCheckStatus": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2013-04-01/healthcheck/{HealthCheckId}/status"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "HealthCheckId"
	        ],
	        "members": {
	          "HealthCheckId": {
	            "location": "uri",
	            "locationName": "HealthCheckId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "HealthCheckObservations"
	        ],
	        "members": {
	          "HealthCheckObservations": {
	            "shape": "S41"
	          }
	        }
	      }
	    },
	    "GetHostedZone": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2013-04-01/hostedzone/{Id}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "HostedZone"
	        ],
	        "members": {
	          "HostedZone": {
	            "shape": "S2g"
	          },
	          "DelegationSet": {
	            "shape": "S2i"
	          },
	          "VPCs": {
	            "shape": "S49"
	          }
	        }
	      }
	    },
	    "GetHostedZoneCount": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2013-04-01/hostedzonecount"
	      },
	      "input": {
	        "type": "structure",
	        "members": {}
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "HostedZoneCount"
	        ],
	        "members": {
	          "HostedZoneCount": {
	            "type": "long"
	          }
	        }
	      }
	    },
	    "GetReusableDelegationSet": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2013-04-01/delegationset/{Id}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "DelegationSet"
	        ],
	        "members": {
	          "DelegationSet": {
	            "shape": "S2i"
	          }
	        }
	      }
	    },
	    "GetTrafficPolicy": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2013-04-01/trafficpolicy/{Id}/{Version}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id",
	          "Version"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          },
	          "Version": {
	            "location": "uri",
	            "locationName": "Version",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "TrafficPolicy"
	        ],
	        "members": {
	          "TrafficPolicy": {
	            "shape": "S2r"
	          }
	        }
	      }
	    },
	    "GetTrafficPolicyInstance": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2013-04-01/trafficpolicyinstance/{Id}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "TrafficPolicyInstance"
	        ],
	        "members": {
	          "TrafficPolicyInstance": {
	            "shape": "S2w"
	          }
	        }
	      }
	    },
	    "GetTrafficPolicyInstanceCount": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2013-04-01/trafficpolicyinstancecount"
	      },
	      "input": {
	        "type": "structure",
	        "members": {}
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "TrafficPolicyInstanceCount"
	        ],
	        "members": {
	          "TrafficPolicyInstanceCount": {
	            "type": "integer"
	          }
	        }
	      }
	    },
	    "ListGeoLocations": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2013-04-01/geolocations"
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "StartContinentCode": {
	            "location": "querystring",
	            "locationName": "startcontinentcode"
	          },
	          "StartCountryCode": {
	            "location": "querystring",
	            "locationName": "startcountrycode"
	          },
	          "StartSubdivisionCode": {
	            "location": "querystring",
	            "locationName": "startsubdivisioncode"
	          },
	          "MaxItems": {
	            "location": "querystring",
	            "locationName": "maxitems"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "GeoLocationDetailsList",
	          "IsTruncated",
	          "MaxItems"
	        ],
	        "members": {
	          "GeoLocationDetailsList": {
	            "type": "list",
	            "member": {
	              "shape": "S3q",
	              "locationName": "GeoLocationDetails"
	            }
	          },
	          "IsTruncated": {
	            "type": "boolean"
	          },
	          "NextContinentCode": {},
	          "NextCountryCode": {},
	          "NextSubdivisionCode": {},
	          "MaxItems": {}
	        }
	      }
	    },
	    "ListHealthChecks": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2013-04-01/healthcheck"
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "Marker": {
	            "location": "querystring",
	            "locationName": "marker"
	          },
	          "MaxItems": {
	            "location": "querystring",
	            "locationName": "maxitems"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "HealthChecks",
	          "Marker",
	          "IsTruncated",
	          "MaxItems"
	        ],
	        "members": {
	          "HealthChecks": {
	            "type": "list",
	            "member": {
	              "shape": "S1x",
	              "locationName": "HealthCheck"
	            }
	          },
	          "Marker": {},
	          "IsTruncated": {
	            "type": "boolean"
	          },
	          "NextMarker": {},
	          "MaxItems": {}
	        }
	      }
	    },
	    "ListHostedZones": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2013-04-01/hostedzone"
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "Marker": {
	            "location": "querystring",
	            "locationName": "marker"
	          },
	          "MaxItems": {
	            "location": "querystring",
	            "locationName": "maxitems"
	          },
	          "DelegationSetId": {
	            "location": "querystring",
	            "locationName": "delegationsetid"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "HostedZones",
	          "Marker",
	          "IsTruncated",
	          "MaxItems"
	        ],
	        "members": {
	          "HostedZones": {
	            "shape": "S4x"
	          },
	          "Marker": {},
	          "IsTruncated": {
	            "type": "boolean"
	          },
	          "NextMarker": {},
	          "MaxItems": {}
	        }
	      }
	    },
	    "ListHostedZonesByName": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2013-04-01/hostedzonesbyname"
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "DNSName": {
	            "location": "querystring",
	            "locationName": "dnsname"
	          },
	          "HostedZoneId": {
	            "location": "querystring",
	            "locationName": "hostedzoneid"
	          },
	          "MaxItems": {
	            "location": "querystring",
	            "locationName": "maxitems"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "HostedZones",
	          "IsTruncated",
	          "MaxItems"
	        ],
	        "members": {
	          "HostedZones": {
	            "shape": "S4x"
	          },
	          "DNSName": {},
	          "HostedZoneId": {},
	          "IsTruncated": {
	            "type": "boolean"
	          },
	          "NextDNSName": {},
	          "NextHostedZoneId": {},
	          "MaxItems": {}
	        }
	      }
	    },
	    "ListResourceRecordSets": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2013-04-01/hostedzone/{Id}/rrset"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "HostedZoneId"
	        ],
	        "members": {
	          "HostedZoneId": {
	            "location": "uri",
	            "locationName": "Id"
	          },
	          "StartRecordName": {
	            "location": "querystring",
	            "locationName": "name"
	          },
	          "StartRecordType": {
	            "location": "querystring",
	            "locationName": "type"
	          },
	          "StartRecordIdentifier": {
	            "location": "querystring",
	            "locationName": "identifier"
	          },
	          "MaxItems": {
	            "location": "querystring",
	            "locationName": "maxitems"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "ResourceRecordSets",
	          "IsTruncated",
	          "MaxItems"
	        ],
	        "members": {
	          "ResourceRecordSets": {
	            "type": "list",
	            "member": {
	              "shape": "Sh",
	              "locationName": "ResourceRecordSet"
	            }
	          },
	          "IsTruncated": {
	            "type": "boolean"
	          },
	          "NextRecordName": {},
	          "NextRecordType": {},
	          "NextRecordIdentifier": {},
	          "MaxItems": {}
	        }
	      }
	    },
	    "ListReusableDelegationSets": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2013-04-01/delegationset"
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "Marker": {
	            "location": "querystring",
	            "locationName": "marker"
	          },
	          "MaxItems": {
	            "location": "querystring",
	            "locationName": "maxitems"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "DelegationSets",
	          "Marker",
	          "IsTruncated",
	          "MaxItems"
	        ],
	        "members": {
	          "DelegationSets": {
	            "type": "list",
	            "member": {
	              "shape": "S2i",
	              "locationName": "DelegationSet"
	            }
	          },
	          "Marker": {},
	          "IsTruncated": {
	            "type": "boolean"
	          },
	          "NextMarker": {},
	          "MaxItems": {}
	        }
	      }
	    },
	    "ListTagsForResource": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2013-04-01/tags/{ResourceType}/{ResourceId}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceType",
	          "ResourceId"
	        ],
	        "members": {
	          "ResourceType": {
	            "location": "uri",
	            "locationName": "ResourceType"
	          },
	          "ResourceId": {
	            "location": "uri",
	            "locationName": "ResourceId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "ResourceTagSet"
	        ],
	        "members": {
	          "ResourceTagSet": {
	            "shape": "S58"
	          }
	        }
	      }
	    },
	    "ListTagsForResources": {
	      "http": {
	        "requestUri": "/2013-04-01/tags/{ResourceType}"
	      },
	      "input": {
	        "locationName": "ListTagsForResourcesRequest",
	        "xmlNamespace": {
	          "uri": "https://route53.amazonaws.com/doc/2013-04-01/"
	        },
	        "type": "structure",
	        "required": [
	          "ResourceType",
	          "ResourceIds"
	        ],
	        "members": {
	          "ResourceType": {
	            "location": "uri",
	            "locationName": "ResourceType"
	          },
	          "ResourceIds": {
	            "type": "list",
	            "member": {
	              "locationName": "ResourceId"
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "ResourceTagSets"
	        ],
	        "members": {
	          "ResourceTagSets": {
	            "type": "list",
	            "member": {
	              "shape": "S58",
	              "locationName": "ResourceTagSet"
	            }
	          }
	        }
	      }
	    },
	    "ListTrafficPolicies": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2013-04-01/trafficpolicies"
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "TrafficPolicyIdMarker": {
	            "location": "querystring",
	            "locationName": "trafficpolicyid"
	          },
	          "MaxItems": {
	            "location": "querystring",
	            "locationName": "maxitems"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "TrafficPolicySummaries",
	          "IsTruncated",
	          "TrafficPolicyIdMarker",
	          "MaxItems"
	        ],
	        "members": {
	          "TrafficPolicySummaries": {
	            "type": "list",
	            "member": {
	              "locationName": "TrafficPolicySummary",
	              "type": "structure",
	              "required": [
	                "Id",
	                "Name",
	                "Type",
	                "LatestVersion",
	                "TrafficPolicyCount"
	              ],
	              "members": {
	                "Id": {},
	                "Name": {},
	                "Type": {},
	                "LatestVersion": {
	                  "type": "integer"
	                },
	                "TrafficPolicyCount": {
	                  "type": "integer"
	                }
	              }
	            }
	          },
	          "IsTruncated": {
	            "type": "boolean"
	          },
	          "TrafficPolicyIdMarker": {},
	          "MaxItems": {}
	        }
	      }
	    },
	    "ListTrafficPolicyInstances": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2013-04-01/trafficpolicyinstances"
	      },
	      "input": {
	        "type": "structure",
	        "members": {
	          "HostedZoneIdMarker": {
	            "location": "querystring",
	            "locationName": "hostedzoneid"
	          },
	          "TrafficPolicyInstanceNameMarker": {
	            "location": "querystring",
	            "locationName": "trafficpolicyinstancename"
	          },
	          "TrafficPolicyInstanceTypeMarker": {
	            "location": "querystring",
	            "locationName": "trafficpolicyinstancetype"
	          },
	          "MaxItems": {
	            "location": "querystring",
	            "locationName": "maxitems"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "TrafficPolicyInstances",
	          "IsTruncated",
	          "MaxItems"
	        ],
	        "members": {
	          "TrafficPolicyInstances": {
	            "shape": "S5j"
	          },
	          "HostedZoneIdMarker": {},
	          "TrafficPolicyInstanceNameMarker": {},
	          "TrafficPolicyInstanceTypeMarker": {},
	          "IsTruncated": {
	            "type": "boolean"
	          },
	          "MaxItems": {}
	        }
	      }
	    },
	    "ListTrafficPolicyInstancesByHostedZone": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2013-04-01/trafficpolicyinstances/hostedzone"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "HostedZoneId"
	        ],
	        "members": {
	          "HostedZoneId": {
	            "location": "querystring",
	            "locationName": "id"
	          },
	          "TrafficPolicyInstanceNameMarker": {
	            "location": "querystring",
	            "locationName": "trafficpolicyinstancename"
	          },
	          "TrafficPolicyInstanceTypeMarker": {
	            "location": "querystring",
	            "locationName": "trafficpolicyinstancetype"
	          },
	          "MaxItems": {
	            "location": "querystring",
	            "locationName": "maxitems"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "TrafficPolicyInstances",
	          "IsTruncated",
	          "MaxItems"
	        ],
	        "members": {
	          "TrafficPolicyInstances": {
	            "shape": "S5j"
	          },
	          "TrafficPolicyInstanceNameMarker": {},
	          "TrafficPolicyInstanceTypeMarker": {},
	          "IsTruncated": {
	            "type": "boolean"
	          },
	          "MaxItems": {}
	        }
	      }
	    },
	    "ListTrafficPolicyInstancesByPolicy": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2013-04-01/trafficpolicyinstances/trafficpolicy"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "TrafficPolicyId",
	          "TrafficPolicyVersion"
	        ],
	        "members": {
	          "TrafficPolicyId": {
	            "location": "querystring",
	            "locationName": "id"
	          },
	          "TrafficPolicyVersion": {
	            "location": "querystring",
	            "locationName": "version",
	            "type": "integer"
	          },
	          "HostedZoneIdMarker": {
	            "location": "querystring",
	            "locationName": "hostedzoneid"
	          },
	          "TrafficPolicyInstanceNameMarker": {
	            "location": "querystring",
	            "locationName": "trafficpolicyinstancename"
	          },
	          "TrafficPolicyInstanceTypeMarker": {
	            "location": "querystring",
	            "locationName": "trafficpolicyinstancetype"
	          },
	          "MaxItems": {
	            "location": "querystring",
	            "locationName": "maxitems"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "TrafficPolicyInstances",
	          "IsTruncated",
	          "MaxItems"
	        ],
	        "members": {
	          "TrafficPolicyInstances": {
	            "shape": "S5j"
	          },
	          "HostedZoneIdMarker": {},
	          "TrafficPolicyInstanceNameMarker": {},
	          "TrafficPolicyInstanceTypeMarker": {},
	          "IsTruncated": {
	            "type": "boolean"
	          },
	          "MaxItems": {}
	        }
	      }
	    },
	    "ListTrafficPolicyVersions": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2013-04-01/trafficpolicies/{Id}/versions"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          },
	          "TrafficPolicyVersionMarker": {
	            "location": "querystring",
	            "locationName": "trafficpolicyversion"
	          },
	          "MaxItems": {
	            "location": "querystring",
	            "locationName": "maxitems"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "TrafficPolicies",
	          "IsTruncated",
	          "TrafficPolicyVersionMarker",
	          "MaxItems"
	        ],
	        "members": {
	          "TrafficPolicies": {
	            "type": "list",
	            "member": {
	              "shape": "S2r",
	              "locationName": "TrafficPolicy"
	            }
	          },
	          "IsTruncated": {
	            "type": "boolean"
	          },
	          "TrafficPolicyVersionMarker": {},
	          "MaxItems": {}
	        }
	      }
	    },
	    "ListVPCAssociationAuthorizations": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2013-04-01/hostedzone/{Id}/authorizevpcassociation"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "HostedZoneId"
	        ],
	        "members": {
	          "HostedZoneId": {
	            "location": "uri",
	            "locationName": "Id"
	          },
	          "NextToken": {
	            "location": "querystring",
	            "locationName": "nexttoken"
	          },
	          "MaxResults": {
	            "location": "querystring",
	            "locationName": "maxresults"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "HostedZoneId",
	          "VPCs"
	        ],
	        "members": {
	          "HostedZoneId": {},
	          "NextToken": {},
	          "VPCs": {
	            "shape": "S49"
	          }
	        }
	      }
	    },
	    "TestDNSAnswer": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/2013-04-01/testdnsanswer"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "HostedZoneId",
	          "RecordName",
	          "RecordType"
	        ],
	        "members": {
	          "HostedZoneId": {
	            "location": "querystring",
	            "locationName": "hostedzoneid"
	          },
	          "RecordName": {
	            "location": "querystring",
	            "locationName": "recordname"
	          },
	          "RecordType": {
	            "location": "querystring",
	            "locationName": "recordtype"
	          },
	          "ResolverIP": {
	            "location": "querystring",
	            "locationName": "resolverip"
	          },
	          "EDNS0ClientSubnetIP": {
	            "location": "querystring",
	            "locationName": "edns0clientsubnetip"
	          },
	          "EDNS0ClientSubnetMask": {
	            "location": "querystring",
	            "locationName": "edns0clientsubnetmask"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "Nameserver",
	          "RecordName",
	          "RecordType",
	          "RecordData",
	          "ResponseCode",
	          "Protocol"
	        ],
	        "members": {
	          "Nameserver": {},
	          "RecordName": {},
	          "RecordType": {},
	          "RecordData": {
	            "type": "list",
	            "member": {
	              "locationName": "RecordDataEntry"
	            }
	          },
	          "ResponseCode": {},
	          "Protocol": {}
	        }
	      }
	    },
	    "UpdateHealthCheck": {
	      "http": {
	        "requestUri": "/2013-04-01/healthcheck/{HealthCheckId}"
	      },
	      "input": {
	        "locationName": "UpdateHealthCheckRequest",
	        "xmlNamespace": {
	          "uri": "https://route53.amazonaws.com/doc/2013-04-01/"
	        },
	        "type": "structure",
	        "required": [
	          "HealthCheckId"
	        ],
	        "members": {
	          "HealthCheckId": {
	            "location": "uri",
	            "locationName": "HealthCheckId"
	          },
	          "HealthCheckVersion": {
	            "type": "long"
	          },
	          "IPAddress": {},
	          "Port": {
	            "type": "integer"
	          },
	          "ResourcePath": {},
	          "FullyQualifiedDomainName": {},
	          "SearchString": {},
	          "FailureThreshold": {
	            "type": "integer"
	          },
	          "Inverted": {
	            "type": "boolean"
	          },
	          "HealthThreshold": {
	            "type": "integer"
	          },
	          "ChildHealthChecks": {
	            "shape": "S1o"
	          },
	          "EnableSNI": {
	            "type": "boolean"
	          },
	          "Regions": {
	            "shape": "S1q"
	          },
	          "AlarmIdentifier": {
	            "shape": "S1s"
	          },
	          "InsufficientDataHealthStatus": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "HealthCheck"
	        ],
	        "members": {
	          "HealthCheck": {
	            "shape": "S1x"
	          }
	        }
	      }
	    },
	    "UpdateHostedZoneComment": {
	      "http": {
	        "requestUri": "/2013-04-01/hostedzone/{Id}"
	      },
	      "input": {
	        "locationName": "UpdateHostedZoneCommentRequest",
	        "xmlNamespace": {
	          "uri": "https://route53.amazonaws.com/doc/2013-04-01/"
	        },
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          },
	          "Comment": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "HostedZone"
	        ],
	        "members": {
	          "HostedZone": {
	            "shape": "S2g"
	          }
	        }
	      }
	    },
	    "UpdateTrafficPolicyComment": {
	      "http": {
	        "requestUri": "/2013-04-01/trafficpolicy/{Id}/{Version}"
	      },
	      "input": {
	        "locationName": "UpdateTrafficPolicyCommentRequest",
	        "xmlNamespace": {
	          "uri": "https://route53.amazonaws.com/doc/2013-04-01/"
	        },
	        "type": "structure",
	        "required": [
	          "Id",
	          "Version",
	          "Comment"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          },
	          "Version": {
	            "location": "uri",
	            "locationName": "Version",
	            "type": "integer"
	          },
	          "Comment": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "TrafficPolicy"
	        ],
	        "members": {
	          "TrafficPolicy": {
	            "shape": "S2r"
	          }
	        }
	      }
	    },
	    "UpdateTrafficPolicyInstance": {
	      "http": {
	        "requestUri": "/2013-04-01/trafficpolicyinstance/{Id}"
	      },
	      "input": {
	        "locationName": "UpdateTrafficPolicyInstanceRequest",
	        "xmlNamespace": {
	          "uri": "https://route53.amazonaws.com/doc/2013-04-01/"
	        },
	        "type": "structure",
	        "required": [
	          "Id",
	          "TTL",
	          "TrafficPolicyId",
	          "TrafficPolicyVersion"
	        ],
	        "members": {
	          "Id": {
	            "location": "uri",
	            "locationName": "Id"
	          },
	          "TTL": {
	            "type": "long"
	          },
	          "TrafficPolicyId": {},
	          "TrafficPolicyVersion": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "TrafficPolicyInstance"
	        ],
	        "members": {
	          "TrafficPolicyInstance": {
	            "shape": "S2w"
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S3": {
	      "type": "structure",
	      "members": {
	        "VPCRegion": {},
	        "VPCId": {}
	      }
	    },
	    "S8": {
	      "type": "structure",
	      "required": [
	        "Id",
	        "Status",
	        "SubmittedAt"
	      ],
	      "members": {
	        "Id": {},
	        "Status": {},
	        "SubmittedAt": {
	          "type": "timestamp"
	        },
	        "Comment": {}
	      }
	    },
	    "Sh": {
	      "type": "structure",
	      "required": [
	        "Name",
	        "Type"
	      ],
	      "members": {
	        "Name": {},
	        "Type": {},
	        "SetIdentifier": {},
	        "Weight": {
	          "type": "long"
	        },
	        "Region": {},
	        "GeoLocation": {
	          "type": "structure",
	          "members": {
	            "ContinentCode": {},
	            "CountryCode": {},
	            "SubdivisionCode": {}
	          }
	        },
	        "Failover": {},
	        "TTL": {
	          "type": "long"
	        },
	        "ResourceRecords": {
	          "type": "list",
	          "member": {
	            "locationName": "ResourceRecord",
	            "type": "structure",
	            "required": [
	              "Value"
	            ],
	            "members": {
	              "Value": {}
	            }
	          }
	        },
	        "AliasTarget": {
	          "type": "structure",
	          "required": [
	            "HostedZoneId",
	            "DNSName",
	            "EvaluateTargetHealth"
	          ],
	          "members": {
	            "HostedZoneId": {},
	            "DNSName": {},
	            "EvaluateTargetHealth": {
	              "type": "boolean"
	            }
	          }
	        },
	        "HealthCheckId": {},
	        "TrafficPolicyInstanceId": {}
	      }
	    },
	    "S14": {
	      "type": "list",
	      "member": {
	        "locationName": "Tag",
	        "type": "structure",
	        "members": {
	          "Key": {},
	          "Value": {}
	        }
	      }
	    },
	    "S1c": {
	      "type": "structure",
	      "required": [
	        "Type"
	      ],
	      "members": {
	        "IPAddress": {},
	        "Port": {
	          "type": "integer"
	        },
	        "Type": {},
	        "ResourcePath": {},
	        "FullyQualifiedDomainName": {},
	        "SearchString": {},
	        "RequestInterval": {
	          "type": "integer"
	        },
	        "FailureThreshold": {
	          "type": "integer"
	        },
	        "MeasureLatency": {
	          "type": "boolean"
	        },
	        "Inverted": {
	          "type": "boolean"
	        },
	        "HealthThreshold": {
	          "type": "integer"
	        },
	        "ChildHealthChecks": {
	          "shape": "S1o"
	        },
	        "EnableSNI": {
	          "type": "boolean"
	        },
	        "Regions": {
	          "shape": "S1q"
	        },
	        "AlarmIdentifier": {
	          "shape": "S1s"
	        },
	        "InsufficientDataHealthStatus": {}
	      }
	    },
	    "S1o": {
	      "type": "list",
	      "member": {
	        "locationName": "ChildHealthCheck"
	      }
	    },
	    "S1q": {
	      "type": "list",
	      "member": {
	        "locationName": "Region"
	      }
	    },
	    "S1s": {
	      "type": "structure",
	      "required": [
	        "Region",
	        "Name"
	      ],
	      "members": {
	        "Region": {},
	        "Name": {}
	      }
	    },
	    "S1x": {
	      "type": "structure",
	      "required": [
	        "Id",
	        "CallerReference",
	        "HealthCheckConfig",
	        "HealthCheckVersion"
	      ],
	      "members": {
	        "Id": {},
	        "CallerReference": {},
	        "HealthCheckConfig": {
	          "shape": "S1c"
	        },
	        "HealthCheckVersion": {
	          "type": "long"
	        },
	        "CloudWatchAlarmConfiguration": {
	          "type": "structure",
	          "required": [
	            "EvaluationPeriods",
	            "Threshold",
	            "ComparisonOperator",
	            "Period",
	            "MetricName",
	            "Namespace",
	            "Statistic"
	          ],
	          "members": {
	            "EvaluationPeriods": {
	              "type": "integer"
	            },
	            "Threshold": {
	              "type": "double"
	            },
	            "ComparisonOperator": {},
	            "Period": {
	              "type": "integer"
	            },
	            "MetricName": {},
	            "Namespace": {},
	            "Statistic": {},
	            "Dimensions": {
	              "type": "list",
	              "member": {
	                "locationName": "Dimension",
	                "type": "structure",
	                "required": [
	                  "Name",
	                  "Value"
	                ],
	                "members": {
	                  "Name": {},
	                  "Value": {}
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "S2d": {
	      "type": "structure",
	      "members": {
	        "Comment": {},
	        "PrivateZone": {
	          "type": "boolean"
	        }
	      }
	    },
	    "S2g": {
	      "type": "structure",
	      "required": [
	        "Id",
	        "Name",
	        "CallerReference"
	      ],
	      "members": {
	        "Id": {},
	        "Name": {},
	        "CallerReference": {},
	        "Config": {
	          "shape": "S2d"
	        },
	        "ResourceRecordSetCount": {
	          "type": "long"
	        }
	      }
	    },
	    "S2i": {
	      "type": "structure",
	      "required": [
	        "NameServers"
	      ],
	      "members": {
	        "Id": {},
	        "CallerReference": {},
	        "NameServers": {
	          "type": "list",
	          "member": {
	            "locationName": "NameServer"
	          }
	        }
	      }
	    },
	    "S2r": {
	      "type": "structure",
	      "required": [
	        "Id",
	        "Version",
	        "Name",
	        "Type",
	        "Document"
	      ],
	      "members": {
	        "Id": {},
	        "Version": {
	          "type": "integer"
	        },
	        "Name": {},
	        "Type": {},
	        "Document": {},
	        "Comment": {}
	      }
	    },
	    "S2w": {
	      "type": "structure",
	      "required": [
	        "Id",
	        "HostedZoneId",
	        "Name",
	        "TTL",
	        "State",
	        "Message",
	        "TrafficPolicyId",
	        "TrafficPolicyVersion",
	        "TrafficPolicyType"
	      ],
	      "members": {
	        "Id": {},
	        "HostedZoneId": {},
	        "Name": {},
	        "TTL": {
	          "type": "long"
	        },
	        "State": {},
	        "Message": {},
	        "TrafficPolicyId": {},
	        "TrafficPolicyVersion": {
	          "type": "integer"
	        },
	        "TrafficPolicyType": {}
	      }
	    },
	    "S3q": {
	      "type": "structure",
	      "members": {
	        "ContinentCode": {},
	        "ContinentName": {},
	        "CountryCode": {},
	        "CountryName": {},
	        "SubdivisionCode": {},
	        "SubdivisionName": {}
	      }
	    },
	    "S41": {
	      "type": "list",
	      "member": {
	        "locationName": "HealthCheckObservation",
	        "type": "structure",
	        "members": {
	          "Region": {},
	          "IPAddress": {},
	          "StatusReport": {
	            "type": "structure",
	            "members": {
	              "Status": {},
	              "CheckedTime": {
	                "type": "timestamp"
	              }
	            }
	          }
	        }
	      }
	    },
	    "S49": {
	      "type": "list",
	      "member": {
	        "shape": "S3",
	        "locationName": "VPC"
	      }
	    },
	    "S4x": {
	      "type": "list",
	      "member": {
	        "shape": "S2g",
	        "locationName": "HostedZone"
	      }
	    },
	    "S58": {
	      "type": "structure",
	      "members": {
	        "ResourceType": {},
	        "ResourceId": {},
	        "Tags": {
	          "shape": "S14"
	        }
	      }
	    },
	    "S5j": {
	      "type": "list",
	      "member": {
	        "shape": "S2w",
	        "locationName": "TrafficPolicyInstance"
	      }
	    }
	  }
	}
	},{}],115:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "ListHealthChecks": {
	      "input_token": "Marker",
	      "limit_key": "MaxItems",
	      "more_results": "IsTruncated",
	      "output_token": "NextMarker",
	      "result_key": "HealthChecks"
	    },
	    "ListHostedZones": {
	      "input_token": "Marker",
	      "limit_key": "MaxItems",
	      "more_results": "IsTruncated",
	      "output_token": "NextMarker",
	      "result_key": "HostedZones"
	    },
	    "ListResourceRecordSets": {
	      "input_token": [
	        "StartRecordName",
	        "StartRecordType",
	        "StartRecordIdentifier"
	      ],
	      "limit_key": "MaxItems",
	      "more_results": "IsTruncated",
	      "output_token": [
	        "NextRecordName",
	        "NextRecordType",
	        "NextRecordIdentifier"
	      ],
	      "result_key": "ResourceRecordSets"
	    }
	  }
	}
	},{}],116:[function(require,module,exports){
	module.exports={
	  "version": 2,
	  "waiters": {
	    "ResourceRecordSetsChanged": {
	      "delay": 30,
	      "maxAttempts": 60,
	      "operation": "GetChange",
	      "acceptors": [
	        {
	          "matcher": "path",
	          "expected": "INSYNC",
	          "argument": "ChangeInfo.Status",
	          "state": "success"
	        }
	      ]
	    }
	  }
	}
	
	},{}],117:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "uid": "route53domains-2014-05-15",
	    "apiVersion": "2014-05-15",
	    "endpointPrefix": "route53domains",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceFullName": "Amazon Route 53 Domains",
	    "signatureVersion": "v4",
	    "targetPrefix": "Route53Domains_v20140515"
	  },
	  "operations": {
	    "CheckDomainAvailability": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DomainName"
	        ],
	        "members": {
	          "DomainName": {},
	          "IdnLangCode": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "Availability"
	        ],
	        "members": {
	          "Availability": {}
	        }
	      }
	    },
	    "DeleteTagsForDomain": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DomainName",
	          "TagsToDelete"
	        ],
	        "members": {
	          "DomainName": {},
	          "TagsToDelete": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DisableDomainAutoRenew": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DomainName"
	        ],
	        "members": {
	          "DomainName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DisableDomainTransferLock": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DomainName"
	        ],
	        "members": {
	          "DomainName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "OperationId"
	        ],
	        "members": {
	          "OperationId": {}
	        }
	      }
	    },
	    "EnableDomainAutoRenew": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DomainName"
	        ],
	        "members": {
	          "DomainName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "EnableDomainTransferLock": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DomainName"
	        ],
	        "members": {
	          "DomainName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "OperationId"
	        ],
	        "members": {
	          "OperationId": {}
	        }
	      }
	    },
	    "GetContactReachabilityStatus": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "domainName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "domainName": {},
	          "status": {}
	        }
	      }
	    },
	    "GetDomainDetail": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DomainName"
	        ],
	        "members": {
	          "DomainName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "DomainName",
	          "Nameservers",
	          "AdminContact",
	          "RegistrantContact",
	          "TechContact"
	        ],
	        "members": {
	          "DomainName": {},
	          "Nameservers": {
	            "shape": "So"
	          },
	          "AutoRenew": {
	            "type": "boolean"
	          },
	          "AdminContact": {
	            "shape": "Su"
	          },
	          "RegistrantContact": {
	            "shape": "Su"
	          },
	          "TechContact": {
	            "shape": "Su"
	          },
	          "AdminPrivacy": {
	            "type": "boolean"
	          },
	          "RegistrantPrivacy": {
	            "type": "boolean"
	          },
	          "TechPrivacy": {
	            "type": "boolean"
	          },
	          "RegistrarName": {},
	          "WhoIsServer": {},
	          "RegistrarUrl": {},
	          "AbuseContactEmail": {},
	          "AbuseContactPhone": {},
	          "RegistryDomainId": {},
	          "CreationDate": {
	            "type": "timestamp"
	          },
	          "UpdatedDate": {
	            "type": "timestamp"
	          },
	          "ExpirationDate": {
	            "type": "timestamp"
	          },
	          "Reseller": {},
	          "DnsSec": {},
	          "StatusList": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      }
	    },
	    "GetDomainSuggestions": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DomainName",
	          "SuggestionCount",
	          "OnlyAvailable"
	        ],
	        "members": {
	          "DomainName": {},
	          "SuggestionCount": {
	            "type": "integer"
	          },
	          "OnlyAvailable": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "SuggestionsList": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "DomainName": {},
	                "Availability": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "GetOperationDetail": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "OperationId"
	        ],
	        "members": {
	          "OperationId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "OperationId": {},
	          "Status": {},
	          "Message": {},
	          "DomainName": {},
	          "Type": {},
	          "SubmittedDate": {
	            "type": "timestamp"
	          }
	        }
	      }
	    },
	    "ListDomains": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "MaxItems": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "Domains"
	        ],
	        "members": {
	          "Domains": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "DomainName"
	              ],
	              "members": {
	                "DomainName": {},
	                "AutoRenew": {
	                  "type": "boolean"
	                },
	                "TransferLock": {
	                  "type": "boolean"
	                },
	                "Expiry": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          },
	          "NextPageMarker": {}
	        }
	      }
	    },
	    "ListOperations": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "MaxItems": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "Operations"
	        ],
	        "members": {
	          "Operations": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "OperationId",
	                "Status",
	                "Type",
	                "SubmittedDate"
	              ],
	              "members": {
	                "OperationId": {},
	                "Status": {},
	                "Type": {},
	                "SubmittedDate": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          },
	          "NextPageMarker": {}
	        }
	      }
	    },
	    "ListTagsForDomain": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DomainName"
	        ],
	        "members": {
	          "DomainName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "TagList"
	        ],
	        "members": {
	          "TagList": {
	            "shape": "S24"
	          }
	        }
	      }
	    },
	    "RegisterDomain": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DomainName",
	          "DurationInYears",
	          "AdminContact",
	          "RegistrantContact",
	          "TechContact"
	        ],
	        "members": {
	          "DomainName": {},
	          "IdnLangCode": {},
	          "DurationInYears": {
	            "type": "integer"
	          },
	          "AutoRenew": {
	            "type": "boolean"
	          },
	          "AdminContact": {
	            "shape": "Su"
	          },
	          "RegistrantContact": {
	            "shape": "Su"
	          },
	          "TechContact": {
	            "shape": "Su"
	          },
	          "PrivacyProtectAdminContact": {
	            "type": "boolean"
	          },
	          "PrivacyProtectRegistrantContact": {
	            "type": "boolean"
	          },
	          "PrivacyProtectTechContact": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "OperationId"
	        ],
	        "members": {
	          "OperationId": {}
	        }
	      }
	    },
	    "RenewDomain": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DomainName",
	          "CurrentExpiryYear"
	        ],
	        "members": {
	          "DomainName": {},
	          "DurationInYears": {
	            "type": "integer"
	          },
	          "CurrentExpiryYear": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "OperationId"
	        ],
	        "members": {
	          "OperationId": {}
	        }
	      }
	    },
	    "ResendContactReachabilityEmail": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "domainName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "domainName": {},
	          "emailAddress": {},
	          "isAlreadyVerified": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "RetrieveDomainAuthCode": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DomainName"
	        ],
	        "members": {
	          "DomainName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "AuthCode"
	        ],
	        "members": {
	          "AuthCode": {
	            "shape": "S2h"
	          }
	        }
	      }
	    },
	    "TransferDomain": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DomainName",
	          "DurationInYears",
	          "AdminContact",
	          "RegistrantContact",
	          "TechContact"
	        ],
	        "members": {
	          "DomainName": {},
	          "IdnLangCode": {},
	          "DurationInYears": {
	            "type": "integer"
	          },
	          "Nameservers": {
	            "shape": "So"
	          },
	          "AuthCode": {
	            "shape": "S2h"
	          },
	          "AutoRenew": {
	            "type": "boolean"
	          },
	          "AdminContact": {
	            "shape": "Su"
	          },
	          "RegistrantContact": {
	            "shape": "Su"
	          },
	          "TechContact": {
	            "shape": "Su"
	          },
	          "PrivacyProtectAdminContact": {
	            "type": "boolean"
	          },
	          "PrivacyProtectRegistrantContact": {
	            "type": "boolean"
	          },
	          "PrivacyProtectTechContact": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "OperationId"
	        ],
	        "members": {
	          "OperationId": {}
	        }
	      }
	    },
	    "UpdateDomainContact": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DomainName"
	        ],
	        "members": {
	          "DomainName": {},
	          "AdminContact": {
	            "shape": "Su"
	          },
	          "RegistrantContact": {
	            "shape": "Su"
	          },
	          "TechContact": {
	            "shape": "Su"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "OperationId"
	        ],
	        "members": {
	          "OperationId": {}
	        }
	      }
	    },
	    "UpdateDomainContactPrivacy": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DomainName"
	        ],
	        "members": {
	          "DomainName": {},
	          "AdminPrivacy": {
	            "type": "boolean"
	          },
	          "RegistrantPrivacy": {
	            "type": "boolean"
	          },
	          "TechPrivacy": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "OperationId"
	        ],
	        "members": {
	          "OperationId": {}
	        }
	      }
	    },
	    "UpdateDomainNameservers": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DomainName",
	          "Nameservers"
	        ],
	        "members": {
	          "DomainName": {},
	          "FIAuthKey": {},
	          "Nameservers": {
	            "shape": "So"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "OperationId"
	        ],
	        "members": {
	          "OperationId": {}
	        }
	      }
	    },
	    "UpdateTagsForDomain": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DomainName"
	        ],
	        "members": {
	          "DomainName": {},
	          "TagsToUpdate": {
	            "shape": "S24"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "ViewBilling": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Start": {
	            "type": "timestamp"
	          },
	          "End": {
	            "type": "timestamp"
	          },
	          "Marker": {},
	          "MaxItems": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NextPageMarker": {},
	          "BillingRecords": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "DomainName": {},
	                "Operation": {},
	                "InvoiceId": {},
	                "BillDate": {
	                  "type": "timestamp"
	                },
	                "Price": {
	                  "type": "double"
	                }
	              }
	            }
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "So": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "Name"
	        ],
	        "members": {
	          "Name": {},
	          "GlueIps": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      }
	    },
	    "Su": {
	      "type": "structure",
	      "members": {
	        "FirstName": {},
	        "LastName": {},
	        "ContactType": {},
	        "OrganizationName": {},
	        "AddressLine1": {},
	        "AddressLine2": {},
	        "City": {},
	        "State": {},
	        "CountryCode": {},
	        "ZipCode": {},
	        "PhoneNumber": {},
	        "Email": {},
	        "Fax": {},
	        "ExtraParams": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "required": [
	              "Name",
	              "Value"
	            ],
	            "members": {
	              "Name": {},
	              "Value": {}
	            }
	          }
	        }
	      },
	      "sensitive": true
	    },
	    "S24": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "Key": {},
	          "Value": {}
	        }
	      }
	    },
	    "S2h": {
	      "type": "string",
	      "sensitive": true
	    }
	  }
	}
	},{}],118:[function(require,module,exports){
	module.exports={
	  "version": "1.0",
	  "pagination": {
	    "ListDomains": {
	      "limit_key": "MaxItems",
	      "input_token": "Marker",
	      "output_token": "NextPageMarker",
	      "result_key": "Domains"
	    },
	    "ListOperations": {
	      "limit_key": "MaxItems",
	      "input_token": "Marker",
	      "output_token": "NextPageMarker",
	      "result_key": "Operations"
	    }
	  }
	}
	
	},{}],119:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2016-11-28",
	    "endpointPrefix": "runtime.lex",
	    "jsonVersion": "1.1",
	    "protocol": "rest-json",
	    "serviceFullName": "Amazon Lex Runtime Service",
	    "signatureVersion": "v4",
	    "signingName": "lex",
	    "uid": "runtime.lex-2016-11-28"
	  },
	  "operations": {
	    "PostText": {
	      "http": {
	        "requestUri": "/bot/{botName}/alias/{botAlias}/user/{userId}/text"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "botName",
	          "botAlias",
	          "userId",
	          "inputText"
	        ],
	        "members": {
	          "botName": {
	            "location": "uri",
	            "locationName": "botName"
	          },
	          "botAlias": {
	            "location": "uri",
	            "locationName": "botAlias"
	          },
	          "userId": {
	            "location": "uri",
	            "locationName": "userId"
	          },
	          "sessionAttributes": {
	            "shape": "S5"
	          },
	          "inputText": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "intentName": {},
	          "slots": {
	            "shape": "S5"
	          },
	          "sessionAttributes": {
	            "shape": "S5"
	          },
	          "message": {},
	          "dialogState": {},
	          "slotToElicit": {},
	          "responseCard": {
	            "type": "structure",
	            "members": {
	              "version": {},
	              "contentType": {},
	              "genericAttachments": {
	                "type": "list",
	                "member": {
	                  "type": "structure",
	                  "members": {
	                    "title": {},
	                    "subTitle": {},
	                    "attachmentLinkUrl": {},
	                    "imageUrl": {},
	                    "buttons": {
	                      "type": "list",
	                      "member": {
	                        "type": "structure",
	                        "required": [
	                          "text",
	                          "value"
	                        ],
	                        "members": {
	                          "text": {},
	                          "value": {}
	                        }
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S5": {
	      "type": "map",
	      "key": {},
	      "value": {}
	    }
	  }
	}
	},{}],120:[function(require,module,exports){
	arguments[4][21][0].apply(exports,arguments)
	},{"dup":21}],121:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2006-03-01",
	    "checksumFormat": "md5",
	    "endpointPrefix": "s3",
	    "globalEndpoint": "s3.amazonaws.com",
	    "protocol": "rest-xml",
	    "serviceAbbreviation": "Amazon S3",
	    "serviceFullName": "Amazon Simple Storage Service",
	    "signatureVersion": "s3",
	    "timestampFormat": "rfc822",
	    "uid": "s3-2006-03-01"
	  },
	  "operations": {
	    "AbortMultipartUpload": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/{Bucket}/{Key+}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "Key",
	          "UploadId"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "Key": {
	            "location": "uri",
	            "locationName": "Key"
	          },
	          "UploadId": {
	            "location": "querystring",
	            "locationName": "uploadId"
	          },
	          "RequestPayer": {
	            "location": "header",
	            "locationName": "x-amz-request-payer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "RequestCharged": {
	            "location": "header",
	            "locationName": "x-amz-request-charged"
	          }
	        }
	      }
	    },
	    "CompleteMultipartUpload": {
	      "http": {
	        "requestUri": "/{Bucket}/{Key+}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "Key",
	          "UploadId"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "Key": {
	            "location": "uri",
	            "locationName": "Key"
	          },
	          "MultipartUpload": {
	            "locationName": "CompleteMultipartUpload",
	            "xmlNamespace": {
	              "uri": "http://s3.amazonaws.com/doc/2006-03-01/"
	            },
	            "type": "structure",
	            "members": {
	              "Parts": {
	                "locationName": "Part",
	                "type": "list",
	                "member": {
	                  "type": "structure",
	                  "members": {
	                    "ETag": {},
	                    "PartNumber": {
	                      "type": "integer"
	                    }
	                  }
	                },
	                "flattened": true
	              }
	            }
	          },
	          "UploadId": {
	            "location": "querystring",
	            "locationName": "uploadId"
	          },
	          "RequestPayer": {
	            "location": "header",
	            "locationName": "x-amz-request-payer"
	          }
	        },
	        "payload": "MultipartUpload"
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Location": {},
	          "Bucket": {},
	          "Key": {},
	          "Expiration": {
	            "location": "header",
	            "locationName": "x-amz-expiration"
	          },
	          "ETag": {},
	          "ServerSideEncryption": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption"
	          },
	          "VersionId": {
	            "location": "header",
	            "locationName": "x-amz-version-id"
	          },
	          "SSEKMSKeyId": {
	            "shape": "Sj",
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-aws-kms-key-id"
	          },
	          "RequestCharged": {
	            "location": "header",
	            "locationName": "x-amz-request-charged"
	          }
	        }
	      }
	    },
	    "CopyObject": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/{Bucket}/{Key+}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "CopySource",
	          "Key"
	        ],
	        "members": {
	          "ACL": {
	            "location": "header",
	            "locationName": "x-amz-acl"
	          },
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "CacheControl": {
	            "location": "header",
	            "locationName": "Cache-Control"
	          },
	          "ContentDisposition": {
	            "location": "header",
	            "locationName": "Content-Disposition"
	          },
	          "ContentEncoding": {
	            "location": "header",
	            "locationName": "Content-Encoding"
	          },
	          "ContentLanguage": {
	            "location": "header",
	            "locationName": "Content-Language"
	          },
	          "ContentType": {
	            "location": "header",
	            "locationName": "Content-Type"
	          },
	          "CopySource": {
	            "location": "header",
	            "locationName": "x-amz-copy-source"
	          },
	          "CopySourceIfMatch": {
	            "location": "header",
	            "locationName": "x-amz-copy-source-if-match"
	          },
	          "CopySourceIfModifiedSince": {
	            "location": "header",
	            "locationName": "x-amz-copy-source-if-modified-since",
	            "type": "timestamp"
	          },
	          "CopySourceIfNoneMatch": {
	            "location": "header",
	            "locationName": "x-amz-copy-source-if-none-match"
	          },
	          "CopySourceIfUnmodifiedSince": {
	            "location": "header",
	            "locationName": "x-amz-copy-source-if-unmodified-since",
	            "type": "timestamp"
	          },
	          "Expires": {
	            "location": "header",
	            "locationName": "Expires",
	            "type": "timestamp"
	          },
	          "GrantFullControl": {
	            "location": "header",
	            "locationName": "x-amz-grant-full-control"
	          },
	          "GrantRead": {
	            "location": "header",
	            "locationName": "x-amz-grant-read"
	          },
	          "GrantReadACP": {
	            "location": "header",
	            "locationName": "x-amz-grant-read-acp"
	          },
	          "GrantWriteACP": {
	            "location": "header",
	            "locationName": "x-amz-grant-write-acp"
	          },
	          "Key": {
	            "location": "uri",
	            "locationName": "Key"
	          },
	          "Metadata": {
	            "shape": "S11",
	            "location": "headers",
	            "locationName": "x-amz-meta-"
	          },
	          "MetadataDirective": {
	            "location": "header",
	            "locationName": "x-amz-metadata-directive"
	          },
	          "TaggingDirective": {
	            "location": "header",
	            "locationName": "x-amz-tagging-directive"
	          },
	          "ServerSideEncryption": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption"
	          },
	          "StorageClass": {
	            "location": "header",
	            "locationName": "x-amz-storage-class"
	          },
	          "WebsiteRedirectLocation": {
	            "location": "header",
	            "locationName": "x-amz-website-redirect-location"
	          },
	          "SSECustomerAlgorithm": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-algorithm"
	          },
	          "SSECustomerKey": {
	            "shape": "S19",
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-key"
	          },
	          "SSECustomerKeyMD5": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-key-MD5"
	          },
	          "SSEKMSKeyId": {
	            "shape": "Sj",
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-aws-kms-key-id"
	          },
	          "CopySourceSSECustomerAlgorithm": {
	            "location": "header",
	            "locationName": "x-amz-copy-source-server-side-encryption-customer-algorithm"
	          },
	          "CopySourceSSECustomerKey": {
	            "shape": "S1c",
	            "location": "header",
	            "locationName": "x-amz-copy-source-server-side-encryption-customer-key"
	          },
	          "CopySourceSSECustomerKeyMD5": {
	            "location": "header",
	            "locationName": "x-amz-copy-source-server-side-encryption-customer-key-MD5"
	          },
	          "RequestPayer": {
	            "location": "header",
	            "locationName": "x-amz-request-payer"
	          },
	          "Tagging": {
	            "location": "header",
	            "locationName": "x-amz-tagging"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "CopyObjectResult": {
	            "type": "structure",
	            "members": {
	              "ETag": {},
	              "LastModified": {
	                "type": "timestamp"
	              }
	            }
	          },
	          "Expiration": {
	            "location": "header",
	            "locationName": "x-amz-expiration"
	          },
	          "CopySourceVersionId": {
	            "location": "header",
	            "locationName": "x-amz-copy-source-version-id"
	          },
	          "VersionId": {
	            "location": "header",
	            "locationName": "x-amz-version-id"
	          },
	          "ServerSideEncryption": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption"
	          },
	          "SSECustomerAlgorithm": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-algorithm"
	          },
	          "SSECustomerKeyMD5": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-key-MD5"
	          },
	          "SSEKMSKeyId": {
	            "shape": "Sj",
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-aws-kms-key-id"
	          },
	          "RequestCharged": {
	            "location": "header",
	            "locationName": "x-amz-request-charged"
	          }
	        },
	        "payload": "CopyObjectResult"
	      },
	      "alias": "PutObjectCopy"
	    },
	    "CreateBucket": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/{Bucket}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "ACL": {
	            "location": "header",
	            "locationName": "x-amz-acl"
	          },
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "CreateBucketConfiguration": {
	            "locationName": "CreateBucketConfiguration",
	            "xmlNamespace": {
	              "uri": "http://s3.amazonaws.com/doc/2006-03-01/"
	            },
	            "type": "structure",
	            "members": {
	              "LocationConstraint": {}
	            }
	          },
	          "GrantFullControl": {
	            "location": "header",
	            "locationName": "x-amz-grant-full-control"
	          },
	          "GrantRead": {
	            "location": "header",
	            "locationName": "x-amz-grant-read"
	          },
	          "GrantReadACP": {
	            "location": "header",
	            "locationName": "x-amz-grant-read-acp"
	          },
	          "GrantWrite": {
	            "location": "header",
	            "locationName": "x-amz-grant-write"
	          },
	          "GrantWriteACP": {
	            "location": "header",
	            "locationName": "x-amz-grant-write-acp"
	          }
	        },
	        "payload": "CreateBucketConfiguration"
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Location": {
	            "location": "header",
	            "locationName": "Location"
	          }
	        }
	      },
	      "alias": "PutBucket"
	    },
	    "CreateMultipartUpload": {
	      "http": {
	        "requestUri": "/{Bucket}/{Key+}?uploads"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "Key"
	        ],
	        "members": {
	          "ACL": {
	            "location": "header",
	            "locationName": "x-amz-acl"
	          },
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "CacheControl": {
	            "location": "header",
	            "locationName": "Cache-Control"
	          },
	          "ContentDisposition": {
	            "location": "header",
	            "locationName": "Content-Disposition"
	          },
	          "ContentEncoding": {
	            "location": "header",
	            "locationName": "Content-Encoding"
	          },
	          "ContentLanguage": {
	            "location": "header",
	            "locationName": "Content-Language"
	          },
	          "ContentType": {
	            "location": "header",
	            "locationName": "Content-Type"
	          },
	          "Expires": {
	            "location": "header",
	            "locationName": "Expires",
	            "type": "timestamp"
	          },
	          "GrantFullControl": {
	            "location": "header",
	            "locationName": "x-amz-grant-full-control"
	          },
	          "GrantRead": {
	            "location": "header",
	            "locationName": "x-amz-grant-read"
	          },
	          "GrantReadACP": {
	            "location": "header",
	            "locationName": "x-amz-grant-read-acp"
	          },
	          "GrantWriteACP": {
	            "location": "header",
	            "locationName": "x-amz-grant-write-acp"
	          },
	          "Key": {
	            "location": "uri",
	            "locationName": "Key"
	          },
	          "Metadata": {
	            "shape": "S11",
	            "location": "headers",
	            "locationName": "x-amz-meta-"
	          },
	          "ServerSideEncryption": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption"
	          },
	          "StorageClass": {
	            "location": "header",
	            "locationName": "x-amz-storage-class"
	          },
	          "WebsiteRedirectLocation": {
	            "location": "header",
	            "locationName": "x-amz-website-redirect-location"
	          },
	          "SSECustomerAlgorithm": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-algorithm"
	          },
	          "SSECustomerKey": {
	            "shape": "S19",
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-key"
	          },
	          "SSECustomerKeyMD5": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-key-MD5"
	          },
	          "SSEKMSKeyId": {
	            "shape": "Sj",
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-aws-kms-key-id"
	          },
	          "RequestPayer": {
	            "location": "header",
	            "locationName": "x-amz-request-payer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "AbortDate": {
	            "location": "header",
	            "locationName": "x-amz-abort-date",
	            "type": "timestamp"
	          },
	          "AbortRuleId": {
	            "location": "header",
	            "locationName": "x-amz-abort-rule-id"
	          },
	          "Bucket": {
	            "locationName": "Bucket"
	          },
	          "Key": {},
	          "UploadId": {},
	          "ServerSideEncryption": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption"
	          },
	          "SSECustomerAlgorithm": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-algorithm"
	          },
	          "SSECustomerKeyMD5": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-key-MD5"
	          },
	          "SSEKMSKeyId": {
	            "shape": "Sj",
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-aws-kms-key-id"
	          },
	          "RequestCharged": {
	            "location": "header",
	            "locationName": "x-amz-request-charged"
	          }
	        }
	      },
	      "alias": "InitiateMultipartUpload"
	    },
	    "DeleteBucket": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/{Bucket}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          }
	        }
	      }
	    },
	    "DeleteBucketAnalyticsConfiguration": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/{Bucket}?analytics"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "Id"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "Id": {
	            "location": "querystring",
	            "locationName": "id"
	          }
	        }
	      }
	    },
	    "DeleteBucketCors": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/{Bucket}?cors"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          }
	        }
	      }
	    },
	    "DeleteBucketInventoryConfiguration": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/{Bucket}?inventory"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "Id"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "Id": {
	            "location": "querystring",
	            "locationName": "id"
	          }
	        }
	      }
	    },
	    "DeleteBucketLifecycle": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/{Bucket}?lifecycle"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          }
	        }
	      }
	    },
	    "DeleteBucketMetricsConfiguration": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/{Bucket}?metrics"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "Id"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "Id": {
	            "location": "querystring",
	            "locationName": "id"
	          }
	        }
	      }
	    },
	    "DeleteBucketPolicy": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/{Bucket}?policy"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          }
	        }
	      }
	    },
	    "DeleteBucketReplication": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/{Bucket}?replication"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          }
	        }
	      }
	    },
	    "DeleteBucketTagging": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/{Bucket}?tagging"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          }
	        }
	      }
	    },
	    "DeleteBucketWebsite": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/{Bucket}?website"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          }
	        }
	      }
	    },
	    "DeleteObject": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/{Bucket}/{Key+}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "Key"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "Key": {
	            "location": "uri",
	            "locationName": "Key"
	          },
	          "MFA": {
	            "location": "header",
	            "locationName": "x-amz-mfa"
	          },
	          "VersionId": {
	            "location": "querystring",
	            "locationName": "versionId"
	          },
	          "RequestPayer": {
	            "location": "header",
	            "locationName": "x-amz-request-payer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "DeleteMarker": {
	            "location": "header",
	            "locationName": "x-amz-delete-marker",
	            "type": "boolean"
	          },
	          "VersionId": {
	            "location": "header",
	            "locationName": "x-amz-version-id"
	          },
	          "RequestCharged": {
	            "location": "header",
	            "locationName": "x-amz-request-charged"
	          }
	        }
	      }
	    },
	    "DeleteObjectTagging": {
	      "http": {
	        "method": "DELETE",
	        "requestUri": "/{Bucket}/{Key+}?tagging"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "Key"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "Key": {
	            "location": "uri",
	            "locationName": "Key"
	          },
	          "VersionId": {
	            "location": "querystring",
	            "locationName": "versionId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "VersionId": {
	            "location": "header",
	            "locationName": "x-amz-version-id"
	          }
	        }
	      }
	    },
	    "DeleteObjects": {
	      "http": {
	        "requestUri": "/{Bucket}?delete"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "Delete"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "Delete": {
	            "locationName": "Delete",
	            "xmlNamespace": {
	              "uri": "http://s3.amazonaws.com/doc/2006-03-01/"
	            },
	            "type": "structure",
	            "required": [
	              "Objects"
	            ],
	            "members": {
	              "Objects": {
	                "locationName": "Object",
	                "type": "list",
	                "member": {
	                  "type": "structure",
	                  "required": [
	                    "Key"
	                  ],
	                  "members": {
	                    "Key": {},
	                    "VersionId": {}
	                  }
	                },
	                "flattened": true
	              },
	              "Quiet": {
	                "type": "boolean"
	              }
	            }
	          },
	          "MFA": {
	            "location": "header",
	            "locationName": "x-amz-mfa"
	          },
	          "RequestPayer": {
	            "location": "header",
	            "locationName": "x-amz-request-payer"
	          }
	        },
	        "payload": "Delete"
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Deleted": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Key": {},
	                "VersionId": {},
	                "DeleteMarker": {
	                  "type": "boolean"
	                },
	                "DeleteMarkerVersionId": {}
	              }
	            },
	            "flattened": true
	          },
	          "RequestCharged": {
	            "location": "header",
	            "locationName": "x-amz-request-charged"
	          },
	          "Errors": {
	            "locationName": "Error",
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Key": {},
	                "VersionId": {},
	                "Code": {},
	                "Message": {}
	              }
	            },
	            "flattened": true
	          }
	        }
	      },
	      "alias": "DeleteMultipleObjects"
	    },
	    "GetBucketAccelerateConfiguration": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}?accelerate"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Status": {}
	        }
	      }
	    },
	    "GetBucketAcl": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}?acl"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Owner": {
	            "shape": "S2u"
	          },
	          "Grants": {
	            "shape": "S2x",
	            "locationName": "AccessControlList"
	          }
	        }
	      }
	    },
	    "GetBucketAnalyticsConfiguration": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}?analytics"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "Id"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "Id": {
	            "location": "querystring",
	            "locationName": "id"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "AnalyticsConfiguration": {
	            "shape": "S36"
	          }
	        },
	        "payload": "AnalyticsConfiguration"
	      }
	    },
	    "GetBucketCors": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}?cors"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "CORSRules": {
	            "shape": "S3m",
	            "locationName": "CORSRule"
	          }
	        }
	      }
	    },
	    "GetBucketInventoryConfiguration": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}?inventory"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "Id"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "Id": {
	            "location": "querystring",
	            "locationName": "id"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "InventoryConfiguration": {
	            "shape": "S3z"
	          }
	        },
	        "payload": "InventoryConfiguration"
	      }
	    },
	    "GetBucketLifecycle": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}?lifecycle"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Rules": {
	            "shape": "S4c",
	            "locationName": "Rule"
	          }
	        }
	      },
	      "deprecated": true
	    },
	    "GetBucketLifecycleConfiguration": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}?lifecycle"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Rules": {
	            "shape": "S4r",
	            "locationName": "Rule"
	          }
	        }
	      }
	    },
	    "GetBucketLocation": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}?location"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "LocationConstraint": {}
	        }
	      }
	    },
	    "GetBucketLogging": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}?logging"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "LoggingEnabled": {
	            "shape": "S51"
	          }
	        }
	      }
	    },
	    "GetBucketMetricsConfiguration": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}?metrics"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "Id"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "Id": {
	            "location": "querystring",
	            "locationName": "id"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "MetricsConfiguration": {
	            "shape": "S59"
	          }
	        },
	        "payload": "MetricsConfiguration"
	      }
	    },
	    "GetBucketNotification": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}?notification"
	      },
	      "input": {
	        "shape": "S5c"
	      },
	      "output": {
	        "shape": "S5d"
	      },
	      "deprecated": true
	    },
	    "GetBucketNotificationConfiguration": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}?notification"
	      },
	      "input": {
	        "shape": "S5c"
	      },
	      "output": {
	        "shape": "S5o"
	      }
	    },
	    "GetBucketPolicy": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}?policy"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Policy": {}
	        },
	        "payload": "Policy"
	      }
	    },
	    "GetBucketReplication": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}?replication"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ReplicationConfiguration": {
	            "shape": "S67"
	          }
	        },
	        "payload": "ReplicationConfiguration"
	      }
	    },
	    "GetBucketRequestPayment": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}?requestPayment"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Payer": {}
	        }
	      }
	    },
	    "GetBucketTagging": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}?tagging"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "TagSet"
	        ],
	        "members": {
	          "TagSet": {
	            "shape": "S3c"
	          }
	        }
	      }
	    },
	    "GetBucketVersioning": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}?versioning"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Status": {},
	          "MFADelete": {
	            "locationName": "MfaDelete"
	          }
	        }
	      }
	    },
	    "GetBucketWebsite": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}?website"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "RedirectAllRequestsTo": {
	            "shape": "S6o"
	          },
	          "IndexDocument": {
	            "shape": "S6r"
	          },
	          "ErrorDocument": {
	            "shape": "S6t"
	          },
	          "RoutingRules": {
	            "shape": "S6u"
	          }
	        }
	      }
	    },
	    "GetObject": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}/{Key+}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "Key"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "IfMatch": {
	            "location": "header",
	            "locationName": "If-Match"
	          },
	          "IfModifiedSince": {
	            "location": "header",
	            "locationName": "If-Modified-Since",
	            "type": "timestamp"
	          },
	          "IfNoneMatch": {
	            "location": "header",
	            "locationName": "If-None-Match"
	          },
	          "IfUnmodifiedSince": {
	            "location": "header",
	            "locationName": "If-Unmodified-Since",
	            "type": "timestamp"
	          },
	          "Key": {
	            "location": "uri",
	            "locationName": "Key"
	          },
	          "Range": {
	            "location": "header",
	            "locationName": "Range"
	          },
	          "ResponseCacheControl": {
	            "location": "querystring",
	            "locationName": "response-cache-control"
	          },
	          "ResponseContentDisposition": {
	            "location": "querystring",
	            "locationName": "response-content-disposition"
	          },
	          "ResponseContentEncoding": {
	            "location": "querystring",
	            "locationName": "response-content-encoding"
	          },
	          "ResponseContentLanguage": {
	            "location": "querystring",
	            "locationName": "response-content-language"
	          },
	          "ResponseContentType": {
	            "location": "querystring",
	            "locationName": "response-content-type"
	          },
	          "ResponseExpires": {
	            "location": "querystring",
	            "locationName": "response-expires",
	            "type": "timestamp"
	          },
	          "VersionId": {
	            "location": "querystring",
	            "locationName": "versionId"
	          },
	          "SSECustomerAlgorithm": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-algorithm"
	          },
	          "SSECustomerKey": {
	            "shape": "S19",
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-key"
	          },
	          "SSECustomerKeyMD5": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-key-MD5"
	          },
	          "RequestPayer": {
	            "location": "header",
	            "locationName": "x-amz-request-payer"
	          },
	          "PartNumber": {
	            "location": "querystring",
	            "locationName": "partNumber",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Body": {
	            "streaming": true,
	            "type": "blob"
	          },
	          "DeleteMarker": {
	            "location": "header",
	            "locationName": "x-amz-delete-marker",
	            "type": "boolean"
	          },
	          "AcceptRanges": {
	            "location": "header",
	            "locationName": "accept-ranges"
	          },
	          "Expiration": {
	            "location": "header",
	            "locationName": "x-amz-expiration"
	          },
	          "Restore": {
	            "location": "header",
	            "locationName": "x-amz-restore"
	          },
	          "LastModified": {
	            "location": "header",
	            "locationName": "Last-Modified",
	            "type": "timestamp"
	          },
	          "ContentLength": {
	            "location": "header",
	            "locationName": "Content-Length",
	            "type": "long"
	          },
	          "ETag": {
	            "location": "header",
	            "locationName": "ETag"
	          },
	          "MissingMeta": {
	            "location": "header",
	            "locationName": "x-amz-missing-meta",
	            "type": "integer"
	          },
	          "VersionId": {
	            "location": "header",
	            "locationName": "x-amz-version-id"
	          },
	          "CacheControl": {
	            "location": "header",
	            "locationName": "Cache-Control"
	          },
	          "ContentDisposition": {
	            "location": "header",
	            "locationName": "Content-Disposition"
	          },
	          "ContentEncoding": {
	            "location": "header",
	            "locationName": "Content-Encoding"
	          },
	          "ContentLanguage": {
	            "location": "header",
	            "locationName": "Content-Language"
	          },
	          "ContentRange": {
	            "location": "header",
	            "locationName": "Content-Range"
	          },
	          "ContentType": {
	            "location": "header",
	            "locationName": "Content-Type"
	          },
	          "Expires": {
	            "location": "header",
	            "locationName": "Expires",
	            "type": "timestamp"
	          },
	          "WebsiteRedirectLocation": {
	            "location": "header",
	            "locationName": "x-amz-website-redirect-location"
	          },
	          "ServerSideEncryption": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption"
	          },
	          "Metadata": {
	            "shape": "S11",
	            "location": "headers",
	            "locationName": "x-amz-meta-"
	          },
	          "SSECustomerAlgorithm": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-algorithm"
	          },
	          "SSECustomerKeyMD5": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-key-MD5"
	          },
	          "SSEKMSKeyId": {
	            "shape": "Sj",
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-aws-kms-key-id"
	          },
	          "StorageClass": {
	            "location": "header",
	            "locationName": "x-amz-storage-class"
	          },
	          "RequestCharged": {
	            "location": "header",
	            "locationName": "x-amz-request-charged"
	          },
	          "ReplicationStatus": {
	            "location": "header",
	            "locationName": "x-amz-replication-status"
	          },
	          "PartsCount": {
	            "location": "header",
	            "locationName": "x-amz-mp-parts-count",
	            "type": "integer"
	          },
	          "TagCount": {
	            "location": "header",
	            "locationName": "x-amz-tagging-count",
	            "type": "integer"
	          }
	        },
	        "payload": "Body"
	      }
	    },
	    "GetObjectAcl": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}/{Key+}?acl"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "Key"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "Key": {
	            "location": "uri",
	            "locationName": "Key"
	          },
	          "VersionId": {
	            "location": "querystring",
	            "locationName": "versionId"
	          },
	          "RequestPayer": {
	            "location": "header",
	            "locationName": "x-amz-request-payer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Owner": {
	            "shape": "S2u"
	          },
	          "Grants": {
	            "shape": "S2x",
	            "locationName": "AccessControlList"
	          },
	          "RequestCharged": {
	            "location": "header",
	            "locationName": "x-amz-request-charged"
	          }
	        }
	      }
	    },
	    "GetObjectTagging": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}/{Key+}?tagging"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "Key"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "Key": {
	            "location": "uri",
	            "locationName": "Key"
	          },
	          "VersionId": {
	            "location": "querystring",
	            "locationName": "versionId"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "required": [
	          "TagSet"
	        ],
	        "members": {
	          "VersionId": {
	            "location": "header",
	            "locationName": "x-amz-version-id"
	          },
	          "TagSet": {
	            "shape": "S3c"
	          }
	        }
	      }
	    },
	    "GetObjectTorrent": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}/{Key+}?torrent"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "Key"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "Key": {
	            "location": "uri",
	            "locationName": "Key"
	          },
	          "RequestPayer": {
	            "location": "header",
	            "locationName": "x-amz-request-payer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Body": {
	            "streaming": true,
	            "type": "blob"
	          },
	          "RequestCharged": {
	            "location": "header",
	            "locationName": "x-amz-request-charged"
	          }
	        },
	        "payload": "Body"
	      }
	    },
	    "HeadBucket": {
	      "http": {
	        "method": "HEAD",
	        "requestUri": "/{Bucket}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          }
	        }
	      }
	    },
	    "HeadObject": {
	      "http": {
	        "method": "HEAD",
	        "requestUri": "/{Bucket}/{Key+}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "Key"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "IfMatch": {
	            "location": "header",
	            "locationName": "If-Match"
	          },
	          "IfModifiedSince": {
	            "location": "header",
	            "locationName": "If-Modified-Since",
	            "type": "timestamp"
	          },
	          "IfNoneMatch": {
	            "location": "header",
	            "locationName": "If-None-Match"
	          },
	          "IfUnmodifiedSince": {
	            "location": "header",
	            "locationName": "If-Unmodified-Since",
	            "type": "timestamp"
	          },
	          "Key": {
	            "location": "uri",
	            "locationName": "Key"
	          },
	          "Range": {
	            "location": "header",
	            "locationName": "Range"
	          },
	          "VersionId": {
	            "location": "querystring",
	            "locationName": "versionId"
	          },
	          "SSECustomerAlgorithm": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-algorithm"
	          },
	          "SSECustomerKey": {
	            "shape": "S19",
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-key"
	          },
	          "SSECustomerKeyMD5": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-key-MD5"
	          },
	          "RequestPayer": {
	            "location": "header",
	            "locationName": "x-amz-request-payer"
	          },
	          "PartNumber": {
	            "location": "querystring",
	            "locationName": "partNumber",
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "DeleteMarker": {
	            "location": "header",
	            "locationName": "x-amz-delete-marker",
	            "type": "boolean"
	          },
	          "AcceptRanges": {
	            "location": "header",
	            "locationName": "accept-ranges"
	          },
	          "Expiration": {
	            "location": "header",
	            "locationName": "x-amz-expiration"
	          },
	          "Restore": {
	            "location": "header",
	            "locationName": "x-amz-restore"
	          },
	          "LastModified": {
	            "location": "header",
	            "locationName": "Last-Modified",
	            "type": "timestamp"
	          },
	          "ContentLength": {
	            "location": "header",
	            "locationName": "Content-Length",
	            "type": "long"
	          },
	          "ETag": {
	            "location": "header",
	            "locationName": "ETag"
	          },
	          "MissingMeta": {
	            "location": "header",
	            "locationName": "x-amz-missing-meta",
	            "type": "integer"
	          },
	          "VersionId": {
	            "location": "header",
	            "locationName": "x-amz-version-id"
	          },
	          "CacheControl": {
	            "location": "header",
	            "locationName": "Cache-Control"
	          },
	          "ContentDisposition": {
	            "location": "header",
	            "locationName": "Content-Disposition"
	          },
	          "ContentEncoding": {
	            "location": "header",
	            "locationName": "Content-Encoding"
	          },
	          "ContentLanguage": {
	            "location": "header",
	            "locationName": "Content-Language"
	          },
	          "ContentType": {
	            "location": "header",
	            "locationName": "Content-Type"
	          },
	          "Expires": {
	            "location": "header",
	            "locationName": "Expires",
	            "type": "timestamp"
	          },
	          "WebsiteRedirectLocation": {
	            "location": "header",
	            "locationName": "x-amz-website-redirect-location"
	          },
	          "ServerSideEncryption": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption"
	          },
	          "Metadata": {
	            "shape": "S11",
	            "location": "headers",
	            "locationName": "x-amz-meta-"
	          },
	          "SSECustomerAlgorithm": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-algorithm"
	          },
	          "SSECustomerKeyMD5": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-key-MD5"
	          },
	          "SSEKMSKeyId": {
	            "shape": "Sj",
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-aws-kms-key-id"
	          },
	          "StorageClass": {
	            "location": "header",
	            "locationName": "x-amz-storage-class"
	          },
	          "RequestCharged": {
	            "location": "header",
	            "locationName": "x-amz-request-charged"
	          },
	          "ReplicationStatus": {
	            "location": "header",
	            "locationName": "x-amz-replication-status"
	          },
	          "PartsCount": {
	            "location": "header",
	            "locationName": "x-amz-mp-parts-count",
	            "type": "integer"
	          }
	        }
	      }
	    },
	    "ListBucketAnalyticsConfigurations": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}?analytics"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "ContinuationToken": {
	            "location": "querystring",
	            "locationName": "continuation-token"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "IsTruncated": {
	            "type": "boolean"
	          },
	          "ContinuationToken": {},
	          "NextContinuationToken": {},
	          "AnalyticsConfigurationList": {
	            "locationName": "AnalyticsConfiguration",
	            "type": "list",
	            "member": {
	              "shape": "S36"
	            },
	            "flattened": true
	          }
	        }
	      }
	    },
	    "ListBucketInventoryConfigurations": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}?inventory"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "ContinuationToken": {
	            "location": "querystring",
	            "locationName": "continuation-token"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ContinuationToken": {},
	          "InventoryConfigurationList": {
	            "locationName": "InventoryConfiguration",
	            "type": "list",
	            "member": {
	              "shape": "S3z"
	            },
	            "flattened": true
	          },
	          "IsTruncated": {
	            "type": "boolean"
	          },
	          "NextContinuationToken": {}
	        }
	      }
	    },
	    "ListBucketMetricsConfigurations": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}?metrics"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "ContinuationToken": {
	            "location": "querystring",
	            "locationName": "continuation-token"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "IsTruncated": {
	            "type": "boolean"
	          },
	          "ContinuationToken": {},
	          "NextContinuationToken": {},
	          "MetricsConfigurationList": {
	            "locationName": "MetricsConfiguration",
	            "type": "list",
	            "member": {
	              "shape": "S59"
	            },
	            "flattened": true
	          }
	        }
	      }
	    },
	    "ListBuckets": {
	      "http": {
	        "method": "GET"
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Buckets": {
	            "type": "list",
	            "member": {
	              "locationName": "Bucket",
	              "type": "structure",
	              "members": {
	                "Name": {},
	                "CreationDate": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          },
	          "Owner": {
	            "shape": "S2u"
	          }
	        }
	      },
	      "alias": "GetService"
	    },
	    "ListMultipartUploads": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}?uploads"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "Delimiter": {
	            "location": "querystring",
	            "locationName": "delimiter"
	          },
	          "EncodingType": {
	            "location": "querystring",
	            "locationName": "encoding-type"
	          },
	          "KeyMarker": {
	            "location": "querystring",
	            "locationName": "key-marker"
	          },
	          "MaxUploads": {
	            "location": "querystring",
	            "locationName": "max-uploads",
	            "type": "integer"
	          },
	          "Prefix": {
	            "location": "querystring",
	            "locationName": "prefix"
	          },
	          "UploadIdMarker": {
	            "location": "querystring",
	            "locationName": "upload-id-marker"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Bucket": {},
	          "KeyMarker": {},
	          "UploadIdMarker": {},
	          "NextKeyMarker": {},
	          "Prefix": {},
	          "Delimiter": {},
	          "NextUploadIdMarker": {},
	          "MaxUploads": {
	            "type": "integer"
	          },
	          "IsTruncated": {
	            "type": "boolean"
	          },
	          "Uploads": {
	            "locationName": "Upload",
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "UploadId": {},
	                "Key": {},
	                "Initiated": {
	                  "type": "timestamp"
	                },
	                "StorageClass": {},
	                "Owner": {
	                  "shape": "S2u"
	                },
	                "Initiator": {
	                  "shape": "S8q"
	                }
	              }
	            },
	            "flattened": true
	          },
	          "CommonPrefixes": {
	            "shape": "S8r"
	          },
	          "EncodingType": {}
	        }
	      }
	    },
	    "ListObjectVersions": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}?versions"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "Delimiter": {
	            "location": "querystring",
	            "locationName": "delimiter"
	          },
	          "EncodingType": {
	            "location": "querystring",
	            "locationName": "encoding-type"
	          },
	          "KeyMarker": {
	            "location": "querystring",
	            "locationName": "key-marker"
	          },
	          "MaxKeys": {
	            "location": "querystring",
	            "locationName": "max-keys",
	            "type": "integer"
	          },
	          "Prefix": {
	            "location": "querystring",
	            "locationName": "prefix"
	          },
	          "VersionIdMarker": {
	            "location": "querystring",
	            "locationName": "version-id-marker"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "IsTruncated": {
	            "type": "boolean"
	          },
	          "KeyMarker": {},
	          "VersionIdMarker": {},
	          "NextKeyMarker": {},
	          "NextVersionIdMarker": {},
	          "Versions": {
	            "locationName": "Version",
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "ETag": {},
	                "Size": {
	                  "type": "integer"
	                },
	                "StorageClass": {},
	                "Key": {},
	                "VersionId": {},
	                "IsLatest": {
	                  "type": "boolean"
	                },
	                "LastModified": {
	                  "type": "timestamp"
	                },
	                "Owner": {
	                  "shape": "S2u"
	                }
	              }
	            },
	            "flattened": true
	          },
	          "DeleteMarkers": {
	            "locationName": "DeleteMarker",
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Owner": {
	                  "shape": "S2u"
	                },
	                "Key": {},
	                "VersionId": {},
	                "IsLatest": {
	                  "type": "boolean"
	                },
	                "LastModified": {
	                  "type": "timestamp"
	                }
	              }
	            },
	            "flattened": true
	          },
	          "Name": {},
	          "Prefix": {},
	          "Delimiter": {},
	          "MaxKeys": {
	            "type": "integer"
	          },
	          "CommonPrefixes": {
	            "shape": "S8r"
	          },
	          "EncodingType": {}
	        }
	      },
	      "alias": "GetBucketObjectVersions"
	    },
	    "ListObjects": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "Delimiter": {
	            "location": "querystring",
	            "locationName": "delimiter"
	          },
	          "EncodingType": {
	            "location": "querystring",
	            "locationName": "encoding-type"
	          },
	          "Marker": {
	            "location": "querystring",
	            "locationName": "marker"
	          },
	          "MaxKeys": {
	            "location": "querystring",
	            "locationName": "max-keys",
	            "type": "integer"
	          },
	          "Prefix": {
	            "location": "querystring",
	            "locationName": "prefix"
	          },
	          "RequestPayer": {
	            "location": "header",
	            "locationName": "x-amz-request-payer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "IsTruncated": {
	            "type": "boolean"
	          },
	          "Marker": {},
	          "NextMarker": {},
	          "Contents": {
	            "shape": "S99"
	          },
	          "Name": {},
	          "Prefix": {},
	          "Delimiter": {},
	          "MaxKeys": {
	            "type": "integer"
	          },
	          "CommonPrefixes": {
	            "shape": "S8r"
	          },
	          "EncodingType": {}
	        }
	      },
	      "alias": "GetBucket"
	    },
	    "ListObjectsV2": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}?list-type=2"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "Delimiter": {
	            "location": "querystring",
	            "locationName": "delimiter"
	          },
	          "EncodingType": {
	            "location": "querystring",
	            "locationName": "encoding-type"
	          },
	          "MaxKeys": {
	            "location": "querystring",
	            "locationName": "max-keys",
	            "type": "integer"
	          },
	          "Prefix": {
	            "location": "querystring",
	            "locationName": "prefix"
	          },
	          "ContinuationToken": {
	            "location": "querystring",
	            "locationName": "continuation-token"
	          },
	          "FetchOwner": {
	            "location": "querystring",
	            "locationName": "fetch-owner",
	            "type": "boolean"
	          },
	          "StartAfter": {
	            "location": "querystring",
	            "locationName": "start-after"
	          },
	          "RequestPayer": {
	            "location": "header",
	            "locationName": "x-amz-request-payer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "IsTruncated": {
	            "type": "boolean"
	          },
	          "Contents": {
	            "shape": "S99"
	          },
	          "Name": {},
	          "Prefix": {},
	          "Delimiter": {},
	          "MaxKeys": {
	            "type": "integer"
	          },
	          "CommonPrefixes": {
	            "shape": "S8r"
	          },
	          "EncodingType": {},
	          "KeyCount": {
	            "type": "integer"
	          },
	          "ContinuationToken": {},
	          "NextContinuationToken": {},
	          "StartAfter": {}
	        }
	      }
	    },
	    "ListParts": {
	      "http": {
	        "method": "GET",
	        "requestUri": "/{Bucket}/{Key+}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "Key",
	          "UploadId"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "Key": {
	            "location": "uri",
	            "locationName": "Key"
	          },
	          "MaxParts": {
	            "location": "querystring",
	            "locationName": "max-parts",
	            "type": "integer"
	          },
	          "PartNumberMarker": {
	            "location": "querystring",
	            "locationName": "part-number-marker",
	            "type": "integer"
	          },
	          "UploadId": {
	            "location": "querystring",
	            "locationName": "uploadId"
	          },
	          "RequestPayer": {
	            "location": "header",
	            "locationName": "x-amz-request-payer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "AbortDate": {
	            "location": "header",
	            "locationName": "x-amz-abort-date",
	            "type": "timestamp"
	          },
	          "AbortRuleId": {
	            "location": "header",
	            "locationName": "x-amz-abort-rule-id"
	          },
	          "Bucket": {},
	          "Key": {},
	          "UploadId": {},
	          "PartNumberMarker": {
	            "type": "integer"
	          },
	          "NextPartNumberMarker": {
	            "type": "integer"
	          },
	          "MaxParts": {
	            "type": "integer"
	          },
	          "IsTruncated": {
	            "type": "boolean"
	          },
	          "Parts": {
	            "locationName": "Part",
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "PartNumber": {
	                  "type": "integer"
	                },
	                "LastModified": {
	                  "type": "timestamp"
	                },
	                "ETag": {},
	                "Size": {
	                  "type": "integer"
	                }
	              }
	            },
	            "flattened": true
	          },
	          "Initiator": {
	            "shape": "S8q"
	          },
	          "Owner": {
	            "shape": "S2u"
	          },
	          "StorageClass": {},
	          "RequestCharged": {
	            "location": "header",
	            "locationName": "x-amz-request-charged"
	          }
	        }
	      }
	    },
	    "PutBucketAccelerateConfiguration": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/{Bucket}?accelerate"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "AccelerateConfiguration"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "AccelerateConfiguration": {
	            "locationName": "AccelerateConfiguration",
	            "xmlNamespace": {
	              "uri": "http://s3.amazonaws.com/doc/2006-03-01/"
	            },
	            "type": "structure",
	            "members": {
	              "Status": {}
	            }
	          }
	        },
	        "payload": "AccelerateConfiguration"
	      }
	    },
	    "PutBucketAcl": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/{Bucket}?acl"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "ACL": {
	            "location": "header",
	            "locationName": "x-amz-acl"
	          },
	          "AccessControlPolicy": {
	            "shape": "S9r",
	            "locationName": "AccessControlPolicy",
	            "xmlNamespace": {
	              "uri": "http://s3.amazonaws.com/doc/2006-03-01/"
	            }
	          },
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "ContentMD5": {
	            "location": "header",
	            "locationName": "Content-MD5"
	          },
	          "GrantFullControl": {
	            "location": "header",
	            "locationName": "x-amz-grant-full-control"
	          },
	          "GrantRead": {
	            "location": "header",
	            "locationName": "x-amz-grant-read"
	          },
	          "GrantReadACP": {
	            "location": "header",
	            "locationName": "x-amz-grant-read-acp"
	          },
	          "GrantWrite": {
	            "location": "header",
	            "locationName": "x-amz-grant-write"
	          },
	          "GrantWriteACP": {
	            "location": "header",
	            "locationName": "x-amz-grant-write-acp"
	          }
	        },
	        "payload": "AccessControlPolicy"
	      }
	    },
	    "PutBucketAnalyticsConfiguration": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/{Bucket}?analytics"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "Id",
	          "AnalyticsConfiguration"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "Id": {
	            "location": "querystring",
	            "locationName": "id"
	          },
	          "AnalyticsConfiguration": {
	            "shape": "S36",
	            "locationName": "AnalyticsConfiguration",
	            "xmlNamespace": {
	              "uri": "http://s3.amazonaws.com/doc/2006-03-01/"
	            }
	          }
	        },
	        "payload": "AnalyticsConfiguration"
	      }
	    },
	    "PutBucketCors": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/{Bucket}?cors"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "CORSConfiguration"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "CORSConfiguration": {
	            "locationName": "CORSConfiguration",
	            "xmlNamespace": {
	              "uri": "http://s3.amazonaws.com/doc/2006-03-01/"
	            },
	            "type": "structure",
	            "required": [
	              "CORSRules"
	            ],
	            "members": {
	              "CORSRules": {
	                "shape": "S3m",
	                "locationName": "CORSRule"
	              }
	            }
	          },
	          "ContentMD5": {
	            "location": "header",
	            "locationName": "Content-MD5"
	          }
	        },
	        "payload": "CORSConfiguration"
	      }
	    },
	    "PutBucketInventoryConfiguration": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/{Bucket}?inventory"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "Id",
	          "InventoryConfiguration"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "Id": {
	            "location": "querystring",
	            "locationName": "id"
	          },
	          "InventoryConfiguration": {
	            "shape": "S3z",
	            "locationName": "InventoryConfiguration",
	            "xmlNamespace": {
	              "uri": "http://s3.amazonaws.com/doc/2006-03-01/"
	            }
	          }
	        },
	        "payload": "InventoryConfiguration"
	      }
	    },
	    "PutBucketLifecycle": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/{Bucket}?lifecycle"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "ContentMD5": {
	            "location": "header",
	            "locationName": "Content-MD5"
	          },
	          "LifecycleConfiguration": {
	            "locationName": "LifecycleConfiguration",
	            "xmlNamespace": {
	              "uri": "http://s3.amazonaws.com/doc/2006-03-01/"
	            },
	            "type": "structure",
	            "required": [
	              "Rules"
	            ],
	            "members": {
	              "Rules": {
	                "shape": "S4c",
	                "locationName": "Rule"
	              }
	            }
	          }
	        },
	        "payload": "LifecycleConfiguration"
	      },
	      "deprecated": true
	    },
	    "PutBucketLifecycleConfiguration": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/{Bucket}?lifecycle"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "LifecycleConfiguration": {
	            "locationName": "LifecycleConfiguration",
	            "xmlNamespace": {
	              "uri": "http://s3.amazonaws.com/doc/2006-03-01/"
	            },
	            "type": "structure",
	            "required": [
	              "Rules"
	            ],
	            "members": {
	              "Rules": {
	                "shape": "S4r",
	                "locationName": "Rule"
	              }
	            }
	          }
	        },
	        "payload": "LifecycleConfiguration"
	      }
	    },
	    "PutBucketLogging": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/{Bucket}?logging"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "BucketLoggingStatus"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "BucketLoggingStatus": {
	            "locationName": "BucketLoggingStatus",
	            "xmlNamespace": {
	              "uri": "http://s3.amazonaws.com/doc/2006-03-01/"
	            },
	            "type": "structure",
	            "members": {
	              "LoggingEnabled": {
	                "shape": "S51"
	              }
	            }
	          },
	          "ContentMD5": {
	            "location": "header",
	            "locationName": "Content-MD5"
	          }
	        },
	        "payload": "BucketLoggingStatus"
	      }
	    },
	    "PutBucketMetricsConfiguration": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/{Bucket}?metrics"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "Id",
	          "MetricsConfiguration"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "Id": {
	            "location": "querystring",
	            "locationName": "id"
	          },
	          "MetricsConfiguration": {
	            "shape": "S59",
	            "locationName": "MetricsConfiguration",
	            "xmlNamespace": {
	              "uri": "http://s3.amazonaws.com/doc/2006-03-01/"
	            }
	          }
	        },
	        "payload": "MetricsConfiguration"
	      }
	    },
	    "PutBucketNotification": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/{Bucket}?notification"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "NotificationConfiguration"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "ContentMD5": {
	            "location": "header",
	            "locationName": "Content-MD5"
	          },
	          "NotificationConfiguration": {
	            "shape": "S5d",
	            "locationName": "NotificationConfiguration",
	            "xmlNamespace": {
	              "uri": "http://s3.amazonaws.com/doc/2006-03-01/"
	            }
	          }
	        },
	        "payload": "NotificationConfiguration"
	      },
	      "deprecated": true
	    },
	    "PutBucketNotificationConfiguration": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/{Bucket}?notification"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "NotificationConfiguration"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "NotificationConfiguration": {
	            "shape": "S5o",
	            "locationName": "NotificationConfiguration",
	            "xmlNamespace": {
	              "uri": "http://s3.amazonaws.com/doc/2006-03-01/"
	            }
	          }
	        },
	        "payload": "NotificationConfiguration"
	      }
	    },
	    "PutBucketPolicy": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/{Bucket}?policy"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "Policy"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "ContentMD5": {
	            "location": "header",
	            "locationName": "Content-MD5"
	          },
	          "Policy": {}
	        },
	        "payload": "Policy"
	      }
	    },
	    "PutBucketReplication": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/{Bucket}?replication"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "ReplicationConfiguration"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "ContentMD5": {
	            "location": "header",
	            "locationName": "Content-MD5"
	          },
	          "ReplicationConfiguration": {
	            "shape": "S67",
	            "locationName": "ReplicationConfiguration",
	            "xmlNamespace": {
	              "uri": "http://s3.amazonaws.com/doc/2006-03-01/"
	            }
	          }
	        },
	        "payload": "ReplicationConfiguration"
	      }
	    },
	    "PutBucketRequestPayment": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/{Bucket}?requestPayment"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "RequestPaymentConfiguration"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "ContentMD5": {
	            "location": "header",
	            "locationName": "Content-MD5"
	          },
	          "RequestPaymentConfiguration": {
	            "locationName": "RequestPaymentConfiguration",
	            "xmlNamespace": {
	              "uri": "http://s3.amazonaws.com/doc/2006-03-01/"
	            },
	            "type": "structure",
	            "required": [
	              "Payer"
	            ],
	            "members": {
	              "Payer": {}
	            }
	          }
	        },
	        "payload": "RequestPaymentConfiguration"
	      }
	    },
	    "PutBucketTagging": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/{Bucket}?tagging"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "Tagging"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "ContentMD5": {
	            "location": "header",
	            "locationName": "Content-MD5"
	          },
	          "Tagging": {
	            "shape": "Sab",
	            "locationName": "Tagging",
	            "xmlNamespace": {
	              "uri": "http://s3.amazonaws.com/doc/2006-03-01/"
	            }
	          }
	        },
	        "payload": "Tagging"
	      }
	    },
	    "PutBucketVersioning": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/{Bucket}?versioning"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "VersioningConfiguration"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "ContentMD5": {
	            "location": "header",
	            "locationName": "Content-MD5"
	          },
	          "MFA": {
	            "location": "header",
	            "locationName": "x-amz-mfa"
	          },
	          "VersioningConfiguration": {
	            "locationName": "VersioningConfiguration",
	            "xmlNamespace": {
	              "uri": "http://s3.amazonaws.com/doc/2006-03-01/"
	            },
	            "type": "structure",
	            "members": {
	              "MFADelete": {
	                "locationName": "MfaDelete"
	              },
	              "Status": {}
	            }
	          }
	        },
	        "payload": "VersioningConfiguration"
	      }
	    },
	    "PutBucketWebsite": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/{Bucket}?website"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "WebsiteConfiguration"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "ContentMD5": {
	            "location": "header",
	            "locationName": "Content-MD5"
	          },
	          "WebsiteConfiguration": {
	            "locationName": "WebsiteConfiguration",
	            "xmlNamespace": {
	              "uri": "http://s3.amazonaws.com/doc/2006-03-01/"
	            },
	            "type": "structure",
	            "members": {
	              "ErrorDocument": {
	                "shape": "S6t"
	              },
	              "IndexDocument": {
	                "shape": "S6r"
	              },
	              "RedirectAllRequestsTo": {
	                "shape": "S6o"
	              },
	              "RoutingRules": {
	                "shape": "S6u"
	              }
	            }
	          }
	        },
	        "payload": "WebsiteConfiguration"
	      }
	    },
	    "PutObject": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/{Bucket}/{Key+}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "Key"
	        ],
	        "members": {
	          "ACL": {
	            "location": "header",
	            "locationName": "x-amz-acl"
	          },
	          "Body": {
	            "streaming": true,
	            "type": "blob"
	          },
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "CacheControl": {
	            "location": "header",
	            "locationName": "Cache-Control"
	          },
	          "ContentDisposition": {
	            "location": "header",
	            "locationName": "Content-Disposition"
	          },
	          "ContentEncoding": {
	            "location": "header",
	            "locationName": "Content-Encoding"
	          },
	          "ContentLanguage": {
	            "location": "header",
	            "locationName": "Content-Language"
	          },
	          "ContentLength": {
	            "location": "header",
	            "locationName": "Content-Length",
	            "type": "long"
	          },
	          "ContentMD5": {
	            "location": "header",
	            "locationName": "Content-MD5"
	          },
	          "ContentType": {
	            "location": "header",
	            "locationName": "Content-Type"
	          },
	          "Expires": {
	            "location": "header",
	            "locationName": "Expires",
	            "type": "timestamp"
	          },
	          "GrantFullControl": {
	            "location": "header",
	            "locationName": "x-amz-grant-full-control"
	          },
	          "GrantRead": {
	            "location": "header",
	            "locationName": "x-amz-grant-read"
	          },
	          "GrantReadACP": {
	            "location": "header",
	            "locationName": "x-amz-grant-read-acp"
	          },
	          "GrantWriteACP": {
	            "location": "header",
	            "locationName": "x-amz-grant-write-acp"
	          },
	          "Key": {
	            "location": "uri",
	            "locationName": "Key"
	          },
	          "Metadata": {
	            "shape": "S11",
	            "location": "headers",
	            "locationName": "x-amz-meta-"
	          },
	          "ServerSideEncryption": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption"
	          },
	          "StorageClass": {
	            "location": "header",
	            "locationName": "x-amz-storage-class"
	          },
	          "WebsiteRedirectLocation": {
	            "location": "header",
	            "locationName": "x-amz-website-redirect-location"
	          },
	          "SSECustomerAlgorithm": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-algorithm"
	          },
	          "SSECustomerKey": {
	            "shape": "S19",
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-key"
	          },
	          "SSECustomerKeyMD5": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-key-MD5"
	          },
	          "SSEKMSKeyId": {
	            "shape": "Sj",
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-aws-kms-key-id"
	          },
	          "RequestPayer": {
	            "location": "header",
	            "locationName": "x-amz-request-payer"
	          },
	          "Tagging": {
	            "location": "header",
	            "locationName": "x-amz-tagging"
	          }
	        },
	        "payload": "Body"
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Expiration": {
	            "location": "header",
	            "locationName": "x-amz-expiration"
	          },
	          "ETag": {
	            "location": "header",
	            "locationName": "ETag"
	          },
	          "ServerSideEncryption": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption"
	          },
	          "VersionId": {
	            "location": "header",
	            "locationName": "x-amz-version-id"
	          },
	          "SSECustomerAlgorithm": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-algorithm"
	          },
	          "SSECustomerKeyMD5": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-key-MD5"
	          },
	          "SSEKMSKeyId": {
	            "shape": "Sj",
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-aws-kms-key-id"
	          },
	          "RequestCharged": {
	            "location": "header",
	            "locationName": "x-amz-request-charged"
	          }
	        }
	      }
	    },
	    "PutObjectAcl": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/{Bucket}/{Key+}?acl"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "Key"
	        ],
	        "members": {
	          "ACL": {
	            "location": "header",
	            "locationName": "x-amz-acl"
	          },
	          "AccessControlPolicy": {
	            "shape": "S9r",
	            "locationName": "AccessControlPolicy",
	            "xmlNamespace": {
	              "uri": "http://s3.amazonaws.com/doc/2006-03-01/"
	            }
	          },
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "ContentMD5": {
	            "location": "header",
	            "locationName": "Content-MD5"
	          },
	          "GrantFullControl": {
	            "location": "header",
	            "locationName": "x-amz-grant-full-control"
	          },
	          "GrantRead": {
	            "location": "header",
	            "locationName": "x-amz-grant-read"
	          },
	          "GrantReadACP": {
	            "location": "header",
	            "locationName": "x-amz-grant-read-acp"
	          },
	          "GrantWrite": {
	            "location": "header",
	            "locationName": "x-amz-grant-write"
	          },
	          "GrantWriteACP": {
	            "location": "header",
	            "locationName": "x-amz-grant-write-acp"
	          },
	          "Key": {
	            "location": "uri",
	            "locationName": "Key"
	          },
	          "RequestPayer": {
	            "location": "header",
	            "locationName": "x-amz-request-payer"
	          },
	          "VersionId": {
	            "location": "querystring",
	            "locationName": "versionId"
	          }
	        },
	        "payload": "AccessControlPolicy"
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "RequestCharged": {
	            "location": "header",
	            "locationName": "x-amz-request-charged"
	          }
	        }
	      }
	    },
	    "PutObjectTagging": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/{Bucket}/{Key+}?tagging"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "Key",
	          "Tagging"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "Key": {
	            "location": "uri",
	            "locationName": "Key"
	          },
	          "VersionId": {
	            "location": "querystring",
	            "locationName": "versionId"
	          },
	          "ContentMD5": {
	            "location": "header",
	            "locationName": "Content-MD5"
	          },
	          "Tagging": {
	            "shape": "Sab",
	            "locationName": "Tagging",
	            "xmlNamespace": {
	              "uri": "http://s3.amazonaws.com/doc/2006-03-01/"
	            }
	          }
	        },
	        "payload": "Tagging"
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "VersionId": {
	            "location": "header",
	            "locationName": "x-amz-version-id"
	          }
	        }
	      }
	    },
	    "RestoreObject": {
	      "http": {
	        "requestUri": "/{Bucket}/{Key+}?restore"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "Key"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "Key": {
	            "location": "uri",
	            "locationName": "Key"
	          },
	          "VersionId": {
	            "location": "querystring",
	            "locationName": "versionId"
	          },
	          "RestoreRequest": {
	            "locationName": "RestoreRequest",
	            "xmlNamespace": {
	              "uri": "http://s3.amazonaws.com/doc/2006-03-01/"
	            },
	            "type": "structure",
	            "required": [
	              "Days"
	            ],
	            "members": {
	              "Days": {
	                "type": "integer"
	              },
	              "GlacierJobParameters": {
	                "type": "structure",
	                "required": [
	                  "Tier"
	                ],
	                "members": {
	                  "Tier": {}
	                }
	              }
	            }
	          },
	          "RequestPayer": {
	            "location": "header",
	            "locationName": "x-amz-request-payer"
	          }
	        },
	        "payload": "RestoreRequest"
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "RequestCharged": {
	            "location": "header",
	            "locationName": "x-amz-request-charged"
	          }
	        }
	      },
	      "alias": "PostObjectRestore"
	    },
	    "UploadPart": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/{Bucket}/{Key+}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "Key",
	          "PartNumber",
	          "UploadId"
	        ],
	        "members": {
	          "Body": {
	            "streaming": true,
	            "type": "blob"
	          },
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "ContentLength": {
	            "location": "header",
	            "locationName": "Content-Length",
	            "type": "long"
	          },
	          "ContentMD5": {
	            "location": "header",
	            "locationName": "Content-MD5"
	          },
	          "Key": {
	            "location": "uri",
	            "locationName": "Key"
	          },
	          "PartNumber": {
	            "location": "querystring",
	            "locationName": "partNumber",
	            "type": "integer"
	          },
	          "UploadId": {
	            "location": "querystring",
	            "locationName": "uploadId"
	          },
	          "SSECustomerAlgorithm": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-algorithm"
	          },
	          "SSECustomerKey": {
	            "shape": "S19",
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-key"
	          },
	          "SSECustomerKeyMD5": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-key-MD5"
	          },
	          "RequestPayer": {
	            "location": "header",
	            "locationName": "x-amz-request-payer"
	          }
	        },
	        "payload": "Body"
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ServerSideEncryption": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption"
	          },
	          "ETag": {
	            "location": "header",
	            "locationName": "ETag"
	          },
	          "SSECustomerAlgorithm": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-algorithm"
	          },
	          "SSECustomerKeyMD5": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-key-MD5"
	          },
	          "SSEKMSKeyId": {
	            "shape": "Sj",
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-aws-kms-key-id"
	          },
	          "RequestCharged": {
	            "location": "header",
	            "locationName": "x-amz-request-charged"
	          }
	        }
	      }
	    },
	    "UploadPartCopy": {
	      "http": {
	        "method": "PUT",
	        "requestUri": "/{Bucket}/{Key+}"
	      },
	      "input": {
	        "type": "structure",
	        "required": [
	          "Bucket",
	          "CopySource",
	          "Key",
	          "PartNumber",
	          "UploadId"
	        ],
	        "members": {
	          "Bucket": {
	            "location": "uri",
	            "locationName": "Bucket"
	          },
	          "CopySource": {
	            "location": "header",
	            "locationName": "x-amz-copy-source"
	          },
	          "CopySourceIfMatch": {
	            "location": "header",
	            "locationName": "x-amz-copy-source-if-match"
	          },
	          "CopySourceIfModifiedSince": {
	            "location": "header",
	            "locationName": "x-amz-copy-source-if-modified-since",
	            "type": "timestamp"
	          },
	          "CopySourceIfNoneMatch": {
	            "location": "header",
	            "locationName": "x-amz-copy-source-if-none-match"
	          },
	          "CopySourceIfUnmodifiedSince": {
	            "location": "header",
	            "locationName": "x-amz-copy-source-if-unmodified-since",
	            "type": "timestamp"
	          },
	          "CopySourceRange": {
	            "location": "header",
	            "locationName": "x-amz-copy-source-range"
	          },
	          "Key": {
	            "location": "uri",
	            "locationName": "Key"
	          },
	          "PartNumber": {
	            "location": "querystring",
	            "locationName": "partNumber",
	            "type": "integer"
	          },
	          "UploadId": {
	            "location": "querystring",
	            "locationName": "uploadId"
	          },
	          "SSECustomerAlgorithm": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-algorithm"
	          },
	          "SSECustomerKey": {
	            "shape": "S19",
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-key"
	          },
	          "SSECustomerKeyMD5": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-key-MD5"
	          },
	          "CopySourceSSECustomerAlgorithm": {
	            "location": "header",
	            "locationName": "x-amz-copy-source-server-side-encryption-customer-algorithm"
	          },
	          "CopySourceSSECustomerKey": {
	            "shape": "S1c",
	            "location": "header",
	            "locationName": "x-amz-copy-source-server-side-encryption-customer-key"
	          },
	          "CopySourceSSECustomerKeyMD5": {
	            "location": "header",
	            "locationName": "x-amz-copy-source-server-side-encryption-customer-key-MD5"
	          },
	          "RequestPayer": {
	            "location": "header",
	            "locationName": "x-amz-request-payer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "CopySourceVersionId": {
	            "location": "header",
	            "locationName": "x-amz-copy-source-version-id"
	          },
	          "CopyPartResult": {
	            "type": "structure",
	            "members": {
	              "ETag": {},
	              "LastModified": {
	                "type": "timestamp"
	              }
	            }
	          },
	          "ServerSideEncryption": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption"
	          },
	          "SSECustomerAlgorithm": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-algorithm"
	          },
	          "SSECustomerKeyMD5": {
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-customer-key-MD5"
	          },
	          "SSEKMSKeyId": {
	            "shape": "Sj",
	            "location": "header",
	            "locationName": "x-amz-server-side-encryption-aws-kms-key-id"
	          },
	          "RequestCharged": {
	            "location": "header",
	            "locationName": "x-amz-request-charged"
	          }
	        },
	        "payload": "CopyPartResult"
	      }
	    }
	  },
	  "shapes": {
	    "Sj": {
	      "type": "string",
	      "sensitive": true
	    },
	    "S11": {
	      "type": "map",
	      "key": {},
	      "value": {}
	    },
	    "S19": {
	      "type": "blob",
	      "sensitive": true
	    },
	    "S1c": {
	      "type": "blob",
	      "sensitive": true
	    },
	    "S2u": {
	      "type": "structure",
	      "members": {
	        "DisplayName": {},
	        "ID": {}
	      }
	    },
	    "S2x": {
	      "type": "list",
	      "member": {
	        "locationName": "Grant",
	        "type": "structure",
	        "members": {
	          "Grantee": {
	            "shape": "S2z"
	          },
	          "Permission": {}
	        }
	      }
	    },
	    "S2z": {
	      "type": "structure",
	      "required": [
	        "Type"
	      ],
	      "members": {
	        "DisplayName": {},
	        "EmailAddress": {},
	        "ID": {},
	        "Type": {
	          "locationName": "xsi:type",
	          "xmlAttribute": true
	        },
	        "URI": {}
	      },
	      "xmlNamespace": {
	        "prefix": "xsi",
	        "uri": "http://www.w3.org/2001/XMLSchema-instance"
	      }
	    },
	    "S36": {
	      "type": "structure",
	      "required": [
	        "Id",
	        "StorageClassAnalysis"
	      ],
	      "members": {
	        "Id": {},
	        "Filter": {
	          "type": "structure",
	          "members": {
	            "Prefix": {},
	            "Tag": {
	              "shape": "S39"
	            },
	            "And": {
	              "type": "structure",
	              "members": {
	                "Prefix": {},
	                "Tags": {
	                  "shape": "S3c",
	                  "flattened": true,
	                  "locationName": "Tag"
	                }
	              }
	            }
	          }
	        },
	        "StorageClassAnalysis": {
	          "type": "structure",
	          "members": {
	            "DataExport": {
	              "type": "structure",
	              "required": [
	                "OutputSchemaVersion",
	                "Destination"
	              ],
	              "members": {
	                "OutputSchemaVersion": {},
	                "Destination": {
	                  "type": "structure",
	                  "required": [
	                    "S3BucketDestination"
	                  ],
	                  "members": {
	                    "S3BucketDestination": {
	                      "type": "structure",
	                      "required": [
	                        "Format",
	                        "Bucket"
	                      ],
	                      "members": {
	                        "Format": {},
	                        "BucketAccountId": {},
	                        "Bucket": {},
	                        "Prefix": {}
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "S39": {
	      "type": "structure",
	      "required": [
	        "Key",
	        "Value"
	      ],
	      "members": {
	        "Key": {},
	        "Value": {}
	      }
	    },
	    "S3c": {
	      "type": "list",
	      "member": {
	        "shape": "S39",
	        "locationName": "Tag"
	      }
	    },
	    "S3m": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "AllowedMethods",
	          "AllowedOrigins"
	        ],
	        "members": {
	          "AllowedHeaders": {
	            "locationName": "AllowedHeader",
	            "type": "list",
	            "member": {},
	            "flattened": true
	          },
	          "AllowedMethods": {
	            "locationName": "AllowedMethod",
	            "type": "list",
	            "member": {},
	            "flattened": true
	          },
	          "AllowedOrigins": {
	            "locationName": "AllowedOrigin",
	            "type": "list",
	            "member": {},
	            "flattened": true
	          },
	          "ExposeHeaders": {
	            "locationName": "ExposeHeader",
	            "type": "list",
	            "member": {},
	            "flattened": true
	          },
	          "MaxAgeSeconds": {
	            "type": "integer"
	          }
	        }
	      },
	      "flattened": true
	    },
	    "S3z": {
	      "type": "structure",
	      "required": [
	        "Destination",
	        "IsEnabled",
	        "Id",
	        "IncludedObjectVersions",
	        "Schedule"
	      ],
	      "members": {
	        "Destination": {
	          "type": "structure",
	          "required": [
	            "S3BucketDestination"
	          ],
	          "members": {
	            "S3BucketDestination": {
	              "type": "structure",
	              "required": [
	                "Bucket",
	                "Format"
	              ],
	              "members": {
	                "AccountId": {},
	                "Bucket": {},
	                "Format": {},
	                "Prefix": {}
	              }
	            }
	          }
	        },
	        "IsEnabled": {
	          "type": "boolean"
	        },
	        "Filter": {
	          "type": "structure",
	          "required": [
	            "Prefix"
	          ],
	          "members": {
	            "Prefix": {}
	          }
	        },
	        "Id": {},
	        "IncludedObjectVersions": {},
	        "OptionalFields": {
	          "type": "list",
	          "member": {
	            "locationName": "Field"
	          }
	        },
	        "Schedule": {
	          "type": "structure",
	          "required": [
	            "Frequency"
	          ],
	          "members": {
	            "Frequency": {}
	          }
	        }
	      }
	    },
	    "S4c": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "Prefix",
	          "Status"
	        ],
	        "members": {
	          "Expiration": {
	            "shape": "S4e"
	          },
	          "ID": {},
	          "Prefix": {},
	          "Status": {},
	          "Transition": {
	            "shape": "S4j"
	          },
	          "NoncurrentVersionTransition": {
	            "shape": "S4l"
	          },
	          "NoncurrentVersionExpiration": {
	            "shape": "S4m"
	          },
	          "AbortIncompleteMultipartUpload": {
	            "shape": "S4n"
	          }
	        }
	      },
	      "flattened": true
	    },
	    "S4e": {
	      "type": "structure",
	      "members": {
	        "Date": {
	          "shape": "S4f"
	        },
	        "Days": {
	          "type": "integer"
	        },
	        "ExpiredObjectDeleteMarker": {
	          "type": "boolean"
	        }
	      }
	    },
	    "S4f": {
	      "type": "timestamp",
	      "timestampFormat": "iso8601"
	    },
	    "S4j": {
	      "type": "structure",
	      "members": {
	        "Date": {
	          "shape": "S4f"
	        },
	        "Days": {
	          "type": "integer"
	        },
	        "StorageClass": {}
	      }
	    },
	    "S4l": {
	      "type": "structure",
	      "members": {
	        "NoncurrentDays": {
	          "type": "integer"
	        },
	        "StorageClass": {}
	      }
	    },
	    "S4m": {
	      "type": "structure",
	      "members": {
	        "NoncurrentDays": {
	          "type": "integer"
	        }
	      }
	    },
	    "S4n": {
	      "type": "structure",
	      "members": {
	        "DaysAfterInitiation": {
	          "type": "integer"
	        }
	      }
	    },
	    "S4r": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "Status"
	        ],
	        "members": {
	          "Expiration": {
	            "shape": "S4e"
	          },
	          "ID": {},
	          "Prefix": {
	            "deprecated": true
	          },
	          "Filter": {
	            "type": "structure",
	            "members": {
	              "Prefix": {},
	              "Tag": {
	                "shape": "S39"
	              },
	              "And": {
	                "type": "structure",
	                "members": {
	                  "Prefix": {},
	                  "Tags": {
	                    "shape": "S3c",
	                    "flattened": true,
	                    "locationName": "Tag"
	                  }
	                }
	              }
	            }
	          },
	          "Status": {},
	          "Transitions": {
	            "locationName": "Transition",
	            "type": "list",
	            "member": {
	              "shape": "S4j"
	            },
	            "flattened": true
	          },
	          "NoncurrentVersionTransitions": {
	            "locationName": "NoncurrentVersionTransition",
	            "type": "list",
	            "member": {
	              "shape": "S4l"
	            },
	            "flattened": true
	          },
	          "NoncurrentVersionExpiration": {
	            "shape": "S4m"
	          },
	          "AbortIncompleteMultipartUpload": {
	            "shape": "S4n"
	          }
	        }
	      },
	      "flattened": true
	    },
	    "S51": {
	      "type": "structure",
	      "members": {
	        "TargetBucket": {},
	        "TargetGrants": {
	          "type": "list",
	          "member": {
	            "locationName": "Grant",
	            "type": "structure",
	            "members": {
	              "Grantee": {
	                "shape": "S2z"
	              },
	              "Permission": {}
	            }
	          }
	        },
	        "TargetPrefix": {}
	      }
	    },
	    "S59": {
	      "type": "structure",
	      "required": [
	        "Id"
	      ],
	      "members": {
	        "Id": {},
	        "Filter": {
	          "type": "structure",
	          "members": {
	            "Prefix": {},
	            "Tag": {
	              "shape": "S39"
	            },
	            "And": {
	              "type": "structure",
	              "members": {
	                "Prefix": {},
	                "Tags": {
	                  "shape": "S3c",
	                  "flattened": true,
	                  "locationName": "Tag"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "S5c": {
	      "type": "structure",
	      "required": [
	        "Bucket"
	      ],
	      "members": {
	        "Bucket": {
	          "location": "uri",
	          "locationName": "Bucket"
	        }
	      }
	    },
	    "S5d": {
	      "type": "structure",
	      "members": {
	        "TopicConfiguration": {
	          "type": "structure",
	          "members": {
	            "Id": {},
	            "Events": {
	              "shape": "S5g",
	              "locationName": "Event"
	            },
	            "Event": {
	              "deprecated": true
	            },
	            "Topic": {}
	          }
	        },
	        "QueueConfiguration": {
	          "type": "structure",
	          "members": {
	            "Id": {},
	            "Event": {
	              "deprecated": true
	            },
	            "Events": {
	              "shape": "S5g",
	              "locationName": "Event"
	            },
	            "Queue": {}
	          }
	        },
	        "CloudFunctionConfiguration": {
	          "type": "structure",
	          "members": {
	            "Id": {},
	            "Event": {
	              "deprecated": true
	            },
	            "Events": {
	              "shape": "S5g",
	              "locationName": "Event"
	            },
	            "CloudFunction": {},
	            "InvocationRole": {}
	          }
	        }
	      }
	    },
	    "S5g": {
	      "type": "list",
	      "member": {},
	      "flattened": true
	    },
	    "S5o": {
	      "type": "structure",
	      "members": {
	        "TopicConfigurations": {
	          "locationName": "TopicConfiguration",
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "required": [
	              "TopicArn",
	              "Events"
	            ],
	            "members": {
	              "Id": {},
	              "TopicArn": {
	                "locationName": "Topic"
	              },
	              "Events": {
	                "shape": "S5g",
	                "locationName": "Event"
	              },
	              "Filter": {
	                "shape": "S5r"
	              }
	            }
	          },
	          "flattened": true
	        },
	        "QueueConfigurations": {
	          "locationName": "QueueConfiguration",
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "required": [
	              "QueueArn",
	              "Events"
	            ],
	            "members": {
	              "Id": {},
	              "QueueArn": {
	                "locationName": "Queue"
	              },
	              "Events": {
	                "shape": "S5g",
	                "locationName": "Event"
	              },
	              "Filter": {
	                "shape": "S5r"
	              }
	            }
	          },
	          "flattened": true
	        },
	        "LambdaFunctionConfigurations": {
	          "locationName": "CloudFunctionConfiguration",
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "required": [
	              "LambdaFunctionArn",
	              "Events"
	            ],
	            "members": {
	              "Id": {},
	              "LambdaFunctionArn": {
	                "locationName": "CloudFunction"
	              },
	              "Events": {
	                "shape": "S5g",
	                "locationName": "Event"
	              },
	              "Filter": {
	                "shape": "S5r"
	              }
	            }
	          },
	          "flattened": true
	        }
	      }
	    },
	    "S5r": {
	      "type": "structure",
	      "members": {
	        "Key": {
	          "locationName": "S3Key",
	          "type": "structure",
	          "members": {
	            "FilterRules": {
	              "locationName": "FilterRule",
	              "type": "list",
	              "member": {
	                "type": "structure",
	                "members": {
	                  "Name": {},
	                  "Value": {}
	                }
	              },
	              "flattened": true
	            }
	          }
	        }
	      }
	    },
	    "S67": {
	      "type": "structure",
	      "required": [
	        "Role",
	        "Rules"
	      ],
	      "members": {
	        "Role": {},
	        "Rules": {
	          "locationName": "Rule",
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "required": [
	              "Prefix",
	              "Status",
	              "Destination"
	            ],
	            "members": {
	              "ID": {},
	              "Prefix": {},
	              "Status": {},
	              "Destination": {
	                "type": "structure",
	                "required": [
	                  "Bucket"
	                ],
	                "members": {
	                  "Bucket": {},
	                  "StorageClass": {}
	                }
	              }
	            }
	          },
	          "flattened": true
	        }
	      }
	    },
	    "S6o": {
	      "type": "structure",
	      "required": [
	        "HostName"
	      ],
	      "members": {
	        "HostName": {},
	        "Protocol": {}
	      }
	    },
	    "S6r": {
	      "type": "structure",
	      "required": [
	        "Suffix"
	      ],
	      "members": {
	        "Suffix": {}
	      }
	    },
	    "S6t": {
	      "type": "structure",
	      "required": [
	        "Key"
	      ],
	      "members": {
	        "Key": {}
	      }
	    },
	    "S6u": {
	      "type": "list",
	      "member": {
	        "locationName": "RoutingRule",
	        "type": "structure",
	        "required": [
	          "Redirect"
	        ],
	        "members": {
	          "Condition": {
	            "type": "structure",
	            "members": {
	              "HttpErrorCodeReturnedEquals": {},
	              "KeyPrefixEquals": {}
	            }
	          },
	          "Redirect": {
	            "type": "structure",
	            "members": {
	              "HostName": {},
	              "HttpRedirectCode": {},
	              "Protocol": {},
	              "ReplaceKeyPrefixWith": {},
	              "ReplaceKeyWith": {}
	            }
	          }
	        }
	      }
	    },
	    "S8q": {
	      "type": "structure",
	      "members": {
	        "ID": {},
	        "DisplayName": {}
	      }
	    },
	    "S8r": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "Prefix": {}
	        }
	      },
	      "flattened": true
	    },
	    "S99": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "Key": {},
	          "LastModified": {
	            "type": "timestamp"
	          },
	          "ETag": {},
	          "Size": {
	            "type": "integer"
	          },
	          "StorageClass": {},
	          "Owner": {
	            "shape": "S2u"
	          }
	        }
	      },
	      "flattened": true
	    },
	    "S9r": {
	      "type": "structure",
	      "members": {
	        "Grants": {
	          "shape": "S2x",
	          "locationName": "AccessControlList"
	        },
	        "Owner": {
	          "shape": "S2u"
	        }
	      }
	    },
	    "Sab": {
	      "type": "structure",
	      "required": [
	        "TagSet"
	      ],
	      "members": {
	        "TagSet": {
	          "shape": "S3c"
	        }
	      }
	    }
	  }
	}
	},{}],122:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "ListBuckets": {
	      "result_key": "Buckets"
	    },
	    "ListMultipartUploads": {
	      "limit_key": "MaxUploads",
	      "more_results": "IsTruncated",
	      "output_token": [
	        "NextKeyMarker",
	        "NextUploadIdMarker"
	      ],
	      "input_token": [
	        "KeyMarker",
	        "UploadIdMarker"
	      ],
	      "result_key": [
	        "Uploads",
	        "CommonPrefixes"
	      ]
	    },
	    "ListObjectVersions": {
	      "more_results": "IsTruncated",
	      "limit_key": "MaxKeys",
	      "output_token": [
	        "NextKeyMarker",
	        "NextVersionIdMarker"
	      ],
	      "input_token": [
	        "KeyMarker",
	        "VersionIdMarker"
	      ],
	      "result_key": [
	        "Versions",
	        "DeleteMarkers",
	        "CommonPrefixes"
	      ]
	    },
	    "ListObjects": {
	      "more_results": "IsTruncated",
	      "limit_key": "MaxKeys",
	      "output_token": "NextMarker || Contents[-1].Key",
	      "input_token": "Marker",
	      "result_key": [
	        "Contents",
	        "CommonPrefixes"
	      ]
	    },
	    "ListObjectsV2": {
	      "limit_key": "MaxKeys",
	      "output_token": "NextContinuationToken",
	      "input_token": "ContinuationToken",
	      "result_key": [
	        "Contents",
	        "CommonPrefixes"
	      ]
	    },
	    "ListParts": {
	      "more_results": "IsTruncated",
	      "limit_key": "MaxParts",
	      "output_token": "NextPartNumberMarker",
	      "input_token": "PartNumberMarker",
	      "result_key": "Parts"
	    }
	  }
	}
	
	},{}],123:[function(require,module,exports){
	module.exports={
	  "version": 2,
	  "waiters": {
	    "BucketExists": {
	      "delay": 5,
	      "operation": "HeadBucket",
	      "maxAttempts": 20,
	      "acceptors": [
	        {
	          "expected": 200,
	          "matcher": "status",
	          "state": "success"
	        },
	        {
	          "expected": 301,
	          "matcher": "status",
	          "state": "success"
	        },
	        {
	          "expected": 403,
	          "matcher": "status",
	          "state": "success"
	        },
	        {
	          "expected": 404,
	          "matcher": "status",
	          "state": "retry"
	        }
	      ]
	    },
	    "BucketNotExists": {
	      "delay": 5,
	      "operation": "HeadBucket",
	      "maxAttempts": 20,
	      "acceptors": [
	        {
	          "expected": 404,
	          "matcher": "status",
	          "state": "success"
	        }
	      ]
	    },
	    "ObjectExists": {
	      "delay": 5,
	      "operation": "HeadObject",
	      "maxAttempts": 20,
	      "acceptors": [
	        {
	          "expected": 200,
	          "matcher": "status",
	          "state": "success"
	        },
	        {
	          "expected": 404,
	          "matcher": "status",
	          "state": "retry"
	        }
	      ]
	    },
	    "ObjectNotExists": {
	      "delay": 5,
	      "operation": "HeadObject",
	      "maxAttempts": 20,
	      "acceptors": [
	        {
	          "expected": 404,
	          "matcher": "status",
	          "state": "success"
	        }
	      ]
	    }
	  }
	}
	
	},{}],124:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "uid": "servicecatalog-2015-12-10",
	    "apiVersion": "2015-12-10",
	    "endpointPrefix": "servicecatalog",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceFullName": "AWS Service Catalog",
	    "signatureVersion": "v4",
	    "targetPrefix": "AWS242ServiceCatalogService"
	  },
	  "operations": {
	    "AcceptPortfolioShare": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "PortfolioId"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "PortfolioId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "AssociatePrincipalWithPortfolio": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "PortfolioId",
	          "PrincipalARN",
	          "PrincipalType"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "PortfolioId": {},
	          "PrincipalARN": {},
	          "PrincipalType": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "AssociateProductWithPortfolio": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ProductId",
	          "PortfolioId"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "ProductId": {},
	          "PortfolioId": {},
	          "SourcePortfolioId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "CreateConstraint": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "PortfolioId",
	          "ProductId",
	          "Parameters",
	          "Type",
	          "IdempotencyToken"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "PortfolioId": {},
	          "ProductId": {},
	          "Parameters": {},
	          "Type": {},
	          "Description": {},
	          "IdempotencyToken": {
	            "idempotencyToken": true
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ConstraintDetail": {
	            "shape": "Sh"
	          },
	          "ConstraintParameters": {},
	          "Status": {}
	        }
	      }
	    },
	    "CreatePortfolio": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DisplayName",
	          "ProviderName",
	          "IdempotencyToken"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "DisplayName": {},
	          "Description": {},
	          "ProviderName": {},
	          "Tags": {
	            "shape": "So"
	          },
	          "IdempotencyToken": {
	            "idempotencyToken": true
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "PortfolioDetail": {
	            "shape": "St"
	          },
	          "Tags": {
	            "shape": "Sw"
	          }
	        }
	      }
	    },
	    "CreatePortfolioShare": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "PortfolioId",
	          "AccountId"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "PortfolioId": {},
	          "AccountId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "CreateProduct": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "Owner",
	          "ProductType",
	          "ProvisioningArtifactParameters",
	          "IdempotencyToken"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "Name": {},
	          "Owner": {},
	          "Description": {},
	          "Distributor": {},
	          "SupportDescription": {},
	          "SupportEmail": {},
	          "SupportUrl": {},
	          "ProductType": {},
	          "Tags": {
	            "shape": "So"
	          },
	          "ProvisioningArtifactParameters": {
	            "shape": "S17"
	          },
	          "IdempotencyToken": {
	            "idempotencyToken": true
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ProductViewDetail": {
	            "shape": "S1f"
	          },
	          "ProvisioningArtifactDetail": {
	            "shape": "S1k"
	          },
	          "Tags": {
	            "shape": "Sw"
	          }
	        }
	      }
	    },
	    "CreateProvisioningArtifact": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ProductId",
	          "Parameters",
	          "IdempotencyToken"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "ProductId": {},
	          "Parameters": {
	            "shape": "S17"
	          },
	          "IdempotencyToken": {
	            "idempotencyToken": true
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ProvisioningArtifactDetail": {
	            "shape": "S1k"
	          },
	          "Info": {
	            "shape": "S1a"
	          },
	          "Status": {}
	        }
	      }
	    },
	    "DeleteConstraint": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "Id": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeletePortfolio": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "Id": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeletePortfolioShare": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "PortfolioId",
	          "AccountId"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "PortfolioId": {},
	          "AccountId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteProduct": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "Id": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteProvisioningArtifact": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ProductId",
	          "ProvisioningArtifactId"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "ProductId": {},
	          "ProvisioningArtifactId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DescribeConstraint": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "Id": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ConstraintDetail": {
	            "shape": "Sh"
	          },
	          "ConstraintParameters": {},
	          "Status": {}
	        }
	      }
	    },
	    "DescribePortfolio": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "Id": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "PortfolioDetail": {
	            "shape": "St"
	          },
	          "Tags": {
	            "shape": "Sw"
	          }
	        }
	      }
	    },
	    "DescribeProduct": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "Id": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ProductViewSummary": {
	            "shape": "S1g"
	          },
	          "ProvisioningArtifacts": {
	            "shape": "S23"
	          }
	        }
	      }
	    },
	    "DescribeProductAsAdmin": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "Id": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ProductViewDetail": {
	            "shape": "S1f"
	          },
	          "Tags": {
	            "shape": "Sw"
	          }
	        }
	      }
	    },
	    "DescribeProductView": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "Id": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ProductViewSummary": {
	            "shape": "S1g"
	          },
	          "ProvisioningArtifacts": {
	            "shape": "S23"
	          }
	        }
	      }
	    },
	    "DescribeProvisioningArtifact": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ProvisioningArtifactId",
	          "ProductId"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "ProvisioningArtifactId": {},
	          "ProductId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ProvisioningArtifactDetail": {
	            "shape": "S1k"
	          },
	          "Info": {
	            "shape": "S1a"
	          },
	          "Status": {}
	        }
	      }
	    },
	    "DescribeProvisioningParameters": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ProductId",
	          "ProvisioningArtifactId"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "ProductId": {},
	          "ProvisioningArtifactId": {},
	          "PathId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ProvisioningArtifactParameters": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "ParameterKey": {},
	                "DefaultValue": {},
	                "ParameterType": {},
	                "IsNoEcho": {
	                  "type": "boolean"
	                },
	                "Description": {},
	                "ParameterConstraints": {
	                  "type": "structure",
	                  "members": {
	                    "AllowedValues": {
	                      "type": "list",
	                      "member": {}
	                    }
	                  }
	                }
	              }
	            }
	          },
	          "ConstraintSummaries": {
	            "shape": "S2o"
	          },
	          "UsageInstructions": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Type": {},
	                "Value": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeRecord": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "Id": {},
	          "PageToken": {},
	          "PageSize": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "RecordDetail": {
	            "shape": "S2y"
	          },
	          "RecordOutputs": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "OutputKey": {},
	                "OutputValue": {},
	                "Description": {}
	              }
	            }
	          },
	          "NextPageToken": {}
	        }
	      }
	    },
	    "DisassociatePrincipalFromPortfolio": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "PortfolioId",
	          "PrincipalARN"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "PortfolioId": {},
	          "PrincipalARN": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DisassociateProductFromPortfolio": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ProductId",
	          "PortfolioId"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "ProductId": {},
	          "PortfolioId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "ListAcceptedPortfolioShares": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "AcceptLanguage": {},
	          "PageToken": {},
	          "PageSize": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "PortfolioDetails": {
	            "shape": "S3m"
	          },
	          "NextPageToken": {}
	        }
	      }
	    },
	    "ListConstraintsForPortfolio": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "PortfolioId"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "PortfolioId": {},
	          "ProductId": {},
	          "PageSize": {
	            "type": "integer"
	          },
	          "PageToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ConstraintDetails": {
	            "type": "list",
	            "member": {
	              "shape": "Sh"
	            }
	          },
	          "NextPageToken": {}
	        }
	      }
	    },
	    "ListLaunchPaths": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ProductId"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "ProductId": {},
	          "PageSize": {
	            "type": "integer"
	          },
	          "PageToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "LaunchPathSummaries": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Id": {},
	                "ConstraintSummaries": {
	                  "shape": "S2o"
	                },
	                "Tags": {
	                  "shape": "Sw"
	                },
	                "Name": {}
	              }
	            }
	          },
	          "NextPageToken": {}
	        }
	      }
	    },
	    "ListPortfolioAccess": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "PortfolioId"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "PortfolioId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "AccountIds": {
	            "type": "list",
	            "member": {}
	          },
	          "NextPageToken": {}
	        }
	      }
	    },
	    "ListPortfolios": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "AcceptLanguage": {},
	          "PageToken": {},
	          "PageSize": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "PortfolioDetails": {
	            "shape": "S3m"
	          },
	          "NextPageToken": {}
	        }
	      }
	    },
	    "ListPortfoliosForProduct": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ProductId"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "ProductId": {},
	          "PageToken": {},
	          "PageSize": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "PortfolioDetails": {
	            "shape": "S3m"
	          },
	          "NextPageToken": {}
	        }
	      }
	    },
	    "ListPrincipalsForPortfolio": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "PortfolioId"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "PortfolioId": {},
	          "PageSize": {
	            "type": "integer"
	          },
	          "PageToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Principals": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "PrincipalARN": {},
	                "PrincipalType": {}
	              }
	            }
	          },
	          "NextPageToken": {}
	        }
	      }
	    },
	    "ListProvisioningArtifacts": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ProductId"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "ProductId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ProvisioningArtifactDetails": {
	            "type": "list",
	            "member": {
	              "shape": "S1k"
	            }
	          },
	          "NextPageToken": {}
	        }
	      }
	    },
	    "ListRecordHistory": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "AcceptLanguage": {},
	          "AccessLevelFilter": {
	            "shape": "S4a"
	          },
	          "SearchFilter": {
	            "type": "structure",
	            "members": {
	              "Key": {},
	              "Value": {}
	            }
	          },
	          "PageSize": {
	            "type": "integer"
	          },
	          "PageToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "RecordDetails": {
	            "type": "list",
	            "member": {
	              "shape": "S2y"
	            }
	          },
	          "NextPageToken": {}
	        }
	      }
	    },
	    "ProvisionProduct": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ProductId",
	          "ProvisioningArtifactId",
	          "ProvisionedProductName",
	          "ProvisionToken"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "ProductId": {},
	          "ProvisioningArtifactId": {},
	          "PathId": {},
	          "ProvisionedProductName": {},
	          "ProvisioningParameters": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Key": {},
	                "Value": {}
	              }
	            }
	          },
	          "Tags": {
	            "shape": "Sw"
	          },
	          "NotificationArns": {
	            "type": "list",
	            "member": {}
	          },
	          "ProvisionToken": {
	            "idempotencyToken": true
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "RecordDetail": {
	            "shape": "S2y"
	          }
	        }
	      }
	    },
	    "RejectPortfolioShare": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "PortfolioId"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "PortfolioId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "ScanProvisionedProducts": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "AcceptLanguage": {},
	          "AccessLevelFilter": {
	            "shape": "S4a"
	          },
	          "PageSize": {
	            "type": "integer"
	          },
	          "PageToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ProvisionedProducts": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Name": {},
	                "Arn": {},
	                "Type": {},
	                "Id": {},
	                "Status": {},
	                "StatusMessage": {},
	                "CreatedTime": {
	                  "type": "timestamp"
	                },
	                "IdempotencyToken": {},
	                "LastRecordId": {}
	              }
	            }
	          },
	          "NextPageToken": {}
	        }
	      }
	    },
	    "SearchProducts": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "AcceptLanguage": {},
	          "Filters": {
	            "shape": "S50"
	          },
	          "PageSize": {
	            "type": "integer"
	          },
	          "SortBy": {},
	          "SortOrder": {},
	          "PageToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ProductViewSummaries": {
	            "type": "list",
	            "member": {
	              "shape": "S1g"
	            }
	          },
	          "ProductViewAggregations": {
	            "type": "map",
	            "key": {},
	            "value": {
	              "type": "list",
	              "member": {
	                "type": "structure",
	                "members": {
	                  "Value": {},
	                  "ApproximateCount": {
	                    "type": "integer"
	                  }
	                }
	              }
	            }
	          },
	          "NextPageToken": {}
	        }
	      }
	    },
	    "SearchProductsAsAdmin": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "AcceptLanguage": {},
	          "PortfolioId": {},
	          "Filters": {
	            "shape": "S50"
	          },
	          "SortBy": {},
	          "SortOrder": {},
	          "PageToken": {},
	          "PageSize": {
	            "type": "integer"
	          },
	          "ProductSource": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ProductViewDetails": {
	            "type": "list",
	            "member": {
	              "shape": "S1f"
	            }
	          },
	          "NextPageToken": {}
	        }
	      }
	    },
	    "TerminateProvisionedProduct": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TerminateToken"
	        ],
	        "members": {
	          "ProvisionedProductName": {},
	          "ProvisionedProductId": {},
	          "TerminateToken": {
	            "idempotencyToken": true
	          },
	          "IgnoreErrors": {
	            "type": "boolean"
	          },
	          "AcceptLanguage": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "RecordDetail": {
	            "shape": "S2y"
	          }
	        }
	      }
	    },
	    "UpdateConstraint": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "Id": {},
	          "Description": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ConstraintDetail": {
	            "shape": "Sh"
	          },
	          "ConstraintParameters": {},
	          "Status": {}
	        }
	      }
	    },
	    "UpdatePortfolio": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "Id": {},
	          "DisplayName": {},
	          "Description": {},
	          "ProviderName": {},
	          "AddTags": {
	            "shape": "So"
	          },
	          "RemoveTags": {
	            "shape": "S5o"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "PortfolioDetail": {
	            "shape": "St"
	          },
	          "Tags": {
	            "shape": "Sw"
	          }
	        }
	      }
	    },
	    "UpdateProduct": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Id"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "Id": {},
	          "Name": {},
	          "Owner": {},
	          "Description": {},
	          "Distributor": {},
	          "SupportDescription": {},
	          "SupportEmail": {},
	          "SupportUrl": {},
	          "AddTags": {
	            "shape": "So"
	          },
	          "RemoveTags": {
	            "shape": "S5o"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ProductViewDetail": {
	            "shape": "S1f"
	          },
	          "Tags": {
	            "shape": "Sw"
	          }
	        }
	      }
	    },
	    "UpdateProvisionedProduct": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "UpdateToken"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "ProvisionedProductName": {},
	          "ProvisionedProductId": {},
	          "ProductId": {},
	          "ProvisioningArtifactId": {},
	          "PathId": {},
	          "ProvisioningParameters": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Key": {},
	                "Value": {},
	                "UsePreviousValue": {
	                  "type": "boolean"
	                }
	              }
	            }
	          },
	          "UpdateToken": {
	            "idempotencyToken": true
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "RecordDetail": {
	            "shape": "S2y"
	          }
	        }
	      }
	    },
	    "UpdateProvisioningArtifact": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ProductId",
	          "ProvisioningArtifactId"
	        ],
	        "members": {
	          "AcceptLanguage": {},
	          "ProductId": {},
	          "ProvisioningArtifactId": {},
	          "Name": {},
	          "Description": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ProvisioningArtifactDetail": {
	            "shape": "S1k"
	          },
	          "Info": {
	            "shape": "S1a"
	          },
	          "Status": {}
	        }
	      }
	    }
	  },
	  "shapes": {
	    "Sh": {
	      "type": "structure",
	      "members": {
	        "ConstraintId": {},
	        "Type": {},
	        "Description": {},
	        "Owner": {}
	      }
	    },
	    "So": {
	      "type": "list",
	      "member": {
	        "shape": "Sp"
	      }
	    },
	    "Sp": {
	      "type": "structure",
	      "required": [
	        "Key",
	        "Value"
	      ],
	      "members": {
	        "Key": {},
	        "Value": {}
	      }
	    },
	    "St": {
	      "type": "structure",
	      "members": {
	        "Id": {},
	        "ARN": {},
	        "DisplayName": {},
	        "Description": {},
	        "CreatedTime": {
	          "type": "timestamp"
	        },
	        "ProviderName": {}
	      }
	    },
	    "Sw": {
	      "type": "list",
	      "member": {
	        "shape": "Sp"
	      }
	    },
	    "S17": {
	      "type": "structure",
	      "required": [
	        "Info"
	      ],
	      "members": {
	        "Name": {},
	        "Description": {},
	        "Info": {
	          "shape": "S1a"
	        },
	        "Type": {}
	      }
	    },
	    "S1a": {
	      "type": "map",
	      "key": {},
	      "value": {}
	    },
	    "S1f": {
	      "type": "structure",
	      "members": {
	        "ProductViewSummary": {
	          "shape": "S1g"
	        },
	        "Status": {},
	        "ProductARN": {},
	        "CreatedTime": {
	          "type": "timestamp"
	        }
	      }
	    },
	    "S1g": {
	      "type": "structure",
	      "members": {
	        "Id": {},
	        "ProductId": {},
	        "Name": {},
	        "Owner": {},
	        "ShortDescription": {},
	        "Type": {},
	        "Distributor": {},
	        "HasDefaultPath": {
	          "type": "boolean"
	        },
	        "SupportEmail": {},
	        "SupportDescription": {},
	        "SupportUrl": {}
	      }
	    },
	    "S1k": {
	      "type": "structure",
	      "members": {
	        "Id": {},
	        "Name": {},
	        "Description": {},
	        "Type": {},
	        "CreatedTime": {
	          "type": "timestamp"
	        }
	      }
	    },
	    "S23": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "Id": {},
	          "Name": {},
	          "Description": {},
	          "CreatedTime": {
	            "type": "timestamp"
	          }
	        }
	      }
	    },
	    "S2o": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "Type": {},
	          "Description": {}
	        }
	      }
	    },
	    "S2y": {
	      "type": "structure",
	      "members": {
	        "RecordId": {},
	        "ProvisionedProductName": {},
	        "Status": {},
	        "CreatedTime": {
	          "type": "timestamp"
	        },
	        "UpdatedTime": {
	          "type": "timestamp"
	        },
	        "ProvisionedProductType": {},
	        "RecordType": {},
	        "ProvisionedProductId": {},
	        "ProductId": {},
	        "ProvisioningArtifactId": {},
	        "PathId": {},
	        "RecordErrors": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "members": {
	              "Code": {},
	              "Description": {}
	            }
	          }
	        },
	        "RecordTags": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "members": {
	              "Key": {},
	              "Value": {}
	            }
	          }
	        }
	      }
	    },
	    "S3m": {
	      "type": "list",
	      "member": {
	        "shape": "St"
	      }
	    },
	    "S4a": {
	      "type": "structure",
	      "members": {
	        "Key": {},
	        "Value": {}
	      }
	    },
	    "S50": {
	      "type": "map",
	      "key": {},
	      "value": {
	        "type": "list",
	        "member": {}
	      }
	    },
	    "S5o": {
	      "type": "list",
	      "member": {}
	    }
	  }
	}
	},{}],125:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "uid": "sns-2010-03-31",
	    "apiVersion": "2010-03-31",
	    "endpointPrefix": "sns",
	    "protocol": "query",
	    "serviceAbbreviation": "Amazon SNS",
	    "serviceFullName": "Amazon Simple Notification Service",
	    "signatureVersion": "v4",
	    "xmlNamespace": "http://sns.amazonaws.com/doc/2010-03-31/"
	  },
	  "operations": {
	    "AddPermission": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TopicArn",
	          "Label",
	          "AWSAccountId",
	          "ActionName"
	        ],
	        "members": {
	          "TopicArn": {},
	          "Label": {},
	          "AWSAccountId": {
	            "type": "list",
	            "member": {}
	          },
	          "ActionName": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      }
	    },
	    "CheckIfPhoneNumberIsOptedOut": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "phoneNumber"
	        ],
	        "members": {
	          "phoneNumber": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CheckIfPhoneNumberIsOptedOutResult",
	        "type": "structure",
	        "members": {
	          "isOptedOut": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "ConfirmSubscription": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TopicArn",
	          "Token"
	        ],
	        "members": {
	          "TopicArn": {},
	          "Token": {},
	          "AuthenticateOnUnsubscribe": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ConfirmSubscriptionResult",
	        "type": "structure",
	        "members": {
	          "SubscriptionArn": {}
	        }
	      }
	    },
	    "CreatePlatformApplication": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "Platform",
	          "Attributes"
	        ],
	        "members": {
	          "Name": {},
	          "Platform": {},
	          "Attributes": {
	            "shape": "Sj"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreatePlatformApplicationResult",
	        "type": "structure",
	        "members": {
	          "PlatformApplicationArn": {}
	        }
	      }
	    },
	    "CreatePlatformEndpoint": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "PlatformApplicationArn",
	          "Token"
	        ],
	        "members": {
	          "PlatformApplicationArn": {},
	          "Token": {},
	          "CustomUserData": {},
	          "Attributes": {
	            "shape": "Sj"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreatePlatformEndpointResult",
	        "type": "structure",
	        "members": {
	          "EndpointArn": {}
	        }
	      }
	    },
	    "CreateTopic": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name"
	        ],
	        "members": {
	          "Name": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateTopicResult",
	        "type": "structure",
	        "members": {
	          "TopicArn": {}
	        }
	      }
	    },
	    "DeleteEndpoint": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "EndpointArn"
	        ],
	        "members": {
	          "EndpointArn": {}
	        }
	      }
	    },
	    "DeletePlatformApplication": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "PlatformApplicationArn"
	        ],
	        "members": {
	          "PlatformApplicationArn": {}
	        }
	      }
	    },
	    "DeleteTopic": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TopicArn"
	        ],
	        "members": {
	          "TopicArn": {}
	        }
	      }
	    },
	    "GetEndpointAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "EndpointArn"
	        ],
	        "members": {
	          "EndpointArn": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "GetEndpointAttributesResult",
	        "type": "structure",
	        "members": {
	          "Attributes": {
	            "shape": "Sj"
	          }
	        }
	      }
	    },
	    "GetPlatformApplicationAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "PlatformApplicationArn"
	        ],
	        "members": {
	          "PlatformApplicationArn": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "GetPlatformApplicationAttributesResult",
	        "type": "structure",
	        "members": {
	          "Attributes": {
	            "shape": "Sj"
	          }
	        }
	      }
	    },
	    "GetSMSAttributes": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "attributes": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "GetSMSAttributesResult",
	        "type": "structure",
	        "members": {
	          "attributes": {
	            "shape": "Sj"
	          }
	        }
	      }
	    },
	    "GetSubscriptionAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubscriptionArn"
	        ],
	        "members": {
	          "SubscriptionArn": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "GetSubscriptionAttributesResult",
	        "type": "structure",
	        "members": {
	          "Attributes": {
	            "type": "map",
	            "key": {},
	            "value": {}
	          }
	        }
	      }
	    },
	    "GetTopicAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TopicArn"
	        ],
	        "members": {
	          "TopicArn": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "GetTopicAttributesResult",
	        "type": "structure",
	        "members": {
	          "Attributes": {
	            "type": "map",
	            "key": {},
	            "value": {}
	          }
	        }
	      }
	    },
	    "ListEndpointsByPlatformApplication": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "PlatformApplicationArn"
	        ],
	        "members": {
	          "PlatformApplicationArn": {},
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ListEndpointsByPlatformApplicationResult",
	        "type": "structure",
	        "members": {
	          "Endpoints": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "EndpointArn": {},
	                "Attributes": {
	                  "shape": "Sj"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListPhoneNumbersOptedOut": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "nextToken": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ListPhoneNumbersOptedOutResult",
	        "type": "structure",
	        "members": {
	          "phoneNumbers": {
	            "type": "list",
	            "member": {}
	          },
	          "nextToken": {}
	        }
	      }
	    },
	    "ListPlatformApplications": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ListPlatformApplicationsResult",
	        "type": "structure",
	        "members": {
	          "PlatformApplications": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "PlatformApplicationArn": {},
	                "Attributes": {
	                  "shape": "Sj"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListSubscriptions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ListSubscriptionsResult",
	        "type": "structure",
	        "members": {
	          "Subscriptions": {
	            "shape": "S1n"
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListSubscriptionsByTopic": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TopicArn"
	        ],
	        "members": {
	          "TopicArn": {},
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ListSubscriptionsByTopicResult",
	        "type": "structure",
	        "members": {
	          "Subscriptions": {
	            "shape": "S1n"
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListTopics": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ListTopicsResult",
	        "type": "structure",
	        "members": {
	          "Topics": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "TopicArn": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "OptInPhoneNumber": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "phoneNumber"
	        ],
	        "members": {
	          "phoneNumber": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "OptInPhoneNumberResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "Publish": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Message"
	        ],
	        "members": {
	          "TopicArn": {},
	          "TargetArn": {},
	          "PhoneNumber": {},
	          "Message": {},
	          "Subject": {},
	          "MessageStructure": {},
	          "MessageAttributes": {
	            "type": "map",
	            "key": {
	              "locationName": "Name"
	            },
	            "value": {
	              "locationName": "Value",
	              "type": "structure",
	              "required": [
	                "DataType"
	              ],
	              "members": {
	                "DataType": {},
	                "StringValue": {},
	                "BinaryValue": {
	                  "type": "blob"
	                }
	              }
	            }
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "PublishResult",
	        "type": "structure",
	        "members": {
	          "MessageId": {}
	        }
	      }
	    },
	    "RemovePermission": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TopicArn",
	          "Label"
	        ],
	        "members": {
	          "TopicArn": {},
	          "Label": {}
	        }
	      }
	    },
	    "SetEndpointAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "EndpointArn",
	          "Attributes"
	        ],
	        "members": {
	          "EndpointArn": {},
	          "Attributes": {
	            "shape": "Sj"
	          }
	        }
	      }
	    },
	    "SetPlatformApplicationAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "PlatformApplicationArn",
	          "Attributes"
	        ],
	        "members": {
	          "PlatformApplicationArn": {},
	          "Attributes": {
	            "shape": "Sj"
	          }
	        }
	      }
	    },
	    "SetSMSAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "attributes"
	        ],
	        "members": {
	          "attributes": {
	            "shape": "Sj"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "SetSMSAttributesResult",
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "SetSubscriptionAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubscriptionArn",
	          "AttributeName"
	        ],
	        "members": {
	          "SubscriptionArn": {},
	          "AttributeName": {},
	          "AttributeValue": {}
	        }
	      }
	    },
	    "SetTopicAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TopicArn",
	          "AttributeName"
	        ],
	        "members": {
	          "TopicArn": {},
	          "AttributeName": {},
	          "AttributeValue": {}
	        }
	      }
	    },
	    "Subscribe": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TopicArn",
	          "Protocol"
	        ],
	        "members": {
	          "TopicArn": {},
	          "Protocol": {},
	          "Endpoint": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "SubscribeResult",
	        "type": "structure",
	        "members": {
	          "SubscriptionArn": {}
	        }
	      }
	    },
	    "Unsubscribe": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SubscriptionArn"
	        ],
	        "members": {
	          "SubscriptionArn": {}
	        }
	      }
	    }
	  },
	  "shapes": {
	    "Sj": {
	      "type": "map",
	      "key": {},
	      "value": {}
	    },
	    "S1n": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "SubscriptionArn": {},
	          "Owner": {},
	          "Protocol": {},
	          "Endpoint": {},
	          "TopicArn": {}
	        }
	      }
	    }
	  }
	}
	},{}],126:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "ListEndpointsByPlatformApplication": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "result_key": "Endpoints"
	    },
	    "ListPlatformApplications": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "result_key": "PlatformApplications"
	    },
	    "ListSubscriptions": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "result_key": "Subscriptions"
	    },
	    "ListSubscriptionsByTopic": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "result_key": "Subscriptions"
	    },
	    "ListTopics": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "result_key": "Topics"
	    }
	  }
	}
	
	},{}],127:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2012-11-05",
	    "endpointPrefix": "sqs",
	    "protocol": "query",
	    "serviceAbbreviation": "Amazon SQS",
	    "serviceFullName": "Amazon Simple Queue Service",
	    "signatureVersion": "v4",
	    "uid": "sqs-2012-11-05",
	    "xmlNamespace": "http://queue.amazonaws.com/doc/2012-11-05/"
	  },
	  "operations": {
	    "AddPermission": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "QueueUrl",
	          "Label",
	          "AWSAccountIds",
	          "Actions"
	        ],
	        "members": {
	          "QueueUrl": {},
	          "Label": {},
	          "AWSAccountIds": {
	            "type": "list",
	            "member": {
	              "locationName": "AWSAccountId"
	            },
	            "flattened": true
	          },
	          "Actions": {
	            "type": "list",
	            "member": {
	              "locationName": "ActionName"
	            },
	            "flattened": true
	          }
	        }
	      }
	    },
	    "ChangeMessageVisibility": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "QueueUrl",
	          "ReceiptHandle",
	          "VisibilityTimeout"
	        ],
	        "members": {
	          "QueueUrl": {},
	          "ReceiptHandle": {},
	          "VisibilityTimeout": {
	            "type": "integer"
	          }
	        }
	      }
	    },
	    "ChangeMessageVisibilityBatch": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "QueueUrl",
	          "Entries"
	        ],
	        "members": {
	          "QueueUrl": {},
	          "Entries": {
	            "type": "list",
	            "member": {
	              "locationName": "ChangeMessageVisibilityBatchRequestEntry",
	              "type": "structure",
	              "required": [
	                "Id",
	                "ReceiptHandle"
	              ],
	              "members": {
	                "Id": {},
	                "ReceiptHandle": {},
	                "VisibilityTimeout": {
	                  "type": "integer"
	                }
	              }
	            },
	            "flattened": true
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "ChangeMessageVisibilityBatchResult",
	        "type": "structure",
	        "required": [
	          "Successful",
	          "Failed"
	        ],
	        "members": {
	          "Successful": {
	            "type": "list",
	            "member": {
	              "locationName": "ChangeMessageVisibilityBatchResultEntry",
	              "type": "structure",
	              "required": [
	                "Id"
	              ],
	              "members": {
	                "Id": {}
	              }
	            },
	            "flattened": true
	          },
	          "Failed": {
	            "shape": "Sd"
	          }
	        }
	      }
	    },
	    "CreateQueue": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "QueueName"
	        ],
	        "members": {
	          "QueueName": {},
	          "Attributes": {
	            "shape": "Sh",
	            "locationName": "Attribute"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "CreateQueueResult",
	        "type": "structure",
	        "members": {
	          "QueueUrl": {}
	        }
	      }
	    },
	    "DeleteMessage": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "QueueUrl",
	          "ReceiptHandle"
	        ],
	        "members": {
	          "QueueUrl": {},
	          "ReceiptHandle": {}
	        }
	      }
	    },
	    "DeleteMessageBatch": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "QueueUrl",
	          "Entries"
	        ],
	        "members": {
	          "QueueUrl": {},
	          "Entries": {
	            "type": "list",
	            "member": {
	              "locationName": "DeleteMessageBatchRequestEntry",
	              "type": "structure",
	              "required": [
	                "Id",
	                "ReceiptHandle"
	              ],
	              "members": {
	                "Id": {},
	                "ReceiptHandle": {}
	              }
	            },
	            "flattened": true
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "DeleteMessageBatchResult",
	        "type": "structure",
	        "required": [
	          "Successful",
	          "Failed"
	        ],
	        "members": {
	          "Successful": {
	            "type": "list",
	            "member": {
	              "locationName": "DeleteMessageBatchResultEntry",
	              "type": "structure",
	              "required": [
	                "Id"
	              ],
	              "members": {
	                "Id": {}
	              }
	            },
	            "flattened": true
	          },
	          "Failed": {
	            "shape": "Sd"
	          }
	        }
	      }
	    },
	    "DeleteQueue": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "QueueUrl"
	        ],
	        "members": {
	          "QueueUrl": {}
	        }
	      }
	    },
	    "GetQueueAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "QueueUrl"
	        ],
	        "members": {
	          "QueueUrl": {},
	          "AttributeNames": {
	            "shape": "St"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "GetQueueAttributesResult",
	        "type": "structure",
	        "members": {
	          "Attributes": {
	            "shape": "Sh",
	            "locationName": "Attribute"
	          }
	        }
	      }
	    },
	    "GetQueueUrl": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "QueueName"
	        ],
	        "members": {
	          "QueueName": {},
	          "QueueOwnerAWSAccountId": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "GetQueueUrlResult",
	        "type": "structure",
	        "members": {
	          "QueueUrl": {}
	        }
	      }
	    },
	    "ListDeadLetterSourceQueues": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "QueueUrl"
	        ],
	        "members": {
	          "QueueUrl": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ListDeadLetterSourceQueuesResult",
	        "type": "structure",
	        "required": [
	          "queueUrls"
	        ],
	        "members": {
	          "queueUrls": {
	            "shape": "Sz"
	          }
	        }
	      }
	    },
	    "ListQueues": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "QueueNamePrefix": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ListQueuesResult",
	        "type": "structure",
	        "members": {
	          "QueueUrls": {
	            "shape": "Sz"
	          }
	        }
	      }
	    },
	    "PurgeQueue": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "QueueUrl"
	        ],
	        "members": {
	          "QueueUrl": {}
	        }
	      }
	    },
	    "ReceiveMessage": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "QueueUrl"
	        ],
	        "members": {
	          "QueueUrl": {},
	          "AttributeNames": {
	            "shape": "St"
	          },
	          "MessageAttributeNames": {
	            "type": "list",
	            "member": {
	              "locationName": "MessageAttributeName"
	            },
	            "flattened": true
	          },
	          "MaxNumberOfMessages": {
	            "type": "integer"
	          },
	          "VisibilityTimeout": {
	            "type": "integer"
	          },
	          "WaitTimeSeconds": {
	            "type": "integer"
	          },
	          "ReceiveRequestAttemptId": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "ReceiveMessageResult",
	        "type": "structure",
	        "members": {
	          "Messages": {
	            "type": "list",
	            "member": {
	              "locationName": "Message",
	              "type": "structure",
	              "members": {
	                "MessageId": {},
	                "ReceiptHandle": {},
	                "MD5OfBody": {},
	                "Body": {},
	                "Attributes": {
	                  "locationName": "Attribute",
	                  "type": "map",
	                  "key": {
	                    "locationName": "Name"
	                  },
	                  "value": {
	                    "locationName": "Value"
	                  },
	                  "flattened": true
	                },
	                "MD5OfMessageAttributes": {},
	                "MessageAttributes": {
	                  "shape": "S1b",
	                  "locationName": "MessageAttribute"
	                }
	              }
	            },
	            "flattened": true
	          }
	        }
	      }
	    },
	    "RemovePermission": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "QueueUrl",
	          "Label"
	        ],
	        "members": {
	          "QueueUrl": {},
	          "Label": {}
	        }
	      }
	    },
	    "SendMessage": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "QueueUrl",
	          "MessageBody"
	        ],
	        "members": {
	          "QueueUrl": {},
	          "MessageBody": {},
	          "DelaySeconds": {
	            "type": "integer"
	          },
	          "MessageAttributes": {
	            "shape": "S1b",
	            "locationName": "MessageAttribute"
	          },
	          "MessageDeduplicationId": {},
	          "MessageGroupId": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "SendMessageResult",
	        "type": "structure",
	        "members": {
	          "MD5OfMessageBody": {},
	          "MD5OfMessageAttributes": {},
	          "MessageId": {},
	          "SequenceNumber": {}
	        }
	      }
	    },
	    "SendMessageBatch": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "QueueUrl",
	          "Entries"
	        ],
	        "members": {
	          "QueueUrl": {},
	          "Entries": {
	            "type": "list",
	            "member": {
	              "locationName": "SendMessageBatchRequestEntry",
	              "type": "structure",
	              "required": [
	                "Id",
	                "MessageBody"
	              ],
	              "members": {
	                "Id": {},
	                "MessageBody": {},
	                "DelaySeconds": {
	                  "type": "integer"
	                },
	                "MessageAttributes": {
	                  "shape": "S1b",
	                  "locationName": "MessageAttribute"
	                },
	                "MessageDeduplicationId": {},
	                "MessageGroupId": {}
	              }
	            },
	            "flattened": true
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "SendMessageBatchResult",
	        "type": "structure",
	        "required": [
	          "Successful",
	          "Failed"
	        ],
	        "members": {
	          "Successful": {
	            "type": "list",
	            "member": {
	              "locationName": "SendMessageBatchResultEntry",
	              "type": "structure",
	              "required": [
	                "Id",
	                "MessageId",
	                "MD5OfMessageBody"
	              ],
	              "members": {
	                "Id": {},
	                "MessageId": {},
	                "MD5OfMessageBody": {},
	                "MD5OfMessageAttributes": {},
	                "SequenceNumber": {}
	              }
	            },
	            "flattened": true
	          },
	          "Failed": {
	            "shape": "Sd"
	          }
	        }
	      }
	    },
	    "SetQueueAttributes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "QueueUrl",
	          "Attributes"
	        ],
	        "members": {
	          "QueueUrl": {},
	          "Attributes": {
	            "shape": "Sh",
	            "locationName": "Attribute"
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "Sd": {
	      "type": "list",
	      "member": {
	        "locationName": "BatchResultErrorEntry",
	        "type": "structure",
	        "required": [
	          "Id",
	          "SenderFault",
	          "Code"
	        ],
	        "members": {
	          "Id": {},
	          "SenderFault": {
	            "type": "boolean"
	          },
	          "Code": {},
	          "Message": {}
	        }
	      },
	      "flattened": true
	    },
	    "Sh": {
	      "type": "map",
	      "key": {
	        "locationName": "Name"
	      },
	      "value": {
	        "locationName": "Value"
	      },
	      "flattened": true,
	      "locationName": "Attribute"
	    },
	    "St": {
	      "type": "list",
	      "member": {
	        "locationName": "AttributeName"
	      },
	      "flattened": true
	    },
	    "Sz": {
	      "type": "list",
	      "member": {
	        "locationName": "QueueUrl"
	      },
	      "flattened": true
	    },
	    "S1b": {
	      "type": "map",
	      "key": {
	        "locationName": "Name"
	      },
	      "value": {
	        "locationName": "Value",
	        "type": "structure",
	        "required": [
	          "DataType"
	        ],
	        "members": {
	          "StringValue": {},
	          "BinaryValue": {
	            "type": "blob"
	          },
	          "StringListValues": {
	            "flattened": true,
	            "locationName": "StringListValue",
	            "type": "list",
	            "member": {
	              "locationName": "StringListValue"
	            }
	          },
	          "BinaryListValues": {
	            "flattened": true,
	            "locationName": "BinaryListValue",
	            "type": "list",
	            "member": {
	              "locationName": "BinaryListValue",
	              "type": "blob"
	            }
	          },
	          "DataType": {}
	        }
	      },
	      "flattened": true
	    }
	  }
	}
	},{}],128:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "ListQueues": {
	      "result_key": "QueueUrls"
	    }
	  }
	}
	
	},{}],129:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2014-11-06",
	    "endpointPrefix": "ssm",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceAbbreviation": "Amazon SSM",
	    "serviceFullName": "Amazon Simple Systems Manager (SSM)",
	    "signatureVersion": "v4",
	    "targetPrefix": "AmazonSSM",
	    "uid": "ssm-2014-11-06"
	  },
	  "operations": {
	    "AddTagsToResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceType",
	          "ResourceId",
	          "Tags"
	        ],
	        "members": {
	          "ResourceType": {},
	          "ResourceId": {},
	          "Tags": {
	            "shape": "S4"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "CancelCommand": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CommandId"
	        ],
	        "members": {
	          "CommandId": {},
	          "InstanceIds": {
	            "shape": "Sb"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "CreateActivation": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "IamRole"
	        ],
	        "members": {
	          "Description": {},
	          "DefaultInstanceName": {},
	          "IamRole": {},
	          "RegistrationLimit": {
	            "type": "integer"
	          },
	          "ExpirationDate": {
	            "type": "timestamp"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ActivationId": {},
	          "ActivationCode": {}
	        }
	      }
	    },
	    "CreateAssociation": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name"
	        ],
	        "members": {
	          "Name": {},
	          "DocumentVersion": {},
	          "InstanceId": {},
	          "Parameters": {
	            "shape": "Sq"
	          },
	          "Targets": {
	            "shape": "Su"
	          },
	          "ScheduleExpression": {},
	          "OutputLocation": {
	            "shape": "S10"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "AssociationDescription": {
	            "shape": "S16"
	          }
	        }
	      }
	    },
	    "CreateAssociationBatch": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Entries"
	        ],
	        "members": {
	          "Entries": {
	            "type": "list",
	            "member": {
	              "shape": "S1j",
	              "locationName": "entries"
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Successful": {
	            "type": "list",
	            "member": {
	              "shape": "S16",
	              "locationName": "AssociationDescription"
	            }
	          },
	          "Failed": {
	            "type": "list",
	            "member": {
	              "locationName": "FailedCreateAssociationEntry",
	              "type": "structure",
	              "members": {
	                "Entry": {
	                  "shape": "S1j"
	                },
	                "Message": {},
	                "Fault": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "CreateDocument": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Content",
	          "Name"
	        ],
	        "members": {
	          "Content": {},
	          "Name": {},
	          "DocumentType": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "DocumentDescription": {
	            "shape": "S1u"
	          }
	        }
	      }
	    },
	    "CreateMaintenanceWindow": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "Schedule",
	          "Duration",
	          "Cutoff",
	          "AllowUnassociatedTargets"
	        ],
	        "members": {
	          "Name": {},
	          "Schedule": {},
	          "Duration": {
	            "type": "integer"
	          },
	          "Cutoff": {
	            "type": "integer"
	          },
	          "AllowUnassociatedTargets": {
	            "type": "boolean"
	          },
	          "ClientToken": {
	            "idempotencyToken": true
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "WindowId": {}
	        }
	      }
	    },
	    "CreatePatchBaseline": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name"
	        ],
	        "members": {
	          "Name": {},
	          "GlobalFilters": {
	            "shape": "S2m"
	          },
	          "ApprovalRules": {
	            "shape": "S2s"
	          },
	          "ApprovedPatches": {
	            "shape": "S2w"
	          },
	          "RejectedPatches": {
	            "shape": "S2w"
	          },
	          "Description": {},
	          "ClientToken": {
	            "idempotencyToken": true
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "BaselineId": {}
	        }
	      }
	    },
	    "DeleteActivation": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ActivationId"
	        ],
	        "members": {
	          "ActivationId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteAssociation": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Name": {},
	          "InstanceId": {},
	          "AssociationId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteDocument": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name"
	        ],
	        "members": {
	          "Name": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeleteMaintenanceWindow": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "WindowId"
	        ],
	        "members": {
	          "WindowId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "WindowId": {}
	        }
	      }
	    },
	    "DeleteParameter": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name"
	        ],
	        "members": {
	          "Name": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeletePatchBaseline": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "BaselineId"
	        ],
	        "members": {
	          "BaselineId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "BaselineId": {}
	        }
	      }
	    },
	    "DeregisterManagedInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId"
	        ],
	        "members": {
	          "InstanceId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "DeregisterPatchBaselineForPatchGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "BaselineId",
	          "PatchGroup"
	        ],
	        "members": {
	          "BaselineId": {},
	          "PatchGroup": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "BaselineId": {},
	          "PatchGroup": {}
	        }
	      }
	    },
	    "DeregisterTargetFromMaintenanceWindow": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "WindowId",
	          "WindowTargetId"
	        ],
	        "members": {
	          "WindowId": {},
	          "WindowTargetId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "WindowId": {},
	          "WindowTargetId": {}
	        }
	      }
	    },
	    "DeregisterTaskFromMaintenanceWindow": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "WindowId",
	          "WindowTaskId"
	        ],
	        "members": {
	          "WindowId": {},
	          "WindowTaskId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "WindowId": {},
	          "WindowTaskId": {}
	        }
	      }
	    },
	    "DescribeActivations": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Filters": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "FilterKey": {},
	                "FilterValues": {
	                  "type": "list",
	                  "member": {}
	                }
	              }
	            }
	          },
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ActivationList": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "ActivationId": {},
	                "Description": {},
	                "DefaultInstanceName": {},
	                "IamRole": {},
	                "RegistrationLimit": {
	                  "type": "integer"
	                },
	                "RegistrationsCount": {
	                  "type": "integer"
	                },
	                "ExpirationDate": {
	                  "type": "timestamp"
	                },
	                "Expired": {
	                  "type": "boolean"
	                },
	                "CreatedDate": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeAssociation": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Name": {},
	          "InstanceId": {},
	          "AssociationId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "AssociationDescription": {
	            "shape": "S16"
	          }
	        }
	      }
	    },
	    "DescribeAutomationExecutions": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Filters": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "Key",
	                "Values"
	              ],
	              "members": {
	                "Key": {},
	                "Values": {
	                  "type": "list",
	                  "member": {}
	                }
	              }
	            }
	          },
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "AutomationExecutionMetadataList": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "AutomationExecutionId": {},
	                "DocumentName": {},
	                "DocumentVersion": {},
	                "AutomationExecutionStatus": {},
	                "ExecutionStartTime": {
	                  "type": "timestamp"
	                },
	                "ExecutionEndTime": {
	                  "type": "timestamp"
	                },
	                "ExecutedBy": {},
	                "LogFile": {},
	                "Outputs": {
	                  "shape": "S4h"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeAvailablePatches": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Filters": {
	            "shape": "S4m"
	          },
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Patches": {
	            "type": "list",
	            "member": {
	              "shape": "S4u"
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeDocument": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name"
	        ],
	        "members": {
	          "Name": {},
	          "DocumentVersion": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Document": {
	            "shape": "S1u"
	          }
	        }
	      }
	    },
	    "DescribeDocumentPermission": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "PermissionType"
	        ],
	        "members": {
	          "Name": {},
	          "PermissionType": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "AccountIds": {
	            "shape": "S5b"
	          }
	        }
	      }
	    },
	    "DescribeEffectiveInstanceAssociations": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId"
	        ],
	        "members": {
	          "InstanceId": {},
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Associations": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "AssociationId": {},
	                "InstanceId": {},
	                "Content": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeEffectivePatchesForPatchBaseline": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "BaselineId"
	        ],
	        "members": {
	          "BaselineId": {},
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "EffectivePatches": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Patch": {
	                  "shape": "S4u"
	                },
	                "PatchStatus": {
	                  "type": "structure",
	                  "members": {
	                    "DeploymentStatus": {},
	                    "ApprovalDate": {
	                      "type": "timestamp"
	                    }
	                  }
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeInstanceAssociationsStatus": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId"
	        ],
	        "members": {
	          "InstanceId": {},
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "InstanceAssociationStatusInfos": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "AssociationId": {},
	                "Name": {},
	                "DocumentVersion": {},
	                "InstanceId": {},
	                "ExecutionDate": {
	                  "type": "timestamp"
	                },
	                "Status": {},
	                "DetailedStatus": {},
	                "ExecutionSummary": {},
	                "ErrorCode": {},
	                "OutputUrl": {
	                  "type": "structure",
	                  "members": {
	                    "S3OutputUrl": {
	                      "type": "structure",
	                      "members": {
	                        "OutputUrl": {}
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeInstanceInformation": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "InstanceInformationFilterList": {
	            "type": "list",
	            "member": {
	              "locationName": "InstanceInformationFilter",
	              "type": "structure",
	              "required": [
	                "key",
	                "valueSet"
	              ],
	              "members": {
	                "key": {},
	                "valueSet": {
	                  "shape": "S61"
	                }
	              }
	            }
	          },
	          "Filters": {
	            "type": "list",
	            "member": {
	              "locationName": "InstanceInformationStringFilter",
	              "type": "structure",
	              "required": [
	                "Key",
	                "Values"
	              ],
	              "members": {
	                "Key": {},
	                "Values": {
	                  "shape": "S61"
	                }
	              }
	            }
	          },
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "InstanceInformationList": {
	            "type": "list",
	            "member": {
	              "locationName": "InstanceInformation",
	              "type": "structure",
	              "members": {
	                "InstanceId": {},
	                "PingStatus": {},
	                "LastPingDateTime": {
	                  "type": "timestamp"
	                },
	                "AgentVersion": {},
	                "IsLatestVersion": {
	                  "type": "boolean"
	                },
	                "PlatformType": {},
	                "PlatformName": {},
	                "PlatformVersion": {},
	                "ActivationId": {},
	                "IamRole": {},
	                "RegistrationDate": {
	                  "type": "timestamp"
	                },
	                "ResourceType": {},
	                "Name": {},
	                "IPAddress": {},
	                "ComputerName": {},
	                "AssociationStatus": {},
	                "LastAssociationExecutionDate": {
	                  "type": "timestamp"
	                },
	                "LastSuccessfulAssociationExecutionDate": {
	                  "type": "timestamp"
	                },
	                "AssociationOverview": {
	                  "type": "structure",
	                  "members": {
	                    "DetailedStatus": {},
	                    "InstanceAssociationStatusAggregatedCount": {
	                      "type": "map",
	                      "key": {},
	                      "value": {
	                        "type": "integer"
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeInstancePatchStates": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceIds"
	        ],
	        "members": {
	          "InstanceIds": {
	            "shape": "Sb"
	          },
	          "NextToken": {},
	          "MaxResults": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "InstancePatchStates": {
	            "type": "list",
	            "member": {
	              "shape": "S6l"
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeInstancePatchStatesForPatchGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "PatchGroup"
	        ],
	        "members": {
	          "PatchGroup": {},
	          "Filters": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "Key",
	                "Values",
	                "Type"
	              ],
	              "members": {
	                "Key": {},
	                "Values": {
	                  "type": "list",
	                  "member": {}
	                },
	                "Type": {}
	              }
	            }
	          },
	          "NextToken": {},
	          "MaxResults": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "InstancePatchStates": {
	            "type": "list",
	            "member": {
	              "shape": "S6l"
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeInstancePatches": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId"
	        ],
	        "members": {
	          "InstanceId": {},
	          "Filters": {
	            "shape": "S4m"
	          },
	          "NextToken": {},
	          "MaxResults": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Patches": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "Title",
	                "KBId",
	                "Classification",
	                "Severity",
	                "State",
	                "InstalledTime"
	              ],
	              "members": {
	                "Title": {},
	                "KBId": {},
	                "Classification": {},
	                "Severity": {},
	                "State": {},
	                "InstalledTime": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeMaintenanceWindowExecutionTaskInvocations": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "WindowExecutionId",
	          "TaskId"
	        ],
	        "members": {
	          "WindowExecutionId": {},
	          "TaskId": {},
	          "Filters": {
	            "shape": "S7f"
	          },
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "WindowExecutionTaskInvocationIdentities": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "WindowExecutionId": {},
	                "TaskExecutionId": {},
	                "InvocationId": {},
	                "ExecutionId": {},
	                "Parameters": {
	                  "type": "string",
	                  "sensitive": true
	                },
	                "Status": {},
	                "StatusDetails": {},
	                "StartTime": {
	                  "type": "timestamp"
	                },
	                "EndTime": {
	                  "type": "timestamp"
	                },
	                "OwnerInformation": {
	                  "shape": "S6n"
	                },
	                "WindowTargetId": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeMaintenanceWindowExecutionTasks": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "WindowExecutionId"
	        ],
	        "members": {
	          "WindowExecutionId": {},
	          "Filters": {
	            "shape": "S7f"
	          },
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "WindowExecutionTaskIdentities": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "WindowExecutionId": {},
	                "TaskExecutionId": {},
	                "Status": {},
	                "StatusDetails": {},
	                "StartTime": {
	                  "type": "timestamp"
	                },
	                "EndTime": {
	                  "type": "timestamp"
	                },
	                "TaskArn": {},
	                "TaskType": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeMaintenanceWindowExecutions": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "WindowId"
	        ],
	        "members": {
	          "WindowId": {},
	          "Filters": {
	            "shape": "S7f"
	          },
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "WindowExecutions": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "WindowId": {},
	                "WindowExecutionId": {},
	                "Status": {},
	                "StatusDetails": {},
	                "StartTime": {
	                  "type": "timestamp"
	                },
	                "EndTime": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeMaintenanceWindowTargets": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "WindowId"
	        ],
	        "members": {
	          "WindowId": {},
	          "Filters": {
	            "shape": "S7f"
	          },
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Targets": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "WindowId": {},
	                "WindowTargetId": {},
	                "ResourceType": {},
	                "Targets": {
	                  "shape": "Su"
	                },
	                "OwnerInformation": {
	                  "shape": "S6n"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeMaintenanceWindowTasks": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "WindowId"
	        ],
	        "members": {
	          "WindowId": {},
	          "Filters": {
	            "shape": "S7f"
	          },
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Tasks": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "WindowId": {},
	                "WindowTaskId": {},
	                "TaskArn": {},
	                "Type": {},
	                "Targets": {
	                  "shape": "Su"
	                },
	                "TaskParameters": {
	                  "shape": "S8d"
	                },
	                "Priority": {
	                  "type": "integer"
	                },
	                "LoggingInfo": {
	                  "shape": "S8j"
	                },
	                "ServiceRoleArn": {},
	                "MaxConcurrency": {},
	                "MaxErrors": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeMaintenanceWindows": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Filters": {
	            "shape": "S7f"
	          },
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "WindowIdentities": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "WindowId": {},
	                "Name": {},
	                "Enabled": {
	                  "type": "boolean"
	                },
	                "Duration": {
	                  "type": "integer"
	                },
	                "Cutoff": {
	                  "type": "integer"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribeParameters": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Filters": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "Values"
	              ],
	              "members": {
	                "Key": {},
	                "Values": {
	                  "type": "list",
	                  "member": {}
	                }
	              }
	            }
	          },
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Parameters": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Name": {},
	                "Type": {},
	                "KeyId": {},
	                "LastModifiedDate": {
	                  "type": "timestamp"
	                },
	                "LastModifiedUser": {},
	                "Description": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribePatchBaselines": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Filters": {
	            "shape": "S4m"
	          },
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "BaselineIdentities": {
	            "type": "list",
	            "member": {
	              "shape": "S96"
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "DescribePatchGroupState": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "PatchGroup"
	        ],
	        "members": {
	          "PatchGroup": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Instances": {
	            "type": "integer"
	          },
	          "InstancesWithInstalledPatches": {
	            "type": "integer"
	          },
	          "InstancesWithInstalledOtherPatches": {
	            "type": "integer"
	          },
	          "InstancesWithMissingPatches": {
	            "type": "integer"
	          },
	          "InstancesWithFailedPatches": {
	            "type": "integer"
	          },
	          "InstancesWithNotApplicablePatches": {
	            "type": "integer"
	          }
	        }
	      }
	    },
	    "DescribePatchGroups": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Mappings": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "PatchGroup": {},
	                "BaselineIdentity": {
	                  "shape": "S96"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "GetAutomationExecution": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AutomationExecutionId"
	        ],
	        "members": {
	          "AutomationExecutionId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "AutomationExecution": {
	            "type": "structure",
	            "members": {
	              "AutomationExecutionId": {},
	              "DocumentName": {},
	              "DocumentVersion": {},
	              "ExecutionStartTime": {
	                "type": "timestamp"
	              },
	              "ExecutionEndTime": {
	                "type": "timestamp"
	              },
	              "AutomationExecutionStatus": {},
	              "StepExecutions": {
	                "type": "list",
	                "member": {
	                  "type": "structure",
	                  "members": {
	                    "StepName": {},
	                    "Action": {},
	                    "ExecutionStartTime": {
	                      "type": "timestamp"
	                    },
	                    "ExecutionEndTime": {
	                      "type": "timestamp"
	                    },
	                    "StepStatus": {},
	                    "ResponseCode": {},
	                    "Inputs": {
	                      "type": "map",
	                      "key": {},
	                      "value": {}
	                    },
	                    "Outputs": {
	                      "shape": "S4h"
	                    },
	                    "Response": {},
	                    "FailureMessage": {}
	                  }
	                }
	              },
	              "Parameters": {
	                "shape": "S4h"
	              },
	              "Outputs": {
	                "shape": "S4h"
	              },
	              "FailureMessage": {}
	            }
	          }
	        }
	      }
	    },
	    "GetCommandInvocation": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "CommandId",
	          "InstanceId"
	        ],
	        "members": {
	          "CommandId": {},
	          "InstanceId": {},
	          "PluginName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "CommandId": {},
	          "InstanceId": {},
	          "Comment": {},
	          "DocumentName": {},
	          "PluginName": {},
	          "ResponseCode": {
	            "type": "integer"
	          },
	          "ExecutionStartDateTime": {},
	          "ExecutionElapsedTime": {},
	          "ExecutionEndDateTime": {},
	          "Status": {},
	          "StatusDetails": {},
	          "StandardOutputContent": {},
	          "StandardOutputUrl": {},
	          "StandardErrorContent": {},
	          "StandardErrorUrl": {}
	        }
	      }
	    },
	    "GetDefaultPatchBaseline": {
	      "input": {
	        "type": "structure",
	        "members": {}
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "BaselineId": {}
	        }
	      }
	    },
	    "GetDeployablePatchSnapshotForInstance": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId",
	          "SnapshotId"
	        ],
	        "members": {
	          "InstanceId": {},
	          "SnapshotId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "InstanceId": {},
	          "SnapshotId": {},
	          "SnapshotDownloadUrl": {}
	        }
	      }
	    },
	    "GetDocument": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name"
	        ],
	        "members": {
	          "Name": {},
	          "DocumentVersion": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Name": {},
	          "DocumentVersion": {},
	          "Content": {},
	          "DocumentType": {}
	        }
	      }
	    },
	    "GetInventory": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Filters": {
	            "shape": "Sa4"
	          },
	          "ResultAttributes": {
	            "type": "list",
	            "member": {
	              "locationName": "ResultAttribute",
	              "type": "structure",
	              "required": [
	                "TypeName"
	              ],
	              "members": {
	                "TypeName": {}
	              }
	            }
	          },
	          "NextToken": {},
	          "MaxResults": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Entities": {
	            "type": "list",
	            "member": {
	              "locationName": "Entity",
	              "type": "structure",
	              "members": {
	                "Id": {},
	                "Data": {
	                  "type": "map",
	                  "key": {},
	                  "value": {
	                    "type": "structure",
	                    "required": [
	                      "TypeName",
	                      "SchemaVersion",
	                      "Content"
	                    ],
	                    "members": {
	                      "TypeName": {},
	                      "SchemaVersion": {},
	                      "CaptureTime": {},
	                      "ContentHash": {},
	                      "Content": {
	                        "shape": "San"
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "GetInventorySchema": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "TypeName": {},
	          "NextToken": {},
	          "MaxResults": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Schemas": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "TypeName",
	                "Attributes"
	              ],
	              "members": {
	                "TypeName": {},
	                "Version": {},
	                "Attributes": {
	                  "type": "list",
	                  "member": {
	                    "locationName": "Attribute",
	                    "type": "structure",
	                    "required": [
	                      "Name",
	                      "DataType"
	                    ],
	                    "members": {
	                      "Name": {},
	                      "DataType": {}
	                    }
	                  }
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "GetMaintenanceWindow": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "WindowId"
	        ],
	        "members": {
	          "WindowId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "WindowId": {},
	          "Name": {},
	          "Schedule": {},
	          "Duration": {
	            "type": "integer"
	          },
	          "Cutoff": {
	            "type": "integer"
	          },
	          "AllowUnassociatedTargets": {
	            "type": "boolean"
	          },
	          "Enabled": {
	            "type": "boolean"
	          },
	          "CreatedDate": {
	            "type": "timestamp"
	          },
	          "ModifiedDate": {
	            "type": "timestamp"
	          }
	        }
	      }
	    },
	    "GetMaintenanceWindowExecution": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "WindowExecutionId"
	        ],
	        "members": {
	          "WindowExecutionId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "WindowExecutionId": {},
	          "TaskIds": {
	            "type": "list",
	            "member": {}
	          },
	          "Status": {},
	          "StatusDetails": {},
	          "StartTime": {
	            "type": "timestamp"
	          },
	          "EndTime": {
	            "type": "timestamp"
	          }
	        }
	      }
	    },
	    "GetMaintenanceWindowExecutionTask": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "WindowExecutionId",
	          "TaskId"
	        ],
	        "members": {
	          "WindowExecutionId": {},
	          "TaskId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "WindowExecutionId": {},
	          "TaskExecutionId": {},
	          "TaskArn": {},
	          "ServiceRole": {},
	          "Type": {},
	          "TaskParameters": {
	            "type": "list",
	            "member": {
	              "shape": "S8d"
	            },
	            "sensitive": true
	          },
	          "Priority": {
	            "type": "integer"
	          },
	          "MaxConcurrency": {},
	          "MaxErrors": {},
	          "Status": {},
	          "StatusDetails": {},
	          "StartTime": {
	            "type": "timestamp"
	          },
	          "EndTime": {
	            "type": "timestamp"
	          }
	        }
	      }
	    },
	    "GetParameterHistory": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name"
	        ],
	        "members": {
	          "Name": {},
	          "WithDecryption": {
	            "type": "boolean"
	          },
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Parameters": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Name": {},
	                "Type": {},
	                "KeyId": {},
	                "LastModifiedDate": {
	                  "type": "timestamp"
	                },
	                "LastModifiedUser": {},
	                "Description": {},
	                "Value": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "GetParameters": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Names"
	        ],
	        "members": {
	          "Names": {
	            "shape": "Sbf"
	          },
	          "WithDecryption": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Parameters": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Name": {},
	                "Type": {},
	                "Value": {}
	              }
	            }
	          },
	          "InvalidParameters": {
	            "shape": "Sbf"
	          }
	        }
	      }
	    },
	    "GetPatchBaseline": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "BaselineId"
	        ],
	        "members": {
	          "BaselineId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "BaselineId": {},
	          "Name": {},
	          "GlobalFilters": {
	            "shape": "S2m"
	          },
	          "ApprovalRules": {
	            "shape": "S2s"
	          },
	          "ApprovedPatches": {
	            "shape": "S2w"
	          },
	          "RejectedPatches": {
	            "shape": "S2w"
	          },
	          "PatchGroups": {
	            "type": "list",
	            "member": {}
	          },
	          "CreatedDate": {
	            "type": "timestamp"
	          },
	          "ModifiedDate": {
	            "type": "timestamp"
	          },
	          "Description": {}
	        }
	      }
	    },
	    "GetPatchBaselineForPatchGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "PatchGroup"
	        ],
	        "members": {
	          "PatchGroup": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "BaselineId": {},
	          "PatchGroup": {}
	        }
	      }
	    },
	    "ListAssociations": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "AssociationFilterList": {
	            "type": "list",
	            "member": {
	              "locationName": "AssociationFilter",
	              "type": "structure",
	              "required": [
	                "key",
	                "value"
	              ],
	              "members": {
	                "key": {},
	                "value": {}
	              }
	            }
	          },
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Associations": {
	            "type": "list",
	            "member": {
	              "locationName": "Association",
	              "type": "structure",
	              "members": {
	                "Name": {},
	                "InstanceId": {},
	                "AssociationId": {},
	                "DocumentVersion": {},
	                "Targets": {
	                  "shape": "Su"
	                },
	                "LastExecutionDate": {
	                  "type": "timestamp"
	                },
	                "Overview": {
	                  "shape": "S1c"
	                },
	                "ScheduleExpression": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListCommandInvocations": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "CommandId": {},
	          "InstanceId": {},
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {},
	          "Filters": {
	            "shape": "Sby"
	          },
	          "Details": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "CommandInvocations": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "CommandId": {},
	                "InstanceId": {},
	                "InstanceName": {},
	                "Comment": {},
	                "DocumentName": {},
	                "RequestedDateTime": {
	                  "type": "timestamp"
	                },
	                "Status": {},
	                "StatusDetails": {},
	                "TraceOutput": {},
	                "StandardOutputUrl": {},
	                "StandardErrorUrl": {},
	                "CommandPlugins": {
	                  "type": "list",
	                  "member": {
	                    "type": "structure",
	                    "members": {
	                      "Name": {},
	                      "Status": {},
	                      "StatusDetails": {},
	                      "ResponseCode": {
	                        "type": "integer"
	                      },
	                      "ResponseStartDateTime": {
	                        "type": "timestamp"
	                      },
	                      "ResponseFinishDateTime": {
	                        "type": "timestamp"
	                      },
	                      "Output": {},
	                      "StandardOutputUrl": {},
	                      "StandardErrorUrl": {},
	                      "OutputS3Region": {},
	                      "OutputS3BucketName": {},
	                      "OutputS3KeyPrefix": {}
	                    }
	                  }
	                },
	                "ServiceRole": {},
	                "NotificationConfig": {
	                  "shape": "Scb"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListCommands": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "CommandId": {},
	          "InstanceId": {},
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {},
	          "Filters": {
	            "shape": "Sby"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Commands": {
	            "type": "list",
	            "member": {
	              "shape": "Scj"
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListDocumentVersions": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name"
	        ],
	        "members": {
	          "Name": {},
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "DocumentVersions": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Name": {},
	                "DocumentVersion": {},
	                "CreatedDate": {
	                  "type": "timestamp"
	                },
	                "IsDefaultVersion": {
	                  "type": "boolean"
	                }
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListDocuments": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DocumentFilterList": {
	            "type": "list",
	            "member": {
	              "locationName": "DocumentFilter",
	              "type": "structure",
	              "required": [
	                "key",
	                "value"
	              ],
	              "members": {
	                "key": {},
	                "value": {}
	              }
	            }
	          },
	          "MaxResults": {
	            "type": "integer"
	          },
	          "NextToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "DocumentIdentifiers": {
	            "type": "list",
	            "member": {
	              "locationName": "DocumentIdentifier",
	              "type": "structure",
	              "members": {
	                "Name": {},
	                "Owner": {},
	                "PlatformTypes": {
	                  "shape": "S28"
	                },
	                "DocumentVersion": {},
	                "DocumentType": {},
	                "SchemaVersion": {}
	              }
	            }
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListInventoryEntries": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId",
	          "TypeName"
	        ],
	        "members": {
	          "InstanceId": {},
	          "TypeName": {},
	          "Filters": {
	            "shape": "Sa4"
	          },
	          "NextToken": {},
	          "MaxResults": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "TypeName": {},
	          "InstanceId": {},
	          "SchemaVersion": {},
	          "CaptureTime": {},
	          "Entries": {
	            "shape": "San"
	          },
	          "NextToken": {}
	        }
	      }
	    },
	    "ListTagsForResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceType",
	          "ResourceId"
	        ],
	        "members": {
	          "ResourceType": {},
	          "ResourceId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "TagList": {
	            "shape": "S4"
	          }
	        }
	      }
	    },
	    "ModifyDocumentPermission": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "PermissionType"
	        ],
	        "members": {
	          "Name": {},
	          "PermissionType": {},
	          "AccountIdsToAdd": {
	            "shape": "S5b"
	          },
	          "AccountIdsToRemove": {
	            "shape": "S5b"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "PutInventory": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId",
	          "Items"
	        ],
	        "members": {
	          "InstanceId": {},
	          "Items": {
	            "type": "list",
	            "member": {
	              "locationName": "Item",
	              "type": "structure",
	              "required": [
	                "TypeName",
	                "SchemaVersion",
	                "CaptureTime"
	              ],
	              "members": {
	                "TypeName": {},
	                "SchemaVersion": {},
	                "CaptureTime": {},
	                "ContentHash": {},
	                "Content": {
	                  "shape": "San"
	                }
	              }
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "PutParameter": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "Value",
	          "Type"
	        ],
	        "members": {
	          "Name": {},
	          "Description": {},
	          "Value": {},
	          "Type": {},
	          "KeyId": {},
	          "Overwrite": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "RegisterDefaultPatchBaseline": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "BaselineId"
	        ],
	        "members": {
	          "BaselineId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "BaselineId": {}
	        }
	      }
	    },
	    "RegisterPatchBaselineForPatchGroup": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "BaselineId",
	          "PatchGroup"
	        ],
	        "members": {
	          "BaselineId": {},
	          "PatchGroup": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "BaselineId": {},
	          "PatchGroup": {}
	        }
	      }
	    },
	    "RegisterTargetWithMaintenanceWindow": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "WindowId",
	          "ResourceType",
	          "Targets"
	        ],
	        "members": {
	          "WindowId": {},
	          "ResourceType": {},
	          "Targets": {
	            "shape": "Su"
	          },
	          "OwnerInformation": {
	            "shape": "S6n"
	          },
	          "ClientToken": {
	            "idempotencyToken": true
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "WindowTargetId": {}
	        }
	      }
	    },
	    "RegisterTaskWithMaintenanceWindow": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "WindowId",
	          "Targets",
	          "TaskArn",
	          "ServiceRoleArn",
	          "TaskType",
	          "MaxConcurrency",
	          "MaxErrors"
	        ],
	        "members": {
	          "WindowId": {},
	          "Targets": {
	            "shape": "Su"
	          },
	          "TaskArn": {},
	          "ServiceRoleArn": {},
	          "TaskType": {},
	          "TaskParameters": {
	            "shape": "S8d"
	          },
	          "Priority": {
	            "type": "integer"
	          },
	          "MaxConcurrency": {},
	          "MaxErrors": {},
	          "LoggingInfo": {
	            "shape": "S8j"
	          },
	          "ClientToken": {
	            "idempotencyToken": true
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "WindowTaskId": {}
	        }
	      }
	    },
	    "RemoveTagsFromResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceType",
	          "ResourceId",
	          "TagKeys"
	        ],
	        "members": {
	          "ResourceType": {},
	          "ResourceId": {},
	          "TagKeys": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "SendCommand": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DocumentName"
	        ],
	        "members": {
	          "InstanceIds": {
	            "shape": "Sb"
	          },
	          "Targets": {
	            "shape": "Su"
	          },
	          "DocumentName": {},
	          "DocumentHash": {},
	          "DocumentHashType": {},
	          "TimeoutSeconds": {
	            "type": "integer"
	          },
	          "Comment": {},
	          "Parameters": {
	            "shape": "Sq"
	          },
	          "OutputS3Region": {},
	          "OutputS3BucketName": {},
	          "OutputS3KeyPrefix": {},
	          "MaxConcurrency": {},
	          "MaxErrors": {},
	          "ServiceRoleArn": {},
	          "NotificationConfig": {
	            "shape": "Scb"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Command": {
	            "shape": "Scj"
	          }
	        }
	      }
	    },
	    "StartAutomationExecution": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "DocumentName"
	        ],
	        "members": {
	          "DocumentName": {},
	          "DocumentVersion": {},
	          "Parameters": {
	            "shape": "S4h"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "AutomationExecutionId": {}
	        }
	      }
	    },
	    "StopAutomationExecution": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AutomationExecutionId"
	        ],
	        "members": {
	          "AutomationExecutionId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "UpdateAssociation": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "AssociationId"
	        ],
	        "members": {
	          "AssociationId": {},
	          "Parameters": {
	            "shape": "Sq"
	          },
	          "DocumentVersion": {},
	          "ScheduleExpression": {},
	          "OutputLocation": {
	            "shape": "S10"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "AssociationDescription": {
	            "shape": "S16"
	          }
	        }
	      }
	    },
	    "UpdateAssociationStatus": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "InstanceId",
	          "AssociationStatus"
	        ],
	        "members": {
	          "Name": {},
	          "InstanceId": {},
	          "AssociationStatus": {
	            "shape": "S18"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "AssociationDescription": {
	            "shape": "S16"
	          }
	        }
	      }
	    },
	    "UpdateDocument": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Content",
	          "Name"
	        ],
	        "members": {
	          "Content": {},
	          "Name": {},
	          "DocumentVersion": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "DocumentDescription": {
	            "shape": "S1u"
	          }
	        }
	      }
	    },
	    "UpdateDocumentDefaultVersion": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "DocumentVersion"
	        ],
	        "members": {
	          "Name": {},
	          "DocumentVersion": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Description": {
	            "type": "structure",
	            "members": {
	              "Name": {},
	              "DefaultVersion": {}
	            }
	          }
	        }
	      }
	    },
	    "UpdateMaintenanceWindow": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "WindowId"
	        ],
	        "members": {
	          "WindowId": {},
	          "Name": {},
	          "Schedule": {},
	          "Duration": {
	            "type": "integer"
	          },
	          "Cutoff": {
	            "type": "integer"
	          },
	          "AllowUnassociatedTargets": {
	            "type": "boolean"
	          },
	          "Enabled": {
	            "type": "boolean"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "WindowId": {},
	          "Name": {},
	          "Schedule": {},
	          "Duration": {
	            "type": "integer"
	          },
	          "Cutoff": {
	            "type": "integer"
	          },
	          "AllowUnassociatedTargets": {
	            "type": "boolean"
	          },
	          "Enabled": {
	            "type": "boolean"
	          }
	        }
	      }
	    },
	    "UpdateManagedInstanceRole": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "InstanceId",
	          "IamRole"
	        ],
	        "members": {
	          "InstanceId": {},
	          "IamRole": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {}
	      }
	    },
	    "UpdatePatchBaseline": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "BaselineId"
	        ],
	        "members": {
	          "BaselineId": {},
	          "Name": {},
	          "GlobalFilters": {
	            "shape": "S2m"
	          },
	          "ApprovalRules": {
	            "shape": "S2s"
	          },
	          "ApprovedPatches": {
	            "shape": "S2w"
	          },
	          "RejectedPatches": {
	            "shape": "S2w"
	          },
	          "Description": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "BaselineId": {},
	          "Name": {},
	          "GlobalFilters": {
	            "shape": "S2m"
	          },
	          "ApprovalRules": {
	            "shape": "S2s"
	          },
	          "ApprovedPatches": {
	            "shape": "S2w"
	          },
	          "RejectedPatches": {
	            "shape": "S2w"
	          },
	          "CreatedDate": {
	            "type": "timestamp"
	          },
	          "ModifiedDate": {
	            "type": "timestamp"
	          },
	          "Description": {}
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S4": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "Key",
	          "Value"
	        ],
	        "members": {
	          "Key": {},
	          "Value": {}
	        }
	      }
	    },
	    "Sb": {
	      "type": "list",
	      "member": {}
	    },
	    "Sq": {
	      "type": "map",
	      "key": {},
	      "value": {
	        "type": "list",
	        "member": {}
	      }
	    },
	    "Su": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "Key": {},
	          "Values": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      }
	    },
	    "S10": {
	      "type": "structure",
	      "members": {
	        "S3Location": {
	          "type": "structure",
	          "members": {
	            "OutputS3Region": {},
	            "OutputS3BucketName": {},
	            "OutputS3KeyPrefix": {}
	          }
	        }
	      }
	    },
	    "S16": {
	      "type": "structure",
	      "members": {
	        "Name": {},
	        "InstanceId": {},
	        "Date": {
	          "type": "timestamp"
	        },
	        "LastUpdateAssociationDate": {
	          "type": "timestamp"
	        },
	        "Status": {
	          "shape": "S18"
	        },
	        "Overview": {
	          "shape": "S1c"
	        },
	        "DocumentVersion": {},
	        "Parameters": {
	          "shape": "Sq"
	        },
	        "AssociationId": {},
	        "Targets": {
	          "shape": "Su"
	        },
	        "ScheduleExpression": {},
	        "OutputLocation": {
	          "shape": "S10"
	        },
	        "LastExecutionDate": {
	          "type": "timestamp"
	        },
	        "LastSuccessfulExecutionDate": {
	          "type": "timestamp"
	        }
	      }
	    },
	    "S18": {
	      "type": "structure",
	      "required": [
	        "Date",
	        "Name",
	        "Message"
	      ],
	      "members": {
	        "Date": {
	          "type": "timestamp"
	        },
	        "Name": {},
	        "Message": {},
	        "AdditionalInfo": {}
	      }
	    },
	    "S1c": {
	      "type": "structure",
	      "members": {
	        "Status": {},
	        "DetailedStatus": {},
	        "AssociationStatusAggregatedCount": {
	          "type": "map",
	          "key": {},
	          "value": {
	            "type": "integer"
	          }
	        }
	      }
	    },
	    "S1j": {
	      "type": "structure",
	      "required": [
	        "Name"
	      ],
	      "members": {
	        "Name": {},
	        "InstanceId": {},
	        "Parameters": {
	          "shape": "Sq"
	        },
	        "DocumentVersion": {},
	        "Targets": {
	          "shape": "Su"
	        },
	        "ScheduleExpression": {},
	        "OutputLocation": {
	          "shape": "S10"
	        }
	      }
	    },
	    "S1u": {
	      "type": "structure",
	      "members": {
	        "Sha1": {},
	        "Hash": {},
	        "HashType": {},
	        "Name": {},
	        "Owner": {},
	        "CreatedDate": {
	          "type": "timestamp"
	        },
	        "Status": {},
	        "DocumentVersion": {},
	        "Description": {},
	        "Parameters": {
	          "type": "list",
	          "member": {
	            "locationName": "DocumentParameter",
	            "type": "structure",
	            "members": {
	              "Name": {},
	              "Type": {},
	              "Description": {},
	              "DefaultValue": {}
	            }
	          }
	        },
	        "PlatformTypes": {
	          "shape": "S28"
	        },
	        "DocumentType": {},
	        "SchemaVersion": {},
	        "LatestVersion": {},
	        "DefaultVersion": {}
	      }
	    },
	    "S28": {
	      "type": "list",
	      "member": {
	        "locationName": "PlatformType"
	      }
	    },
	    "S2m": {
	      "type": "structure",
	      "required": [
	        "PatchFilters"
	      ],
	      "members": {
	        "PatchFilters": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "required": [
	              "Key",
	              "Values"
	            ],
	            "members": {
	              "Key": {},
	              "Values": {
	                "type": "list",
	                "member": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "S2s": {
	      "type": "structure",
	      "required": [
	        "PatchRules"
	      ],
	      "members": {
	        "PatchRules": {
	          "type": "list",
	          "member": {
	            "type": "structure",
	            "required": [
	              "PatchFilterGroup",
	              "ApproveAfterDays"
	            ],
	            "members": {
	              "PatchFilterGroup": {
	                "shape": "S2m"
	              },
	              "ApproveAfterDays": {
	                "type": "integer"
	              }
	            }
	          }
	        }
	      }
	    },
	    "S2w": {
	      "type": "list",
	      "member": {}
	    },
	    "S4h": {
	      "type": "map",
	      "key": {},
	      "value": {
	        "type": "list",
	        "member": {}
	      }
	    },
	    "S4m": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "Key": {},
	          "Values": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      }
	    },
	    "S4u": {
	      "type": "structure",
	      "members": {
	        "Id": {},
	        "ReleaseDate": {
	          "type": "timestamp"
	        },
	        "Title": {},
	        "Description": {},
	        "ContentUrl": {},
	        "Vendor": {},
	        "ProductFamily": {},
	        "Product": {},
	        "Classification": {},
	        "MsrcSeverity": {},
	        "KbNumber": {},
	        "MsrcNumber": {},
	        "Language": {}
	      }
	    },
	    "S5b": {
	      "type": "list",
	      "member": {
	        "locationName": "AccountId"
	      }
	    },
	    "S61": {
	      "type": "list",
	      "member": {
	        "locationName": "InstanceInformationFilterValue"
	      }
	    },
	    "S6l": {
	      "type": "structure",
	      "required": [
	        "InstanceId",
	        "PatchGroup",
	        "BaselineId",
	        "OperationStartTime",
	        "OperationEndTime",
	        "Operation"
	      ],
	      "members": {
	        "InstanceId": {},
	        "PatchGroup": {},
	        "BaselineId": {},
	        "SnapshotId": {},
	        "OwnerInformation": {
	          "shape": "S6n"
	        },
	        "InstalledCount": {
	          "type": "integer"
	        },
	        "InstalledOtherCount": {
	          "type": "integer"
	        },
	        "MissingCount": {
	          "type": "integer"
	        },
	        "FailedCount": {
	          "type": "integer"
	        },
	        "NotApplicableCount": {
	          "type": "integer"
	        },
	        "OperationStartTime": {
	          "type": "timestamp"
	        },
	        "OperationEndTime": {
	          "type": "timestamp"
	        },
	        "Operation": {}
	      }
	    },
	    "S6n": {
	      "type": "string",
	      "sensitive": true
	    },
	    "S7f": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "members": {
	          "Key": {},
	          "Values": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      }
	    },
	    "S8d": {
	      "type": "map",
	      "key": {},
	      "value": {
	        "type": "structure",
	        "members": {
	          "Values": {
	            "type": "list",
	            "member": {
	              "type": "string",
	              "sensitive": true
	            },
	            "sensitive": true
	          }
	        },
	        "sensitive": true
	      },
	      "sensitive": true
	    },
	    "S8j": {
	      "type": "structure",
	      "required": [
	        "S3BucketName",
	        "S3Region"
	      ],
	      "members": {
	        "S3BucketName": {},
	        "S3KeyPrefix": {},
	        "S3Region": {}
	      }
	    },
	    "S96": {
	      "type": "structure",
	      "members": {
	        "BaselineId": {},
	        "BaselineName": {},
	        "BaselineDescription": {},
	        "DefaultBaseline": {
	          "type": "boolean"
	        }
	      }
	    },
	    "Sa4": {
	      "type": "list",
	      "member": {
	        "locationName": "InventoryFilter",
	        "type": "structure",
	        "required": [
	          "Key",
	          "Values"
	        ],
	        "members": {
	          "Key": {},
	          "Values": {
	            "type": "list",
	            "member": {
	              "locationName": "FilterValue"
	            }
	          },
	          "Type": {}
	        }
	      }
	    },
	    "San": {
	      "type": "list",
	      "member": {
	        "type": "map",
	        "key": {},
	        "value": {}
	      }
	    },
	    "Sbf": {
	      "type": "list",
	      "member": {}
	    },
	    "Sby": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "key",
	          "value"
	        ],
	        "members": {
	          "key": {},
	          "value": {}
	        }
	      }
	    },
	    "Scb": {
	      "type": "structure",
	      "members": {
	        "NotificationArn": {},
	        "NotificationEvents": {
	          "type": "list",
	          "member": {}
	        },
	        "NotificationType": {}
	      }
	    },
	    "Scj": {
	      "type": "structure",
	      "members": {
	        "CommandId": {},
	        "DocumentName": {},
	        "Comment": {},
	        "ExpiresAfter": {
	          "type": "timestamp"
	        },
	        "Parameters": {
	          "shape": "Sq"
	        },
	        "InstanceIds": {
	          "shape": "Sb"
	        },
	        "Targets": {
	          "shape": "Su"
	        },
	        "RequestedDateTime": {
	          "type": "timestamp"
	        },
	        "Status": {},
	        "StatusDetails": {},
	        "OutputS3Region": {},
	        "OutputS3BucketName": {},
	        "OutputS3KeyPrefix": {},
	        "MaxConcurrency": {},
	        "MaxErrors": {},
	        "TargetCount": {
	          "type": "integer"
	        },
	        "CompletedCount": {
	          "type": "integer"
	        },
	        "ErrorCount": {
	          "type": "integer"
	        },
	        "ServiceRole": {},
	        "NotificationConfig": {
	          "shape": "Scb"
	        }
	      }
	    }
	  }
	}
	},{}],130:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "DescribeInstanceInformation": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "limit_key": "MaxResults",
	      "result_key": "InstanceInformationList"
	    },
	    "ListAssociations": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "limit_key": "MaxResults",
	      "result_key": "Associations"
	    },
	    "ListCommandInvocations": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "limit_key": "MaxResults",
	      "result_key": "CommandInvocations"
	    },
	    "ListCommands": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "limit_key": "MaxResults",
	      "result_key": "Commands"
	    },
	    "ListDocuments": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "limit_key": "MaxResults",
	      "result_key": "DocumentIdentifiers"
	    },
	    "DescribeActivations": {
	      "input_token": "NextToken",
	      "output_token": "NextToken",
	      "limit_key": "MaxResults",
	      "result_key": "ActivationList"
	    }
	  }
	}
	
	},{}],131:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2013-06-30",
	    "endpointPrefix": "storagegateway",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceFullName": "AWS Storage Gateway",
	    "signatureVersion": "v4",
	    "targetPrefix": "StorageGateway_20130630",
	    "uid": "storagegateway-2013-06-30"
	  },
	  "operations": {
	    "ActivateGateway": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ActivationKey",
	          "GatewayName",
	          "GatewayTimezone",
	          "GatewayRegion"
	        ],
	        "members": {
	          "ActivationKey": {},
	          "GatewayName": {},
	          "GatewayTimezone": {},
	          "GatewayRegion": {},
	          "GatewayType": {},
	          "TapeDriveType": {},
	          "MediumChangerType": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GatewayARN": {}
	        }
	      }
	    },
	    "AddCache": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN",
	          "DiskIds"
	        ],
	        "members": {
	          "GatewayARN": {},
	          "DiskIds": {
	            "shape": "Sc"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GatewayARN": {}
	        }
	      }
	    },
	    "AddTagsToResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceARN",
	          "Tags"
	        ],
	        "members": {
	          "ResourceARN": {},
	          "Tags": {
	            "shape": "Sh"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ResourceARN": {}
	        }
	      }
	    },
	    "AddUploadBuffer": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN",
	          "DiskIds"
	        ],
	        "members": {
	          "GatewayARN": {},
	          "DiskIds": {
	            "shape": "Sc"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GatewayARN": {}
	        }
	      }
	    },
	    "AddWorkingStorage": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN",
	          "DiskIds"
	        ],
	        "members": {
	          "GatewayARN": {},
	          "DiskIds": {
	            "shape": "Sc"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GatewayARN": {}
	        }
	      }
	    },
	    "CancelArchival": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN",
	          "TapeARN"
	        ],
	        "members": {
	          "GatewayARN": {},
	          "TapeARN": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "TapeARN": {}
	        }
	      }
	    },
	    "CancelRetrieval": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN",
	          "TapeARN"
	        ],
	        "members": {
	          "GatewayARN": {},
	          "TapeARN": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "TapeARN": {}
	        }
	      }
	    },
	    "CreateCachediSCSIVolume": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN",
	          "VolumeSizeInBytes",
	          "TargetName",
	          "NetworkInterfaceId",
	          "ClientToken"
	        ],
	        "members": {
	          "GatewayARN": {},
	          "VolumeSizeInBytes": {
	            "type": "long"
	          },
	          "SnapshotId": {},
	          "TargetName": {},
	          "SourceVolumeARN": {},
	          "NetworkInterfaceId": {},
	          "ClientToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "VolumeARN": {},
	          "TargetARN": {}
	        }
	      }
	    },
	    "CreateNFSFileShare": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ClientToken",
	          "GatewayARN",
	          "Role",
	          "LocationARN"
	        ],
	        "members": {
	          "ClientToken": {},
	          "NFSFileShareDefaults": {
	            "shape": "S15"
	          },
	          "GatewayARN": {},
	          "KMSEncrypted": {
	            "type": "boolean"
	          },
	          "KMSKey": {},
	          "Role": {},
	          "LocationARN": {},
	          "DefaultStorageClass": {},
	          "ClientList": {
	            "shape": "S1d"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "FileShareARN": {}
	        }
	      }
	    },
	    "CreateSnapshot": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VolumeARN",
	          "SnapshotDescription"
	        ],
	        "members": {
	          "VolumeARN": {},
	          "SnapshotDescription": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "VolumeARN": {},
	          "SnapshotId": {}
	        }
	      }
	    },
	    "CreateSnapshotFromVolumeRecoveryPoint": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VolumeARN",
	          "SnapshotDescription"
	        ],
	        "members": {
	          "VolumeARN": {},
	          "SnapshotDescription": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "SnapshotId": {},
	          "VolumeARN": {},
	          "VolumeRecoveryPointTime": {}
	        }
	      }
	    },
	    "CreateStorediSCSIVolume": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN",
	          "DiskId",
	          "PreserveExistingData",
	          "TargetName",
	          "NetworkInterfaceId"
	        ],
	        "members": {
	          "GatewayARN": {},
	          "DiskId": {},
	          "SnapshotId": {},
	          "PreserveExistingData": {
	            "type": "boolean"
	          },
	          "TargetName": {},
	          "NetworkInterfaceId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "VolumeARN": {},
	          "VolumeSizeInBytes": {
	            "type": "long"
	          },
	          "TargetARN": {}
	        }
	      }
	    },
	    "CreateTapeWithBarcode": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN",
	          "TapeSizeInBytes",
	          "TapeBarcode"
	        ],
	        "members": {
	          "GatewayARN": {},
	          "TapeSizeInBytes": {
	            "type": "long"
	          },
	          "TapeBarcode": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "TapeARN": {}
	        }
	      }
	    },
	    "CreateTapes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN",
	          "TapeSizeInBytes",
	          "ClientToken",
	          "NumTapesToCreate",
	          "TapeBarcodePrefix"
	        ],
	        "members": {
	          "GatewayARN": {},
	          "TapeSizeInBytes": {
	            "type": "long"
	          },
	          "ClientToken": {},
	          "NumTapesToCreate": {
	            "type": "integer"
	          },
	          "TapeBarcodePrefix": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "TapeARNs": {
	            "shape": "S1y"
	          }
	        }
	      }
	    },
	    "DeleteBandwidthRateLimit": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN",
	          "BandwidthType"
	        ],
	        "members": {
	          "GatewayARN": {},
	          "BandwidthType": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GatewayARN": {}
	        }
	      }
	    },
	    "DeleteChapCredentials": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TargetARN",
	          "InitiatorName"
	        ],
	        "members": {
	          "TargetARN": {},
	          "InitiatorName": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "TargetARN": {},
	          "InitiatorName": {}
	        }
	      }
	    },
	    "DeleteFileShare": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "FileShareARN"
	        ],
	        "members": {
	          "FileShareARN": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "FileShareARN": {}
	        }
	      }
	    },
	    "DeleteGateway": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN"
	        ],
	        "members": {
	          "GatewayARN": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GatewayARN": {}
	        }
	      }
	    },
	    "DeleteSnapshotSchedule": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VolumeARN"
	        ],
	        "members": {
	          "VolumeARN": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "VolumeARN": {}
	        }
	      }
	    },
	    "DeleteTape": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN",
	          "TapeARN"
	        ],
	        "members": {
	          "GatewayARN": {},
	          "TapeARN": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "TapeARN": {}
	        }
	      }
	    },
	    "DeleteTapeArchive": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TapeARN"
	        ],
	        "members": {
	          "TapeARN": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "TapeARN": {}
	        }
	      }
	    },
	    "DeleteVolume": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VolumeARN"
	        ],
	        "members": {
	          "VolumeARN": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "VolumeARN": {}
	        }
	      }
	    },
	    "DescribeBandwidthRateLimit": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN"
	        ],
	        "members": {
	          "GatewayARN": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GatewayARN": {},
	          "AverageUploadRateLimitInBitsPerSec": {
	            "type": "long"
	          },
	          "AverageDownloadRateLimitInBitsPerSec": {
	            "type": "long"
	          }
	        }
	      }
	    },
	    "DescribeCache": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN"
	        ],
	        "members": {
	          "GatewayARN": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GatewayARN": {},
	          "DiskIds": {
	            "shape": "Sc"
	          },
	          "CacheAllocatedInBytes": {
	            "type": "long"
	          },
	          "CacheUsedPercentage": {
	            "type": "double"
	          },
	          "CacheDirtyPercentage": {
	            "type": "double"
	          },
	          "CacheHitPercentage": {
	            "type": "double"
	          },
	          "CacheMissPercentage": {
	            "type": "double"
	          }
	        }
	      }
	    },
	    "DescribeCachediSCSIVolumes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VolumeARNs"
	        ],
	        "members": {
	          "VolumeARNs": {
	            "shape": "S2p"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "CachediSCSIVolumes": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "VolumeARN": {},
	                "VolumeId": {},
	                "VolumeType": {},
	                "VolumeStatus": {},
	                "VolumeSizeInBytes": {
	                  "type": "long"
	                },
	                "VolumeProgress": {
	                  "type": "double"
	                },
	                "SourceSnapshotId": {},
	                "VolumeiSCSIAttributes": {
	                  "shape": "S2x"
	                },
	                "CreatedDate": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeChapCredentials": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TargetARN"
	        ],
	        "members": {
	          "TargetARN": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ChapCredentials": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "TargetARN": {},
	                "SecretToAuthenticateInitiator": {},
	                "InitiatorName": {},
	                "SecretToAuthenticateTarget": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeGatewayInformation": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN"
	        ],
	        "members": {
	          "GatewayARN": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GatewayARN": {},
	          "GatewayId": {},
	          "GatewayName": {},
	          "GatewayTimezone": {},
	          "GatewayState": {},
	          "GatewayNetworkInterfaces": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "Ipv4Address": {},
	                "MacAddress": {},
	                "Ipv6Address": {}
	              }
	            }
	          },
	          "GatewayType": {},
	          "NextUpdateAvailabilityDate": {},
	          "LastSoftwareUpdate": {}
	        }
	      }
	    },
	    "DescribeMaintenanceStartTime": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN"
	        ],
	        "members": {
	          "GatewayARN": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GatewayARN": {},
	          "HourOfDay": {
	            "type": "integer"
	          },
	          "MinuteOfHour": {
	            "type": "integer"
	          },
	          "DayOfWeek": {
	            "type": "integer"
	          },
	          "Timezone": {}
	        }
	      }
	    },
	    "DescribeNFSFileShares": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "FileShareARNList"
	        ],
	        "members": {
	          "FileShareARNList": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NFSFileShareInfoList": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "NFSFileShareDefaults": {
	                  "shape": "S15"
	                },
	                "FileShareARN": {},
	                "FileShareId": {},
	                "FileShareStatus": {},
	                "GatewayARN": {},
	                "KMSEncrypted": {
	                  "type": "boolean"
	                },
	                "KMSKey": {},
	                "Path": {},
	                "Role": {},
	                "LocationARN": {},
	                "DefaultStorageClass": {},
	                "ClientList": {
	                  "shape": "S1d"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeSnapshotSchedule": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VolumeARN"
	        ],
	        "members": {
	          "VolumeARN": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "VolumeARN": {},
	          "StartAt": {
	            "type": "integer"
	          },
	          "RecurrenceInHours": {
	            "type": "integer"
	          },
	          "Description": {},
	          "Timezone": {}
	        }
	      }
	    },
	    "DescribeStorediSCSIVolumes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VolumeARNs"
	        ],
	        "members": {
	          "VolumeARNs": {
	            "shape": "S2p"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "StorediSCSIVolumes": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "VolumeARN": {},
	                "VolumeId": {},
	                "VolumeType": {},
	                "VolumeStatus": {},
	                "VolumeSizeInBytes": {
	                  "type": "long"
	                },
	                "VolumeProgress": {
	                  "type": "double"
	                },
	                "VolumeDiskId": {},
	                "SourceSnapshotId": {},
	                "PreservedExistingData": {
	                  "type": "boolean"
	                },
	                "VolumeiSCSIAttributes": {
	                  "shape": "S2x"
	                },
	                "CreatedDate": {
	                  "type": "timestamp"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "DescribeTapeArchives": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "TapeARNs": {
	            "shape": "S1y"
	          },
	          "Marker": {},
	          "Limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "TapeArchives": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "TapeARN": {},
	                "TapeBarcode": {},
	                "TapeCreatedDate": {
	                  "type": "timestamp"
	                },
	                "TapeSizeInBytes": {
	                  "type": "long"
	                },
	                "CompletionTime": {
	                  "type": "timestamp"
	                },
	                "RetrievedTo": {},
	                "TapeStatus": {}
	              }
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DescribeTapeRecoveryPoints": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN"
	        ],
	        "members": {
	          "GatewayARN": {},
	          "Marker": {},
	          "Limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GatewayARN": {},
	          "TapeRecoveryPointInfos": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "TapeARN": {},
	                "TapeRecoveryPointTime": {
	                  "type": "timestamp"
	                },
	                "TapeSizeInBytes": {
	                  "type": "long"
	                },
	                "TapeStatus": {}
	              }
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DescribeTapes": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN"
	        ],
	        "members": {
	          "GatewayARN": {},
	          "TapeARNs": {
	            "shape": "S1y"
	          },
	          "Marker": {},
	          "Limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Tapes": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "TapeARN": {},
	                "TapeBarcode": {},
	                "TapeCreatedDate": {
	                  "type": "timestamp"
	                },
	                "TapeSizeInBytes": {
	                  "type": "long"
	                },
	                "TapeStatus": {},
	                "VTLDevice": {},
	                "Progress": {
	                  "type": "double"
	                }
	              }
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DescribeUploadBuffer": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN"
	        ],
	        "members": {
	          "GatewayARN": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GatewayARN": {},
	          "DiskIds": {
	            "shape": "Sc"
	          },
	          "UploadBufferUsedInBytes": {
	            "type": "long"
	          },
	          "UploadBufferAllocatedInBytes": {
	            "type": "long"
	          }
	        }
	      }
	    },
	    "DescribeVTLDevices": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN"
	        ],
	        "members": {
	          "GatewayARN": {},
	          "VTLDeviceARNs": {
	            "type": "list",
	            "member": {}
	          },
	          "Marker": {},
	          "Limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GatewayARN": {},
	          "VTLDevices": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "VTLDeviceARN": {},
	                "VTLDeviceType": {},
	                "VTLDeviceVendor": {},
	                "VTLDeviceProductIdentifier": {},
	                "DeviceiSCSIAttributes": {
	                  "type": "structure",
	                  "members": {
	                    "TargetARN": {},
	                    "NetworkInterfaceId": {},
	                    "NetworkInterfacePort": {
	                      "type": "integer"
	                    },
	                    "ChapEnabled": {
	                      "type": "boolean"
	                    }
	                  }
	                }
	              }
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "DescribeWorkingStorage": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN"
	        ],
	        "members": {
	          "GatewayARN": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GatewayARN": {},
	          "DiskIds": {
	            "shape": "Sc"
	          },
	          "WorkingStorageUsedInBytes": {
	            "type": "long"
	          },
	          "WorkingStorageAllocatedInBytes": {
	            "type": "long"
	          }
	        }
	      }
	    },
	    "DisableGateway": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN"
	        ],
	        "members": {
	          "GatewayARN": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GatewayARN": {}
	        }
	      }
	    },
	    "ListFileShares": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "GatewayARN": {},
	          "Limit": {
	            "type": "integer"
	          },
	          "Marker": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "NextMarker": {},
	          "FileShareInfoList": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "FileShareARN": {},
	                "FileShareId": {},
	                "FileShareStatus": {},
	                "GatewayARN": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "ListGateways": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "Marker": {},
	          "Limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Gateways": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "GatewayId": {},
	                "GatewayARN": {},
	                "GatewayType": {},
	                "GatewayOperationalState": {},
	                "GatewayName": {}
	              }
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "ListLocalDisks": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN"
	        ],
	        "members": {
	          "GatewayARN": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GatewayARN": {},
	          "Disks": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "DiskId": {},
	                "DiskPath": {},
	                "DiskNode": {},
	                "DiskStatus": {},
	                "DiskSizeInBytes": {
	                  "type": "long"
	                },
	                "DiskAllocationType": {},
	                "DiskAllocationResource": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "ListTagsForResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceARN"
	        ],
	        "members": {
	          "ResourceARN": {},
	          "Marker": {},
	          "Limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ResourceARN": {},
	          "Marker": {},
	          "Tags": {
	            "shape": "Sh"
	          }
	        }
	      }
	    },
	    "ListTapes": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "TapeARNs": {
	            "shape": "S1y"
	          },
	          "Marker": {},
	          "Limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "TapeInfos": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "TapeARN": {},
	                "TapeBarcode": {},
	                "TapeSizeInBytes": {
	                  "type": "long"
	                },
	                "TapeStatus": {},
	                "GatewayARN": {}
	              }
	            }
	          },
	          "Marker": {}
	        }
	      }
	    },
	    "ListVolumeInitiators": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VolumeARN"
	        ],
	        "members": {
	          "VolumeARN": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Initiators": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      }
	    },
	    "ListVolumeRecoveryPoints": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN"
	        ],
	        "members": {
	          "GatewayARN": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GatewayARN": {},
	          "VolumeRecoveryPointInfos": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "VolumeARN": {},
	                "VolumeSizeInBytes": {
	                  "type": "long"
	                },
	                "VolumeUsageInBytes": {
	                  "type": "long"
	                },
	                "VolumeRecoveryPointTime": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "ListVolumes": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "GatewayARN": {},
	          "Marker": {},
	          "Limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GatewayARN": {},
	          "Marker": {},
	          "VolumeInfos": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "VolumeARN": {},
	                "VolumeId": {},
	                "GatewayARN": {},
	                "GatewayId": {},
	                "VolumeType": {},
	                "VolumeSizeInBytes": {
	                  "type": "long"
	                }
	              }
	            }
	          }
	        }
	      }
	    },
	    "RemoveTagsFromResource": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ResourceARN",
	          "TagKeys"
	        ],
	        "members": {
	          "ResourceARN": {},
	          "TagKeys": {
	            "type": "list",
	            "member": {}
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ResourceARN": {}
	        }
	      }
	    },
	    "ResetCache": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN"
	        ],
	        "members": {
	          "GatewayARN": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GatewayARN": {}
	        }
	      }
	    },
	    "RetrieveTapeArchive": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TapeARN",
	          "GatewayARN"
	        ],
	        "members": {
	          "TapeARN": {},
	          "GatewayARN": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "TapeARN": {}
	        }
	      }
	    },
	    "RetrieveTapeRecoveryPoint": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TapeARN",
	          "GatewayARN"
	        ],
	        "members": {
	          "TapeARN": {},
	          "GatewayARN": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "TapeARN": {}
	        }
	      }
	    },
	    "SetLocalConsolePassword": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN",
	          "LocalConsolePassword"
	        ],
	        "members": {
	          "GatewayARN": {},
	          "LocalConsolePassword": {
	            "type": "string",
	            "sensitive": true
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GatewayARN": {}
	        }
	      }
	    },
	    "ShutdownGateway": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN"
	        ],
	        "members": {
	          "GatewayARN": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GatewayARN": {}
	        }
	      }
	    },
	    "StartGateway": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN"
	        ],
	        "members": {
	          "GatewayARN": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GatewayARN": {}
	        }
	      }
	    },
	    "UpdateBandwidthRateLimit": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN"
	        ],
	        "members": {
	          "GatewayARN": {},
	          "AverageUploadRateLimitInBitsPerSec": {
	            "type": "long"
	          },
	          "AverageDownloadRateLimitInBitsPerSec": {
	            "type": "long"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GatewayARN": {}
	        }
	      }
	    },
	    "UpdateChapCredentials": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "TargetARN",
	          "SecretToAuthenticateInitiator",
	          "InitiatorName"
	        ],
	        "members": {
	          "TargetARN": {},
	          "SecretToAuthenticateInitiator": {},
	          "InitiatorName": {},
	          "SecretToAuthenticateTarget": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "TargetARN": {},
	          "InitiatorName": {}
	        }
	      }
	    },
	    "UpdateGatewayInformation": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN"
	        ],
	        "members": {
	          "GatewayARN": {},
	          "GatewayName": {},
	          "GatewayTimezone": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GatewayARN": {},
	          "GatewayName": {}
	        }
	      }
	    },
	    "UpdateGatewaySoftwareNow": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN"
	        ],
	        "members": {
	          "GatewayARN": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GatewayARN": {}
	        }
	      }
	    },
	    "UpdateMaintenanceStartTime": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "GatewayARN",
	          "HourOfDay",
	          "MinuteOfHour",
	          "DayOfWeek"
	        ],
	        "members": {
	          "GatewayARN": {},
	          "HourOfDay": {
	            "type": "integer"
	          },
	          "MinuteOfHour": {
	            "type": "integer"
	          },
	          "DayOfWeek": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "GatewayARN": {}
	        }
	      }
	    },
	    "UpdateNFSFileShare": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "FileShareARN"
	        ],
	        "members": {
	          "FileShareARN": {},
	          "KMSEncrypted": {
	            "type": "boolean"
	          },
	          "KMSKey": {},
	          "NFSFileShareDefaults": {
	            "shape": "S15"
	          },
	          "DefaultStorageClass": {},
	          "ClientList": {
	            "shape": "S1d"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "FileShareARN": {}
	        }
	      }
	    },
	    "UpdateSnapshotSchedule": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VolumeARN",
	          "StartAt",
	          "RecurrenceInHours"
	        ],
	        "members": {
	          "VolumeARN": {},
	          "StartAt": {
	            "type": "integer"
	          },
	          "RecurrenceInHours": {
	            "type": "integer"
	          },
	          "Description": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "VolumeARN": {}
	        }
	      }
	    },
	    "UpdateVTLDeviceType": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "VTLDeviceARN",
	          "DeviceType"
	        ],
	        "members": {
	          "VTLDeviceARN": {},
	          "DeviceType": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "VTLDeviceARN": {}
	        }
	      }
	    }
	  },
	  "shapes": {
	    "Sc": {
	      "type": "list",
	      "member": {}
	    },
	    "Sh": {
	      "type": "list",
	      "member": {
	        "type": "structure",
	        "required": [
	          "Key",
	          "Value"
	        ],
	        "members": {
	          "Key": {},
	          "Value": {}
	        }
	      }
	    },
	    "S15": {
	      "type": "structure",
	      "members": {
	        "FileMode": {},
	        "DirectoryMode": {},
	        "GroupId": {
	          "type": "long"
	        },
	        "OwnerId": {
	          "type": "long"
	        }
	      }
	    },
	    "S1d": {
	      "type": "list",
	      "member": {}
	    },
	    "S1y": {
	      "type": "list",
	      "member": {}
	    },
	    "S2p": {
	      "type": "list",
	      "member": {}
	    },
	    "S2x": {
	      "type": "structure",
	      "members": {
	        "TargetARN": {},
	        "NetworkInterfaceId": {},
	        "NetworkInterfacePort": {
	          "type": "integer"
	        },
	        "LunNumber": {
	          "type": "integer"
	        },
	        "ChapEnabled": {
	          "type": "boolean"
	        }
	      }
	    }
	  }
	}
	},{}],132:[function(require,module,exports){
	module.exports={
	  "pagination": {
	    "DescribeCachediSCSIVolumes": {
	      "result_key": "CachediSCSIVolumes"
	    },
	    "DescribeStorediSCSIVolumes": {
	      "result_key": "StorediSCSIVolumes"
	    },
	    "DescribeTapeArchives": {
	      "input_token": "Marker",
	      "limit_key": "Limit",
	      "output_token": "Marker",
	      "result_key": "TapeArchives"
	    },
	    "DescribeTapeRecoveryPoints": {
	      "input_token": "Marker",
	      "limit_key": "Limit",
	      "output_token": "Marker",
	      "result_key": "TapeRecoveryPointInfos"
	    },
	    "DescribeTapes": {
	      "input_token": "Marker",
	      "limit_key": "Limit",
	      "output_token": "Marker",
	      "result_key": "Tapes"
	    },
	    "DescribeVTLDevices": {
	      "input_token": "Marker",
	      "limit_key": "Limit",
	      "output_token": "Marker",
	      "result_key": "VTLDevices"
	    },
	    "ListGateways": {
	      "input_token": "Marker",
	      "limit_key": "Limit",
	      "output_token": "Marker",
	      "result_key": "Gateways"
	    },
	    "ListLocalDisks": {
	      "result_key": "Disks"
	    },
	    "ListVolumeRecoveryPoints": {
	      "result_key": "VolumeRecoveryPointInfos"
	    },
	    "ListVolumes": {
	      "input_token": "Marker",
	      "limit_key": "Limit",
	      "output_token": "Marker",
	      "result_key": "VolumeInfos"
	    }
	  }
	}
	},{}],133:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2012-08-10",
	    "endpointPrefix": "streams.dynamodb",
	    "jsonVersion": "1.0",
	    "protocol": "json",
	    "serviceFullName": "Amazon DynamoDB Streams",
	    "signatureVersion": "v4",
	    "signingName": "dynamodb",
	    "targetPrefix": "DynamoDBStreams_20120810",
	    "uid": "streams-dynamodb-2012-08-10"
	  },
	  "operations": {
	    "DescribeStream": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StreamArn"
	        ],
	        "members": {
	          "StreamArn": {},
	          "Limit": {
	            "type": "integer"
	          },
	          "ExclusiveStartShardId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "StreamDescription": {
	            "type": "structure",
	            "members": {
	              "StreamArn": {},
	              "StreamLabel": {},
	              "StreamStatus": {},
	              "StreamViewType": {},
	              "CreationRequestDateTime": {
	                "type": "timestamp"
	              },
	              "TableName": {},
	              "KeySchema": {
	                "type": "list",
	                "member": {
	                  "type": "structure",
	                  "required": [
	                    "AttributeName",
	                    "KeyType"
	                  ],
	                  "members": {
	                    "AttributeName": {},
	                    "KeyType": {}
	                  }
	                }
	              },
	              "Shards": {
	                "type": "list",
	                "member": {
	                  "type": "structure",
	                  "members": {
	                    "ShardId": {},
	                    "SequenceNumberRange": {
	                      "type": "structure",
	                      "members": {
	                        "StartingSequenceNumber": {},
	                        "EndingSequenceNumber": {}
	                      }
	                    },
	                    "ParentShardId": {}
	                  }
	                }
	              },
	              "LastEvaluatedShardId": {}
	            }
	          }
	        }
	      }
	    },
	    "GetRecords": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ShardIterator"
	        ],
	        "members": {
	          "ShardIterator": {},
	          "Limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Records": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "eventID": {},
	                "eventName": {},
	                "eventVersion": {},
	                "eventSource": {},
	                "awsRegion": {},
	                "dynamodb": {
	                  "type": "structure",
	                  "members": {
	                    "ApproximateCreationDateTime": {
	                      "type": "timestamp"
	                    },
	                    "Keys": {
	                      "shape": "Sr"
	                    },
	                    "NewImage": {
	                      "shape": "Sr"
	                    },
	                    "OldImage": {
	                      "shape": "Sr"
	                    },
	                    "SequenceNumber": {},
	                    "SizeBytes": {
	                      "type": "long"
	                    },
	                    "StreamViewType": {}
	                  }
	                }
	              }
	            }
	          },
	          "NextShardIterator": {}
	        }
	      }
	    },
	    "GetShardIterator": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "StreamArn",
	          "ShardId",
	          "ShardIteratorType"
	        ],
	        "members": {
	          "StreamArn": {},
	          "ShardId": {},
	          "ShardIteratorType": {},
	          "SequenceNumber": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ShardIterator": {}
	        }
	      }
	    },
	    "ListStreams": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "TableName": {},
	          "Limit": {
	            "type": "integer"
	          },
	          "ExclusiveStartStreamArn": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Streams": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "members": {
	                "StreamArn": {},
	                "TableName": {},
	                "StreamLabel": {}
	              }
	            }
	          },
	          "LastEvaluatedStreamArn": {}
	        }
	      }
	    }
	  },
	  "shapes": {
	    "Sr": {
	      "type": "map",
	      "key": {},
	      "value": {
	        "shape": "St"
	      }
	    },
	    "St": {
	      "type": "structure",
	      "members": {
	        "S": {},
	        "N": {},
	        "B": {
	          "type": "blob"
	        },
	        "SS": {
	          "type": "list",
	          "member": {}
	        },
	        "NS": {
	          "type": "list",
	          "member": {}
	        },
	        "BS": {
	          "type": "list",
	          "member": {
	            "type": "blob"
	          }
	        },
	        "M": {
	          "type": "map",
	          "key": {},
	          "value": {
	            "shape": "St"
	          }
	        },
	        "L": {
	          "type": "list",
	          "member": {
	            "shape": "St"
	          }
	        },
	        "NULL": {
	          "type": "boolean"
	        },
	        "BOOL": {
	          "type": "boolean"
	        }
	      }
	    }
	  }
	}
	},{}],134:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "apiVersion": "2011-06-15",
	    "endpointPrefix": "sts",
	    "globalEndpoint": "sts.amazonaws.com",
	    "protocol": "query",
	    "serviceAbbreviation": "AWS STS",
	    "serviceFullName": "AWS Security Token Service",
	    "signatureVersion": "v4",
	    "uid": "sts-2011-06-15",
	    "xmlNamespace": "https://sts.amazonaws.com/doc/2011-06-15/"
	  },
	  "operations": {
	    "AssumeRole": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RoleArn",
	          "RoleSessionName"
	        ],
	        "members": {
	          "RoleArn": {},
	          "RoleSessionName": {},
	          "Policy": {},
	          "DurationSeconds": {
	            "type": "integer"
	          },
	          "ExternalId": {},
	          "SerialNumber": {},
	          "TokenCode": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "AssumeRoleResult",
	        "type": "structure",
	        "members": {
	          "Credentials": {
	            "shape": "Sa"
	          },
	          "AssumedRoleUser": {
	            "shape": "Sf"
	          },
	          "PackedPolicySize": {
	            "type": "integer"
	          }
	        }
	      }
	    },
	    "AssumeRoleWithSAML": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RoleArn",
	          "PrincipalArn",
	          "SAMLAssertion"
	        ],
	        "members": {
	          "RoleArn": {},
	          "PrincipalArn": {},
	          "SAMLAssertion": {},
	          "Policy": {},
	          "DurationSeconds": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "AssumeRoleWithSAMLResult",
	        "type": "structure",
	        "members": {
	          "Credentials": {
	            "shape": "Sa"
	          },
	          "AssumedRoleUser": {
	            "shape": "Sf"
	          },
	          "PackedPolicySize": {
	            "type": "integer"
	          },
	          "Subject": {},
	          "SubjectType": {},
	          "Issuer": {},
	          "Audience": {},
	          "NameQualifier": {}
	        }
	      }
	    },
	    "AssumeRoleWithWebIdentity": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RoleArn",
	          "RoleSessionName",
	          "WebIdentityToken"
	        ],
	        "members": {
	          "RoleArn": {},
	          "RoleSessionName": {},
	          "WebIdentityToken": {},
	          "ProviderId": {},
	          "Policy": {},
	          "DurationSeconds": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "AssumeRoleWithWebIdentityResult",
	        "type": "structure",
	        "members": {
	          "Credentials": {
	            "shape": "Sa"
	          },
	          "SubjectFromWebIdentityToken": {},
	          "AssumedRoleUser": {
	            "shape": "Sf"
	          },
	          "PackedPolicySize": {
	            "type": "integer"
	          },
	          "Provider": {},
	          "Audience": {}
	        }
	      }
	    },
	    "DecodeAuthorizationMessage": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "EncodedMessage"
	        ],
	        "members": {
	          "EncodedMessage": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "DecodeAuthorizationMessageResult",
	        "type": "structure",
	        "members": {
	          "DecodedMessage": {}
	        }
	      }
	    },
	    "GetCallerIdentity": {
	      "input": {
	        "type": "structure",
	        "members": {}
	      },
	      "output": {
	        "resultWrapper": "GetCallerIdentityResult",
	        "type": "structure",
	        "members": {
	          "UserId": {},
	          "Account": {},
	          "Arn": {}
	        }
	      }
	    },
	    "GetFederationToken": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name"
	        ],
	        "members": {
	          "Name": {},
	          "Policy": {},
	          "DurationSeconds": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "resultWrapper": "GetFederationTokenResult",
	        "type": "structure",
	        "members": {
	          "Credentials": {
	            "shape": "Sa"
	          },
	          "FederatedUser": {
	            "type": "structure",
	            "required": [
	              "FederatedUserId",
	              "Arn"
	            ],
	            "members": {
	              "FederatedUserId": {},
	              "Arn": {}
	            }
	          },
	          "PackedPolicySize": {
	            "type": "integer"
	          }
	        }
	      }
	    },
	    "GetSessionToken": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "DurationSeconds": {
	            "type": "integer"
	          },
	          "SerialNumber": {},
	          "TokenCode": {}
	        }
	      },
	      "output": {
	        "resultWrapper": "GetSessionTokenResult",
	        "type": "structure",
	        "members": {
	          "Credentials": {
	            "shape": "Sa"
	          }
	        }
	      }
	    }
	  },
	  "shapes": {
	    "Sa": {
	      "type": "structure",
	      "required": [
	        "AccessKeyId",
	        "SecretAccessKey",
	        "SessionToken",
	        "Expiration"
	      ],
	      "members": {
	        "AccessKeyId": {},
	        "SecretAccessKey": {},
	        "SessionToken": {},
	        "Expiration": {
	          "type": "timestamp"
	        }
	      }
	    },
	    "Sf": {
	      "type": "structure",
	      "required": [
	        "AssumedRoleId",
	        "Arn"
	      ],
	      "members": {
	        "AssumedRoleId": {},
	        "Arn": {}
	      }
	    }
	  }
	}
	},{}],135:[function(require,module,exports){
	module.exports={
	  "version": "2.0",
	  "metadata": {
	    "uid": "waf-2015-08-24",
	    "apiVersion": "2015-08-24",
	    "endpointPrefix": "waf",
	    "jsonVersion": "1.1",
	    "protocol": "json",
	    "serviceAbbreviation": "WAF",
	    "serviceFullName": "AWS WAF",
	    "signatureVersion": "v4",
	    "targetPrefix": "AWSWAF_20150824"
	  },
	  "operations": {
	    "CreateByteMatchSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "ChangeToken"
	        ],
	        "members": {
	          "Name": {},
	          "ChangeToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ByteMatchSet": {
	            "shape": "S5"
	          },
	          "ChangeToken": {}
	        }
	      }
	    },
	    "CreateIPSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "ChangeToken"
	        ],
	        "members": {
	          "Name": {},
	          "ChangeToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "IPSet": {
	            "shape": "Sh"
	          },
	          "ChangeToken": {}
	        }
	      }
	    },
	    "CreateRule": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "MetricName",
	          "ChangeToken"
	        ],
	        "members": {
	          "Name": {},
	          "MetricName": {},
	          "ChangeToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Rule": {
	            "shape": "Sp"
	          },
	          "ChangeToken": {}
	        }
	      }
	    },
	    "CreateSizeConstraintSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "ChangeToken"
	        ],
	        "members": {
	          "Name": {},
	          "ChangeToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "SizeConstraintSet": {
	            "shape": "Sw"
	          },
	          "ChangeToken": {}
	        }
	      }
	    },
	    "CreateSqlInjectionMatchSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "ChangeToken"
	        ],
	        "members": {
	          "Name": {},
	          "ChangeToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "SqlInjectionMatchSet": {
	            "shape": "S13"
	          },
	          "ChangeToken": {}
	        }
	      }
	    },
	    "CreateWebACL": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "MetricName",
	          "DefaultAction",
	          "ChangeToken"
	        ],
	        "members": {
	          "Name": {},
	          "MetricName": {},
	          "DefaultAction": {
	            "shape": "S17"
	          },
	          "ChangeToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "WebACL": {
	            "shape": "S1a"
	          },
	          "ChangeToken": {}
	        }
	      }
	    },
	    "CreateXssMatchSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "Name",
	          "ChangeToken"
	        ],
	        "members": {
	          "Name": {},
	          "ChangeToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "XssMatchSet": {
	            "shape": "S1g"
	          },
	          "ChangeToken": {}
	        }
	      }
	    },
	    "DeleteByteMatchSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ByteMatchSetId",
	          "ChangeToken"
	        ],
	        "members": {
	          "ByteMatchSetId": {},
	          "ChangeToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ChangeToken": {}
	        }
	      }
	    },
	    "DeleteIPSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "IPSetId",
	          "ChangeToken"
	        ],
	        "members": {
	          "IPSetId": {},
	          "ChangeToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ChangeToken": {}
	        }
	      }
	    },
	    "DeleteRule": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RuleId",
	          "ChangeToken"
	        ],
	        "members": {
	          "RuleId": {},
	          "ChangeToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ChangeToken": {}
	        }
	      }
	    },
	    "DeleteSizeConstraintSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SizeConstraintSetId",
	          "ChangeToken"
	        ],
	        "members": {
	          "SizeConstraintSetId": {},
	          "ChangeToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ChangeToken": {}
	        }
	      }
	    },
	    "DeleteSqlInjectionMatchSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SqlInjectionMatchSetId",
	          "ChangeToken"
	        ],
	        "members": {
	          "SqlInjectionMatchSetId": {},
	          "ChangeToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ChangeToken": {}
	        }
	      }
	    },
	    "DeleteWebACL": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "WebACLId",
	          "ChangeToken"
	        ],
	        "members": {
	          "WebACLId": {},
	          "ChangeToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ChangeToken": {}
	        }
	      }
	    },
	    "DeleteXssMatchSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "XssMatchSetId",
	          "ChangeToken"
	        ],
	        "members": {
	          "XssMatchSetId": {},
	          "ChangeToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ChangeToken": {}
	        }
	      }
	    },
	    "GetByteMatchSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ByteMatchSetId"
	        ],
	        "members": {
	          "ByteMatchSetId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ByteMatchSet": {
	            "shape": "S5"
	          }
	        }
	      }
	    },
	    "GetChangeToken": {
	      "input": {
	        "type": "structure",
	        "members": {}
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ChangeToken": {}
	        }
	      }
	    },
	    "GetChangeTokenStatus": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ChangeToken"
	        ],
	        "members": {
	          "ChangeToken": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ChangeTokenStatus": {}
	        }
	      }
	    },
	    "GetIPSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "IPSetId"
	        ],
	        "members": {
	          "IPSetId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "IPSet": {
	            "shape": "Sh"
	          }
	        }
	      }
	    },
	    "GetRule": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RuleId"
	        ],
	        "members": {
	          "RuleId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "Rule": {
	            "shape": "Sp"
	          }
	        }
	      }
	    },
	    "GetSampledRequests": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "WebAclId",
	          "RuleId",
	          "TimeWindow",
	          "MaxItems"
	        ],
	        "members": {
	          "WebAclId": {},
	          "RuleId": {},
	          "TimeWindow": {
	            "shape": "S29"
	          },
	          "MaxItems": {
	            "type": "long"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "SampledRequests": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "Request",
	                "Weight"
	              ],
	              "members": {
	                "Request": {
	                  "type": "structure",
	                  "members": {
	                    "ClientIP": {},
	                    "Country": {},
	                    "URI": {},
	                    "Method": {},
	                    "HTTPVersion": {},
	                    "Headers": {
	                      "type": "list",
	                      "member": {
	                        "type": "structure",
	                        "members": {
	                          "Name": {},
	                          "Value": {}
	                        }
	                      }
	                    }
	                  }
	                },
	                "Weight": {
	                  "type": "long"
	                },
	                "Timestamp": {
	                  "type": "timestamp"
	                },
	                "Action": {}
	              }
	            }
	          },
	          "PopulationSize": {
	            "type": "long"
	          },
	          "TimeWindow": {
	            "shape": "S29"
	          }
	        }
	      }
	    },
	    "GetSizeConstraintSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SizeConstraintSetId"
	        ],
	        "members": {
	          "SizeConstraintSetId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "SizeConstraintSet": {
	            "shape": "Sw"
	          }
	        }
	      }
	    },
	    "GetSqlInjectionMatchSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SqlInjectionMatchSetId"
	        ],
	        "members": {
	          "SqlInjectionMatchSetId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "SqlInjectionMatchSet": {
	            "shape": "S13"
	          }
	        }
	      }
	    },
	    "GetWebACL": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "WebACLId"
	        ],
	        "members": {
	          "WebACLId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "WebACL": {
	            "shape": "S1a"
	          }
	        }
	      }
	    },
	    "GetXssMatchSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "XssMatchSetId"
	        ],
	        "members": {
	          "XssMatchSetId": {}
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "XssMatchSet": {
	            "shape": "S1g"
	          }
	        }
	      }
	    },
	    "ListByteMatchSets": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "NextMarker": {},
	          "Limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NextMarker": {},
	          "ByteMatchSets": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "ByteMatchSetId",
	                "Name"
	              ],
	              "members": {
	                "ByteMatchSetId": {},
	                "Name": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "ListIPSets": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "NextMarker": {},
	          "Limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NextMarker": {},
	          "IPSets": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "IPSetId",
	                "Name"
	              ],
	              "members": {
	                "IPSetId": {},
	                "Name": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "ListRules": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "NextMarker": {},
	          "Limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NextMarker": {},
	          "Rules": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "RuleId",
	                "Name"
	              ],
	              "members": {
	                "RuleId": {},
	                "Name": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "ListSizeConstraintSets": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "NextMarker": {},
	          "Limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NextMarker": {},
	          "SizeConstraintSets": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "SizeConstraintSetId",
	                "Name"
	              ],
	              "members": {
	                "SizeConstraintSetId": {},
	                "Name": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "ListSqlInjectionMatchSets": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "NextMarker": {},
	          "Limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NextMarker": {},
	          "SqlInjectionMatchSets": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "SqlInjectionMatchSetId",
	                "Name"
	              ],
	              "members": {
	                "SqlInjectionMatchSetId": {},
	                "Name": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "ListWebACLs": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "NextMarker": {},
	          "Limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NextMarker": {},
	          "WebACLs": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "WebACLId",
	                "Name"
	              ],
	              "members": {
	                "WebACLId": {},
	                "Name": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "ListXssMatchSets": {
	      "input": {
	        "type": "structure",
	        "members": {
	          "NextMarker": {},
	          "Limit": {
	            "type": "integer"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "NextMarker": {},
	          "XssMatchSets": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "XssMatchSetId",
	                "Name"
	              ],
	              "members": {
	                "XssMatchSetId": {},
	                "Name": {}
	              }
	            }
	          }
	        }
	      }
	    },
	    "UpdateByteMatchSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "ByteMatchSetId",
	          "ChangeToken",
	          "Updates"
	        ],
	        "members": {
	          "ByteMatchSetId": {},
	          "ChangeToken": {},
	          "Updates": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "Action",
	                "ByteMatchTuple"
	              ],
	              "members": {
	                "Action": {},
	                "ByteMatchTuple": {
	                  "shape": "S8"
	                }
	              }
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ChangeToken": {}
	        }
	      }
	    },
	    "UpdateIPSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "IPSetId",
	          "ChangeToken",
	          "Updates"
	        ],
	        "members": {
	          "IPSetId": {},
	          "ChangeToken": {},
	          "Updates": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "Action",
	                "IPSetDescriptor"
	              ],
	              "members": {
	                "Action": {},
	                "IPSetDescriptor": {
	                  "shape": "Sj"
	                }
	              }
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ChangeToken": {}
	        }
	      }
	    },
	    "UpdateRule": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "RuleId",
	          "ChangeToken",
	          "Updates"
	        ],
	        "members": {
	          "RuleId": {},
	          "ChangeToken": {},
	          "Updates": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "Action",
	                "Predicate"
	              ],
	              "members": {
	                "Action": {},
	                "Predicate": {
	                  "shape": "Sr"
	                }
	              }
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ChangeToken": {}
	        }
	      }
	    },
	    "UpdateSizeConstraintSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SizeConstraintSetId",
	          "ChangeToken",
	          "Updates"
	        ],
	        "members": {
	          "SizeConstraintSetId": {},
	          "ChangeToken": {},
	          "Updates": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "Action",
	                "SizeConstraint"
	              ],
	              "members": {
	                "Action": {},
	                "SizeConstraint": {
	                  "shape": "Sy"
	                }
	              }
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ChangeToken": {}
	        }
	      }
	    },
	    "UpdateSqlInjectionMatchSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "SqlInjectionMatchSetId",
	          "ChangeToken",
	          "Updates"
	        ],
	        "members": {
	          "SqlInjectionMatchSetId": {},
	          "ChangeToken": {},
	          "Updates": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "Action",
	                "SqlInjectionMatchTuple"
	              ],
	              "members": {
	                "Action": {},
	                "SqlInjectionMatchTuple": {
	                  "shape": "S15"
	                }
	              }
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ChangeToken": {}
	        }
	      }
	    },
	    "UpdateWebACL": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "WebACLId",
	          "ChangeToken"
	        ],
	        "members": {
	          "WebACLId": {},
	          "ChangeToken": {},
	          "Updates": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "Action",
	                "ActivatedRule"
	              ],
	              "members": {
	                "Action": {},
	                "ActivatedRule": {
	                  "shape": "S1c"
	                }
	              }
	            }
	          },
	          "DefaultAction": {
	            "shape": "S17"
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ChangeToken": {}
	        }
	      }
	    },
	    "UpdateXssMatchSet": {
	      "input": {
	        "type": "structure",
	        "required": [
	          "XssMatchSetId",
	          "ChangeToken",
	          "Updates"
	        ],
	        "members": {
	          "XssMatchSetId": {},
	          "ChangeToken": {},
	          "Updates": {
	            "type": "list",
	            "member": {
	              "type": "structure",
	              "required": [
	                "Action",
	                "XssMatchTuple"
	              ],
	              "members": {
	                "Action": {},
	                "XssMatchTuple": {
	                  "shape": "S1i"
	                }
	              }
	            }
	          }
	        }
	      },
	      "output": {
	        "type": "structure",
	        "members": {
	          "ChangeToken": {}
	        }
	      }
	    }
	  },
	  "shapes": {
	    "S5": {
	      "type": "structure",
	      "required": [
	        "ByteMatchSetId",
	        "ByteMatchTuples"
	      ],
	      "members": {
	        "ByteMatchSetId": {},
	        "Name": {},
	        "ByteMatchTuples": {
	          "type": "list",
	          "member": {
	            "shape": "S8"
	          }
	        }
	      }
	    },
	    "S8": {
	      "type": "structure",
	      "required": [
	        "FieldToMatch",
	        "TargetString",
	        "TextTransformation",
	        "PositionalConstraint"
	      ],
	      "members": {
	        "FieldToMatch": {
	          "shape": "S9"
	        },
	        "TargetString": {
	          "type": "blob"
	        },
	        "TextTransformation": {},
	        "PositionalConstraint": {}
	      }
	    },
	    "S9": {
	      "type": "structure",
	      "required": [
	        "Type"
	      ],
	      "members": {
	        "Type": {},
	        "Data": {}
	      }
	    },
	    "Sh": {
	      "type": "structure",
	      "required": [
	        "IPSetId",
	        "IPSetDescriptors"
	      ],
	      "members": {
	        "IPSetId": {},
	        "Name": {},
	        "IPSetDescriptors": {
	          "type": "list",
	          "member": {
	            "shape": "Sj"
	          }
	        }
	      }
	    },
	    "Sj": {
	      "type": "structure",
	      "required": [
	        "Type",
	        "Value"
	      ],
	      "members": {
	        "Type": {},
	        "Value": {}
	      }
	    },
	    "Sp": {
	      "type": "structure",
	      "required": [
	        "RuleId",
	        "Predicates"
	      ],
	      "members": {
	        "RuleId": {},
	        "Name": {},
	        "MetricName": {},
	        "Predicates": {
	          "type": "list",
	          "member": {
	            "shape": "Sr"
	          }
	        }
	      }
	    },
	    "Sr": {
	      "type": "structure",
	      "required": [
	        "Negated",
	        "Type",
	        "DataId"
	      ],
	      "members": {
	        "Negated": {
	          "type": "boolean"
	        },
	        "Type": {},
	        "DataId": {}
	      }
	    },
	    "Sw": {
	      "type": "structure",
	      "required": [
	        "SizeConstraintSetId",
	        "SizeConstraints"
	      ],
	      "members": {
	        "SizeConstraintSetId": {},
	        "Name": {},
	        "SizeConstraints": {
	          "type": "list",
	          "member": {
	            "shape": "Sy"
	          }
	        }
	      }
	    },
	    "Sy": {
	      "type": "structure",
	      "required": [
	        "FieldToMatch",
	        "TextTransformation",
	        "ComparisonOperator",
	        "Size"
	      ],
	      "members": {
	        "FieldToMatch": {
	          "shape": "S9"
	        },
	        "TextTransformation": {},
	        "ComparisonOperator": {},
	        "Size": {
	          "type": "long"
	        }
	      }
	    },
	    "S13": {
	      "type": "structure",
	      "required": [
	        "SqlInjectionMatchSetId",
	        "SqlInjectionMatchTuples"
	      ],
	      "members": {
	        "SqlInjectionMatchSetId": {},
	        "Name": {},
	        "SqlInjectionMatchTuples": {
	          "type": "list",
	          "member": {
	            "shape": "S15"
	          }
	        }
	      }
	    },
	    "S15": {
	      "type": "structure",
	      "required": [
	        "FieldToMatch",
	        "TextTransformation"
	      ],
	      "members": {
	        "FieldToMatch": {
	          "shape": "S9"
	        },
	        "TextTransformation": {}
	      }
	    },
	    "S17": {
	      "type": "structure",
	      "required": [
	        "Type"
	      ],
	      "members": {
	        "Type": {}
	      }
	    },
	    "S1a": {
	      "type": "structure",
	      "required": [
	        "WebACLId",
	        "DefaultAction",
	        "Rules"
	      ],
	      "members": {
	        "WebACLId": {},
	        "Name": {},
	        "MetricName": {},
	        "DefaultAction": {
	          "shape": "S17"
	        },
	        "Rules": {
	          "type": "list",
	          "member": {
	            "shape": "S1c"
	          }
	        }
	      }
	    },
	    "S1c": {
	      "type": "structure",
	      "required": [
	        "Priority",
	        "RuleId",
	        "Action"
	      ],
	      "members": {
	        "Priority": {
	          "type": "integer"
	        },
	        "RuleId": {},
	        "Action": {
	          "shape": "S17"
	        }
	      }
	    },
	    "S1g": {
	      "type": "structure",
	      "required": [
	        "XssMatchSetId",
	        "XssMatchTuples"
	      ],
	      "members": {
	        "XssMatchSetId": {},
	        "Name": {},
	        "XssMatchTuples": {
	          "type": "list",
	          "member": {
	            "shape": "S1i"
	          }
	        }
	      }
	    },
	    "S1i": {
	      "type": "structure",
	      "required": [
	        "FieldToMatch",
	        "TextTransformation"
	      ],
	      "members": {
	        "FieldToMatch": {
	          "shape": "S9"
	        },
	        "TextTransformation": {}
	      }
	    },
	    "S29": {
	      "type": "structure",
	      "required": [
	        "StartTime",
	        "EndTime"
	      ],
	      "members": {
	        "StartTime": {
	          "type": "timestamp"
	        },
	        "EndTime": {
	          "type": "timestamp"
	        }
	      }
	    }
	  }
	}
	},{}],136:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['acm'] = {};
	AWS.ACM = Service.defineService('acm', ['2015-12-08']);
	Object.defineProperty(apiLoader.services['acm'], '2015-12-08', {
	  get: function get() {
	    var model = require('../apis/acm-2015-12-08.min.json');
	    model.paginators = require('../apis/acm-2015-12-08.paginators.json').pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.ACM;
	
	},{"../apis/acm-2015-12-08.min.json":1,"../apis/acm-2015-12-08.paginators.json":2,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],137:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['apigateway'] = {};
	AWS.APIGateway = Service.defineService('apigateway', ['2015-07-09']);
	require('../lib/services/apigateway');
	Object.defineProperty(apiLoader.services['apigateway'], '2015-07-09', {
	  get: function get() {
	    var model = require('../apis/apigateway-2015-07-09.min.json');
	    model.paginators = require('../apis/apigateway-2015-07-09.paginators.json').pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.APIGateway;
	
	},{"../apis/apigateway-2015-07-09.min.json":3,"../apis/apigateway-2015-07-09.paginators.json":4,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239,"../lib/services/apigateway":240}],138:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['applicationautoscaling'] = {};
	AWS.ApplicationAutoScaling = Service.defineService('applicationautoscaling', ['2016-02-06']);
	Object.defineProperty(apiLoader.services['applicationautoscaling'], '2016-02-06', {
	  get: function get() {
	    var model = require('../apis/application-autoscaling-2016-02-06.min.json');
	    model.paginators = require('../apis/application-autoscaling-2016-02-06.paginators.json').pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.ApplicationAutoScaling;
	
	},{"../apis/application-autoscaling-2016-02-06.min.json":5,"../apis/application-autoscaling-2016-02-06.paginators.json":6,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],139:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['autoscaling'] = {};
	AWS.AutoScaling = Service.defineService('autoscaling', ['2011-01-01']);
	Object.defineProperty(apiLoader.services['autoscaling'], '2011-01-01', {
	  get: function get() {
	    var model = require('../apis/autoscaling-2011-01-01.min.json');
	    model.paginators = require('../apis/autoscaling-2011-01-01.paginators.json').pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.AutoScaling;
	
	},{"../apis/autoscaling-2011-01-01.min.json":7,"../apis/autoscaling-2011-01-01.paginators.json":8,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],140:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	
	module.exports = {
	  ACM: require('./acm'),
	  APIGateway: require('./apigateway'),
	  ApplicationAutoScaling: require('./applicationautoscaling'),
	  AutoScaling: require('./autoscaling'),
	  CloudFormation: require('./cloudformation'),
	  CloudFront: require('./cloudfront'),
	  CloudHSM: require('./cloudhsm'),
	  CloudTrail: require('./cloudtrail'),
	  CloudWatch: require('./cloudwatch'),
	  CloudWatchEvents: require('./cloudwatchevents'),
	  CloudWatchLogs: require('./cloudwatchlogs'),
	  CodeCommit: require('./codecommit'),
	  CodeDeploy: require('./codedeploy'),
	  CodePipeline: require('./codepipeline'),
	  CognitoIdentity: require('./cognitoidentity'),
	  CognitoIdentityServiceProvider: require('./cognitoidentityserviceprovider'),
	  CognitoSync: require('./cognitosync'),
	  ConfigService: require('./configservice'),
	  CUR: require('./cur'),
	  DeviceFarm: require('./devicefarm'),
	  DirectConnect: require('./directconnect'),
	  DynamoDB: require('./dynamodb'),
	  DynamoDBStreams: require('./dynamodbstreams'),
	  EC2: require('./ec2'),
	  ECR: require('./ecr'),
	  ECS: require('./ecs'),
	  ElastiCache: require('./elasticache'),
	  ElasticBeanstalk: require('./elasticbeanstalk'),
	  ELB: require('./elb'),
	  ELBv2: require('./elbv2'),
	  EMR: require('./emr'),
	  ElasticTranscoder: require('./elastictranscoder'),
	  Firehose: require('./firehose'),
	  GameLift: require('./gamelift'),
	  Inspector: require('./inspector'),
	  Iot: require('./iot'),
	  IotData: require('./iotdata'),
	  Kinesis: require('./kinesis'),
	  KMS: require('./kms'),
	  Lambda: require('./lambda'),
	  LexRuntime: require('./lexruntime'),
	  MachineLearning: require('./machinelearning'),
	  MarketplaceCommerceAnalytics: require('./marketplacecommerceanalytics'),
	  MobileAnalytics: require('./mobileanalytics'),
	  OpsWorks: require('./opsworks'),
	  Polly: require('./polly'),
	  RDS: require('./rds'),
	  Redshift: require('./redshift'),
	  Rekognition: require('./rekognition'),
	  Route53: require('./route53'),
	  Route53Domains: require('./route53domains'),
	  S3: require('./s3'),
	  ServiceCatalog: require('./servicecatalog'),
	  SES: require('./ses'),
	  SNS: require('./sns'),
	  SQS: require('./sqs'),
	  SSM: require('./ssm'),
	  StorageGateway: require('./storagegateway'),
	  STS: require('./sts'),
	  WAF: require('./waf')
	};
	},{"../lib/core":201,"../lib/node_loader":198,"./acm":136,"./apigateway":137,"./applicationautoscaling":138,"./autoscaling":139,"./cloudformation":141,"./cloudfront":142,"./cloudhsm":143,"./cloudtrail":144,"./cloudwatch":145,"./cloudwatchevents":146,"./cloudwatchlogs":147,"./codecommit":148,"./codedeploy":149,"./codepipeline":150,"./cognitoidentity":151,"./cognitoidentityserviceprovider":152,"./cognitosync":153,"./configservice":154,"./cur":155,"./devicefarm":156,"./directconnect":157,"./dynamodb":158,"./dynamodbstreams":159,"./ec2":160,"./ecr":161,"./ecs":162,"./elasticache":163,"./elasticbeanstalk":164,"./elastictranscoder":165,"./elb":166,"./elbv2":167,"./emr":168,"./firehose":169,"./gamelift":170,"./inspector":171,"./iot":172,"./iotdata":173,"./kinesis":174,"./kms":175,"./lambda":176,"./lexruntime":177,"./machinelearning":178,"./marketplacecommerceanalytics":179,"./mobileanalytics":180,"./opsworks":181,"./polly":182,"./rds":183,"./redshift":184,"./rekognition":185,"./route53":186,"./route53domains":187,"./s3":188,"./servicecatalog":189,"./ses":190,"./sns":191,"./sqs":192,"./ssm":193,"./storagegateway":194,"./sts":195,"./waf":196}],141:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['cloudformation'] = {};
	AWS.CloudFormation = Service.defineService('cloudformation', ['2010-05-15']);
	Object.defineProperty(apiLoader.services['cloudformation'], '2010-05-15', {
	  get: function get() {
	    var model = require('../apis/cloudformation-2010-05-15.min.json');
	    model.paginators = require('../apis/cloudformation-2010-05-15.paginators.json').pagination;
	    model.waiters = require('../apis/cloudformation-2010-05-15.waiters2.json').waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.CloudFormation;
	
	},{"../apis/cloudformation-2010-05-15.min.json":9,"../apis/cloudformation-2010-05-15.paginators.json":10,"../apis/cloudformation-2010-05-15.waiters2.json":11,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],142:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['cloudfront'] = {};
	AWS.CloudFront = Service.defineService('cloudfront', ['2013-05-12*', '2013-11-11*', '2014-05-31*', '2014-10-21*', '2014-11-06*', '2015-04-17*', '2015-07-27*', '2015-09-17*', '2016-01-13*', '2016-01-28*', '2016-08-01*', '2016-08-20*', '2016-09-07*', '2016-09-29*', '2016-11-25']);
	require('../lib/services/cloudfront');
	Object.defineProperty(apiLoader.services['cloudfront'], '2016-11-25', {
	  get: function get() {
	    var model = require('../apis/cloudfront-2016-11-25.min.json');
	    model.paginators = require('../apis/cloudfront-2016-11-25.paginators.json').pagination;
	    model.waiters = require('../apis/cloudfront-2016-11-25.waiters2.json').waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.CloudFront;
	
	},{"../apis/cloudfront-2016-11-25.min.json":12,"../apis/cloudfront-2016-11-25.paginators.json":13,"../apis/cloudfront-2016-11-25.waiters2.json":14,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239,"../lib/services/cloudfront":241}],143:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['cloudhsm'] = {};
	AWS.CloudHSM = Service.defineService('cloudhsm', ['2014-05-30']);
	Object.defineProperty(apiLoader.services['cloudhsm'], '2014-05-30', {
	  get: function get() {
	    var model = require('../apis/cloudhsm-2014-05-30.min.json');
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.CloudHSM;
	
	},{"../apis/cloudhsm-2014-05-30.min.json":15,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],144:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['cloudtrail'] = {};
	AWS.CloudTrail = Service.defineService('cloudtrail', ['2013-11-01']);
	Object.defineProperty(apiLoader.services['cloudtrail'], '2013-11-01', {
	  get: function get() {
	    var model = require('../apis/cloudtrail-2013-11-01.min.json');
	    model.paginators = require('../apis/cloudtrail-2013-11-01.paginators.json').pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.CloudTrail;
	
	},{"../apis/cloudtrail-2013-11-01.min.json":16,"../apis/cloudtrail-2013-11-01.paginators.json":17,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],145:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['cloudwatch'] = {};
	AWS.CloudWatch = Service.defineService('cloudwatch', ['2010-08-01']);
	Object.defineProperty(apiLoader.services['cloudwatch'], '2010-08-01', {
	  get: function get() {
	    var model = require('../apis/monitoring-2010-08-01.min.json');
	    model.paginators = require('../apis/monitoring-2010-08-01.paginators.json').pagination;
	    model.waiters = require('../apis/monitoring-2010-08-01.waiters2.json').waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.CloudWatch;
	
	},{"../apis/monitoring-2010-08-01.min.json":92,"../apis/monitoring-2010-08-01.paginators.json":93,"../apis/monitoring-2010-08-01.waiters2.json":94,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],146:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['cloudwatchevents'] = {};
	AWS.CloudWatchEvents = Service.defineService('cloudwatchevents', ['2014-02-03*', '2015-10-07']);
	Object.defineProperty(apiLoader.services['cloudwatchevents'], '2015-10-07', {
	  get: function get() {
	    var model = require('../apis/events-2015-10-07.min.json');
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.CloudWatchEvents;
	
	},{"../apis/events-2015-10-07.min.json":69,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],147:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['cloudwatchlogs'] = {};
	AWS.CloudWatchLogs = Service.defineService('cloudwatchlogs', ['2014-03-28']);
	Object.defineProperty(apiLoader.services['cloudwatchlogs'], '2014-03-28', {
	  get: function get() {
	    var model = require('../apis/logs-2014-03-28.min.json');
	    model.paginators = require('../apis/logs-2014-03-28.paginators.json').pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.CloudWatchLogs;
	
	},{"../apis/logs-2014-03-28.min.json":84,"../apis/logs-2014-03-28.paginators.json":85,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],148:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['codecommit'] = {};
	AWS.CodeCommit = Service.defineService('codecommit', ['2015-04-13']);
	Object.defineProperty(apiLoader.services['codecommit'], '2015-04-13', {
	  get: function get() {
	    var model = require('../apis/codecommit-2015-04-13.min.json');
	    model.paginators = require('../apis/codecommit-2015-04-13.paginators.json').pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.CodeCommit;
	
	},{"../apis/codecommit-2015-04-13.min.json":18,"../apis/codecommit-2015-04-13.paginators.json":19,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],149:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['codedeploy'] = {};
	AWS.CodeDeploy = Service.defineService('codedeploy', ['2014-10-06']);
	Object.defineProperty(apiLoader.services['codedeploy'], '2014-10-06', {
	  get: function get() {
	    var model = require('../apis/codedeploy-2014-10-06.min.json');
	    model.paginators = require('../apis/codedeploy-2014-10-06.paginators.json').pagination;
	    model.waiters = require('../apis/codedeploy-2014-10-06.waiters2.json').waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.CodeDeploy;
	
	},{"../apis/codedeploy-2014-10-06.min.json":20,"../apis/codedeploy-2014-10-06.paginators.json":21,"../apis/codedeploy-2014-10-06.waiters2.json":22,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],150:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['codepipeline'] = {};
	AWS.CodePipeline = Service.defineService('codepipeline', ['2015-07-09']);
	Object.defineProperty(apiLoader.services['codepipeline'], '2015-07-09', {
	  get: function get() {
	    var model = require('../apis/codepipeline-2015-07-09.min.json');
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.CodePipeline;
	
	},{"../apis/codepipeline-2015-07-09.min.json":23,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],151:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['cognitoidentity'] = {};
	AWS.CognitoIdentity = Service.defineService('cognitoidentity', ['2014-06-30']);
	require('../lib/services/cognitoidentity');
	Object.defineProperty(apiLoader.services['cognitoidentity'], '2014-06-30', {
	  get: function get() {
	    var model = require('../apis/cognito-identity-2014-06-30.min.json');
	    model.paginators = require('../apis/cognito-identity-2014-06-30.paginators.json').pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.CognitoIdentity;
	
	},{"../apis/cognito-identity-2014-06-30.min.json":24,"../apis/cognito-identity-2014-06-30.paginators.json":25,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239,"../lib/services/cognitoidentity":242}],152:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['cognitoidentityserviceprovider'] = {};
	AWS.CognitoIdentityServiceProvider = Service.defineService('cognitoidentityserviceprovider', ['2016-04-18']);
	Object.defineProperty(apiLoader.services['cognitoidentityserviceprovider'], '2016-04-18', {
	  get: function get() {
	    var model = require('../apis/cognito-idp-2016-04-18.min.json');
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.CognitoIdentityServiceProvider;
	
	},{"../apis/cognito-idp-2016-04-18.min.json":26,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],153:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['cognitosync'] = {};
	AWS.CognitoSync = Service.defineService('cognitosync', ['2014-06-30']);
	Object.defineProperty(apiLoader.services['cognitosync'], '2014-06-30', {
	  get: function get() {
	    var model = require('../apis/cognito-sync-2014-06-30.min.json');
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.CognitoSync;
	
	},{"../apis/cognito-sync-2014-06-30.min.json":27,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],154:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['configservice'] = {};
	AWS.ConfigService = Service.defineService('configservice', ['2014-11-12']);
	Object.defineProperty(apiLoader.services['configservice'], '2014-11-12', {
	  get: function get() {
	    var model = require('../apis/config-2014-11-12.min.json');
	    model.paginators = require('../apis/config-2014-11-12.paginators.json').pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.ConfigService;
	
	},{"../apis/config-2014-11-12.min.json":28,"../apis/config-2014-11-12.paginators.json":29,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],155:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['cur'] = {};
	AWS.CUR = Service.defineService('cur', ['2017-01-06']);
	Object.defineProperty(apiLoader.services['cur'], '2017-01-06', {
	  get: function get() {
	    var model = require('../apis/cur-2017-01-06.min.json');
	    model.paginators = require('../apis/cur-2017-01-06.paginators.json').pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.CUR;
	
	},{"../apis/cur-2017-01-06.min.json":30,"../apis/cur-2017-01-06.paginators.json":31,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],156:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['devicefarm'] = {};
	AWS.DeviceFarm = Service.defineService('devicefarm', ['2015-06-23']);
	Object.defineProperty(apiLoader.services['devicefarm'], '2015-06-23', {
	  get: function get() {
	    var model = require('../apis/devicefarm-2015-06-23.min.json');
	    model.paginators = require('../apis/devicefarm-2015-06-23.paginators.json').pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.DeviceFarm;
	
	},{"../apis/devicefarm-2015-06-23.min.json":32,"../apis/devicefarm-2015-06-23.paginators.json":33,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],157:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['directconnect'] = {};
	AWS.DirectConnect = Service.defineService('directconnect', ['2012-10-25']);
	Object.defineProperty(apiLoader.services['directconnect'], '2012-10-25', {
	  get: function get() {
	    var model = require('../apis/directconnect-2012-10-25.min.json');
	    model.paginators = require('../apis/directconnect-2012-10-25.paginators.json').pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.DirectConnect;
	
	},{"../apis/directconnect-2012-10-25.min.json":34,"../apis/directconnect-2012-10-25.paginators.json":35,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],158:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['dynamodb'] = {};
	AWS.DynamoDB = Service.defineService('dynamodb', ['2011-12-05', '2012-08-10']);
	require('../lib/services/dynamodb');
	Object.defineProperty(apiLoader.services['dynamodb'], '2011-12-05', {
	  get: function get() {
	    var model = require('../apis/dynamodb-2011-12-05.min.json');
	    model.paginators = require('../apis/dynamodb-2011-12-05.paginators.json').pagination;
	    model.waiters = require('../apis/dynamodb-2011-12-05.waiters2.json').waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	Object.defineProperty(apiLoader.services['dynamodb'], '2012-08-10', {
	  get: function get() {
	    var model = require('../apis/dynamodb-2012-08-10.min.json');
	    model.paginators = require('../apis/dynamodb-2012-08-10.paginators.json').pagination;
	    model.waiters = require('../apis/dynamodb-2012-08-10.waiters2.json').waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.DynamoDB;
	
	},{"../apis/dynamodb-2011-12-05.min.json":36,"../apis/dynamodb-2011-12-05.paginators.json":37,"../apis/dynamodb-2011-12-05.waiters2.json":38,"../apis/dynamodb-2012-08-10.min.json":39,"../apis/dynamodb-2012-08-10.paginators.json":40,"../apis/dynamodb-2012-08-10.waiters2.json":41,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239,"../lib/services/dynamodb":243}],159:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['dynamodbstreams'] = {};
	AWS.DynamoDBStreams = Service.defineService('dynamodbstreams', ['2012-08-10']);
	Object.defineProperty(apiLoader.services['dynamodbstreams'], '2012-08-10', {
	  get: function get() {
	    var model = require('../apis/streams.dynamodb-2012-08-10.min.json');
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.DynamoDBStreams;
	
	},{"../apis/streams.dynamodb-2012-08-10.min.json":133,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],160:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['ec2'] = {};
	AWS.EC2 = Service.defineService('ec2', ['2013-06-15*', '2013-10-15*', '2014-02-01*', '2014-05-01*', '2014-06-15*', '2014-09-01*', '2014-10-01*', '2015-03-01*', '2015-04-15*', '2015-10-01*', '2016-04-01*', '2016-09-15*', '2016-11-15']);
	require('../lib/services/ec2');
	Object.defineProperty(apiLoader.services['ec2'], '2016-11-15', {
	  get: function get() {
	    var model = require('../apis/ec2-2016-11-15.min.json');
	    model.paginators = require('../apis/ec2-2016-11-15.paginators.json').pagination;
	    model.waiters = require('../apis/ec2-2016-11-15.waiters2.json').waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.EC2;
	
	},{"../apis/ec2-2016-11-15.min.json":42,"../apis/ec2-2016-11-15.paginators.json":43,"../apis/ec2-2016-11-15.waiters2.json":44,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239,"../lib/services/ec2":244}],161:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['ecr'] = {};
	AWS.ECR = Service.defineService('ecr', ['2015-09-21']);
	Object.defineProperty(apiLoader.services['ecr'], '2015-09-21', {
	  get: function get() {
	    var model = require('../apis/ecr-2015-09-21.min.json');
	    model.paginators = require('../apis/ecr-2015-09-21.paginators.json').pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.ECR;
	
	},{"../apis/ecr-2015-09-21.min.json":45,"../apis/ecr-2015-09-21.paginators.json":46,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],162:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['ecs'] = {};
	AWS.ECS = Service.defineService('ecs', ['2014-11-13']);
	Object.defineProperty(apiLoader.services['ecs'], '2014-11-13', {
	  get: function get() {
	    var model = require('../apis/ecs-2014-11-13.min.json');
	    model.paginators = require('../apis/ecs-2014-11-13.paginators.json').pagination;
	    model.waiters = require('../apis/ecs-2014-11-13.waiters2.json').waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.ECS;
	
	},{"../apis/ecs-2014-11-13.min.json":47,"../apis/ecs-2014-11-13.paginators.json":48,"../apis/ecs-2014-11-13.waiters2.json":49,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],163:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['elasticache'] = {};
	AWS.ElastiCache = Service.defineService('elasticache', ['2012-11-15*', '2014-03-24*', '2014-07-15*', '2014-09-30*', '2015-02-02']);
	Object.defineProperty(apiLoader.services['elasticache'], '2015-02-02', {
	  get: function get() {
	    var model = require('../apis/elasticache-2015-02-02.min.json');
	    model.paginators = require('../apis/elasticache-2015-02-02.paginators.json').pagination;
	    model.waiters = require('../apis/elasticache-2015-02-02.waiters2.json').waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.ElastiCache;
	
	},{"../apis/elasticache-2015-02-02.min.json":50,"../apis/elasticache-2015-02-02.paginators.json":51,"../apis/elasticache-2015-02-02.waiters2.json":52,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],164:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['elasticbeanstalk'] = {};
	AWS.ElasticBeanstalk = Service.defineService('elasticbeanstalk', ['2010-12-01']);
	Object.defineProperty(apiLoader.services['elasticbeanstalk'], '2010-12-01', {
	  get: function get() {
	    var model = require('../apis/elasticbeanstalk-2010-12-01.min.json');
	    model.paginators = require('../apis/elasticbeanstalk-2010-12-01.paginators.json').pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.ElasticBeanstalk;
	
	},{"../apis/elasticbeanstalk-2010-12-01.min.json":53,"../apis/elasticbeanstalk-2010-12-01.paginators.json":54,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],165:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['elastictranscoder'] = {};
	AWS.ElasticTranscoder = Service.defineService('elastictranscoder', ['2012-09-25']);
	Object.defineProperty(apiLoader.services['elastictranscoder'], '2012-09-25', {
	  get: function get() {
	    var model = require('../apis/elastictranscoder-2012-09-25.min.json');
	    model.paginators = require('../apis/elastictranscoder-2012-09-25.paginators.json').pagination;
	    model.waiters = require('../apis/elastictranscoder-2012-09-25.waiters2.json').waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.ElasticTranscoder;
	
	},{"../apis/elastictranscoder-2012-09-25.min.json":63,"../apis/elastictranscoder-2012-09-25.paginators.json":64,"../apis/elastictranscoder-2012-09-25.waiters2.json":65,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],166:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['elb'] = {};
	AWS.ELB = Service.defineService('elb', ['2012-06-01']);
	Object.defineProperty(apiLoader.services['elb'], '2012-06-01', {
	  get: function get() {
	    var model = require('../apis/elasticloadbalancing-2012-06-01.min.json');
	    model.paginators = require('../apis/elasticloadbalancing-2012-06-01.paginators.json').pagination;
	    model.waiters = require('../apis/elasticloadbalancing-2012-06-01.waiters2.json').waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.ELB;
	
	},{"../apis/elasticloadbalancing-2012-06-01.min.json":55,"../apis/elasticloadbalancing-2012-06-01.paginators.json":56,"../apis/elasticloadbalancing-2012-06-01.waiters2.json":57,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],167:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['elbv2'] = {};
	AWS.ELBv2 = Service.defineService('elbv2', ['2015-12-01']);
	Object.defineProperty(apiLoader.services['elbv2'], '2015-12-01', {
	  get: function get() {
	    var model = require('../apis/elasticloadbalancingv2-2015-12-01.min.json');
	    model.paginators = require('../apis/elasticloadbalancingv2-2015-12-01.paginators.json').pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.ELBv2;
	
	},{"../apis/elasticloadbalancingv2-2015-12-01.min.json":58,"../apis/elasticloadbalancingv2-2015-12-01.paginators.json":59,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],168:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['emr'] = {};
	AWS.EMR = Service.defineService('emr', ['2009-03-31']);
	Object.defineProperty(apiLoader.services['emr'], '2009-03-31', {
	  get: function get() {
	    var model = require('../apis/elasticmapreduce-2009-03-31.min.json');
	    model.paginators = require('../apis/elasticmapreduce-2009-03-31.paginators.json').pagination;
	    model.waiters = require('../apis/elasticmapreduce-2009-03-31.waiters2.json').waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.EMR;
	
	},{"../apis/elasticmapreduce-2009-03-31.min.json":60,"../apis/elasticmapreduce-2009-03-31.paginators.json":61,"../apis/elasticmapreduce-2009-03-31.waiters2.json":62,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],169:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['firehose'] = {};
	AWS.Firehose = Service.defineService('firehose', ['2015-08-04']);
	Object.defineProperty(apiLoader.services['firehose'], '2015-08-04', {
	  get: function get() {
	    var model = require('../apis/firehose-2015-08-04.min.json');
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.Firehose;
	
	},{"../apis/firehose-2015-08-04.min.json":70,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],170:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['gamelift'] = {};
	AWS.GameLift = Service.defineService('gamelift', ['2015-10-01']);
	Object.defineProperty(apiLoader.services['gamelift'], '2015-10-01', {
	  get: function get() {
	    var model = require('../apis/gamelift-2015-10-01.min.json');
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.GameLift;
	
	},{"../apis/gamelift-2015-10-01.min.json":71,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],171:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['inspector'] = {};
	AWS.Inspector = Service.defineService('inspector', ['2015-08-18*', '2016-02-16']);
	Object.defineProperty(apiLoader.services['inspector'], '2016-02-16', {
	  get: function get() {
	    var model = require('../apis/inspector-2016-02-16.min.json');
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.Inspector;
	
	},{"../apis/inspector-2016-02-16.min.json":72,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],172:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['iot'] = {};
	AWS.Iot = Service.defineService('iot', ['2015-05-28']);
	Object.defineProperty(apiLoader.services['iot'], '2015-05-28', {
	  get: function get() {
	    var model = require('../apis/iot-2015-05-28.min.json');
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.Iot;
	
	},{"../apis/iot-2015-05-28.min.json":73,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],173:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['iotdata'] = {};
	AWS.IotData = Service.defineService('iotdata', ['2015-05-28']);
	require('../lib/services/iotdata');
	Object.defineProperty(apiLoader.services['iotdata'], '2015-05-28', {
	  get: function get() {
	    var model = require('../apis/iot-data-2015-05-28.min.json');
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.IotData;
	
	},{"../apis/iot-data-2015-05-28.min.json":74,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239,"../lib/services/iotdata":245}],174:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['kinesis'] = {};
	AWS.Kinesis = Service.defineService('kinesis', ['2013-12-02']);
	Object.defineProperty(apiLoader.services['kinesis'], '2013-12-02', {
	  get: function get() {
	    var model = require('../apis/kinesis-2013-12-02.min.json');
	    model.paginators = require('../apis/kinesis-2013-12-02.paginators.json').pagination;
	    model.waiters = require('../apis/kinesis-2013-12-02.waiters2.json').waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.Kinesis;
	
	},{"../apis/kinesis-2013-12-02.min.json":75,"../apis/kinesis-2013-12-02.paginators.json":76,"../apis/kinesis-2013-12-02.waiters2.json":77,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],175:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['kms'] = {};
	AWS.KMS = Service.defineService('kms', ['2014-11-01']);
	Object.defineProperty(apiLoader.services['kms'], '2014-11-01', {
	  get: function get() {
	    var model = require('../apis/kms-2014-11-01.min.json');
	    model.paginators = require('../apis/kms-2014-11-01.paginators.json').pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.KMS;
	
	},{"../apis/kms-2014-11-01.min.json":78,"../apis/kms-2014-11-01.paginators.json":79,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],176:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['lambda'] = {};
	AWS.Lambda = Service.defineService('lambda', ['2014-11-11', '2015-03-31']);
	Object.defineProperty(apiLoader.services['lambda'], '2014-11-11', {
	  get: function get() {
	    var model = require('../apis/lambda-2014-11-11.min.json');
	    model.paginators = require('../apis/lambda-2014-11-11.paginators.json').pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	Object.defineProperty(apiLoader.services['lambda'], '2015-03-31', {
	  get: function get() {
	    var model = require('../apis/lambda-2015-03-31.min.json');
	    model.paginators = require('../apis/lambda-2015-03-31.paginators.json').pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.Lambda;
	
	},{"../apis/lambda-2014-11-11.min.json":80,"../apis/lambda-2014-11-11.paginators.json":81,"../apis/lambda-2015-03-31.min.json":82,"../apis/lambda-2015-03-31.paginators.json":83,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],177:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['lexruntime'] = {};
	AWS.LexRuntime = Service.defineService('lexruntime', ['2016-11-28']);
	Object.defineProperty(apiLoader.services['lexruntime'], '2016-11-28', {
	  get: function get() {
	    var model = require('../apis/runtime.lex-2016-11-28.min.json');
	    model.paginators = require('../apis/runtime.lex-2016-11-28.paginators.json').pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.LexRuntime;
	
	},{"../apis/runtime.lex-2016-11-28.min.json":119,"../apis/runtime.lex-2016-11-28.paginators.json":120,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],178:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['machinelearning'] = {};
	AWS.MachineLearning = Service.defineService('machinelearning', ['2014-12-12']);
	require('../lib/services/machinelearning');
	Object.defineProperty(apiLoader.services['machinelearning'], '2014-12-12', {
	  get: function get() {
	    var model = require('../apis/machinelearning-2014-12-12.min.json');
	    model.paginators = require('../apis/machinelearning-2014-12-12.paginators.json').pagination;
	    model.waiters = require('../apis/machinelearning-2014-12-12.waiters2.json').waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.MachineLearning;
	
	},{"../apis/machinelearning-2014-12-12.min.json":86,"../apis/machinelearning-2014-12-12.paginators.json":87,"../apis/machinelearning-2014-12-12.waiters2.json":88,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239,"../lib/services/machinelearning":246}],179:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['marketplacecommerceanalytics'] = {};
	AWS.MarketplaceCommerceAnalytics = Service.defineService('marketplacecommerceanalytics', ['2015-07-01']);
	Object.defineProperty(apiLoader.services['marketplacecommerceanalytics'], '2015-07-01', {
	  get: function get() {
	    var model = require('../apis/marketplacecommerceanalytics-2015-07-01.min.json');
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.MarketplaceCommerceAnalytics;
	
	},{"../apis/marketplacecommerceanalytics-2015-07-01.min.json":89,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],180:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['mobileanalytics'] = {};
	AWS.MobileAnalytics = Service.defineService('mobileanalytics', ['2014-06-05']);
	Object.defineProperty(apiLoader.services['mobileanalytics'], '2014-06-05', {
	  get: function get() {
	    var model = require('../apis/mobileanalytics-2014-06-05.min.json');
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.MobileAnalytics;
	
	},{"../apis/mobileanalytics-2014-06-05.min.json":91,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],181:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['opsworks'] = {};
	AWS.OpsWorks = Service.defineService('opsworks', ['2013-02-18']);
	Object.defineProperty(apiLoader.services['opsworks'], '2013-02-18', {
	  get: function get() {
	    var model = require('../apis/opsworks-2013-02-18.min.json');
	    model.paginators = require('../apis/opsworks-2013-02-18.paginators.json').pagination;
	    model.waiters = require('../apis/opsworks-2013-02-18.waiters2.json').waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.OpsWorks;
	
	},{"../apis/opsworks-2013-02-18.min.json":95,"../apis/opsworks-2013-02-18.paginators.json":96,"../apis/opsworks-2013-02-18.waiters2.json":97,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],182:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['polly'] = {};
	AWS.Polly = Service.defineService('polly', ['2016-06-10']);
	require('../lib/services/polly');
	Object.defineProperty(apiLoader.services['polly'], '2016-06-10', {
	  get: function get() {
	    var model = require('../apis/polly-2016-06-10.min.json');
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.Polly;
	
	},{"../apis/polly-2016-06-10.min.json":98,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239,"../lib/services/polly":247}],183:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['rds'] = {};
	AWS.RDS = Service.defineService('rds', ['2013-01-10', '2013-02-12', '2013-09-09', '2014-09-01*', '2014-10-31']);
	require('../lib/services/rds');
	Object.defineProperty(apiLoader.services['rds'], '2013-01-10', {
	  get: function get() {
	    var model = require('../apis/rds-2013-01-10.min.json');
	    model.paginators = require('../apis/rds-2013-01-10.paginators.json').pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	Object.defineProperty(apiLoader.services['rds'], '2013-02-12', {
	  get: function get() {
	    var model = require('../apis/rds-2013-02-12.min.json');
	    model.paginators = require('../apis/rds-2013-02-12.paginators.json').pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	Object.defineProperty(apiLoader.services['rds'], '2013-09-09', {
	  get: function get() {
	    var model = require('../apis/rds-2013-09-09.min.json');
	    model.paginators = require('../apis/rds-2013-09-09.paginators.json').pagination;
	    model.waiters = require('../apis/rds-2013-09-09.waiters2.json').waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	Object.defineProperty(apiLoader.services['rds'], '2014-10-31', {
	  get: function get() {
	    var model = require('../apis/rds-2014-10-31.min.json');
	    model.paginators = require('../apis/rds-2014-10-31.paginators.json').pagination;
	    model.waiters = require('../apis/rds-2014-10-31.waiters2.json').waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.RDS;
	
	},{"../apis/rds-2013-01-10.min.json":99,"../apis/rds-2013-01-10.paginators.json":100,"../apis/rds-2013-02-12.min.json":101,"../apis/rds-2013-02-12.paginators.json":102,"../apis/rds-2013-09-09.min.json":103,"../apis/rds-2013-09-09.paginators.json":104,"../apis/rds-2013-09-09.waiters2.json":105,"../apis/rds-2014-10-31.min.json":106,"../apis/rds-2014-10-31.paginators.json":107,"../apis/rds-2014-10-31.waiters2.json":108,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239,"../lib/services/rds":248}],184:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['redshift'] = {};
	AWS.Redshift = Service.defineService('redshift', ['2012-12-01']);
	Object.defineProperty(apiLoader.services['redshift'], '2012-12-01', {
	  get: function get() {
	    var model = require('../apis/redshift-2012-12-01.min.json');
	    model.paginators = require('../apis/redshift-2012-12-01.paginators.json').pagination;
	    model.waiters = require('../apis/redshift-2012-12-01.waiters2.json').waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.Redshift;
	
	},{"../apis/redshift-2012-12-01.min.json":109,"../apis/redshift-2012-12-01.paginators.json":110,"../apis/redshift-2012-12-01.waiters2.json":111,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],185:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['rekognition'] = {};
	AWS.Rekognition = Service.defineService('rekognition', ['2016-06-27']);
	Object.defineProperty(apiLoader.services['rekognition'], '2016-06-27', {
	  get: function get() {
	    var model = require('../apis/rekognition-2016-06-27.min.json');
	    model.paginators = require('../apis/rekognition-2016-06-27.paginators.json').pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.Rekognition;
	
	},{"../apis/rekognition-2016-06-27.min.json":112,"../apis/rekognition-2016-06-27.paginators.json":113,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],186:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['route53'] = {};
	AWS.Route53 = Service.defineService('route53', ['2013-04-01']);
	require('../lib/services/route53');
	Object.defineProperty(apiLoader.services['route53'], '2013-04-01', {
	  get: function get() {
	    var model = require('../apis/route53-2013-04-01.min.json');
	    model.paginators = require('../apis/route53-2013-04-01.paginators.json').pagination;
	    model.waiters = require('../apis/route53-2013-04-01.waiters2.json').waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.Route53;
	
	},{"../apis/route53-2013-04-01.min.json":114,"../apis/route53-2013-04-01.paginators.json":115,"../apis/route53-2013-04-01.waiters2.json":116,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239,"../lib/services/route53":249}],187:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['route53domains'] = {};
	AWS.Route53Domains = Service.defineService('route53domains', ['2014-05-15']);
	Object.defineProperty(apiLoader.services['route53domains'], '2014-05-15', {
	  get: function get() {
	    var model = require('../apis/route53domains-2014-05-15.min.json');
	    model.paginators = require('../apis/route53domains-2014-05-15.paginators.json').pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.Route53Domains;
	
	},{"../apis/route53domains-2014-05-15.min.json":117,"../apis/route53domains-2014-05-15.paginators.json":118,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],188:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['s3'] = {};
	AWS.S3 = Service.defineService('s3', ['2006-03-01']);
	require('../lib/services/s3');
	Object.defineProperty(apiLoader.services['s3'], '2006-03-01', {
	  get: function get() {
	    var model = require('../apis/s3-2006-03-01.min.json');
	    model.paginators = require('../apis/s3-2006-03-01.paginators.json').pagination;
	    model.waiters = require('../apis/s3-2006-03-01.waiters2.json').waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.S3;
	
	},{"../apis/s3-2006-03-01.min.json":121,"../apis/s3-2006-03-01.paginators.json":122,"../apis/s3-2006-03-01.waiters2.json":123,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239,"../lib/services/s3":250}],189:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['servicecatalog'] = {};
	AWS.ServiceCatalog = Service.defineService('servicecatalog', ['2015-12-10']);
	Object.defineProperty(apiLoader.services['servicecatalog'], '2015-12-10', {
	  get: function get() {
	    var model = require('../apis/servicecatalog-2015-12-10.min.json');
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.ServiceCatalog;
	
	},{"../apis/servicecatalog-2015-12-10.min.json":124,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],190:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['ses'] = {};
	AWS.SES = Service.defineService('ses', ['2010-12-01']);
	Object.defineProperty(apiLoader.services['ses'], '2010-12-01', {
	  get: function get() {
	    var model = require('../apis/email-2010-12-01.min.json');
	    model.paginators = require('../apis/email-2010-12-01.paginators.json').pagination;
	    model.waiters = require('../apis/email-2010-12-01.waiters2.json').waiters;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.SES;
	
	},{"../apis/email-2010-12-01.min.json":66,"../apis/email-2010-12-01.paginators.json":67,"../apis/email-2010-12-01.waiters2.json":68,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],191:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['sns'] = {};
	AWS.SNS = Service.defineService('sns', ['2010-03-31']);
	Object.defineProperty(apiLoader.services['sns'], '2010-03-31', {
	  get: function get() {
	    var model = require('../apis/sns-2010-03-31.min.json');
	    model.paginators = require('../apis/sns-2010-03-31.paginators.json').pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.SNS;
	
	},{"../apis/sns-2010-03-31.min.json":125,"../apis/sns-2010-03-31.paginators.json":126,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],192:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['sqs'] = {};
	AWS.SQS = Service.defineService('sqs', ['2012-11-05']);
	require('../lib/services/sqs');
	Object.defineProperty(apiLoader.services['sqs'], '2012-11-05', {
	  get: function get() {
	    var model = require('../apis/sqs-2012-11-05.min.json');
	    model.paginators = require('../apis/sqs-2012-11-05.paginators.json').pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.SQS;
	
	},{"../apis/sqs-2012-11-05.min.json":127,"../apis/sqs-2012-11-05.paginators.json":128,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239,"../lib/services/sqs":251}],193:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['ssm'] = {};
	AWS.SSM = Service.defineService('ssm', ['2014-11-06']);
	Object.defineProperty(apiLoader.services['ssm'], '2014-11-06', {
	  get: function get() {
	    var model = require('../apis/ssm-2014-11-06.min.json');
	    model.paginators = require('../apis/ssm-2014-11-06.paginators.json').pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.SSM;
	
	},{"../apis/ssm-2014-11-06.min.json":129,"../apis/ssm-2014-11-06.paginators.json":130,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],194:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['storagegateway'] = {};
	AWS.StorageGateway = Service.defineService('storagegateway', ['2013-06-30']);
	Object.defineProperty(apiLoader.services['storagegateway'], '2013-06-30', {
	  get: function get() {
	    var model = require('../apis/storagegateway-2013-06-30.min.json');
	    model.paginators = require('../apis/storagegateway-2013-06-30.paginators.json').pagination;
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.StorageGateway;
	
	},{"../apis/storagegateway-2013-06-30.min.json":131,"../apis/storagegateway-2013-06-30.paginators.json":132,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],195:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['sts'] = {};
	AWS.STS = Service.defineService('sts', ['2011-06-15']);
	require('../lib/services/sts');
	Object.defineProperty(apiLoader.services['sts'], '2011-06-15', {
	  get: function get() {
	    var model = require('../apis/sts-2011-06-15.min.json');
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.STS;
	
	},{"../apis/sts-2011-06-15.min.json":134,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239,"../lib/services/sts":252}],196:[function(require,module,exports){
	require('../lib/node_loader');
	var AWS = require('../lib/core');
	var Service = require('../lib/service');
	var apiLoader = require('../lib/api_loader');
	
	apiLoader.services['waf'] = {};
	AWS.WAF = Service.defineService('waf', ['2015-08-24']);
	Object.defineProperty(apiLoader.services['waf'], '2015-08-24', {
	  get: function get() {
	    var model = require('../apis/waf-2015-08-24.min.json');
	    return model;
	  },
	  enumerable: true,
	  configurable: true
	});
	
	module.exports = AWS.WAF;
	
	},{"../apis/waf-2015-08-24.min.json":135,"../lib/api_loader":197,"../lib/core":201,"../lib/node_loader":198,"../lib/service":239}],197:[function(require,module,exports){
	var AWS = require('./core');
	
	AWS.apiLoader = function(svc, version) {
	  if (!AWS.apiLoader.services.hasOwnProperty(svc)) {
	    throw new Error('InvalidService: Failed to load api for ' + svc);
	  }
	  return AWS.apiLoader.services[svc][version];
	};
	
	AWS.apiLoader.services = {};
	
	module.exports = AWS.apiLoader;
	},{"./core":201}],198:[function(require,module,exports){
	(function (process){
	var util = require('./util');
	
	util.crypto.lib = require('crypto-browserify');
	util.Buffer = require('buffer/').Buffer;
	util.url = require('url/');
	util.querystring = require('querystring/');
	
	var AWS = require('./core');
	
	require('./api_loader');
	
	AWS.XML.Parser = require('./xml/browser_parser');
	
	require('./http/xhr');
	
	if (typeof process === 'undefined') {
	  process = {
	    browser: true
	  };
	}
	}).call(this,require('_process'))
	},{"./api_loader":197,"./core":201,"./http/xhr":215,"./util":261,"./xml/browser_parser":262,"_process":266,"buffer/":274,"crypto-browserify":279,"querystring/":287,"url/":288}],199:[function(require,module,exports){
	var AWS = require('../core'),
	    url = AWS.util.url,
	    crypto = AWS.util.crypto.lib,
	    base64Encode = AWS.util.base64.encode,
	    inherit = AWS.util.inherit;
	
	var queryEncode = function (string) {
	    var replacements = {
	        '+': '-',
	        '=': '_',
	        '/': '~'
	    };
	    return string.replace(/[\+=\/]/g, function (match) {
	        return replacements[match];
	    });
	};
	
	var signPolicy = function (policy, privateKey) {
	    var sign = crypto.createSign('RSA-SHA1');
	    sign.write(policy);
	    return queryEncode(sign.sign(privateKey, 'base64'))
	};
	
	var signWithCannedPolicy = function (url, expires, keyPairId, privateKey) {
	    var policy = JSON.stringify({
	        Statement: [
	            {
	                Resource: url,
	                Condition: { DateLessThan: { 'AWS:EpochTime': expires } }
	            }
	        ]
	    });
	
	    return {
	        Expires: expires,
	        'Key-Pair-Id': keyPairId,
	        Signature: signPolicy(policy.toString(), privateKey)
	    };
	};
	
	var signWithCustomPolicy = function (policy, keyPairId, privateKey) {
	    policy = policy.replace(/\s/mg, policy);
	
	    return {
	        Policy: queryEncode(base64Encode(policy)),
	        'Key-Pair-Id': keyPairId,
	        Signature: signPolicy(policy, privateKey)
	    }
	};
	
	var determineScheme = function (url) {
	    var parts = url.split('://');
	    if (parts.length < 2) {
	        throw new Error('Invalid URL.');
	    }
	
	    return parts[0].replace('*', '');
	};
	
	var getRtmpUrl = function (rtmpUrl) {
	    var parsed = url.parse(rtmpUrl);
	    return parsed.path.replace(/^\//, '') + (parsed.hash || '');
	};
	
	var getResource = function (url) {
	    switch (determineScheme(url)) {
	        case 'http':
	        case 'https':
	            return url;
	        case 'rtmp':
	            return getRtmpUrl(url);
	        default:
	            throw new Error('Invalid URI scheme. Scheme must be one of'
	                + ' http, https, or rtmp');
	    }
	};
	
	var handleError = function (err, callback) {
	    if (!callback || typeof callback !== 'function') {
	        throw err;
	    }
	
	    callback(err);
	};
	
	var handleSuccess = function (result, callback) {
	    if (!callback || typeof callback !== 'function') {
	        return result;
	    }
	
	    callback(null, result);
	};
	
	AWS.CloudFront.Signer = inherit({
	
	    constructor: function Signer(keyPairId, privateKey) {
	        if (keyPairId === void 0 || privateKey === void 0) {
	            throw new Error('A key pair ID and private key are required');
	        }
	
	        this.keyPairId = keyPairId;
	        this.privateKey = privateKey;
	    },
	
	
	    getSignedCookie: function (options, cb) {
	        var signatureHash = 'policy' in options
	            ? signWithCustomPolicy(options.policy, this.keyPairId, this.privateKey)
	            : signWithCannedPolicy(options.url, options.expires, this.keyPairId, this.privateKey);
	
	        var cookieHash = {};
	        for (var key in signatureHash) {
	            if (Object.prototype.hasOwnProperty.call(signatureHash, key)) {
	                cookieHash['CloudFront-' + key] = signatureHash[key];
	            }
	        }
	
	        return handleSuccess(cookieHash, cb);
	    },
	
	
	    getSignedUrl: function (options, cb) {
	        try {
	            var resource = getResource(options.url);
	        } catch (err) {
	            return handleError(err, cb);
	        }
	
	        var parsedUrl = url.parse(options.url, true),
	            signatureHash = Object.prototype.hasOwnProperty.call(options, 'policy')
	                ? signWithCustomPolicy(options.policy, this.keyPairId, this.privateKey)
	                : signWithCannedPolicy(resource, options.expires, this.keyPairId, this.privateKey);
	
	        parsedUrl.search = null;
	        for (var key in signatureHash) {
	            if (Object.prototype.hasOwnProperty.call(signatureHash, key)) {
	                parsedUrl.query[key] = signatureHash[key];
	            }
	        }
	
	        try {
	            var signedUrl = determineScheme(options.url) === 'rtmp'
	                    ? getRtmpUrl(url.format(parsedUrl))
	                    : url.format(parsedUrl);
	        } catch (err) {
	            return handleError(err, cb);
	        }
	
	        return handleSuccess(signedUrl, cb);
	    }
	});
	
	module.exports = AWS.CloudFront.Signer;
	
	},{"../core":201}],200:[function(require,module,exports){
	var AWS = require('./core');
	require('./credentials');
	require('./credentials/credential_provider_chain');
	var PromisesDependency;
	
	
	AWS.Config = AWS.util.inherit({
	
	
	
	  constructor: function Config(options) {
	    if (options === undefined) options = {};
	    options = this.extractCredentials(options);
	
	    AWS.util.each.call(this, this.keys, function (key, value) {
	      this.set(key, options[key], value);
	    });
	  },
	
	
	
	
	  getCredentials: function getCredentials(callback) {
	    var self = this;
	
	    function finish(err) {
	      callback(err, err ? null : self.credentials);
	    }
	
	    function credError(msg, err) {
	      return new AWS.util.error(err || new Error(), {
	        code: 'CredentialsError', message: msg
	      });
	    }
	
	    function getAsyncCredentials() {
	      self.credentials.get(function(err) {
	        if (err) {
	          var msg = 'Could not load credentials from ' +
	            self.credentials.constructor.name;
	          err = credError(msg, err);
	        }
	        finish(err);
	      });
	    }
	
	    function getStaticCredentials() {
	      var err = null;
	      if (!self.credentials.accessKeyId || !self.credentials.secretAccessKey) {
	        err = credError('Missing credentials');
	      }
	      finish(err);
	    }
	
	    if (self.credentials) {
	      if (typeof self.credentials.get === 'function') {
	        getAsyncCredentials();
	      } else { // static credentials
	        getStaticCredentials();
	      }
	    } else if (self.credentialProvider) {
	      self.credentialProvider.resolve(function(err, creds) {
	        if (err) {
	          err = credError('Could not load credentials from any providers', err);
	        }
	        self.credentials = creds;
	        finish(err);
	      });
	    } else {
	      finish(credError('No credentials to load'));
	    }
	  },
	
	
	
	
	  update: function update(options, allowUnknownKeys) {
	    allowUnknownKeys = allowUnknownKeys || false;
	    options = this.extractCredentials(options);
	    AWS.util.each.call(this, options, function (key, value) {
	      if (allowUnknownKeys || Object.prototype.hasOwnProperty.call(this.keys, key) ||
	          AWS.Service.hasService(key)) {
	        this.set(key, value);
	      }
	    });
	  },
	
	
	  loadFromPath: function loadFromPath(path) {
	    this.clear();
	
	    var options = JSON.parse(AWS.util.readFileSync(path));
	    var fileSystemCreds = new AWS.FileSystemCredentials(path);
	    var chain = new AWS.CredentialProviderChain();
	    chain.providers.unshift(fileSystemCreds);
	    chain.resolve(function (err, creds) {
	      if (err) throw err;
	      else options.credentials = creds;
	    });
	
	    this.constructor(options);
	
	    return this;
	  },
	
	
	  clear: function clear() {
	
	    AWS.util.each.call(this, this.keys, function (key) {
	      delete this[key];
	    });
	
	    this.set('credentials', undefined);
	    this.set('credentialProvider', undefined);
	  },
	
	
	  set: function set(property, value, defaultValue) {
	    if (value === undefined) {
	      if (defaultValue === undefined) {
	        defaultValue = this.keys[property];
	      }
	      if (typeof defaultValue === 'function') {
	        this[property] = defaultValue.call(this);
	      } else {
	        this[property] = defaultValue;
	      }
	    } else if (property === 'httpOptions' && this[property]) {
	      this[property] = AWS.util.merge(this[property], value);
	    } else {
	      this[property] = value;
	    }
	  },
	
	
	  keys: {
	    credentials: null,
	    credentialProvider: null,
	    region: null,
	    logger: null,
	    apiVersions: {},
	    apiVersion: null,
	    endpoint: undefined,
	    httpOptions: {
	      timeout: 120000
	    },
	    maxRetries: undefined,
	    maxRedirects: 10,
	    paramValidation: true,
	    sslEnabled: true,
	    s3ForcePathStyle: false,
	    s3BucketEndpoint: false,
	    s3DisableBodySigning: true,
	    computeChecksums: true,
	    convertResponseTypes: true,
	    correctClockSkew: false,
	    customUserAgent: null,
	    dynamoDbCrc32: true,
	    systemClockOffset: 0,
	    signatureVersion: null,
	    signatureCache: true,
	    retryDelayOptions: {
	      base: 100
	    },
	    useAccelerateEndpoint: false
	  },
	
	
	  extractCredentials: function extractCredentials(options) {
	    if (options.accessKeyId && options.secretAccessKey) {
	      options = AWS.util.copy(options);
	      options.credentials = new AWS.Credentials(options);
	    }
	    return options;
	  },
	
	
	  setPromisesDependency: function setPromisesDependency(dep) {
	    PromisesDependency = dep;
	    if (dep === null && typeof Promise === 'function') {
	      PromisesDependency = Promise;
	    }
	    var constructors = [AWS.Request, AWS.Credentials, AWS.CredentialProviderChain];
	    if (AWS.S3 && AWS.S3.ManagedUpload) constructors.push(AWS.S3.ManagedUpload);
	    AWS.util.addPromises(constructors, PromisesDependency);
	  },
	
	
	  getPromisesDependency: function getPromisesDependency() {
	    return PromisesDependency;
	  }
	});
	
	
	AWS.config = new AWS.Config();
	
	},{"./core":201,"./credentials":202,"./credentials/credential_provider_chain":204}],201:[function(require,module,exports){
	
	var AWS = { util: require('./util') };
	
	
	var _hidden = {}; _hidden.toString(); // hack to parse macro
	
	module.exports = AWS;
	
	AWS.util.update(AWS, {
	
	
	  VERSION: '2.16.0',
	
	
	  Signers: {},
	
	
	  Protocol: {
	    Json: require('./protocol/json'),
	    Query: require('./protocol/query'),
	    Rest: require('./protocol/rest'),
	    RestJson: require('./protocol/rest_json'),
	    RestXml: require('./protocol/rest_xml')
	  },
	
	
	  XML: {
	    Builder: require('./xml/builder'),
	    Parser: null // conditionally set based on environment
	  },
	
	
	  JSON: {
	    Builder: require('./json/builder'),
	    Parser: require('./json/parser')
	  },
	
	
	  Model: {
	    Api: require('./model/api'),
	    Operation: require('./model/operation'),
	    Shape: require('./model/shape'),
	    Paginator: require('./model/paginator'),
	    ResourceWaiter: require('./model/resource_waiter')
	  },
	
	  util: require('./util'),
	
	
	  apiLoader: function() { throw new Error('No API loader set'); }
	});
	
	require('./service');
	require('./config');
	
	require('./credentials');
	require('./credentials/credential_provider_chain');
	require('./credentials/temporary_credentials');
	require('./credentials/web_identity_credentials');
	require('./credentials/cognito_identity_credentials');
	require('./credentials/saml_credentials');
	
	require('./http');
	require('./sequential_executor');
	require('./event_listeners');
	require('./request');
	require('./response');
	require('./resource_waiter');
	require('./signers/request_signer');
	require('./param_validator');
	
	
	AWS.events = new AWS.SequentialExecutor();
	
	},{"./config":200,"./credentials":202,"./credentials/cognito_identity_credentials":203,"./credentials/credential_provider_chain":204,"./credentials/saml_credentials":205,"./credentials/temporary_credentials":206,"./credentials/web_identity_credentials":207,"./event_listeners":213,"./http":214,"./json/builder":216,"./json/parser":217,"./model/api":218,"./model/operation":220,"./model/paginator":221,"./model/resource_waiter":222,"./model/shape":223,"./param_validator":224,"./protocol/json":226,"./protocol/query":227,"./protocol/rest":228,"./protocol/rest_json":229,"./protocol/rest_xml":230,"./request":234,"./resource_waiter":235,"./response":236,"./sequential_executor":238,"./service":239,"./signers/request_signer":254,"./util":261,"./xml/builder":263}],202:[function(require,module,exports){
	var AWS = require('./core');
	
	
	AWS.Credentials = AWS.util.inherit({
	
	  constructor: function Credentials() {
	    AWS.util.hideProperties(this, ['secretAccessKey']);
	
	    this.expired = false;
	    this.expireTime = null;
	    if (arguments.length === 1 && typeof arguments[0] === 'object') {
	      var creds = arguments[0].credentials || arguments[0];
	      this.accessKeyId = creds.accessKeyId;
	      this.secretAccessKey = creds.secretAccessKey;
	      this.sessionToken = creds.sessionToken;
	    } else {
	      this.accessKeyId = arguments[0];
	      this.secretAccessKey = arguments[1];
	      this.sessionToken = arguments[2];
	    }
	  },
	
	
	  expiryWindow: 15,
	
	
	  needsRefresh: function needsRefresh() {
	    var currentTime = AWS.util.date.getDate().getTime();
	    var adjustedTime = new Date(currentTime + this.expiryWindow * 1000);
	
	    if (this.expireTime && adjustedTime > this.expireTime) {
	      return true;
	    } else {
	      return this.expired || !this.accessKeyId || !this.secretAccessKey;
	    }
	  },
	
	
	  get: function get(callback) {
	    var self = this;
	    if (this.needsRefresh()) {
	      this.refresh(function(err) {
	        if (!err) self.expired = false; // reset expired flag
	        if (callback) callback(err);
	      });
	    } else if (callback) {
	      callback();
	    }
	  },
	
	
	
	
	
	
	  refresh: function refresh(callback) {
	    this.expired = false;
	    callback();
	  }
	});
	
	
	AWS.Credentials.addPromisesToClass = function addPromisesToClass(PromiseDependency) {
	  this.prototype.getPromise = AWS.util.promisifyMethod('get', PromiseDependency);
	  this.prototype.refreshPromise = AWS.util.promisifyMethod('refresh', PromiseDependency);
	};
	
	
	AWS.Credentials.deletePromisesFromClass = function deletePromisesFromClass() {
	  delete this.prototype.getPromise;
	  delete this.prototype.refreshPromise;
	};
	
	AWS.util.addPromises(AWS.Credentials);
	
	},{"./core":201}],203:[function(require,module,exports){
	var AWS = require('../core');
	var CognitoIdentity = require('../../clients/cognitoidentity');
	var STS = require('../../clients/sts');
	
	
	AWS.CognitoIdentityCredentials = AWS.util.inherit(AWS.Credentials, {
	
	  localStorageKey: {
	    id: 'aws.cognito.identity-id.',
	    providers: 'aws.cognito.identity-providers.'
	  },
	
	
	  constructor: function CognitoIdentityCredentials(params, clientConfig) {
	    AWS.Credentials.call(this);
	    this.expired = true;
	    this.params = params;
	    this.data = null;
	    this._identityId = null;
	    this._clientConfig = AWS.util.copy(clientConfig || {});
	    this.loadCachedId();
	    var self = this;
	    Object.defineProperty(this, 'identityId', {
	      get: function() {
	        self.loadCachedId();
	        return self._identityId || self.params.IdentityId;
	      },
	      set: function(identityId) {
	        self._identityId = identityId;
	      }
	    });
	  },
	
	
	  refresh: function refresh(callback) {
	    var self = this;
	    self.createClients();
	    self.data = null;
	    self._identityId = null;
	    self.getId(function(err) {
	      if (!err) {
	        if (!self.params.RoleArn) {
	          self.getCredentialsForIdentity(callback);
	        } else {
	          self.getCredentialsFromSTS(callback);
	        }
	      } else {
	        self.clearIdOnNotAuthorized(err);
	        callback(err);
	      }
	    });
	  },
	
	
	  clearCachedId: function clearCache() {
	    this._identityId = null;
	    delete this.params.IdentityId;
	
	    var poolId = this.params.IdentityPoolId;
	    var loginId = this.params.LoginId || '';
	    delete this.storage[this.localStorageKey.id + poolId + loginId];
	    delete this.storage[this.localStorageKey.providers + poolId + loginId];
	  },
	
	
	  clearIdOnNotAuthorized: function clearIdOnNotAuthorized(err) {
	    var self = this;
	    if (err.code == 'NotAuthorizedException') {
	      self.clearCachedId();
	    }
	  },
	
	
	  getId: function getId(callback) {
	    var self = this;
	    if (typeof self.params.IdentityId === 'string') {
	      return callback(null, self.params.IdentityId);
	    }
	
	    self.cognito.getId(function(err, data) {
	      if (!err && data.IdentityId) {
	        self.params.IdentityId = data.IdentityId;
	        callback(null, data.IdentityId);
	      } else {
	        callback(err);
	      }
	    });
	  },
	
	
	
	  loadCredentials: function loadCredentials(data, credentials) {
	    if (!data || !credentials) return;
	    credentials.expired = false;
	    credentials.accessKeyId = data.Credentials.AccessKeyId;
	    credentials.secretAccessKey = data.Credentials.SecretKey;
	    credentials.sessionToken = data.Credentials.SessionToken;
	    credentials.expireTime = data.Credentials.Expiration;
	  },
	
	
	  getCredentialsForIdentity: function getCredentialsForIdentity(callback) {
	    var self = this;
	    self.cognito.getCredentialsForIdentity(function(err, data) {
	      if (!err) {
	        self.cacheId(data);
	        self.data = data;
	        self.loadCredentials(self.data, self);
	      } else {
	        self.clearIdOnNotAuthorized(err);
	      }
	      callback(err);
	    });
	  },
	
	
	  getCredentialsFromSTS: function getCredentialsFromSTS(callback) {
	    var self = this;
	    self.cognito.getOpenIdToken(function(err, data) {
	      if (!err) {
	        self.cacheId(data);
	        self.params.WebIdentityToken = data.Token;
	        self.webIdentityCredentials.refresh(function(webErr) {
	          if (!webErr) {
	            self.data = self.webIdentityCredentials.data;
	            self.sts.credentialsFrom(self.data, self);
	          }
	          callback(webErr);
	        });
	      } else {
	        self.clearIdOnNotAuthorized(err);
	        callback(err);
	      }
	    });
	  },
	
	
	  loadCachedId: function loadCachedId() {
	    var self = this;
	
	    if (AWS.util.isBrowser() && !self.params.IdentityId) {
	      var id = self.getStorage('id');
	      if (id && self.params.Logins) {
	        var actualProviders = Object.keys(self.params.Logins);
	        var cachedProviders =
	          (self.getStorage('providers') || '').split(',');
	
	        var intersect = cachedProviders.filter(function(n) {
	          return actualProviders.indexOf(n) !== -1;
	        });
	        if (intersect.length !== 0) {
	          self.params.IdentityId = id;
	        }
	      } else if (id) {
	        self.params.IdentityId = id;
	      }
	    }
	  },
	
	
	  createClients: function() {
	    var clientConfig = this._clientConfig;
	    this.webIdentityCredentials = this.webIdentityCredentials ||
	      new AWS.WebIdentityCredentials(this.params, clientConfig);
	    if (!this.cognito) {
	      var cognitoConfig = AWS.util.merge({}, clientConfig);
	      cognitoConfig.params = this.params;
	      this.cognito = new CognitoIdentity(cognitoConfig);
	    }
	    this.sts = this.sts || new STS(clientConfig);
	  },
	
	
	  cacheId: function cacheId(data) {
	    this._identityId = data.IdentityId;
	    this.params.IdentityId = this._identityId;
	
	    if (AWS.util.isBrowser()) {
	      this.setStorage('id', data.IdentityId);
	
	      if (this.params.Logins) {
	        this.setStorage('providers', Object.keys(this.params.Logins).join(','));
	      }
	    }
	  },
	
	
	  getStorage: function getStorage(key) {
	    return this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || '')];
	  },
	
	
	  setStorage: function setStorage(key, val) {
	    try {
	      this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || '')] = val;
	    } catch (_) {}
	  },
	
	
	  storage: (function() {
	    try {
	      var storage = AWS.util.isBrowser() && window.localStorage !== null && typeof window.localStorage === 'object' ?
	          window.localStorage : {};
	
	      storage['aws.test-storage'] = 'foobar';
	      delete storage['aws.test-storage'];
	
	      return storage;
	    } catch (_) {
	      return {};
	    }
	  })()
	});
	
	},{"../../clients/cognitoidentity":151,"../../clients/sts":195,"../core":201}],204:[function(require,module,exports){
	var AWS = require('../core');
	
	
	AWS.CredentialProviderChain = AWS.util.inherit(AWS.Credentials, {
	
	
	  constructor: function CredentialProviderChain(providers) {
	    if (providers) {
	      this.providers = providers;
	    } else {
	      this.providers = AWS.CredentialProviderChain.defaultProviders.slice(0);
	    }
	  },
	
	
	
	
	  resolve: function resolve(callback) {
	    if (this.providers.length === 0) {
	      callback(new Error('No providers'));
	      return this;
	    }
	
	    var index = 0;
	    var providers = this.providers.slice(0);
	
	    function resolveNext(err, creds) {
	      if ((!err && creds) || index === providers.length) {
	        callback(err, creds);
	        return;
	      }
	
	      var provider = providers[index++];
	      if (typeof provider === 'function') {
	        creds = provider.call();
	      } else {
	        creds = provider;
	      }
	
	      if (creds.get) {
	        creds.get(function(getErr) {
	          resolveNext(getErr, getErr ? null : creds);
	        });
	      } else {
	        resolveNext(null, creds);
	      }
	    }
	
	    resolveNext();
	    return this;
	  }
	});
	
	
	AWS.CredentialProviderChain.defaultProviders = [];
	
	
	AWS.CredentialProviderChain.addPromisesToClass = function addPromisesToClass(PromiseDependency) {
	  this.prototype.resolvePromise = AWS.util.promisifyMethod('resolve', PromiseDependency);
	};
	
	
	AWS.CredentialProviderChain.deletePromisesFromClass = function deletePromisesFromClass() {
	  delete this.prototype.resolvePromise;
	};
	
	AWS.util.addPromises(AWS.CredentialProviderChain);
	
	},{"../core":201}],205:[function(require,module,exports){
	var AWS = require('../core');
	var STS = require('../../clients/sts');
	
	
	AWS.SAMLCredentials = AWS.util.inherit(AWS.Credentials, {
	
	  constructor: function SAMLCredentials(params) {
	    AWS.Credentials.call(this);
	    this.expired = true;
	    this.params = params;
	  },
	
	
	  refresh: function refresh(callback) {
	    var self = this;
	    self.createClients();
	    if (!callback) callback = function(err) { if (err) throw err; };
	
	    self.service.assumeRoleWithSAML(function (err, data) {
	      if (!err) {
	        self.service.credentialsFrom(data, self);
	      }
	      callback(err);
	    });
	  },
	
	
	  createClients: function() {
	    this.service = this.service || new STS({params: this.params});
	  }
	
	});
	
	},{"../../clients/sts":195,"../core":201}],206:[function(require,module,exports){
	var AWS = require('../core');
	var STS = require('../../clients/sts');
	
	
	AWS.TemporaryCredentials = AWS.util.inherit(AWS.Credentials, {
	
	  constructor: function TemporaryCredentials(params, masterCredentials) {
	    AWS.Credentials.call(this);
	    this.loadMasterCredentials(masterCredentials);
	    this.expired = true;
	
	    this.params = params || {};
	    if (this.params.RoleArn) {
	      this.params.RoleSessionName =
	        this.params.RoleSessionName || 'temporary-credentials';
	    }
	  },
	
	
	  refresh: function refresh(callback) {
	    var self = this;
	    self.createClients();
	    if (!callback) callback = function(err) { if (err) throw err; };
	
	    self.service.config.credentials = self.masterCredentials;
	    var operation = self.params.RoleArn ?
	      self.service.assumeRole : self.service.getSessionToken;
	    operation.call(self.service, function (err, data) {
	      if (!err) {
	        self.service.credentialsFrom(data, self);
	      }
	      callback(err);
	    });
	  },
	
	
	  loadMasterCredentials: function loadMasterCredentials(masterCredentials) {
	    this.masterCredentials = masterCredentials || AWS.config.credentials;
	    while (this.masterCredentials.masterCredentials) {
	      this.masterCredentials = this.masterCredentials.masterCredentials;
	    }
	  },
	
	
	  createClients: function() {
	    this.service = this.service || new STS({params: this.params});
	  }
	
	});
	
	},{"../../clients/sts":195,"../core":201}],207:[function(require,module,exports){
	var AWS = require('../core');
	var STS = require('../../clients/sts');
	
	
	AWS.WebIdentityCredentials = AWS.util.inherit(AWS.Credentials, {
	
	  constructor: function WebIdentityCredentials(params, clientConfig) {
	    AWS.Credentials.call(this);
	    this.expired = true;
	    this.params = params;
	    this.params.RoleSessionName = this.params.RoleSessionName || 'web-identity';
	    this.data = null;
	    this._clientConfig = AWS.util.copy(clientConfig || {});
	  },
	
	
	  refresh: function refresh(callback) {
	    var self = this;
	    self.createClients();
	    if (!callback) callback = function(err) { if (err) throw err; };
	
	    self.service.assumeRoleWithWebIdentity(function (err, data) {
	      self.data = null;
	      if (!err) {
	        self.data = data;
	        self.service.credentialsFrom(data, self);
	      }
	      callback(err);
	    });
	  },
	
	
	  createClients: function() {
	    if (!this.service) {
	      var stsConfig = AWS.util.merge({}, this._clientConfig);
	      stsConfig.params = this.params;
	      this.service = new STS(stsConfig);
	    }
	  }
	
	});
	
	},{"../../clients/sts":195,"../core":201}],208:[function(require,module,exports){
	var util = require('../core').util;
	var typeOf = require('./types').typeOf;
	var DynamoDBSet = require('./set');
	
	function convertInput(data, options) {
	  options = options || {};
	  var type = typeOf(data);
	  if (type === 'Object') {
	    var map = {M: {}};
	    for (var key in data) {
	      map['M'][key] = convertInput(data[key], options);
	    }
	    return map;
	  } else if (type === 'Array') {
	    var list = {L: []};
	    for (var i = 0; i < data.length; i++) {
	      list['L'].push(convertInput(data[i], options));
	    }
	    return list;
	  } else if (type === 'Set') {
	    return formatSet(data, options);
	  } else if (type === 'String') {
	    if (data.length === 0 && options.convertEmptyValues) {
	      return convertInput(null);
	    }
	    return { 'S': data };
	  } else if (type === 'Number') {
	    return { 'N': data.toString() };
	  } else if (type === 'Binary') {
	    if (data.length === 0 && options.convertEmptyValues) {
	      return convertInput(null);
	    }
	    return { 'B': data };
	  } else if (type === 'Boolean') {
	    return {'BOOL': data};
	  } else if (type === 'null') {
	    return {'NULL': true};
	  }
	}
	
	function formatSet(data, options) {
	  options = options || {};
	  var values = data.values;
	  if (options.convertEmptyValues) {
	    values = filterEmptySetValues(data);
	    if (values.length === 0) {
	      return convertInput(null);
	    }
	  }
	
	  var map = {};
	  switch (data.type) {
	    case 'String': map['SS'] = values; break;
	    case 'Binary': map['BS'] = values; break;
	    case 'Number': map['NS'] = values.map(function (value) {
	      return value.toString();
	    });
	  }
	  return map;
	}
	
	function filterEmptySetValues(set) {
	    var nonEmptyValues = [];
	    var potentiallyEmptyTypes = {
	        String: true,
	        Binary: true,
	        Number: false
	    };
	    if (potentiallyEmptyTypes[set.type]) {
	        for (var i = 0; i < set.values.length; i++) {
	            if (set.values[i].length === 0) {
	                continue;
	            }
	            nonEmptyValues.push(set.values[i]);
	        }
	
	        return nonEmptyValues;
	    }
	
	    return set.values;
	}
	
	function convertOutput(data) {
	  var list, map, i;
	  for (var type in data) {
	    var values = data[type];
	    if (type === 'M') {
	      map = {};
	      for (var key in values) {
	        map[key] = convertOutput(values[key]);
	      }
	      return map;
	    } else if (type === 'L') {
	      list = [];
	      for (i = 0; i < values.length; i++) {
	        list.push(convertOutput(values[i]));
	      }
	      return list;
	    } else if (type === 'SS') {
	      list = [];
	      for (i = 0; i < values.length; i++) {
	        list.push(values[i] + '');
	      }
	      return new DynamoDBSet(list);
	    } else if (type === 'NS') {
	      list = [];
	      for (i = 0; i < values.length; i++) {
	        list.push(Number(values[i]));
	      }
	      return new DynamoDBSet(list);
	    } else if (type === 'BS') {
	      list = [];
	      for (i = 0; i < values.length; i++) {
	        list.push(new util.Buffer(values[i]));
	      }
	      return new DynamoDBSet(list);
	    } else if (type === 'S') {
	      return values + '';
	    } else if (type === 'N') {
	      return Number(values);
	    } else if (type === 'B') {
	      return new util.Buffer(values);
	    } else if (type === 'BOOL') {
	      return (values === 'true' || values === 'TRUE' || values === true);
	    } else if (type === 'NULL') {
	      return null;
	    }
	  }
	}
	
	module.exports = {
	  input: convertInput,
	  output: convertOutput
	};
	
	},{"../core":201,"./set":210,"./types":212}],209:[function(require,module,exports){
	var AWS = require('../core');
	var Translator = require('./translator');
	var DynamoDBSet = require('./set');
	
	
	AWS.DynamoDB.DocumentClient = AWS.util.inherit({
	
	
	  operations: {
	    batchGetItem: 'batchGet',
	    batchWriteItem: 'batchWrite',
	    putItem: 'put',
	    getItem: 'get',
	    deleteItem: 'delete',
	    updateItem: 'update',
	    scan: 'scan',
	    query: 'query'
	  },
	
	
	  constructor: function DocumentClient(options) {
	    var self = this;
	    self.options = options || {};
	    self.configure(self.options);
	  },
	
	
	  configure: function configure(options) {
	    var self = this;
	    self.service = options.service;
	    self.bindServiceObject(options);
	    self.attrValue = options.attrValue =
	      self.service.api.operations.putItem.input.members.Item.value.shape;
	  },
	
	
	  bindServiceObject: function bindServiceObject(options) {
	    var self = this;
	    options = options || {};
	
	    if (!self.service) {
	      self.service = new AWS.DynamoDB(options);
	    } else {
	      var config = AWS.util.copy(self.service.config);
	      self.service = new self.service.constructor.__super__(config);
	      self.service.config.params =
	        AWS.util.merge(self.service.config.params || {}, options.params);
	    }
	  },
	
	
	  batchGet: function(params, callback) {
	    var self = this;
	    var request = self.service.batchGetItem(params);
	    self.setupRequest(request);
	    self.setupResponse(request);
	    if (typeof callback === 'function') {
	      request.send(callback);
	    }
	    return request;
	  },
	
	
	  batchWrite: function(params, callback) {
	    var self = this;
	    var request = self.service.batchWriteItem(params);
	    self.setupRequest(request);
	    self.setupResponse(request);
	    if (typeof callback === 'function') {
	      request.send(callback);
	    }
	    return request;
	  },
	
	
	  delete: function(params, callback) {
	    var self = this;
	    var request = self.service.deleteItem(params);
	    self.setupRequest(request);
	    self.setupResponse(request);
	    if (typeof callback === 'function') {
	      request.send(callback);
	    }
	    return request;
	  },
	
	
	  get: function(params, callback) {
	    var self = this;
	    var request = self.service.getItem(params);
	    self.setupRequest(request);
	    self.setupResponse(request);
	    if (typeof callback === 'function') {
	      request.send(callback);
	    }
	    return request;
	  },
	
	
	  put: function put(params, callback) {
	    var self = this;
	    var request = self.service.putItem(params);
	    self.setupRequest(request);
	    self.setupResponse(request);
	    if (typeof callback === 'function') {
	      request.send(callback);
	    }
	    return request;
	  },
	
	
	  update: function(params, callback) {
	    var self = this;
	    var request = self.service.updateItem(params);
	    self.setupRequest(request);
	    self.setupResponse(request);
	    if (typeof callback === 'function') {
	      request.send(callback);
	    }
	    return request;
	  },
	
	
	  scan: function(params, callback) {
	    var self = this;
	    var request = self.service.scan(params);
	    self.setupRequest(request);
	    self.setupResponse(request);
	    if (typeof callback === 'function') {
	      request.send(callback);
	    }
	    return request;
	  },
	
	
	  query: function(params, callback) {
	    var self = this;
	    var request = self.service.query(params);
	    self.setupRequest(request);
	    self.setupResponse(request);
	    if (typeof callback === 'function') {
	      request.send(callback);
	    }
	    return request;
	  },
	
	
	  createSet: function(list, options) {
	    options = options || {};
	    return new DynamoDBSet(list, options);
	  },
	
	
	  getTranslator: function() {
	    return new Translator(this.options);
	  },
	
	
	  setupRequest: function setupRequest(request) {
	    var self = this;
	    var translator = self.getTranslator();
	    var operation = request.operation;
	    var inputShape = request.service.api.operations[operation].input;
	    request._events.validate.unshift(function(req) {
	      req.rawParams = AWS.util.copy(req.params);
	      req.params = translator.translateInput(req.rawParams, inputShape);
	    });
	  },
	
	
	  setupResponse: function setupResponse(request) {
	    var self = this;
	    var translator = self.getTranslator();
	    var outputShape = self.service.api.operations[request.operation].output;
	    request.on('extractData', function(response) {
	      response.data = translator.translateOutput(response.data, outputShape);
	    });
	
	    var response = request.response;
	    response.nextPage = function(cb) {
	      var resp = this;
	      var req = resp.request;
	      var config;
	      var service = req.service;
	      var operation = req.operation;
	      try {
	        config = service.paginationConfig(operation, true);
	      } catch (e) { resp.error = e; }
	
	      if (!resp.hasNextPage()) {
	        if (cb) cb(resp.error, null);
	        else if (resp.error) throw resp.error;
	        return null;
	      }
	
	      var params = AWS.util.copy(req.rawParams);
	      if (!resp.nextPageTokens) {
	        return cb ? cb(null, null) : null;
	      } else {
	        var inputTokens = config.inputToken;
	        if (typeof inputTokens === 'string') inputTokens = [inputTokens];
	        for (var i = 0; i < inputTokens.length; i++) {
	          params[inputTokens[i]] = resp.nextPageTokens[i];
	        }
	        return self[operation](params, cb);
	      }
	    };
	  }
	
	});
	
	module.exports = AWS.DynamoDB.DocumentClient;
	
	},{"../core":201,"./set":210,"./translator":211}],210:[function(require,module,exports){
	var util = require('../core').util;
	var typeOf = require('./types').typeOf;
	
	var DynamoDBSet = util.inherit({
	
	  constructor: function Set(list, options) {
	    options = options || {};
	    this.initialize(list, options.validate);
	  },
	
	  initialize: function(list, validate) {
	    var self = this;
	    self.values = [].concat(list);
	    self.detectType();
	    if (validate) {
	      self.validate();
	    }
	  },
	
	  detectType: function() {
	    var self = this;
	    var value = self.values[0];
	    if (typeOf(value) === 'String') {
	      self.type = 'String';
	    } else if (typeOf(value) === 'Number') {
	      self.type = 'Number';
	    } else if (typeOf(value) === 'Binary') {
	      self.type = 'Binary';
	    } else {
	      throw util.error(new Error(), {
	        code: 'InvalidSetType',
	        message: 'Sets can contain string, number, or binary values'
	      });
	    }
	  },
	
	  validate: function() {
	    var self = this;
	    var length = self.values.length;
	    var values = self.values;
	    for (var i = 0; i < length; i++) {
	      if (typeOf(values[i]) !== self.type) {
	        throw util.error(new Error(), {
	          code: 'InvalidType',
	          message: self.type + ' Set contains ' + typeOf(values[i]) + ' value'
	        });
	      }
	    }
	  }
	
	});
	
	module.exports = DynamoDBSet;
	
	},{"../core":201,"./types":212}],211:[function(require,module,exports){
	var util = require('../core').util;
	var convert = require('./converter');
	
	var Translator = function(options) {
	  options = options || {};
	  this.attrValue = options.attrValue;
	  this.convertEmptyValues = Boolean(options.convertEmptyValues);
	};
	
	Translator.prototype.translateInput = function(value, shape) {
	  this.mode = 'input';
	  return this.translate(value, shape);
	};
	
	Translator.prototype.translateOutput = function(value, shape) {
	  this.mode = 'output';
	  return this.translate(value, shape);
	};
	
	Translator.prototype.translate = function(value, shape) {
	  var self = this;
	  if (!shape || value === undefined) return undefined;
	
	  if (shape.shape === self.attrValue) {
	    return convert[self.mode](value, {convertEmptyValues: self.convertEmptyValues});
	  }
	  switch (shape.type) {
	    case 'structure': return self.translateStructure(value, shape);
	    case 'map': return self.translateMap(value, shape);
	    case 'list': return self.translateList(value, shape);
	    default: return self.translateScalar(value, shape);
	  }
	};
	
	Translator.prototype.translateStructure = function(structure, shape) {
	  var self = this;
	  if (structure == null) return undefined;
	
	  var struct = {};
	  util.each(structure, function(name, value) {
	    var memberShape = shape.members[name];
	    if (memberShape) {
	      var result = self.translate(value, memberShape);
	      if (result !== undefined) struct[name] = result;
	    }
	  });
	  return struct;
	};
	
	Translator.prototype.translateList = function(list, shape) {
	  var self = this;
	  if (list == null) return undefined;
	
	  var out = [];
	  util.arrayEach(list, function(value) {
	    var result = self.translate(value, shape.member);
	    if (result === undefined) out.push(null);
	    else out.push(result);
	  });
	  return out;
	};
	
	Translator.prototype.translateMap = function(map, shape) {
	  var self = this;
	  if (map == null) return undefined;
	
	  var out = {};
	  util.each(map, function(key, value) {
	    var result = self.translate(value, shape.value);
	    if (result === undefined) out[key] = null;
	    else out[key] = result;
	  });
	  return out;
	};
	
	Translator.prototype.translateScalar = function(value, shape) {
	  return shape.toType(value);
	};
	
	module.exports = Translator;
	
	},{"../core":201,"./converter":208}],212:[function(require,module,exports){
	var util = require('../core').util;
	
	function typeOf(data) {
	  if (data === null && typeof data === 'object') {
	    return 'null';
	  } else if (data !== undefined && isBinary(data)) {
	    return 'Binary';
	  } else if (data !== undefined && data.constructor) {
	    return util.typeName(data.constructor);
	  } else if (data !== undefined && typeof data === 'object') {
	    return 'Object';
	  } else {
	    return 'undefined';
	  }
	}
	
	function isBinary(data) {
	  var types = [
	    'Buffer', 'File', 'Blob', 'ArrayBuffer', 'DataView',
	    'Int8Array', 'Uint8Array', 'Uint8ClampedArray',
	    'Int16Array', 'Uint16Array', 'Int32Array', 'Uint32Array',
	    'Float32Array', 'Float64Array'
	  ];
	  if (util.isNode()) {
	    var Stream = util.stream.Stream;
	    if (util.Buffer.isBuffer(data) || data instanceof Stream)
	      return true;
	  } else {
	    for (var i = 0; i < types.length; i++) {
	      if (data !== undefined && data.constructor) {
	        if (util.isType(data, types[i])) return true;
	        if (util.typeName(data.constructor) === types[i]) return true;
	      }
	    }
	  }
	  return false;
	}
	
	module.exports = {
	  typeOf: typeOf,
	  isBinary: isBinary
	};
	
	},{"../core":201}],213:[function(require,module,exports){
	var AWS = require('./core');
	var SequentialExecutor = require('./sequential_executor');
	
	AWS.EventListeners = {
	
	  Core: {} /* doc hack */
	};
	
	AWS.EventListeners = {
	  Core: new SequentialExecutor().addNamedListeners(function(add, addAsync) {
	    addAsync('VALIDATE_CREDENTIALS', 'validate',
	        function VALIDATE_CREDENTIALS(req, done) {
	      if (!req.service.api.signatureVersion) return done(); // none
	      req.service.config.getCredentials(function(err) {
	        if (err) {
	          req.response.error = AWS.util.error(err,
	            {code: 'CredentialsError', message: 'Missing credentials in config'});
	        }
	        done();
	      });
	    });
	
	    add('VALIDATE_REGION', 'validate', function VALIDATE_REGION(req) {
	      if (!req.service.config.region && !req.service.isGlobalEndpoint) {
	        req.response.error = AWS.util.error(new Error(),
	          {code: 'ConfigError', message: 'Missing region in config'});
	      }
	    });
	
	    add('BUILD_IDEMPOTENCY_TOKENS', 'validate', function BUILD_IDEMPOTENCY_TOKENS(req) {
	      var operation = req.service.api.operations[req.operation];
	      if (!operation) {
	        return;
	      }
	      var idempotentMembers = operation.idempotentMembers;
	      if (!idempotentMembers.length) {
	        return;
	      }
	      var params = AWS.util.copy(req.params);
	      for (var i = 0, iLen = idempotentMembers.length; i < iLen; i++) {
	        if (!params[idempotentMembers[i]]) {
	          params[idempotentMembers[i]] = AWS.util.uuid.v4();
	        }
	      }
	      req.params = params;
	    });
	
	    add('VALIDATE_PARAMETERS', 'validate', function VALIDATE_PARAMETERS(req) {
	      var rules = req.service.api.operations[req.operation].input;
	      var validation = req.service.config.paramValidation;
	      new AWS.ParamValidator(validation).validate(rules, req.params);
	    });
	
	    addAsync('COMPUTE_SHA256', 'afterBuild', function COMPUTE_SHA256(req, done) {
	      req.haltHandlersOnError();
	      if (!req.service.api.signatureVersion) return done(); // none
	      if (req.service.getSignerClass(req) === AWS.Signers.V4) {
	        var body = req.httpRequest.body || '';
	        AWS.util.computeSha256(body, function(err, sha) {
	          if (err) {
	            done(err);
	          }
	          else {
	            req.httpRequest.headers['X-Amz-Content-Sha256'] = sha;
	            done();
	          }
	        });
	      } else {
	        done();
	      }
	    });
	
	    add('SET_CONTENT_LENGTH', 'afterBuild', function SET_CONTENT_LENGTH(req) {
	      if (req.httpRequest.headers['Content-Length'] === undefined) {
	        var length = AWS.util.string.byteLength(req.httpRequest.body);
	        req.httpRequest.headers['Content-Length'] = length;
	      }
	    });
	
	    add('SET_HTTP_HOST', 'afterBuild', function SET_HTTP_HOST(req) {
	      req.httpRequest.headers['Host'] = req.httpRequest.endpoint.host;
	    });
	
	    add('RESTART', 'restart', function RESTART() {
	      var err = this.response.error;
	      if (!err || !err.retryable) return;
	
	      this.httpRequest = new AWS.HttpRequest(
	        this.service.endpoint,
	        this.service.region
	      );
	
	      if (this.response.retryCount < this.service.config.maxRetries) {
	        this.response.retryCount++;
	      } else {
	        this.response.error = null;
	      }
	    });
	
	    addAsync('SIGN', 'sign', function SIGN(req, done) {
	      var service = req.service;
	      if (!service.api.signatureVersion) return done(); // none
	
	      service.config.getCredentials(function (err, credentials) {
	        if (err) {
	          req.response.error = err;
	          return done();
	        }
	
	        try {
	          var date = AWS.util.date.getDate();
	          var SignerClass = service.getSignerClass(req);
	          var signer = new SignerClass(req.httpRequest,
	            service.api.signingName || service.api.endpointPrefix,
	           service.config.signatureCache);
	          signer.setServiceClientId(service._clientId);
	
	          delete req.httpRequest.headers['Authorization'];
	          delete req.httpRequest.headers['Date'];
	          delete req.httpRequest.headers['X-Amz-Date'];
	
	          signer.addAuthorization(credentials, date);
	          req.signedAt = date;
	        } catch (e) {
	          req.response.error = e;
	        }
	        done();
	      });
	    });
	
	    add('VALIDATE_RESPONSE', 'validateResponse', function VALIDATE_RESPONSE(resp) {
	      if (this.service.successfulResponse(resp, this)) {
	        resp.data = {};
	        resp.error = null;
	      } else {
	        resp.data = null;
	        resp.error = AWS.util.error(new Error(),
	          {code: 'UnknownError', message: 'An unknown error occurred.'});
	      }
	    });
	
	    addAsync('SEND', 'send', function SEND(resp, done) {
	      resp.httpResponse._abortCallback = done;
	      resp.error = null;
	      resp.data = null;
	
	      function callback(httpResp) {
	        resp.httpResponse.stream = httpResp;
	
	        httpResp.on('headers', function onHeaders(statusCode, headers) {
	          resp.request.emit('httpHeaders', [statusCode, headers, resp]);
	
	          if (!resp.httpResponse.streaming) {
	            if (AWS.HttpClient.streamsApiVersion === 2) { // streams2 API check
	              httpResp.on('readable', function onReadable() {
	                var data = httpResp.read();
	                if (data !== null) {
	                  resp.request.emit('httpData', [data, resp]);
	                }
	              });
	            } else { // legacy streams API
	              httpResp.on('data', function onData(data) {
	                resp.request.emit('httpData', [data, resp]);
	              });
	            }
	          }
	        });
	
	        httpResp.on('end', function onEnd() {
	          resp.request.emit('httpDone');
	          done();
	        });
	      }
	
	      function progress(httpResp) {
	        httpResp.on('sendProgress', function onSendProgress(value) {
	          resp.request.emit('httpUploadProgress', [value, resp]);
	        });
	
	        httpResp.on('receiveProgress', function onReceiveProgress(value) {
	          resp.request.emit('httpDownloadProgress', [value, resp]);
	        });
	      }
	
	      function error(err) {
	        resp.error = AWS.util.error(err, {
	          code: 'NetworkingError',
	          region: resp.request.httpRequest.region,
	          hostname: resp.request.httpRequest.endpoint.hostname,
	          retryable: true
	        });
	        resp.request.emit('httpError', [resp.error, resp], function() {
	          done();
	        });
	      }
	
	      function executeSend() {
	        var http = AWS.HttpClient.getInstance();
	        var httpOptions = resp.request.service.config.httpOptions || {};
	        try {
	          var stream = http.handleRequest(resp.request.httpRequest, httpOptions,
	                                          callback, error);
	          progress(stream);
	        } catch (err) {
	          error(err);
	        }
	      }
	
	      var timeDiff = (AWS.util.date.getDate() - this.signedAt) / 1000;
	      if (timeDiff >= 60 * 10) { // if we signed 10min ago, re-sign
	        this.emit('sign', [this], function(err) {
	          if (err) done(err);
	          else executeSend();
	        });
	      } else {
	        executeSend();
	      }
	    });
	
	    add('HTTP_HEADERS', 'httpHeaders',
	        function HTTP_HEADERS(statusCode, headers, resp) {
	      resp.httpResponse.statusCode = statusCode;
	      resp.httpResponse.headers = headers;
	      resp.httpResponse.body = new AWS.util.Buffer('');
	      resp.httpResponse.buffers = [];
	      resp.httpResponse.numBytes = 0;
	      var dateHeader = headers.date || headers.Date;
	      if (dateHeader) {
	        var serverTime = Date.parse(dateHeader);
	        if (resp.request.service.config.correctClockSkew
	            && AWS.util.isClockSkewed(serverTime)) {
	          AWS.util.applyClockOffset(serverTime);
	        }
	      }
	    });
	
	    add('HTTP_DATA', 'httpData', function HTTP_DATA(chunk, resp) {
	      if (chunk) {
	        if (AWS.util.isNode()) {
	          resp.httpResponse.numBytes += chunk.length;
	
	          var total = resp.httpResponse.headers['content-length'];
	          var progress = { loaded: resp.httpResponse.numBytes, total: total };
	          resp.request.emit('httpDownloadProgress', [progress, resp]);
	        }
	
	        resp.httpResponse.buffers.push(new AWS.util.Buffer(chunk));
	      }
	    });
	
	    add('HTTP_DONE', 'httpDone', function HTTP_DONE(resp) {
	      if (resp.httpResponse.buffers && resp.httpResponse.buffers.length > 0) {
	        var body = AWS.util.buffer.concat(resp.httpResponse.buffers);
	        resp.httpResponse.body = body;
	      }
	      delete resp.httpResponse.numBytes;
	      delete resp.httpResponse.buffers;
	    });
	
	    add('FINALIZE_ERROR', 'retry', function FINALIZE_ERROR(resp) {
	      if (resp.httpResponse.statusCode) {
	        resp.error.statusCode = resp.httpResponse.statusCode;
	        if (resp.error.retryable === undefined) {
	          resp.error.retryable = this.service.retryableError(resp.error, this);
	        }
	      }
	    });
	
	    add('INVALIDATE_CREDENTIALS', 'retry', function INVALIDATE_CREDENTIALS(resp) {
	      if (!resp.error) return;
	      switch (resp.error.code) {
	        case 'RequestExpired': // EC2 only
	        case 'ExpiredTokenException':
	        case 'ExpiredToken':
	          resp.error.retryable = true;
	          resp.request.service.config.credentials.expired = true;
	      }
	    });
	
	    add('EXPIRED_SIGNATURE', 'retry', function EXPIRED_SIGNATURE(resp) {
	      var err = resp.error;
	      if (!err) return;
	      if (typeof err.code === 'string' && typeof err.message === 'string') {
	        if (err.code.match(/Signature/) && err.message.match(/expired/)) {
	          resp.error.retryable = true;
	        }
	      }
	    });
	
	    add('CLOCK_SKEWED', 'retry', function CLOCK_SKEWED(resp) {
	      if (!resp.error) return;
	      if (this.service.clockSkewError(resp.error)
	          && this.service.config.correctClockSkew
	          && AWS.config.isClockSkewed) {
	        resp.error.retryable = true;
	      }
	    });
	
	    add('REDIRECT', 'retry', function REDIRECT(resp) {
	      if (resp.error && resp.error.statusCode >= 300 &&
	          resp.error.statusCode < 400 && resp.httpResponse.headers['location']) {
	        this.httpRequest.endpoint =
	          new AWS.Endpoint(resp.httpResponse.headers['location']);
	        this.httpRequest.headers['Host'] = this.httpRequest.endpoint.host;
	        resp.error.redirect = true;
	        resp.error.retryable = true;
	      }
	    });
	
	    add('RETRY_CHECK', 'retry', function RETRY_CHECK(resp) {
	      if (resp.error) {
	        if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {
	          resp.error.retryDelay = 0;
	        } else if (resp.retryCount < resp.maxRetries) {
	          resp.error.retryDelay = this.service.retryDelays(resp.retryCount) || 0;
	        }
	      }
	    });
	
	    addAsync('RESET_RETRY_STATE', 'afterRetry', function RESET_RETRY_STATE(resp, done) {
	      var delay, willRetry = false;
	
	      if (resp.error) {
	        delay = resp.error.retryDelay || 0;
	        if (resp.error.retryable && resp.retryCount < resp.maxRetries) {
	          resp.retryCount++;
	          willRetry = true;
	        } else if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {
	          resp.redirectCount++;
	          willRetry = true;
	        }
	      }
	
	      if (willRetry) {
	        resp.error = null;
	        setTimeout(done, delay);
	      } else {
	        done();
	      }
	    });
	  }),
	
	  CorePost: new SequentialExecutor().addNamedListeners(function(add) {
	    add('EXTRACT_REQUEST_ID', 'extractData', AWS.util.extractRequestId);
	    add('EXTRACT_REQUEST_ID', 'extractError', AWS.util.extractRequestId);
	
	    add('ENOTFOUND_ERROR', 'httpError', function ENOTFOUND_ERROR(err) {
	      if (err.code === 'NetworkingError' && err.errno === 'ENOTFOUND') {
	        var message = 'Inaccessible host: `' + err.hostname +
	          '\'. This service may not be available in the `' + err.region +
	          '\' region.';
	        this.response.error = AWS.util.error(new Error(message), {
	          code: 'UnknownEndpoint',
	          region: err.region,
	          hostname: err.hostname,
	          retryable: true,
	          originalError: err
	        });
	      }
	    });
	  }),
	
	  Logger: new SequentialExecutor().addNamedListeners(function(add) {
	    add('LOG_REQUEST', 'complete', function LOG_REQUEST(resp) {
	      var req = resp.request;
	      var logger = req.service.config.logger;
	      if (!logger) return;
	
	      function buildMessage() {
	        var time = AWS.util.date.getDate().getTime();
	        var delta = (time - req.startTime.getTime()) / 1000;
	        var ansi = logger.isTTY ? true : false;
	        var status = resp.httpResponse.statusCode;
	        var params = require('util').inspect(req.params, true, null);
	
	        var message = '';
	        if (ansi) message += '\x1B[33m';
	        message += '[AWS ' + req.service.serviceIdentifier + ' ' + status;
	        message += ' ' + delta.toString() + 's ' + resp.retryCount + ' retries]';
	        if (ansi) message += '\x1B[0;1m';
	        message += ' ' + AWS.util.string.lowerFirst(req.operation);
	        message += '(' + params + ')';
	        if (ansi) message += '\x1B[0m';
	        return message;
	      }
	
	      var line = buildMessage();
	      if (typeof logger.log === 'function') {
	        logger.log(line);
	      } else if (typeof logger.write === 'function') {
	        logger.write(line + '\n');
	      }
	    });
	  }),
	
	  Json: new SequentialExecutor().addNamedListeners(function(add) {
	    var svc = require('./protocol/json');
	    add('BUILD', 'build', svc.buildRequest);
	    add('EXTRACT_DATA', 'extractData', svc.extractData);
	    add('EXTRACT_ERROR', 'extractError', svc.extractError);
	  }),
	
	  Rest: new SequentialExecutor().addNamedListeners(function(add) {
	    var svc = require('./protocol/rest');
	    add('BUILD', 'build', svc.buildRequest);
	    add('EXTRACT_DATA', 'extractData', svc.extractData);
	    add('EXTRACT_ERROR', 'extractError', svc.extractError);
	  }),
	
	  RestJson: new SequentialExecutor().addNamedListeners(function(add) {
	    var svc = require('./protocol/rest_json');
	    add('BUILD', 'build', svc.buildRequest);
	    add('EXTRACT_DATA', 'extractData', svc.extractData);
	    add('EXTRACT_ERROR', 'extractError', svc.extractError);
	  }),
	
	  RestXml: new SequentialExecutor().addNamedListeners(function(add) {
	    var svc = require('./protocol/rest_xml');
	    add('BUILD', 'build', svc.buildRequest);
	    add('EXTRACT_DATA', 'extractData', svc.extractData);
	    add('EXTRACT_ERROR', 'extractError', svc.extractError);
	  }),
	
	  Query: new SequentialExecutor().addNamedListeners(function(add) {
	    var svc = require('./protocol/query');
	    add('BUILD', 'build', svc.buildRequest);
	    add('EXTRACT_DATA', 'extractData', svc.extractData);
	    add('EXTRACT_ERROR', 'extractError', svc.extractError);
	  })
	};
	
	},{"./core":201,"./protocol/json":226,"./protocol/query":227,"./protocol/rest":228,"./protocol/rest_json":229,"./protocol/rest_xml":230,"./sequential_executor":238,"util":273}],214:[function(require,module,exports){
	var AWS = require('./core');
	var inherit = AWS.util.inherit;
	
	
	AWS.Endpoint = inherit({
	
	
	  constructor: function Endpoint(endpoint, config) {
	    AWS.util.hideProperties(this, ['slashes', 'auth', 'hash', 'search', 'query']);
	
	    if (typeof endpoint === 'undefined' || endpoint === null) {
	      throw new Error('Invalid endpoint: ' + endpoint);
	    } else if (typeof endpoint !== 'string') {
	      return AWS.util.copy(endpoint);
	    }
	
	    if (!endpoint.match(/^http/)) {
	      var useSSL = config && config.sslEnabled !== undefined ?
	        config.sslEnabled : AWS.config.sslEnabled;
	      endpoint = (useSSL ? 'https' : 'http') + '://' + endpoint;
	    }
	
	    AWS.util.update(this, AWS.util.urlParse(endpoint));
	
	    if (this.port) {
	      this.port = parseInt(this.port, 10);
	    } else {
	      this.port = this.protocol === 'https:' ? 443 : 80;
	    }
	  }
	
	});
	
	
	AWS.HttpRequest = inherit({
	
	
	  constructor: function HttpRequest(endpoint, region) {
	    endpoint = new AWS.Endpoint(endpoint);
	    this.method = 'POST';
	    this.path = endpoint.path || '/';
	    this.headers = {};
	    this.body = '';
	    this.endpoint = endpoint;
	    this.region = region;
	    this._userAgent = '';
	    this.setUserAgent();
	  },
	
	
	  setUserAgent: function setUserAgent() {
	    this._userAgent = this.headers[this.getUserAgentHeaderName()] = AWS.util.userAgent();
	  },
	
	  getUserAgentHeaderName: function getUserAgentHeaderName() {
	    var prefix = AWS.util.isBrowser() ? 'X-Amz-' : '';
	    return prefix + 'User-Agent';
	  },
	
	
	  appendToUserAgent: function appendToUserAgent(agentPartial) {
	    if (typeof agentPartial === 'string' && agentPartial) {
	      this._userAgent += ' ' + agentPartial;
	    }
	    this.headers[this.getUserAgentHeaderName()] = this._userAgent;
	  },
	
	
	  getUserAgent: function getUserAgent() {
	    return this._userAgent;
	  },
	
	
	  pathname: function pathname() {
	    return this.path.split('?', 1)[0];
	  },
	
	
	  search: function search() {
	    var query = this.path.split('?', 2)[1];
	    if (query) {
	      query = AWS.util.queryStringParse(query);
	      return AWS.util.queryParamsToString(query);
	    }
	    return '';
	  }
	
	});
	
	
	AWS.HttpResponse = inherit({
	
	
	  constructor: function HttpResponse() {
	    this.statusCode = undefined;
	    this.headers = {};
	    this.body = undefined;
	    this.streaming = false;
	    this.stream = null;
	  },
	
	
	  createUnbufferedStream: function createUnbufferedStream() {
	    this.streaming = true;
	    return this.stream;
	  }
	});
	
	
	AWS.HttpClient = inherit({});
	
	
	AWS.HttpClient.getInstance = function getInstance() {
	  if (this.singleton === undefined) {
	    this.singleton = new this();
	  }
	  return this.singleton;
	};
	
	},{"./core":201}],215:[function(require,module,exports){
	var AWS = require('../core');
	var EventEmitter = require('events').EventEmitter;
	require('../http');
	
	
	AWS.XHRClient = AWS.util.inherit({
	  handleRequest: function handleRequest(httpRequest, httpOptions, callback, errCallback) {
	    var self = this;
	    var endpoint = httpRequest.endpoint;
	    var emitter = new EventEmitter();
	    var href = endpoint.protocol + '//' + endpoint.hostname;
	    if (endpoint.port !== 80 && endpoint.port !== 443) {
	      href += ':' + endpoint.port;
	    }
	    href += httpRequest.path;
	
	    var xhr = new XMLHttpRequest(), headersEmitted = false;
	    httpRequest.stream = xhr;
	
	    xhr.addEventListener('readystatechange', function() {
	      try {
	        if (xhr.status === 0) return; // 0 code is invalid
	      } catch (e) { return; }
	
	      if (this.readyState >= this.HEADERS_RECEIVED && !headersEmitted) {
	        try { xhr.responseType = 'arraybuffer'; } catch (e) {}
	        emitter.statusCode = xhr.status;
	        emitter.headers = self.parseHeaders(xhr.getAllResponseHeaders());
	        emitter.emit('headers', emitter.statusCode, emitter.headers);
	        headersEmitted = true;
	      }
	      if (this.readyState === this.DONE) {
	        self.finishRequest(xhr, emitter);
	      }
	    }, false);
	    xhr.upload.addEventListener('progress', function (evt) {
	      emitter.emit('sendProgress', evt);
	    });
	    xhr.addEventListener('progress', function (evt) {
	      emitter.emit('receiveProgress', evt);
	    }, false);
	    xhr.addEventListener('timeout', function () {
	      errCallback(AWS.util.error(new Error('Timeout'), {code: 'TimeoutError'}));
	    }, false);
	    xhr.addEventListener('error', function () {
	      errCallback(AWS.util.error(new Error('Network Failure'), {
	        code: 'NetworkingError'
	      }));
	    }, false);
	
	    callback(emitter);
	    xhr.open(httpRequest.method, href, httpOptions.xhrAsync !== false);
	    AWS.util.each(httpRequest.headers, function (key, value) {
	      if (key !== 'Content-Length' && key !== 'User-Agent' && key !== 'Host') {
	        xhr.setRequestHeader(key, value);
	      }
	    });
	
	    if (httpOptions.timeout && httpOptions.xhrAsync !== false) {
	      xhr.timeout = httpOptions.timeout;
	    }
	
	    if (httpOptions.xhrWithCredentials) {
	      xhr.withCredentials = true;
	    }
	
	    try {
	      xhr.send(httpRequest.body);
	    } catch (err) {
	      if (httpRequest.body && typeof httpRequest.body.buffer === 'object') {
	        xhr.send(httpRequest.body.buffer); // send ArrayBuffer directly
	      } else {
	        throw err;
	      }
	    }
	
	    return emitter;
	  },
	
	  parseHeaders: function parseHeaders(rawHeaders) {
	    var headers = {};
	    AWS.util.arrayEach(rawHeaders.split(/\r?\n/), function (line) {
	      var key = line.split(':', 1)[0];
	      var value = line.substring(key.length + 2);
	      if (key.length > 0) headers[key.toLowerCase()] = value;
	    });
	    return headers;
	  },
	
	  finishRequest: function finishRequest(xhr, emitter) {
	    var buffer;
	    if (xhr.responseType === 'arraybuffer' && xhr.response) {
	      var ab = xhr.response;
	      buffer = new AWS.util.Buffer(ab.byteLength);
	      var view = new Uint8Array(ab);
	      for (var i = 0; i < buffer.length; ++i) {
	        buffer[i] = view[i];
	      }
	    }
	
	    try {
	      if (!buffer && typeof xhr.responseText === 'string') {
	        buffer = new AWS.util.Buffer(xhr.responseText);
	      }
	    } catch (e) {}
	
	    if (buffer) emitter.emit('data', buffer);
	    emitter.emit('end');
	  }
	});
	
	
	AWS.HttpClient.prototype = AWS.XHRClient.prototype;
	
	
	AWS.HttpClient.streamsApiVersion = 1;
	
	},{"../core":201,"../http":214,"events":265}],216:[function(require,module,exports){
	var util = require('../util');
	
	function JsonBuilder() { }
	
	JsonBuilder.prototype.build = function(value, shape) {
	  return JSON.stringify(translate(value, shape));
	};
	
	function translate(value, shape) {
	  if (!shape || value === undefined || value === null) return undefined;
	
	  switch (shape.type) {
	    case 'structure': return translateStructure(value, shape);
	    case 'map': return translateMap(value, shape);
	    case 'list': return translateList(value, shape);
	    default: return translateScalar(value, shape);
	  }
	}
	
	function translateStructure(structure, shape) {
	  var struct = {};
	  util.each(structure, function(name, value) {
	    var memberShape = shape.members[name];
	    if (memberShape) {
	      if (memberShape.location !== 'body') return;
	      var locationName = memberShape.isLocationName ? memberShape.name : name;
	      var result = translate(value, memberShape);
	      if (result !== undefined) struct[locationName] = result;
	    }
	  });
	  return struct;
	}
	
	function translateList(list, shape) {
	  var out = [];
	  util.arrayEach(list, function(value) {
	    var result = translate(value, shape.member);
	    if (result !== undefined) out.push(result);
	  });
	  return out;
	}
	
	function translateMap(map, shape) {
	  var out = {};
	  util.each(map, function(key, value) {
	    var result = translate(value, shape.value);
	    if (result !== undefined) out[key] = result;
	  });
	  return out;
	}
	
	function translateScalar(value, shape) {
	  return shape.toWireFormat(value);
	}
	
	module.exports = JsonBuilder;
	
	},{"../util":261}],217:[function(require,module,exports){
	var util = require('../util');
	
	function JsonParser() { }
	
	JsonParser.prototype.parse = function(value, shape) {
	  return translate(JSON.parse(value), shape);
	};
	
	function translate(value, shape) {
	  if (!shape || value === undefined) return undefined;
	
	  switch (shape.type) {
	    case 'structure': return translateStructure(value, shape);
	    case 'map': return translateMap(value, shape);
	    case 'list': return translateList(value, shape);
	    default: return translateScalar(value, shape);
	  }
	}
	
	function translateStructure(structure, shape) {
	  if (structure == null) return undefined;
	
	  var struct = {};
	  var shapeMembers = shape.members;
	  util.each(shapeMembers, function(name, memberShape) {
	    var locationName = memberShape.isLocationName ? memberShape.name : name;
	    if (Object.prototype.hasOwnProperty.call(structure, locationName)) {
	      var value = structure[locationName];
	      var result = translate(value, memberShape);
	      if (result !== undefined) struct[name] = result;
	    }
	  });
	  return struct;
	}
	
	function translateList(list, shape) {
	  if (list == null) return undefined;
	
	  var out = [];
	  util.arrayEach(list, function(value) {
	    var result = translate(value, shape.member);
	    if (result === undefined) out.push(null);
	    else out.push(result);
	  });
	  return out;
	}
	
	function translateMap(map, shape) {
	  if (map == null) return undefined;
	
	  var out = {};
	  util.each(map, function(key, value) {
	    var result = translate(value, shape.value);
	    if (result === undefined) out[key] = null;
	    else out[key] = result;
	  });
	  return out;
	}
	
	function translateScalar(value, shape) {
	  return shape.toType(value);
	}
	
	module.exports = JsonParser;
	
	},{"../util":261}],218:[function(require,module,exports){
	var Collection = require('./collection');
	var Operation = require('./operation');
	var Shape = require('./shape');
	var Paginator = require('./paginator');
	var ResourceWaiter = require('./resource_waiter');
	
	var util = require('../util');
	var property = util.property;
	var memoizedProperty = util.memoizedProperty;
	
	function Api(api, options) {
	  api = api || {};
	  options = options || {};
	  options.api = this;
	
	  api.metadata = api.metadata || {};
	
	  property(this, 'isApi', true, false);
	  property(this, 'apiVersion', api.metadata.apiVersion);
	  property(this, 'endpointPrefix', api.metadata.endpointPrefix);
	  property(this, 'signingName', api.metadata.signingName);
	  property(this, 'globalEndpoint', api.metadata.globalEndpoint);
	  property(this, 'signatureVersion', api.metadata.signatureVersion);
	  property(this, 'jsonVersion', api.metadata.jsonVersion);
	  property(this, 'targetPrefix', api.metadata.targetPrefix);
	  property(this, 'protocol', api.metadata.protocol);
	  property(this, 'timestampFormat', api.metadata.timestampFormat);
	  property(this, 'xmlNamespaceUri', api.metadata.xmlNamespace);
	  property(this, 'abbreviation', api.metadata.serviceAbbreviation);
	  property(this, 'fullName', api.metadata.serviceFullName);
	
	  memoizedProperty(this, 'className', function() {
	    var name = api.metadata.serviceAbbreviation || api.metadata.serviceFullName;
	    if (!name) return null;
	
	    name = name.replace(/^Amazon|AWS\s*|\(.*|\s+|\W+/g, '');
	    if (name === 'ElasticLoadBalancing') name = 'ELB';
	    return name;
	  });
	
	  property(this, 'operations', new Collection(api.operations, options, function(name, operation) {
	    return new Operation(name, operation, options);
	  }, util.string.lowerFirst));
	
	  property(this, 'shapes', new Collection(api.shapes, options, function(name, shape) {
	    return Shape.create(shape, options);
	  }));
	
	  property(this, 'paginators', new Collection(api.paginators, options, function(name, paginator) {
	    return new Paginator(name, paginator, options);
	  }));
	
	  property(this, 'waiters', new Collection(api.waiters, options, function(name, waiter) {
	    return new ResourceWaiter(name, waiter, options);
	  }, util.string.lowerFirst));
	
	  if (options.documentation) {
	    property(this, 'documentation', api.documentation);
	    property(this, 'documentationUrl', api.documentationUrl);
	  }
	}
	
	module.exports = Api;
	
	},{"../util":261,"./collection":219,"./operation":220,"./paginator":221,"./resource_waiter":222,"./shape":223}],219:[function(require,module,exports){
	var memoizedProperty = require('../util').memoizedProperty;
	
	function memoize(name, value, fn, nameTr) {
	  memoizedProperty(this, nameTr(name), function() {
	    return fn(name, value);
	  });
	}
	
	function Collection(iterable, options, fn, nameTr) {
	  nameTr = nameTr || String;
	  var self = this;
	
	  for (var id in iterable) {
	    if (Object.prototype.hasOwnProperty.call(iterable, id)) {
	      memoize.call(self, id, iterable[id], fn, nameTr);
	    }
	  }
	}
	
	module.exports = Collection;
	
	},{"../util":261}],220:[function(require,module,exports){
	var Shape = require('./shape');
	
	var util = require('../util');
	var property = util.property;
	var memoizedProperty = util.memoizedProperty;
	
	function Operation(name, operation, options) {
	  var self = this;
	  options = options || {};
	
	  property(this, 'name', operation.name || name);
	  property(this, 'api', options.api, false);
	
	  operation.http = operation.http || {};
	  property(this, 'httpMethod', operation.http.method || 'POST');
	  property(this, 'httpPath', operation.http.requestUri || '/');
	  property(this, 'authtype', operation.authtype || '');
	
	  memoizedProperty(this, 'input', function() {
	    if (!operation.input) {
	      return new Shape.create({type: 'structure'}, options);
	    }
	    return Shape.create(operation.input, options);
	  });
	
	  memoizedProperty(this, 'output', function() {
	    if (!operation.output) {
	      return new Shape.create({type: 'structure'}, options);
	    }
	    return Shape.create(operation.output, options);
	  });
	
	  memoizedProperty(this, 'errors', function() {
	    var list = [];
	    if (!operation.errors) return null;
	
	    for (var i = 0; i < operation.errors.length; i++) {
	      list.push(Shape.create(operation.errors[i], options));
	    }
	
	    return list;
	  });
	
	  memoizedProperty(this, 'paginator', function() {
	    return options.api.paginators[name];
	  });
	
	  if (options.documentation) {
	    property(this, 'documentation', operation.documentation);
	    property(this, 'documentationUrl', operation.documentationUrl);
	  }
	
	  memoizedProperty(this, 'idempotentMembers', function() {
	    var idempotentMembers = [];
	    var input = self.input;
	    var members = input.members;
	    if (!input.members) {
	      return idempotentMembers;
	    }
	    for (var name in members) {
	      if (!members.hasOwnProperty(name)) {
	        continue;
	      }
	      if (members[name].isIdempotent === true) {
	        idempotentMembers.push(name);
	      }
	    }
	    return idempotentMembers;
	  });
	
	}
	
	module.exports = Operation;
	
	},{"../util":261,"./shape":223}],221:[function(require,module,exports){
	var property = require('../util').property;
	
	function Paginator(name, paginator) {
	  property(this, 'inputToken', paginator.input_token);
	  property(this, 'limitKey', paginator.limit_key);
	  property(this, 'moreResults', paginator.more_results);
	  property(this, 'outputToken', paginator.output_token);
	  property(this, 'resultKey', paginator.result_key);
	}
	
	module.exports = Paginator;
	
	},{"../util":261}],222:[function(require,module,exports){
	var util = require('../util');
	var property = util.property;
	
	function ResourceWaiter(name, waiter, options) {
	  options = options || {};
	  property(this, 'name', name);
	  property(this, 'api', options.api, false);
	
	  if (waiter.operation) {
	    property(this, 'operation', util.string.lowerFirst(waiter.operation));
	  }
	
	  var self = this;
	  var keys = [
	    'type',
	    'description',
	    'delay',
	    'maxAttempts',
	    'acceptors'
	  ];
	
	  keys.forEach(function(key) {
	    var value = waiter[key];
	    if (value) {
	      property(self, key, value);
	    }
	  });
	}
	
	module.exports = ResourceWaiter;
	
	},{"../util":261}],223:[function(require,module,exports){
	var Collection = require('./collection');
	
	var util = require('../util');
	
	function property(obj, name, value) {
	  if (value !== null && value !== undefined) {
	    util.property.apply(this, arguments);
	  }
	}
	
	function memoizedProperty(obj, name) {
	  if (!obj.constructor.prototype[name]) {
	    util.memoizedProperty.apply(this, arguments);
	  }
	}
	
	function Shape(shape, options, memberName) {
	  options = options || {};
	
	  property(this, 'shape', shape.shape);
	  property(this, 'api', options.api, false);
	  property(this, 'type', shape.type);
	  property(this, 'enum', shape.enum);
	  property(this, 'min', shape.min);
	  property(this, 'max', shape.max);
	  property(this, 'pattern', shape.pattern);
	  property(this, 'location', shape.location || this.location || 'body');
	  property(this, 'name', this.name || shape.xmlName || shape.queryName ||
	    shape.locationName || memberName);
	  property(this, 'isStreaming', shape.streaming || this.isStreaming || false);
	  property(this, 'isComposite', shape.isComposite || false);
	  property(this, 'isShape', true, false);
	  property(this, 'isQueryName', shape.queryName ? true : false, false);
	  property(this, 'isLocationName', shape.locationName ? true : false, false);
	  property(this, 'isIdempotent', shape.idempotencyToken === true);
	
	  if (options.documentation) {
	    property(this, 'documentation', shape.documentation);
	    property(this, 'documentationUrl', shape.documentationUrl);
	  }
	
	  if (shape.xmlAttribute) {
	    property(this, 'isXmlAttribute', shape.xmlAttribute || false);
	  }
	
	  property(this, 'defaultValue', null);
	  this.toWireFormat = function(value) {
	    if (value === null || value === undefined) return '';
	    return value;
	  };
	  this.toType = function(value) { return value; };
	}
	
	
	Shape.normalizedTypes = {
	  character: 'string',
	  double: 'float',
	  long: 'integer',
	  short: 'integer',
	  biginteger: 'integer',
	  bigdecimal: 'float',
	  blob: 'binary'
	};
	
	
	Shape.types = {
	  'structure': StructureShape,
	  'list': ListShape,
	  'map': MapShape,
	  'boolean': BooleanShape,
	  'timestamp': TimestampShape,
	  'float': FloatShape,
	  'integer': IntegerShape,
	  'string': StringShape,
	  'base64': Base64Shape,
	  'binary': BinaryShape
	};
	
	Shape.resolve = function resolve(shape, options) {
	  if (shape.shape) {
	    var refShape = options.api.shapes[shape.shape];
	    if (!refShape) {
	      throw new Error('Cannot find shape reference: ' + shape.shape);
	    }
	
	    return refShape;
	  } else {
	    return null;
	  }
	};
	
	Shape.create = function create(shape, options, memberName) {
	  if (shape.isShape) return shape;
	
	  var refShape = Shape.resolve(shape, options);
	  if (refShape) {
	    var filteredKeys = Object.keys(shape);
	    if (!options.documentation) {
	      filteredKeys = filteredKeys.filter(function(name) {
	        return !name.match(/documentation/);
	      });
	    }
	    if (filteredKeys === ['shape']) { // no inline customizations
	      return refShape;
	    }
	
	    var InlineShape = function() {
	      refShape.constructor.call(this, shape, options, memberName);
	    };
	    InlineShape.prototype = refShape;
	    return new InlineShape();
	  } else {
	    if (!shape.type) {
	      if (shape.members) shape.type = 'structure';
	      else if (shape.member) shape.type = 'list';
	      else if (shape.key) shape.type = 'map';
	      else shape.type = 'string';
	    }
	
	    var origType = shape.type;
	    if (Shape.normalizedTypes[shape.type]) {
	      shape.type = Shape.normalizedTypes[shape.type];
	    }
	
	    if (Shape.types[shape.type]) {
	      return new Shape.types[shape.type](shape, options, memberName);
	    } else {
	      throw new Error('Unrecognized shape type: ' + origType);
	    }
	  }
	};
	
	function CompositeShape(shape) {
	  Shape.apply(this, arguments);
	  property(this, 'isComposite', true);
	
	  if (shape.flattened) {
	    property(this, 'flattened', shape.flattened || false);
	  }
	}
	
	function StructureShape(shape, options) {
	  var requiredMap = null, firstInit = !this.isShape;
	
	  CompositeShape.apply(this, arguments);
	
	  if (firstInit) {
	    property(this, 'defaultValue', function() { return {}; });
	    property(this, 'members', {});
	    property(this, 'memberNames', []);
	    property(this, 'required', []);
	    property(this, 'isRequired', function() { return false; });
	  }
	
	  if (shape.members) {
	    property(this, 'members', new Collection(shape.members, options, function(name, member) {
	      return Shape.create(member, options, name);
	    }));
	    memoizedProperty(this, 'memberNames', function() {
	      return shape.xmlOrder || Object.keys(shape.members);
	    });
	  }
	
	  if (shape.required) {
	    property(this, 'required', shape.required);
	    property(this, 'isRequired', function(name) {
	      if (!requiredMap) {
	        requiredMap = {};
	        for (var i = 0; i < shape.required.length; i++) {
	          requiredMap[shape.required[i]] = true;
	        }
	      }
	
	      return requiredMap[name];
	    }, false, true);
	  }
	
	  property(this, 'resultWrapper', shape.resultWrapper || null);
	
	  if (shape.payload) {
	    property(this, 'payload', shape.payload);
	  }
	
	  if (typeof shape.xmlNamespace === 'string') {
	    property(this, 'xmlNamespaceUri', shape.xmlNamespace);
	  } else if (typeof shape.xmlNamespace === 'object') {
	    property(this, 'xmlNamespacePrefix', shape.xmlNamespace.prefix);
	    property(this, 'xmlNamespaceUri', shape.xmlNamespace.uri);
	  }
	}
	
	function ListShape(shape, options) {
	  var self = this, firstInit = !this.isShape;
	  CompositeShape.apply(this, arguments);
	
	  if (firstInit) {
	    property(this, 'defaultValue', function() { return []; });
	  }
	
	  if (shape.member) {
	    memoizedProperty(this, 'member', function() {
	      return Shape.create(shape.member, options);
	    });
	  }
	
	  if (this.flattened) {
	    var oldName = this.name;
	    memoizedProperty(this, 'name', function() {
	      return self.member.name || oldName;
	    });
	  }
	}
	
	function MapShape(shape, options) {
	  var firstInit = !this.isShape;
	  CompositeShape.apply(this, arguments);
	
	  if (firstInit) {
	    property(this, 'defaultValue', function() { return {}; });
	    property(this, 'key', Shape.create({type: 'string'}, options));
	    property(this, 'value', Shape.create({type: 'string'}, options));
	  }
	
	  if (shape.key) {
	    memoizedProperty(this, 'key', function() {
	      return Shape.create(shape.key, options);
	    });
	  }
	  if (shape.value) {
	    memoizedProperty(this, 'value', function() {
	      return Shape.create(shape.value, options);
	    });
	  }
	}
	
	function TimestampShape(shape) {
	  var self = this;
	  Shape.apply(this, arguments);
	
	  if (this.location === 'header') {
	    property(this, 'timestampFormat', 'rfc822');
	  } else if (shape.timestampFormat) {
	    property(this, 'timestampFormat', shape.timestampFormat);
	  } else if (this.api) {
	    if (this.api.timestampFormat) {
	      property(this, 'timestampFormat', this.api.timestampFormat);
	    } else {
	      switch (this.api.protocol) {
	        case 'json':
	        case 'rest-json':
	          property(this, 'timestampFormat', 'unixTimestamp');
	          break;
	        case 'rest-xml':
	        case 'query':
	        case 'ec2':
	          property(this, 'timestampFormat', 'iso8601');
	          break;
	      }
	    }
	  }
	
	  this.toType = function(value) {
	    if (value === null || value === undefined) return null;
	    if (typeof value.toUTCString === 'function') return value;
	    return typeof value === 'string' || typeof value === 'number' ?
	           util.date.parseTimestamp(value) : null;
	  };
	
	  this.toWireFormat = function(value) {
	    return util.date.format(value, self.timestampFormat);
	  };
	}
	
	function StringShape() {
	  Shape.apply(this, arguments);
	
	  if (this.api) {
	    switch (this.api.protocol) {
	      case 'rest-xml':
	      case 'query':
	      case 'ec2':
	        this.toType = function(value) { return value || ''; };
	    }
	  }
	}
	
	function FloatShape() {
	  Shape.apply(this, arguments);
	
	  this.toType = function(value) {
	    if (value === null || value === undefined) return null;
	    return parseFloat(value);
	  };
	  this.toWireFormat = this.toType;
	}
	
	function IntegerShape() {
	  Shape.apply(this, arguments);
	
	  this.toType = function(value) {
	    if (value === null || value === undefined) return null;
	    return parseInt(value, 10);
	  };
	  this.toWireFormat = this.toType;
	}
	
	function BinaryShape() {
	  Shape.apply(this, arguments);
	  this.toType = util.base64.decode;
	  this.toWireFormat = util.base64.encode;
	}
	
	function Base64Shape() {
	  BinaryShape.apply(this, arguments);
	}
	
	function BooleanShape() {
	  Shape.apply(this, arguments);
	
	  this.toType = function(value) {
	    if (typeof value === 'boolean') return value;
	    if (value === null || value === undefined) return null;
	    return value === 'true';
	  };
	}
	
	
	Shape.shapes = {
	  StructureShape: StructureShape,
	  ListShape: ListShape,
	  MapShape: MapShape,
	  StringShape: StringShape,
	  BooleanShape: BooleanShape,
	  Base64Shape: Base64Shape
	};
	
	module.exports = Shape;
	
	},{"../util":261,"./collection":219}],224:[function(require,module,exports){
	var AWS = require('./core');
	
	
	AWS.ParamValidator = AWS.util.inherit({
	
	  constructor: function ParamValidator(validation) {
	    if (validation === true || validation === undefined) {
	      validation = {'min': true};
	    }
	    this.validation = validation;
	  },
	
	  validate: function validate(shape, params, context) {
	    this.errors = [];
	    this.validateMember(shape, params || {}, context || 'params');
	
	    if (this.errors.length > 1) {
	      var msg = this.errors.join('\n* ');
	      msg = 'There were ' + this.errors.length +
	        ' validation errors:\n* ' + msg;
	      throw AWS.util.error(new Error(msg),
	        {code: 'MultipleValidationErrors', errors: this.errors});
	    } else if (this.errors.length === 1) {
	      throw this.errors[0];
	    } else {
	      return true;
	    }
	  },
	
	  fail: function fail(code, message) {
	    this.errors.push(AWS.util.error(new Error(message), {code: code}));
	  },
	
	  validateStructure: function validateStructure(shape, params, context) {
	    this.validateType(params, context, ['object'], 'structure');
	
	    var paramName;
	    for (var i = 0; shape.required && i < shape.required.length; i++) {
	      paramName = shape.required[i];
	      var value = params[paramName];
	      if (value === undefined || value === null) {
	        this.fail('MissingRequiredParameter',
	          'Missing required key \'' + paramName + '\' in ' + context);
	      }
	    }
	
	    for (paramName in params) {
	      if (!Object.prototype.hasOwnProperty.call(params, paramName)) continue;
	
	      var paramValue = params[paramName],
	          memberShape = shape.members[paramName];
	
	      if (memberShape !== undefined) {
	        var memberContext = [context, paramName].join('.');
	        this.validateMember(memberShape, paramValue, memberContext);
	      } else {
	        this.fail('UnexpectedParameter',
	          'Unexpected key \'' + paramName + '\' found in ' + context);
	      }
	    }
	
	    return true;
	  },
	
	  validateMember: function validateMember(shape, param, context) {
	    switch (shape.type) {
	      case 'structure':
	        return this.validateStructure(shape, param, context);
	      case 'list':
	        return this.validateList(shape, param, context);
	      case 'map':
	        return this.validateMap(shape, param, context);
	      default:
	        return this.validateScalar(shape, param, context);
	    }
	  },
	
	  validateList: function validateList(shape, params, context) {
	    if (this.validateType(params, context, [Array])) {
	      this.validateRange(shape, params.length, context, 'list member count');
	      for (var i = 0; i < params.length; i++) {
	        this.validateMember(shape.member, params[i], context + '[' + i + ']');
	      }
	    }
	  },
	
	  validateMap: function validateMap(shape, params, context) {
	    if (this.validateType(params, context, ['object'], 'map')) {
	      var mapCount = 0;
	      for (var param in params) {
	        if (!Object.prototype.hasOwnProperty.call(params, param)) continue;
	        this.validateMember(shape.key, param,
	                            context + '[key=\'' + param + '\']')
	        this.validateMember(shape.value, params[param],
	                            context + '[\'' + param + '\']');
	        mapCount++;
	      }
	      this.validateRange(shape, mapCount, context, 'map member count');
	    }
	  },
	
	  validateScalar: function validateScalar(shape, value, context) {
	    switch (shape.type) {
	      case null:
	      case undefined:
	      case 'string':
	        return this.validateString(shape, value, context);
	      case 'base64':
	      case 'binary':
	        return this.validatePayload(value, context);
	      case 'integer':
	      case 'float':
	        return this.validateNumber(shape, value, context);
	      case 'boolean':
	        return this.validateType(value, context, ['boolean']);
	      case 'timestamp':
	        return this.validateType(value, context, [Date,
	          /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?Z$/, 'number'],
	          'Date object, ISO-8601 string, or a UNIX timestamp');
	      default:
	        return this.fail('UnkownType', 'Unhandled type ' +
	                         shape.type + ' for ' + context);
	    }
	  },
	
	  validateString: function validateString(shape, value, context) {
	    if (this.validateType(value, context, ['string'])) {
	      this.validateEnum(shape, value, context);
	      this.validateRange(shape, value.length, context, 'string length');
	      this.validatePattern(shape, value, context);
	    }
	  },
	
	  validatePattern: function validatePattern(shape, value, context) {
	    if (this.validation['pattern'] && shape['pattern'] !== undefined) {
	      if (!(new RegExp(shape['pattern'])).test(value)) {
	        this.fail('PatternMatchError', 'Provided value "' + value + '" '
	          + 'does not match regex pattern /' + shape['pattern'] + '/ for '
	          + context);
	      }
	    }
	  },
	
	  validateRange: function validateRange(shape, value, context, descriptor) {
	    if (this.validation['min']) {
	      if (shape['min'] !== undefined && value < shape['min']) {
	        this.fail('MinRangeError', 'Expected ' + descriptor + ' >= '
	          + shape['min'] + ', but found ' + value + ' for ' + context);
	      }
	    }
	    if (this.validation['max']) {
	      if (shape['max'] !== undefined && value > shape['max']) {
	        this.fail('MaxRangeError', 'Expected ' + descriptor + ' <= '
	          + shape['max'] + ', but found ' + value + ' for ' + context);
	      }
	    }
	  },
	
	  validateEnum: function validateRange(shape, value, context) {
	    if (this.validation['enum'] && shape['enum'] !== undefined) {
	      if (shape['enum'].indexOf(value) === -1) {
	        this.fail('EnumError', 'Found string value of ' + value + ', but '
	          + 'expected ' + shape['enum'].join('|') + ' for ' + context);
	      }
	    }
	  },
	
	  validateType: function validateType(value, context, acceptedTypes, type) {
	    if (value === null || value === undefined) return false;
	
	    var foundInvalidType = false;
	    for (var i = 0; i < acceptedTypes.length; i++) {
	      if (typeof acceptedTypes[i] === 'string') {
	        if (typeof value === acceptedTypes[i]) return true;
	      } else if (acceptedTypes[i] instanceof RegExp) {
	        if ((value || '').toString().match(acceptedTypes[i])) return true;
	      } else {
	        if (value instanceof acceptedTypes[i]) return true;
	        if (AWS.util.isType(value, acceptedTypes[i])) return true;
	        if (!type && !foundInvalidType) acceptedTypes = acceptedTypes.slice();
	        acceptedTypes[i] = AWS.util.typeName(acceptedTypes[i]);
	      }
	      foundInvalidType = true;
	    }
	
	    var acceptedType = type;
	    if (!acceptedType) {
	      acceptedType = acceptedTypes.join(', ').replace(/,([^,]+)$/, ', or$1');
	    }
	
	    var vowel = acceptedType.match(/^[aeiou]/i) ? 'n' : '';
	    this.fail('InvalidParameterType', 'Expected ' + context + ' to be a' +
	              vowel + ' ' + acceptedType);
	    return false;
	  },
	
	  validateNumber: function validateNumber(shape, value, context) {
	    if (value === null || value === undefined) return;
	    if (typeof value === 'string') {
	      var castedValue = parseFloat(value);
	      if (castedValue.toString() === value) value = castedValue;
	    }
	    if (this.validateType(value, context, ['number'])) {
	      this.validateRange(shape, value, context, 'numeric value');
	    }
	  },
	
	  validatePayload: function validatePayload(value, context) {
	    if (value === null || value === undefined) return;
	    if (typeof value === 'string') return;
	    if (value && typeof value.byteLength === 'number') return; // typed arrays
	    if (AWS.util.isNode()) { // special check for buffer/stream in Node.js
	      var Stream = AWS.util.stream.Stream;
	      if (AWS.util.Buffer.isBuffer(value) || value instanceof Stream) return;
	    }
	
	    var types = ['Buffer', 'Stream', 'File', 'Blob', 'ArrayBuffer', 'DataView'];
	    if (value) {
	      for (var i = 0; i < types.length; i++) {
	        if (AWS.util.isType(value, types[i])) return;
	        if (AWS.util.typeName(value.constructor) === types[i]) return;
	      }
	    }
	
	    this.fail('InvalidParameterType', 'Expected ' + context + ' to be a ' +
	      'string, Buffer, Stream, Blob, or typed array object');
	  }
	});
	
	},{"./core":201}],225:[function(require,module,exports){
	var AWS = require('../core');
	var rest = require('../protocol/rest');
	
	
	AWS.Polly.Presigner = AWS.util.inherit({
	
	    constructor: function Signer(options) {
	        options = options || {};
	        this.options = options;
	        this.service = options.service;
	        this.bindServiceObject(options);
	        this._operations = {};
	    },
	
	
	    bindServiceObject: function bindServiceObject(options) {
	        options = options || {};
	        if (!this.service) {
	            this.service = new AWS.Polly(options);
	        } else {
	            var config = AWS.util.copy(this.service.config);
	            this.service = new this.service.constructor.__super__(config);
	            this.service.config.params = AWS.util.merge(this.service.config.params || {}, options.params);
	        }
	    },
	
	
	    modifyInputMembers: function modifyInputMembers(input) {
	        var modifiedInput = AWS.util.copy(input);
	        modifiedInput.members = AWS.util.copy(input.members);
	        AWS.util.each(input.members, function(name, member) {
	            modifiedInput.members[name] = AWS.util.copy(member);
	            if (!member.location || member.location === 'body') {
	                modifiedInput.members[name].location = 'querystring';
	                modifiedInput.members[name].locationName = name;
	            }
	        });
	        return modifiedInput;
	    },
	
	
	    convertPostToGet: function convertPostToGet(req) {
	        req.httpRequest.method = 'GET';
	
	        var operation = req.service.api.operations[req.operation];
	        var input = this._operations[req.operation];
	        if (!input) {
	            this._operations[req.operation] = input = this.modifyInputMembers(operation.input);
	        }
	
	        var uri = rest.generateURI(req.httpRequest.endpoint.path, operation.httpPath, input, req.params);
	
	        req.httpRequest.path = uri;
	        req.httpRequest.body = '';
	
	        delete req.httpRequest.headers['Content-Length'];
	        delete req.httpRequest.headers['Content-Type'];
	    },
	
	
	    getSynthesizeSpeechUrl: function getSynthesizeSpeechUrl(params, expires, callback) {
	        var self = this;
	        var request = this.service.makeRequest('synthesizeSpeech', params);
	        request.removeAllListeners('build');
	        request.on('build', function(req) {
	            self.convertPostToGet(req);
	        });
	        return request.presign(expires, callback);
	    }
	});
	
	},{"../core":201,"../protocol/rest":228}],226:[function(require,module,exports){
	var util = require('../util');
	var JsonBuilder = require('../json/builder');
	var JsonParser = require('../json/parser');
	
	function buildRequest(req) {
	  var httpRequest = req.httpRequest;
	  var api = req.service.api;
	  var target = api.targetPrefix + '.' + api.operations[req.operation].name;
	  var version = api.jsonVersion || '1.0';
	  var input = api.operations[req.operation].input;
	  var builder = new JsonBuilder();
	
	  if (version === 1) version = '1.0';
	  httpRequest.body = builder.build(req.params || {}, input);
	  httpRequest.headers['Content-Type'] = 'application/x-amz-json-' + version;
	  httpRequest.headers['X-Amz-Target'] = target;
	}
	
	function extractError(resp) {
	  var error = {};
	  var httpResponse = resp.httpResponse;
	
	  error.code = httpResponse.headers['x-amzn-errortype'] || 'UnknownError';
	  if (typeof error.code === 'string') {
	    error.code = error.code.split(':')[0];
	  }
	
	  if (httpResponse.body.length > 0) {
	    var e = JSON.parse(httpResponse.body.toString());
	    if (e.__type || e.code) {
	      error.code = (e.__type || e.code).split('#').pop();
	    }
	    if (error.code === 'RequestEntityTooLarge') {
	      error.message = 'Request body must be less than 1 MB';
	    } else {
	      error.message = (e.message || e.Message || null);
	    }
	  } else {
	    error.statusCode = httpResponse.statusCode;
	    error.message = httpResponse.statusCode.toString();
	  }
	
	  resp.error = util.error(new Error(), error);
	}
	
	function extractData(resp) {
	  var body = resp.httpResponse.body.toString() || '{}';
	  if (resp.request.service.config.convertResponseTypes === false) {
	    resp.data = JSON.parse(body);
	  } else {
	    var operation = resp.request.service.api.operations[resp.request.operation];
	    var shape = operation.output || {};
	    var parser = new JsonParser();
	    resp.data = parser.parse(body, shape);
	  }
	}
	
	module.exports = {
	  buildRequest: buildRequest,
	  extractError: extractError,
	  extractData: extractData
	};
	
	},{"../json/builder":216,"../json/parser":217,"../util":261}],227:[function(require,module,exports){
	var AWS = require('../core');
	var util = require('../util');
	var QueryParamSerializer = require('../query/query_param_serializer');
	var Shape = require('../model/shape');
	
	function buildRequest(req) {
	  var operation = req.service.api.operations[req.operation];
	  var httpRequest = req.httpRequest;
	  httpRequest.headers['Content-Type'] =
	    'application/x-www-form-urlencoded; charset=utf-8';
	  httpRequest.params = {
	    Version: req.service.api.apiVersion,
	    Action: operation.name
	  };
	
	  var builder = new QueryParamSerializer();
	  builder.serialize(req.params, operation.input, function(name, value) {
	    httpRequest.params[name] = value;
	  });
	  httpRequest.body = util.queryParamsToString(httpRequest.params);
	}
	
	function extractError(resp) {
	  var data, body = resp.httpResponse.body.toString();
	  if (body.match('<UnknownOperationException')) {
	    data = {
	      Code: 'UnknownOperation',
	      Message: 'Unknown operation ' + resp.request.operation
	    };
	  } else {
	    data = new AWS.XML.Parser().parse(body);
	  }
	
	  if (data.requestId && !resp.requestId) resp.requestId = data.requestId;
	  if (data.Errors) data = data.Errors;
	  if (data.Error) data = data.Error;
	  if (data.Code) {
	    resp.error = util.error(new Error(), {
	      code: data.Code,
	      message: data.Message
	    });
	  } else {
	    resp.error = util.error(new Error(), {
	      code: resp.httpResponse.statusCode,
	      message: null
	    });
	  }
	}
	
	function extractData(resp) {
	  var req = resp.request;
	  var operation = req.service.api.operations[req.operation];
	  var shape = operation.output || {};
	  var origRules = shape;
	
	  if (origRules.resultWrapper) {
	    var tmp = Shape.create({type: 'structure'});
	    tmp.members[origRules.resultWrapper] = shape;
	    tmp.memberNames = [origRules.resultWrapper];
	    util.property(shape, 'name', shape.resultWrapper);
	    shape = tmp;
	  }
	
	  var parser = new AWS.XML.Parser();
	
	  if (shape && shape.members && !shape.members._XAMZRequestId) {
	    var requestIdShape = Shape.create(
	      { type: 'string' },
	      { api: { protocol: 'query' } },
	      'requestId'
	    );
	    shape.members._XAMZRequestId = requestIdShape;
	  }
	
	  var data = parser.parse(resp.httpResponse.body.toString(), shape);
	  resp.requestId = data._XAMZRequestId || data.requestId;
	
	  if (data._XAMZRequestId) delete data._XAMZRequestId;
	
	  if (origRules.resultWrapper) {
	    if (data[origRules.resultWrapper]) {
	      util.update(data, data[origRules.resultWrapper]);
	      delete data[origRules.resultWrapper];
	    }
	  }
	
	  resp.data = data;
	}
	
	module.exports = {
	  buildRequest: buildRequest,
	  extractError: extractError,
	  extractData: extractData
	};
	
	},{"../core":201,"../model/shape":223,"../query/query_param_serializer":231,"../util":261}],228:[function(require,module,exports){
	var util = require('../util');
	
	function populateMethod(req) {
	  req.httpRequest.method = req.service.api.operations[req.operation].httpMethod;
	}
	
	function generateURI(endpointPath, operationPath, input, params) {
	  var uri = [endpointPath, operationPath].join('/');
	  uri = uri.replace(/\/+/g, '/');
	
	  var queryString = {}, queryStringSet = false;
	  util.each(input.members, function (name, member) {
	    var paramValue = params[name];
	    if (paramValue === null || paramValue === undefined) return;
	    if (member.location === 'uri') {
	      var regex = new RegExp('\\{' + member.name + '(\\+)?\\}');
	      uri = uri.replace(regex, function(_, plus) {
	        var fn = plus ? util.uriEscapePath : util.uriEscape;
	        return fn(String(paramValue));
	      });
	    } else if (member.location === 'querystring') {
	      queryStringSet = true;
	
	      if (member.type === 'list') {
	        queryString[member.name] = paramValue.map(function(val) {
	          return util.uriEscape(String(val));
	        });
	      } else if (member.type === 'map') {
	        util.each(paramValue, function(key, value) {
	          if (Array.isArray(value)) {
	            queryString[key] = value.map(function(val) {
	              return util.uriEscape(String(val));
	            });
	          } else {
	            queryString[key] = util.uriEscape(String(value));
	          }
	        });
	      } else {
	        queryString[member.name] = util.uriEscape(String(paramValue));
	      }
	    }
	  });
	
	  if (queryStringSet) {
	    uri += (uri.indexOf('?') >= 0 ? '&' : '?');
	    var parts = [];
	    util.arrayEach(Object.keys(queryString).sort(), function(key) {
	      if (!Array.isArray(queryString[key])) {
	        queryString[key] = [queryString[key]];
	      }
	      for (var i = 0; i < queryString[key].length; i++) {
	        parts.push(util.uriEscape(String(key)) + '=' + queryString[key][i]);
	      }
	    });
	    uri += parts.join('&');
	  }
	
	  return uri;
	}
	
	function populateURI(req) {
	  var operation = req.service.api.operations[req.operation];
	  var input = operation.input;
	
	  var uri = generateURI(req.httpRequest.endpoint.path, operation.httpPath, input, req.params);
	  req.httpRequest.path = uri;
	}
	
	function populateHeaders(req) {
	  var operation = req.service.api.operations[req.operation];
	  util.each(operation.input.members, function (name, member) {
	    var value = req.params[name];
	    if (value === null || value === undefined) return;
	
	    if (member.location === 'headers' && member.type === 'map') {
	      util.each(value, function(key, memberValue) {
	        req.httpRequest.headers[member.name + key] = memberValue;
	      });
	    } else if (member.location === 'header') {
	      value = member.toWireFormat(value).toString();
	      req.httpRequest.headers[member.name] = value;
	    }
	  });
	}
	
	function buildRequest(req) {
	  populateMethod(req);
	  populateURI(req);
	  populateHeaders(req);
	}
	
	function extractError() {
	}
	
	function extractData(resp) {
	  var req = resp.request;
	  var data = {};
	  var r = resp.httpResponse;
	  var operation = req.service.api.operations[req.operation];
	  var output = operation.output;
	
	  var headers = {};
	  util.each(r.headers, function (k, v) {
	    headers[k.toLowerCase()] = v;
	  });
	
	  util.each(output.members, function(name, member) {
	    var header = (member.name || name).toLowerCase();
	    if (member.location === 'headers' && member.type === 'map') {
	      data[name] = {};
	      var location = member.isLocationName ? member.name : '';
	      var pattern = new RegExp('^' + location + '(.+)', 'i');
	      util.each(r.headers, function (k, v) {
	        var result = k.match(pattern);
	        if (result !== null) {
	          data[name][result[1]] = v;
	        }
	      });
	    } else if (member.location === 'header') {
	      if (headers[header] !== undefined) {
	        data[name] = headers[header];
	      }
	    } else if (member.location === 'statusCode') {
	      data[name] = parseInt(r.statusCode, 10);
	    }
	  });
	
	  resp.data = data;
	}
	
	module.exports = {
	  buildRequest: buildRequest,
	  extractError: extractError,
	  extractData: extractData,
	  generateURI: generateURI
	};
	
	},{"../util":261}],229:[function(require,module,exports){
	var util = require('../util');
	var Rest = require('./rest');
	var Json = require('./json');
	var JsonBuilder = require('../json/builder');
	var JsonParser = require('../json/parser');
	
	function populateBody(req) {
	  var builder = new JsonBuilder();
	  var input = req.service.api.operations[req.operation].input;
	
	  if (input.payload) {
	    var params = {};
	    var payloadShape = input.members[input.payload];
	    params = req.params[input.payload];
	    if (params === undefined) return;
	
	    if (payloadShape.type === 'structure') {
	      req.httpRequest.body = builder.build(params, payloadShape);
	    } else { // non-JSON payload
	      req.httpRequest.body = params;
	    }
	  } else {
	    req.httpRequest.body = builder.build(req.params, input);
	  }
	}
	
	function buildRequest(req) {
	  Rest.buildRequest(req);
	
	  if (['GET', 'HEAD', 'DELETE'].indexOf(req.httpRequest.method) < 0) {
	    populateBody(req);
	  }
	}
	
	function extractError(resp) {
	  Json.extractError(resp);
	}
	
	function extractData(resp) {
	  Rest.extractData(resp);
	
	  var req = resp.request;
	  var rules = req.service.api.operations[req.operation].output || {};
	  if (rules.payload) {
	    var payloadMember = rules.members[rules.payload];
	    var body = resp.httpResponse.body;
	    if (payloadMember.isStreaming) {
	      resp.data[rules.payload] = body;
	    } else if (payloadMember.type === 'structure' || payloadMember.type === 'list') {
	      var parser = new JsonParser();
	      resp.data[rules.payload] = parser.parse(body, payloadMember);
	    } else {
	      resp.data[rules.payload] = body.toString();
	    }
	  } else {
	    var data = resp.data;
	    Json.extractData(resp);
	    resp.data = util.merge(data, resp.data);
	  }
	}
	
	module.exports = {
	  buildRequest: buildRequest,
	  extractError: extractError,
	  extractData: extractData
	};
	
	},{"../json/builder":216,"../json/parser":217,"../util":261,"./json":226,"./rest":228}],230:[function(require,module,exports){
	var AWS = require('../core');
	var util = require('../util');
	var Rest = require('./rest');
	
	function populateBody(req) {
	  var input = req.service.api.operations[req.operation].input;
	  var builder = new AWS.XML.Builder();
	  var params = req.params;
	
	  var payload = input.payload;
	  if (payload) {
	    var payloadMember = input.members[payload];
	    params = params[payload];
	    if (params === undefined) return;
	
	    if (payloadMember.type === 'structure') {
	      var rootElement = payloadMember.name;
	      req.httpRequest.body = builder.toXML(params, payloadMember, rootElement, true);
	    } else { // non-xml payload
	      req.httpRequest.body = params;
	    }
	  } else {
	    req.httpRequest.body = builder.toXML(params, input, input.name ||
	      input.shape || util.string.upperFirst(req.operation) + 'Request');
	  }
	}
	
	function buildRequest(req) {
	  Rest.buildRequest(req);
	
	  if (['GET', 'HEAD'].indexOf(req.httpRequest.method) < 0) {
	    populateBody(req);
	  }
	}
	
	function extractError(resp) {
	  Rest.extractError(resp);
	
	  var data = new AWS.XML.Parser().parse(resp.httpResponse.body.toString());
	  if (data.Errors) data = data.Errors;
	  if (data.Error) data = data.Error;
	  if (data.Code) {
	    resp.error = util.error(new Error(), {
	      code: data.Code,
	      message: data.Message
	    });
	  } else {
	    resp.error = util.error(new Error(), {
	      code: resp.httpResponse.statusCode,
	      message: null
	    });
	  }
	}
	
	function extractData(resp) {
	  Rest.extractData(resp);
	
	  var parser;
	  var req = resp.request;
	  var body = resp.httpResponse.body;
	  var operation = req.service.api.operations[req.operation];
	  var output = operation.output;
	
	  var payload = output.payload;
	  if (payload) {
	    var payloadMember = output.members[payload];
	    if (payloadMember.isStreaming) {
	      resp.data[payload] = body;
	    } else if (payloadMember.type === 'structure') {
	      parser = new AWS.XML.Parser();
	      resp.data[payload] = parser.parse(body.toString(), payloadMember);
	    } else {
	      resp.data[payload] = body.toString();
	    }
	  } else if (body.length > 0) {
	    parser = new AWS.XML.Parser();
	    var data = parser.parse(body.toString(), output);
	    util.update(resp.data, data);
	  }
	}
	
	module.exports = {
	  buildRequest: buildRequest,
	  extractError: extractError,
	  extractData: extractData
	};
	
	},{"../core":201,"../util":261,"./rest":228}],231:[function(require,module,exports){
	var util = require('../util');
	
	function QueryParamSerializer() {
	}
	
	QueryParamSerializer.prototype.serialize = function(params, shape, fn) {
	  serializeStructure('', params, shape, fn);
	};
	
	function ucfirst(shape) {
	  if (shape.isQueryName || shape.api.protocol !== 'ec2') {
	    return shape.name;
	  } else {
	    return shape.name[0].toUpperCase() + shape.name.substr(1);
	  }
	}
	
	function serializeStructure(prefix, struct, rules, fn) {
	  util.each(rules.members, function(name, member) {
	    var value = struct[name];
	    if (value === null || value === undefined) return;
	
	    var memberName = ucfirst(member);
	    memberName = prefix ? prefix + '.' + memberName : memberName;
	    serializeMember(memberName, value, member, fn);
	  });
	}
	
	function serializeMap(name, map, rules, fn) {
	  var i = 1;
	  util.each(map, function (key, value) {
	    var prefix = rules.flattened ? '.' : '.entry.';
	    var position = prefix + (i++) + '.';
	    var keyName = position + (rules.key.name || 'key');
	    var valueName = position + (rules.value.name || 'value');
	    serializeMember(name + keyName, key, rules.key, fn);
	    serializeMember(name + valueName, value, rules.value, fn);
	  });
	}
	
	function serializeList(name, list, rules, fn) {
	  var memberRules = rules.member || {};
	
	  if (list.length === 0) {
	    fn.call(this, name, null);
	    return;
	  }
	
	  util.arrayEach(list, function (v, n) {
	    var suffix = '.' + (n + 1);
	    if (rules.api.protocol === 'ec2') {
	      suffix = suffix + ''; // make linter happy
	    } else if (rules.flattened) {
	      if (memberRules.name) {
	        var parts = name.split('.');
	        parts.pop();
	        parts.push(ucfirst(memberRules));
	        name = parts.join('.');
	      }
	    } else {
	      suffix = '.' + (memberRules.name ? memberRules.name : 'member') + suffix;
	    }
	    serializeMember(name + suffix, v, memberRules, fn);
	  });
	}
	
	function serializeMember(name, value, rules, fn) {
	  if (value === null || value === undefined) return;
	  if (rules.type === 'structure') {
	    serializeStructure(name, value, rules, fn);
	  } else if (rules.type === 'list') {
	    serializeList(name, value, rules, fn);
	  } else if (rules.type === 'map') {
	    serializeMap(name, value, rules, fn);
	  } else {
	    fn(name, rules.toWireFormat(value).toString());
	  }
	}
	
	module.exports = QueryParamSerializer;
	
	},{"../util":261}],232:[function(require,module,exports){
	module.exports={
	  "rules": {
	    "*/*": {
	      "endpoint": "{service}.{region}.amazonaws.com"
	    },
	    "cn-*/*": {
	      "endpoint": "{service}.{region}.amazonaws.com.cn"
	    },
	    "*/budgets": "globalSSL",
	    "*/cloudfront": "globalSSL",
	    "*/iam": "globalSSL",
	    "*/sts": "globalSSL",
	    "*/importexport": {
	      "endpoint": "{service}.amazonaws.com",
	      "signatureVersion": "v2",
	      "globalEndpoint": true
	    },
	    "*/route53": {
	      "endpoint": "https://{service}.amazonaws.com",
	      "signatureVersion": "v3https",
	      "globalEndpoint": true
	    },
	    "*/waf": "globalSSL",
	    "us-gov-*/iam": "globalGovCloud",
	    "us-gov-*/sts": {
	      "endpoint": "{service}.{region}.amazonaws.com"
	    },
	    "us-gov-west-1/s3": "s3dash",
	    "us-west-1/s3": "s3dash",
	    "us-west-2/s3": "s3dash",
	    "eu-west-1/s3": "s3dash",
	    "ap-southeast-1/s3": "s3dash",
	    "ap-southeast-2/s3": "s3dash",
	    "ap-northeast-1/s3": "s3dash",
	    "sa-east-1/s3": "s3dash",
	    "us-east-1/s3": {
	      "endpoint": "{service}.amazonaws.com",
	      "signatureVersion": "s3"
	    },
	    "us-east-1/sdb": {
	      "endpoint": "{service}.amazonaws.com",
	      "signatureVersion": "v2"
	    },
	    "*/sdb": {
	      "endpoint": "{service}.{region}.amazonaws.com",
	      "signatureVersion": "v2"
	    }
	  },
	
	  "patterns": {
	    "globalSSL": {
	      "endpoint": "https://{service}.amazonaws.com",
	      "globalEndpoint": true
	    },
	    "globalGovCloud": {
	      "endpoint": "{service}.us-gov.amazonaws.com"
	    },
	    "s3dash": {
	      "endpoint": "{service}-{region}.amazonaws.com",
	      "signatureVersion": "s3"
	    }
	  }
	}
	
	},{}],233:[function(require,module,exports){
	var util = require('./util');
	var regionConfig = require('./region_config.json');
	
	function generateRegionPrefix(region) {
	  if (!region) return null;
	
	  var parts = region.split('-');
	  if (parts.length < 3) return null;
	  return parts.slice(0, parts.length - 2).join('-') + '-*';
	}
	
	function derivedKeys(service) {
	  var region = service.config.region;
	  var regionPrefix = generateRegionPrefix(region);
	  var endpointPrefix = service.api.endpointPrefix;
	
	  return [
	    [region, endpointPrefix],
	    [regionPrefix, endpointPrefix],
	    [region, '*'],
	    [regionPrefix, '*'],
	    ['*', endpointPrefix],
	    ['*', '*']
	  ].map(function(item) {
	    return item[0] && item[1] ? item.join('/') : null;
	  });
	}
	
	function applyConfig(service, config) {
	  util.each(config, function(key, value) {
	    if (key === 'globalEndpoint') return;
	    if (service.config[key] === undefined || service.config[key] === null) {
	      service.config[key] = value;
	    }
	  });
	}
	
	function configureEndpoint(service) {
	  var keys = derivedKeys(service);
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    if (!key) continue;
	
	    if (Object.prototype.hasOwnProperty.call(regionConfig.rules, key)) {
	      var config = regionConfig.rules[key];
	      if (typeof config === 'string') {
	        config = regionConfig.patterns[config];
	      }
	
	      if (service.config.useDualstack && util.isDualstackAvailable(service)) {
	        config = util.copy(config);
	        config.endpoint = '{service}.dualstack.{region}.amazonaws.com';
	      }
	
	      service.isGlobalEndpoint = !!config.globalEndpoint;
	
	      if (!config.signatureVersion) config.signatureVersion = 'v4';
	
	      applyConfig(service, config);
	      return;
	    }
	  }
	}
	
	module.exports = configureEndpoint;
	
	},{"./region_config.json":232,"./util":261}],234:[function(require,module,exports){
	(function (process){
	var AWS = require('./core');
	var AcceptorStateMachine = require('./state_machine');
	var inherit = AWS.util.inherit;
	var domain = AWS.util.domain;
	var jmespath = require('jmespath');
	
	
	var hardErrorStates = {success: 1, error: 1, complete: 1};
	
	function isTerminalState(machine) {
	  return Object.prototype.hasOwnProperty.call(hardErrorStates, machine._asm.currentState);
	}
	
	var fsm = new AcceptorStateMachine();
	fsm.setupStates = function() {
	  var transition = function(_, done) {
	    var self = this;
	    self._haltHandlersOnError = false;
	
	    self.emit(self._asm.currentState, function(err) {
	      if (err) {
	        if (isTerminalState(self)) {
	          if (domain && self.domain instanceof domain.Domain) {
	            err.domainEmitter = self;
	            err.domain = self.domain;
	            err.domainThrown = false;
	            self.domain.emit('error', err);
	          } else {
	            throw err;
	          }
	        } else {
	          self.response.error = err;
	          done(err);
	        }
	      } else {
	        done(self.response.error);
	      }
	    });
	
	  };
	
	  this.addState('validate', 'build', 'error', transition);
	  this.addState('build', 'afterBuild', 'restart', transition);
	  this.addState('afterBuild', 'sign', 'restart', transition);
	  this.addState('sign', 'send', 'retry', transition);
	  this.addState('retry', 'afterRetry', 'afterRetry', transition);
	  this.addState('afterRetry', 'sign', 'error', transition);
	  this.addState('send', 'validateResponse', 'retry', transition);
	  this.addState('validateResponse', 'extractData', 'extractError', transition);
	  this.addState('extractError', 'extractData', 'retry', transition);
	  this.addState('extractData', 'success', 'retry', transition);
	  this.addState('restart', 'build', 'error', transition);
	  this.addState('success', 'complete', 'complete', transition);
	  this.addState('error', 'complete', 'complete', transition);
	  this.addState('complete', null, null, transition);
	};
	fsm.setupStates();
	
	
	AWS.Request = inherit({
	
	
	  constructor: function Request(service, operation, params) {
	    var endpoint = service.endpoint;
	    var region = service.config.region;
	    var customUserAgent = service.config.customUserAgent;
	
	    if (service.isGlobalEndpoint) region = 'us-east-1';
	
	    this.domain = domain && domain.active;
	    this.service = service;
	    this.operation = operation;
	    this.params = params || {};
	    this.httpRequest = new AWS.HttpRequest(endpoint, region);
	    this.httpRequest.appendToUserAgent(customUserAgent);
	    this.startTime = AWS.util.date.getDate();
	
	    this.response = new AWS.Response(this);
	    this._asm = new AcceptorStateMachine(fsm.states, 'validate');
	    this._haltHandlersOnError = false;
	
	    AWS.SequentialExecutor.call(this);
	    this.emit = this.emitEvent;
	  },
	
	
	
	
	  send: function send(callback) {
	    if (callback) {
	      this.httpRequest.appendToUserAgent('callback');
	      this.on('complete', function (resp) {
	        callback.call(resp, resp.error, resp.data);
	      });
	    }
	    this.runTo();
	
	    return this.response;
	  },
	
	
	
	
	  build: function build(callback) {
	    return this.runTo('send', callback);
	  },
	
	
	  runTo: function runTo(state, done) {
	    this._asm.runTo(state, done, this);
	    return this;
	  },
	
	
	  abort: function abort() {
	    this.removeAllListeners('validateResponse');
	    this.removeAllListeners('extractError');
	    this.on('validateResponse', function addAbortedError(resp) {
	      resp.error = AWS.util.error(new Error('Request aborted by user'), {
	         code: 'RequestAbortedError', retryable: false
	      });
	    });
	
	    if (this.httpRequest.stream) { // abort HTTP stream
	      this.httpRequest.stream.abort();
	      if (this.httpRequest._abortCallback) {
	         this.httpRequest._abortCallback();
	      } else {
	        this.removeAllListeners('send'); // haven't sent yet, so let's not
	      }
	    }
	
	    return this;
	  },
	
	
	  eachPage: function eachPage(callback) {
	    callback = AWS.util.fn.makeAsync(callback, 3);
	
	    function wrappedCallback(response) {
	      callback.call(response, response.error, response.data, function (result) {
	        if (result === false) return;
	
	        if (response.hasNextPage()) {
	          response.nextPage().on('complete', wrappedCallback).send();
	        } else {
	          callback.call(response, null, null, AWS.util.fn.noop);
	        }
	      });
	    }
	
	    this.on('complete', wrappedCallback).send();
	  },
	
	
	  eachItem: function eachItem(callback) {
	    var self = this;
	    function wrappedCallback(err, data) {
	      if (err) return callback(err, null);
	      if (data === null) return callback(null, null);
	
	      var config = self.service.paginationConfig(self.operation);
	      var resultKey = config.resultKey;
	      if (Array.isArray(resultKey)) resultKey = resultKey[0];
	      var items = jmespath.search(data, resultKey);
	      var continueIteration = true;
	      AWS.util.arrayEach(items, function(item) {
	        continueIteration = callback(null, item);
	        if (continueIteration === false) {
	          return AWS.util.abort;
	        }
	      });
	      return continueIteration;
	    }
	
	    this.eachPage(wrappedCallback);
	  },
	
	
	  isPageable: function isPageable() {
	    return this.service.paginationConfig(this.operation) ? true : false;
	  },
	
	
	  createReadStream: function createReadStream() {
	    var streams = AWS.util.stream;
	    var req = this;
	    var stream = null;
	
	    if (AWS.HttpClient.streamsApiVersion === 2) {
	      stream = new streams.PassThrough();
	      req.send();
	    } else {
	      stream = new streams.Stream();
	      stream.readable = true;
	
	      stream.sent = false;
	      stream.on('newListener', function(event) {
	        if (!stream.sent && event === 'data') {
	          stream.sent = true;
	          process.nextTick(function() { req.send(); });
	        }
	      });
	    }
	
	    this.on('httpHeaders', function streamHeaders(statusCode, headers, resp) {
	      if (statusCode < 300) {
	        req.removeListener('httpData', AWS.EventListeners.Core.HTTP_DATA);
	        req.removeListener('httpError', AWS.EventListeners.Core.HTTP_ERROR);
	        req.on('httpError', function streamHttpError(error) {
	          resp.error = error;
	          resp.error.retryable = false;
	        });
	
	        var shouldCheckContentLength = false;
	        var expectedLen;
	        if (req.httpRequest.method !== 'HEAD') {
	          expectedLen = parseInt(headers['content-length'], 10);
	        }
	        if (expectedLen !== undefined && !isNaN(expectedLen) && expectedLen >= 0) {
	          shouldCheckContentLength = true;
	          var receivedLen = 0;
	        }
	
	        var checkContentLengthAndEmit = function checkContentLengthAndEmit() {
	          if (shouldCheckContentLength && receivedLen !== expectedLen) {
	            stream.emit('error', AWS.util.error(
	              new Error('Stream content length mismatch. Received ' +
	                receivedLen + ' of ' + expectedLen + ' bytes.'),
	              { code: 'StreamContentLengthMismatch' }
	            ));
	          } else if (AWS.HttpClient.streamsApiVersion === 2) {
	            stream.end();
	          } else {
	            stream.emit('end')
	          }
	        }
	
	        var httpStream = resp.httpResponse.createUnbufferedStream();
	
	        if (AWS.HttpClient.streamsApiVersion === 2) {
	          if (shouldCheckContentLength) {
	            var lengthAccumulator = new streams.PassThrough();
	            lengthAccumulator._write = function(chunk) {
	              if (chunk && chunk.length) {
	                receivedLen += chunk.length;
	              }
	              return streams.PassThrough.prototype._write.apply(this, arguments);
	            };
	
	            lengthAccumulator.on('end', checkContentLengthAndEmit);
	            httpStream.pipe(lengthAccumulator).pipe(stream, { end: false });
	          } else {
	            httpStream.pipe(stream);
	          }
	        } else {
	
	          if (shouldCheckContentLength) {
	            httpStream.on('data', function(arg) {
	              if (arg && arg.length) {
	                receivedLen += arg.length;
	              }
	            });
	          }
	
	          httpStream.on('data', function(arg) {
	            stream.emit('data', arg);
	          });
	          httpStream.on('end', checkContentLengthAndEmit);
	        }
	
	        httpStream.on('error', function(err) {
	          shouldCheckContentLength = false;
	          stream.emit('error', err);
	        });
	      }
	    });
	
	    this.on('error', function(err) {
	      stream.emit('error', err);
	    });
	
	    return stream;
	  },
	
	
	  emitEvent: function emit(eventName, args, done) {
	    if (typeof args === 'function') { done = args; args = null; }
	    if (!done) done = function() { };
	    if (!args) args = this.eventParameters(eventName, this.response);
	
	    var origEmit = AWS.SequentialExecutor.prototype.emit;
	    origEmit.call(this, eventName, args, function (err) {
	      if (err) this.response.error = err;
	      done.call(this, err);
	    });
	  },
	
	
	  eventParameters: function eventParameters(eventName) {
	    switch (eventName) {
	      case 'restart':
	      case 'validate':
	      case 'sign':
	      case 'build':
	      case 'afterValidate':
	      case 'afterBuild':
	        return [this];
	      case 'error':
	        return [this.response.error, this.response];
	      default:
	        return [this.response];
	    }
	  },
	
	
	  presign: function presign(expires, callback) {
	    if (!callback && typeof expires === 'function') {
	      callback = expires;
	      expires = null;
	    }
	    return new AWS.Signers.Presign().sign(this.toGet(), expires, callback);
	  },
	
	
	  isPresigned: function isPresigned() {
	    return Object.prototype.hasOwnProperty.call(this.httpRequest.headers, 'presigned-expires');
	  },
	
	
	  toUnauthenticated: function toUnauthenticated() {
	    this.removeListener('validate', AWS.EventListeners.Core.VALIDATE_CREDENTIALS);
	    this.removeListener('sign', AWS.EventListeners.Core.SIGN);
	    return this;
	  },
	
	
	  toGet: function toGet() {
	    if (this.service.api.protocol === 'query' ||
	        this.service.api.protocol === 'ec2') {
	      this.removeListener('build', this.buildAsGet);
	      this.addListener('build', this.buildAsGet);
	    }
	    return this;
	  },
	
	
	  buildAsGet: function buildAsGet(request) {
	    request.httpRequest.method = 'GET';
	    request.httpRequest.path = request.service.endpoint.path +
	                               '?' + request.httpRequest.body;
	    request.httpRequest.body = '';
	
	    delete request.httpRequest.headers['Content-Length'];
	    delete request.httpRequest.headers['Content-Type'];
	  },
	
	
	  haltHandlersOnError: function haltHandlersOnError() {
	    this._haltHandlersOnError = true;
	  }
	});
	
	
	AWS.Request.addPromisesToClass = function addPromisesToClass(PromiseDependency) {
	  this.prototype.promise = function promise() {
	    var self = this;
	    this.httpRequest.appendToUserAgent('promise');
	    return new PromiseDependency(function(resolve, reject) {
	      self.on('complete', function(resp) {
	        if (resp.error) {
	          reject(resp.error);
	        } else {
	          resolve(resp.data);
	        }
	      });
	      self.runTo();
	    });
	  };
	};
	
	
	AWS.Request.deletePromisesFromClass = function deletePromisesFromClass() {
	  delete this.prototype.promise;
	};
	
	AWS.util.addPromises(AWS.Request);
	
	AWS.util.mixin(AWS.Request, AWS.SequentialExecutor);
	
	}).call(this,require('_process'))
	},{"./core":201,"./state_machine":260,"_process":266,"jmespath":284}],235:[function(require,module,exports){
	
	
	var AWS = require('./core');
	var inherit = AWS.util.inherit;
	var jmespath = require('jmespath');
	
	
	function CHECK_ACCEPTORS(resp) {
	  var waiter = resp.request._waiter;
	  var acceptors = waiter.config.acceptors;
	  var acceptorMatched = false;
	  var state = 'retry';
	
	  acceptors.forEach(function(acceptor) {
	    if (!acceptorMatched) {
	      var matcher = waiter.matchers[acceptor.matcher];
	      if (matcher && matcher(resp, acceptor.expected, acceptor.argument)) {
	        acceptorMatched = true;
	        state = acceptor.state;
	      }
	    }
	  });
	
	  if (!acceptorMatched && resp.error) state = 'failure';
	
	  if (state === 'success') {
	    waiter.setSuccess(resp);
	  } else {
	    waiter.setError(resp, state === 'retry');
	  }
	}
	
	
	AWS.ResourceWaiter = inherit({
	
	  constructor: function constructor(service, state) {
	    this.service = service;
	    this.state = state;
	    this.loadWaiterConfig(this.state);
	  },
	
	  service: null,
	
	  state: null,
	
	  config: null,
	
	  matchers: {
	    path: function(resp, expected, argument) {
	      var result = jmespath.search(resp.data, argument);
	      return jmespath.strictDeepEqual(result,expected);
	    },
	
	    pathAll: function(resp, expected, argument) {
	      var results = jmespath.search(resp.data, argument);
	      if (!Array.isArray(results)) results = [results];
	      var numResults = results.length;
	      if (!numResults) return false;
	      for (var ind = 0 ; ind < numResults; ind++) {
	        if (!jmespath.strictDeepEqual(results[ind], expected)) {
	          return false;
	        }
	      }
	      return true;
	    },
	
	    pathAny: function(resp, expected, argument) {
	      var results = jmespath.search(resp.data, argument);
	      if (!Array.isArray(results)) results = [results];
	      var numResults = results.length;
	      for (var ind = 0 ; ind < numResults; ind++) {
	        if (jmespath.strictDeepEqual(results[ind], expected)) {
	          return true;
	        }
	      }
	      return false;
	    },
	
	    status: function(resp, expected) {
	      var statusCode = resp.httpResponse.statusCode;
	      return (typeof statusCode === 'number') && (statusCode === expected);
	    },
	
	    error: function(resp, expected) {
	      if (typeof expected === 'string' && resp.error) {
	        return expected === resp.error.code;
	      }
	      return expected === !!resp.error;
	    }
	  },
	
	  listeners: new AWS.SequentialExecutor().addNamedListeners(function(add) {
	    add('RETRY_CHECK', 'retry', function(resp) {
	      var waiter = resp.request._waiter;
	      if (resp.error && resp.error.code === 'ResourceNotReady') {
	        resp.error.retryDelay = (waiter.config.delay || 0) * 1000;
	      }
	    });
	
	    add('CHECK_OUTPUT', 'extractData', CHECK_ACCEPTORS);
	
	    add('CHECK_ERROR', 'extractError', CHECK_ACCEPTORS);
	  }),
	
	
	  wait: function wait(params, callback) {
	    if (typeof params === 'function') {
	      callback = params; params = undefined;
	    }
	
	    var request = this.service.makeRequest(this.config.operation, params);
	    request._waiter = this;
	    request.response.maxRetries = this.config.maxAttempts;
	    request.addListeners(this.listeners);
	
	    if (callback) request.send(callback);
	    return request;
	  },
	
	  setSuccess: function setSuccess(resp) {
	    resp.error = null;
	    resp.data = resp.data || {};
	    resp.request.removeAllListeners('extractData');
	  },
	
	  setError: function setError(resp, retryable) {
	    resp.data = null;
	    resp.error = AWS.util.error(resp.error || new Error(), {
	      code: 'ResourceNotReady',
	      message: 'Resource is not in the state ' + this.state,
	      retryable: retryable
	    });
	  },
	
	
	  loadWaiterConfig: function loadWaiterConfig(state) {
	    if (!this.service.api.waiters[state]) {
	      throw new AWS.util.error(new Error(), {
	        code: 'StateNotFoundError',
	        message: 'State ' + state + ' not found.'
	      });
	    }
	
	    this.config = this.service.api.waiters[state];
	  }
	});
	
	},{"./core":201,"jmespath":284}],236:[function(require,module,exports){
	var AWS = require('./core');
	var inherit = AWS.util.inherit;
	var jmespath = require('jmespath');
	
	
	AWS.Response = inherit({
	
	
	  constructor: function Response(request) {
	    this.request = request;
	    this.data = null;
	    this.error = null;
	    this.retryCount = 0;
	    this.redirectCount = 0;
	    this.httpResponse = new AWS.HttpResponse();
	    if (request) {
	      this.maxRetries = request.service.numRetries();
	      this.maxRedirects = request.service.config.maxRedirects;
	    }
	  },
	
	
	  nextPage: function nextPage(callback) {
	    var config;
	    var service = this.request.service;
	    var operation = this.request.operation;
	    try {
	      config = service.paginationConfig(operation, true);
	    } catch (e) { this.error = e; }
	
	    if (!this.hasNextPage()) {
	      if (callback) callback(this.error, null);
	      else if (this.error) throw this.error;
	      return null;
	    }
	
	    var params = AWS.util.copy(this.request.params);
	    if (!this.nextPageTokens) {
	      return callback ? callback(null, null) : null;
	    } else {
	      var inputTokens = config.inputToken;
	      if (typeof inputTokens === 'string') inputTokens = [inputTokens];
	      for (var i = 0; i < inputTokens.length; i++) {
	        params[inputTokens[i]] = this.nextPageTokens[i];
	      }
	      return service.makeRequest(this.request.operation, params, callback);
	    }
	  },
	
	
	  hasNextPage: function hasNextPage() {
	    this.cacheNextPageTokens();
	    if (this.nextPageTokens) return true;
	    if (this.nextPageTokens === undefined) return undefined;
	    else return false;
	  },
	
	
	  cacheNextPageTokens: function cacheNextPageTokens() {
	    if (Object.prototype.hasOwnProperty.call(this, 'nextPageTokens')) return this.nextPageTokens;
	    this.nextPageTokens = undefined;
	
	    var config = this.request.service.paginationConfig(this.request.operation);
	    if (!config) return this.nextPageTokens;
	
	    this.nextPageTokens = null;
	    if (config.moreResults) {
	      if (!jmespath.search(this.data, config.moreResults)) {
	        return this.nextPageTokens;
	      }
	    }
	
	    var exprs = config.outputToken;
	    if (typeof exprs === 'string') exprs = [exprs];
	    AWS.util.arrayEach.call(this, exprs, function (expr) {
	      var output = jmespath.search(this.data, expr);
	      if (output) {
	        this.nextPageTokens = this.nextPageTokens || [];
	        this.nextPageTokens.push(output);
	      }
	    });
	
	    return this.nextPageTokens;
	  }
	
	});
	
	},{"./core":201,"jmespath":284}],237:[function(require,module,exports){
	var AWS = require('../core');
	var byteLength = AWS.util.string.byteLength;
	var Buffer = AWS.util.Buffer;
	
	
	AWS.S3.ManagedUpload = AWS.util.inherit({
	
	  constructor: function ManagedUpload(options) {
	    var self = this;
	    AWS.SequentialExecutor.call(self);
	    self.body = null;
	    self.sliceFn = null;
	    self.callback = null;
	    self.parts = {};
	    self.completeInfo = [];
	    self.fillQueue = function() {
	      self.callback(new Error('Unsupported body payload ' + typeof self.body));
	    };
	
	    self.configure(options);
	  },
	
	
	  configure: function configure(options) {
	    options = options || {};
	    this.partSize = this.minPartSize;
	
	    if (options.queueSize) this.queueSize = options.queueSize;
	    if (options.partSize) this.partSize = options.partSize;
	    if (options.leavePartsOnError) this.leavePartsOnError = true;
	
	    if (this.partSize < this.minPartSize) {
	      throw new Error('partSize must be greater than ' +
	                      this.minPartSize);
	    }
	
	    this.service = options.service;
	    this.bindServiceObject(options.params);
	    this.validateBody();
	    this.adjustTotalBytes();
	  },
	
	
	  leavePartsOnError: false,
	
	
	  queueSize: 4,
	
	
	  partSize: null,
	
	
	  minPartSize: 1024 * 1024 * 5,
	
	
	  maxTotalParts: 10000,
	
	
	  send: function(callback) {
	    var self = this;
	    self.failed = false;
	    self.callback = callback || function(err) { if (err) throw err; };
	
	    var runFill = true;
	    if (self.sliceFn) {
	      self.fillQueue = self.fillBuffer;
	    } else if (AWS.util.isNode()) {
	      var Stream = AWS.util.stream.Stream;
	      if (self.body instanceof Stream) {
	        runFill = false;
	        self.fillQueue = self.fillStream;
	        self.partBuffers = [];
	        self.body.
	          on('error', function(err) { self.cleanup(err); }).
	          on('readable', function() { self.fillQueue(); }).
	          on('end', function() {
	            self.isDoneChunking = true;
	            self.numParts = self.totalPartNumbers;
	            self.fillQueue.call(self);
	          });
	      }
	    }
	
	    if (runFill) self.fillQueue.call(self);
	  },
	
	
	
	
	  abort: function() {
	    this.cleanup(AWS.util.error(new Error('Request aborted by user'), {
	      code: 'RequestAbortedError', retryable: false
	    }));
	  },
	
	
	  validateBody: function validateBody() {
	    var self = this;
	    self.body = self.service.config.params.Body;
	    if (!self.body) throw new Error('params.Body is required');
	    if (typeof self.body === 'string') {
	      self.body = new AWS.util.Buffer(self.body);
	    }
	    self.sliceFn = AWS.util.arraySliceFn(self.body);
	  },
	
	
	  bindServiceObject: function bindServiceObject(params) {
	    params = params || {};
	    var self = this;
	
	    if (!self.service) {
	      self.service = new AWS.S3({params: params});
	    } else {
	      var config = AWS.util.copy(self.service.config);
	      self.service = new self.service.constructor.__super__(config);
	      self.service.config.params =
	        AWS.util.merge(self.service.config.params || {}, params);
	    }
	  },
	
	
	  adjustTotalBytes: function adjustTotalBytes() {
	    var self = this;
	    try { // try to get totalBytes
	      self.totalBytes = byteLength(self.body);
	    } catch (e) { }
	
	    if (self.totalBytes) {
	      var newPartSize = Math.ceil(self.totalBytes / self.maxTotalParts);
	      if (newPartSize > self.partSize) self.partSize = newPartSize;
	    } else {
	      self.totalBytes = undefined;
	    }
	  },
	
	
	  isDoneChunking: false,
	
	
	  partPos: 0,
	
	
	  totalChunkedBytes: 0,
	
	
	  totalUploadedBytes: 0,
	
	
	  totalBytes: undefined,
	
	
	  numParts: 0,
	
	
	  totalPartNumbers: 0,
	
	
	  activeParts: 0,
	
	
	  doneParts: 0,
	
	
	  parts: null,
	
	
	  completeInfo: null,
	
	
	  failed: false,
	
	
	  multipartReq: null,
	
	
	  partBuffers: null,
	
	
	  partBufferLength: 0,
	
	
	  fillBuffer: function fillBuffer() {
	    var self = this;
	    var bodyLen = byteLength(self.body);
	
	    if (bodyLen === 0) {
	      self.isDoneChunking = true;
	      self.numParts = 1;
	      self.nextChunk(self.body);
	      return;
	    }
	
	    while (self.activeParts < self.queueSize && self.partPos < bodyLen) {
	      var endPos = Math.min(self.partPos + self.partSize, bodyLen);
	      var buf = self.sliceFn.call(self.body, self.partPos, endPos);
	      self.partPos += self.partSize;
	
	      if (byteLength(buf) < self.partSize || self.partPos === bodyLen) {
	        self.isDoneChunking = true;
	        self.numParts = self.totalPartNumbers + 1;
	      }
	      self.nextChunk(buf);
	    }
	  },
	
	
	  fillStream: function fillStream() {
	    var self = this;
	    if (self.activeParts >= self.queueSize) return;
	
	    var buf = self.body.read(self.partSize - self.partBufferLength) ||
	              self.body.read();
	    if (buf) {
	      self.partBuffers.push(buf);
	      self.partBufferLength += buf.length;
	      self.totalChunkedBytes += buf.length;
	    }
	
	    if (self.partBufferLength >= self.partSize) {
	      var pbuf = self.partBuffers.length === 1 ?
	        self.partBuffers[0] : Buffer.concat(self.partBuffers);
	      self.partBuffers = [];
	      self.partBufferLength = 0;
	
	      if (pbuf.length > self.partSize) {
	        var rest = pbuf.slice(self.partSize);
	        self.partBuffers.push(rest);
	        self.partBufferLength += rest.length;
	        pbuf = pbuf.slice(0, self.partSize);
	      }
	
	      self.nextChunk(pbuf);
	    }
	
	    if (self.isDoneChunking && !self.isDoneSending) {
	      pbuf = self.partBuffers.length === 1 ?
	          self.partBuffers[0] : Buffer.concat(self.partBuffers);
	      self.partBuffers = [];
	      self.partBufferLength = 0;
	      self.totalBytes = self.totalChunkedBytes;
	      self.isDoneSending = true;
	
	      if (self.numParts === 0 || pbuf.length > 0) {
	        self.numParts++;
	        self.nextChunk(pbuf);
	      }
	    }
	
	    self.body.read(0);
	  },
	
	
	  nextChunk: function nextChunk(chunk) {
	    var self = this;
	    if (self.failed) return null;
	
	    var partNumber = ++self.totalPartNumbers;
	    if (self.isDoneChunking && partNumber === 1) {
	      var req = self.service.putObject({Body: chunk});
	      req._managedUpload = self;
	      req.on('httpUploadProgress', self.progress).send(self.finishSinglePart);
	      return null;
	    } else if (self.service.config.params.ContentMD5) {
	      var err = AWS.util.error(new Error('The Content-MD5 you specified is invalid for multi-part uploads.'), {
	        code: 'InvalidDigest', retryable: false
	      });
	
	      self.cleanup(err);
	      return null;
	    }
	
	    if (self.completeInfo[partNumber] && self.completeInfo[partNumber].ETag !== null) {
	      return null; // Already uploaded this part.
	    }
	
	    self.activeParts++;
	    if (!self.service.config.params.UploadId) {
	
	      if (!self.multipartReq) { // create multipart
	        self.multipartReq = self.service.createMultipartUpload();
	        self.multipartReq.on('success', function(resp) {
	          self.service.config.params.UploadId = resp.data.UploadId;
	          self.multipartReq = null;
	        });
	        self.queueChunks(chunk, partNumber);
	        self.multipartReq.on('error', function(err) {
	          self.cleanup(err);
	        });
	        self.multipartReq.send();
	      } else {
	        self.queueChunks(chunk, partNumber);
	      }
	    } else { // multipart is created, just send
	      self.uploadPart(chunk, partNumber);
	    }
	  },
	
	
	  uploadPart: function uploadPart(chunk, partNumber) {
	    var self = this;
	
	    var partParams = {
	      Body: chunk,
	      ContentLength: AWS.util.string.byteLength(chunk),
	      PartNumber: partNumber
	    };
	
	    var partInfo = {ETag: null, PartNumber: partNumber};
	    self.completeInfo[partNumber] = partInfo;
	
	    var req = self.service.uploadPart(partParams);
	    self.parts[partNumber] = req;
	    req._lastUploadedBytes = 0;
	    req._managedUpload = self;
	    req.on('httpUploadProgress', self.progress);
	    req.send(function(err, data) {
	      delete self.parts[partParams.PartNumber];
	      self.activeParts--;
	
	      if (!err && (!data || !data.ETag)) {
	        var message = 'No access to ETag property on response.';
	        if (AWS.util.isBrowser()) {
	          message += ' Check CORS configuration to expose ETag header.';
	        }
	
	        err = AWS.util.error(new Error(message), {
	          code: 'ETagMissing', retryable: false
	        });
	      }
	      if (err) return self.cleanup(err);
	
	      partInfo.ETag = data.ETag;
	      self.doneParts++;
	      if (self.isDoneChunking && self.doneParts === self.numParts) {
	        self.finishMultiPart();
	      } else {
	        self.fillQueue.call(self);
	      }
	    });
	  },
	
	
	  queueChunks: function queueChunks(chunk, partNumber) {
	    var self = this;
	    self.multipartReq.on('success', function() {
	      self.uploadPart(chunk, partNumber);
	    });
	  },
	
	
	  cleanup: function cleanup(err) {
	    var self = this;
	    if (self.failed) return;
	
	    if (typeof self.body.removeAllListeners === 'function' &&
	        typeof self.body.resume === 'function') {
	      self.body.removeAllListeners('readable');
	      self.body.removeAllListeners('end');
	      self.body.resume();
	    }
	
	    if (self.service.config.params.UploadId && !self.leavePartsOnError) {
	      self.service.abortMultipartUpload().send();
	    }
	
	    AWS.util.each(self.parts, function(partNumber, part) {
	      part.removeAllListeners('complete');
	      part.abort();
	    });
	
	    self.activeParts = 0;
	    self.partPos = 0;
	    self.numParts = 0;
	    self.totalPartNumbers = 0;
	    self.parts = {};
	    self.failed = true;
	    self.callback(err);
	  },
	
	
	  finishMultiPart: function finishMultiPart() {
	    var self = this;
	    var completeParams = { MultipartUpload: { Parts: self.completeInfo.slice(1) } };
	    self.service.completeMultipartUpload(completeParams, function(err, data) {
	      if (err) return self.cleanup(err);
	      else self.callback(err, data);
	    });
	  },
	
	
	  finishSinglePart: function finishSinglePart(err, data) {
	    var upload = this.request._managedUpload;
	    var httpReq = this.request.httpRequest;
	    var endpoint = httpReq.endpoint;
	    if (err) return upload.callback(err);
	    data.Location =
	      [endpoint.protocol, '//', endpoint.host, httpReq.path].join('');
	    data.key = this.request.params.Key; // will stay undocumented
	    data.Key = this.request.params.Key;
	    data.Bucket = this.request.params.Bucket;
	    upload.callback(err, data);
	  },
	
	
	  progress: function progress(info) {
	    var upload = this._managedUpload;
	    if (this.operation === 'putObject') {
	      info.part = 1;
	      info.key = this.params.Key;
	    } else {
	      upload.totalUploadedBytes += info.loaded - this._lastUploadedBytes;
	      this._lastUploadedBytes = info.loaded;
	      info = {
	        loaded: upload.totalUploadedBytes,
	        total: upload.totalBytes,
	        part: this.params.PartNumber,
	        key: this.params.Key
	      };
	    }
	    upload.emit('httpUploadProgress', [info]);
	  }
	});
	
	AWS.util.mixin(AWS.S3.ManagedUpload, AWS.SequentialExecutor);
	
	
	AWS.S3.ManagedUpload.addPromisesToClass = function addPromisesToClass(PromiseDependency) {
	  this.prototype.promise = AWS.util.promisifyMethod('send', PromiseDependency);
	};
	
	
	AWS.S3.ManagedUpload.deletePromisesFromClass = function deletePromisesFromClass() {
	  delete this.prototype.promise;
	};
	
	AWS.util.addPromises(AWS.S3.ManagedUpload);
	
	module.exports = AWS.S3.ManagedUpload;
	
	},{"../core":201}],238:[function(require,module,exports){
	var AWS = require('./core');
	
	
	AWS.SequentialExecutor = AWS.util.inherit({
	
	  constructor: function SequentialExecutor() {
	    this._events = {};
	  },
	
	
	  listeners: function listeners(eventName) {
	    return this._events[eventName] ? this._events[eventName].slice(0) : [];
	  },
	
	  on: function on(eventName, listener) {
	    if (this._events[eventName]) {
	      this._events[eventName].push(listener);
	    } else {
	      this._events[eventName] = [listener];
	    }
	    return this;
	  },
	
	
	  onAsync: function onAsync(eventName, listener) {
	    listener._isAsync = true;
	    return this.on(eventName, listener);
	  },
	
	  removeListener: function removeListener(eventName, listener) {
	    var listeners = this._events[eventName];
	    if (listeners) {
	      var length = listeners.length;
	      var position = -1;
	      for (var i = 0; i < length; ++i) {
	        if (listeners[i] === listener) {
	          position = i;
	        }
	      }
	      if (position > -1) {
	        listeners.splice(position, 1);
	      }
	    }
	    return this;
	  },
	
	  removeAllListeners: function removeAllListeners(eventName) {
	    if (eventName) {
	      delete this._events[eventName];
	    } else {
	      this._events = {};
	    }
	    return this;
	  },
	
	
	  emit: function emit(eventName, eventArgs, doneCallback) {
	    if (!doneCallback) doneCallback = function() { };
	    var listeners = this.listeners(eventName);
	    var count = listeners.length;
	    this.callListeners(listeners, eventArgs, doneCallback);
	    return count > 0;
	  },
	
	
	  callListeners: function callListeners(listeners, args, doneCallback, prevError) {
	    var self = this;
	    var error = prevError || null;
	
	    function callNextListener(err) {
	      if (err) {
	        error = AWS.util.error(error || new Error(), err);
	        if (self._haltHandlersOnError) {
	          return doneCallback.call(self, error);
	        }
	      }
	      self.callListeners(listeners, args, doneCallback, error);
	    }
	
	    while (listeners.length > 0) {
	      var listener = listeners.shift();
	      if (listener._isAsync) { // asynchronous listener
	        listener.apply(self, args.concat([callNextListener]));
	        return; // stop here, callNextListener will continue
	      } else { // synchronous listener
	        try {
	          listener.apply(self, args);
	        } catch (err) {
	          error = AWS.util.error(error || new Error(), err);
	        }
	        if (error && self._haltHandlersOnError) {
	          doneCallback.call(self, error);
	          return;
	        }
	      }
	    }
	    doneCallback.call(self, error);
	  },
	
	
	  addListeners: function addListeners(listeners) {
	    var self = this;
	
	    if (listeners._events) listeners = listeners._events;
	
	    AWS.util.each(listeners, function(event, callbacks) {
	      if (typeof callbacks === 'function') callbacks = [callbacks];
	      AWS.util.arrayEach(callbacks, function(callback) {
	        self.on(event, callback);
	      });
	    });
	
	    return self;
	  },
	
	
	  addNamedListener: function addNamedListener(name, eventName, callback) {
	    this[name] = callback;
	    this.addListener(eventName, callback);
	    return this;
	  },
	
	
	  addNamedAsyncListener: function addNamedAsyncListener(name, eventName, callback) {
	    callback._isAsync = true;
	    return this.addNamedListener(name, eventName, callback);
	  },
	
	
	  addNamedListeners: function addNamedListeners(callback) {
	    var self = this;
	    callback(
	      function() {
	        self.addNamedListener.apply(self, arguments);
	      },
	      function() {
	        self.addNamedAsyncListener.apply(self, arguments);
	      }
	    );
	    return this;
	  }
	});
	
	
	AWS.SequentialExecutor.prototype.addListener = AWS.SequentialExecutor.prototype.on;
	
	module.exports = AWS.SequentialExecutor;
	
	},{"./core":201}],239:[function(require,module,exports){
	var AWS = require('./core');
	var Api = require('./model/api');
	var regionConfig = require('./region_config');
	var inherit = AWS.util.inherit;
	var clientCount = 0;
	
	
	AWS.Service = inherit({
	
	  constructor: function Service(config) {
	    if (!this.loadServiceClass) {
	      throw AWS.util.error(new Error(),
	        'Service must be constructed with `new\' operator');
	    }
	    var ServiceClass = this.loadServiceClass(config || {});
	    if (ServiceClass) {
	      var originalConfig = AWS.util.copy(config);
	      var svc = new ServiceClass(config);
	      Object.defineProperty(svc, '_originalConfig', {
	        get: function() { return originalConfig; },
	        enumerable: false,
	        configurable: true
	      });
	      svc._clientId = ++clientCount;
	      return svc;
	    }
	    this.initialize(config);
	  },
	
	
	  initialize: function initialize(config) {
	    var svcConfig = AWS.config[this.serviceIdentifier];
	
	    this.config = new AWS.Config(AWS.config);
	    if (svcConfig) this.config.update(svcConfig, true);
	    if (config) this.config.update(config, true);
	
	    this.validateService();
	    if (!this.config.endpoint) regionConfig(this);
	
	    this.config.endpoint = this.endpointFromTemplate(this.config.endpoint);
	    this.setEndpoint(this.config.endpoint);
	  },
	
	
	  validateService: function validateService() {
	  },
	
	
	  loadServiceClass: function loadServiceClass(serviceConfig) {
	    var config = serviceConfig;
	    if (!AWS.util.isEmpty(this.api)) {
	      return null;
	    } else if (config.apiConfig) {
	      return AWS.Service.defineServiceApi(this.constructor, config.apiConfig);
	    } else if (!this.constructor.services) {
	      return null;
	    } else {
	      config = new AWS.Config(AWS.config);
	      config.update(serviceConfig, true);
	      var version = config.apiVersions[this.constructor.serviceIdentifier];
	      version = version || config.apiVersion;
	      return this.getLatestServiceClass(version);
	    }
	  },
	
	
	  getLatestServiceClass: function getLatestServiceClass(version) {
	    version = this.getLatestServiceVersion(version);
	    if (this.constructor.services[version] === null) {
	      AWS.Service.defineServiceApi(this.constructor, version);
	    }
	
	    return this.constructor.services[version];
	  },
	
	
	  getLatestServiceVersion: function getLatestServiceVersion(version) {
	    if (!this.constructor.services || this.constructor.services.length === 0) {
	      throw new Error('No services defined on ' +
	                      this.constructor.serviceIdentifier);
	    }
	
	    if (!version) {
	      version = 'latest';
	    } else if (AWS.util.isType(version, Date)) {
	      version = AWS.util.date.iso8601(version).split('T')[0];
	    }
	
	    if (Object.hasOwnProperty(this.constructor.services, version)) {
	      return version;
	    }
	
	    var keys = Object.keys(this.constructor.services).sort();
	    var selectedVersion = null;
	    for (var i = keys.length - 1; i >= 0; i--) {
	      if (keys[i][keys[i].length - 1] !== '*') {
	        selectedVersion = keys[i];
	      }
	      if (keys[i].substr(0, 10) <= version) {
	        return selectedVersion;
	      }
	    }
	
	    throw new Error('Could not find ' + this.constructor.serviceIdentifier +
	                    ' API to satisfy version constraint `' + version + '\'');
	  },
	
	
	  api: {},
	
	
	  defaultRetryCount: 3,
	
	
	  customizeRequests: function customizeRequests(callback) {
	    if (!callback) {
	      this.customRequestHandler = null;
	    } else if (typeof callback === 'function') {
	      this.customRequestHandler = callback;
	    } else {
	      throw new Error('Invalid callback type \'' + typeof callback + '\' provided in customizeRequests');
	    }
	  },
	
	
	  makeRequest: function makeRequest(operation, params, callback) {
	    if (typeof params === 'function') {
	      callback = params;
	      params = null;
	    }
	
	    params = params || {};
	    if (this.config.params) { // copy only toplevel bound params
	      var rules = this.api.operations[operation];
	      if (rules) {
	        params = AWS.util.copy(params);
	        AWS.util.each(this.config.params, function(key, value) {
	          if (rules.input.members[key]) {
	            if (params[key] === undefined || params[key] === null) {
	              params[key] = value;
	            }
	          }
	        });
	      }
	    }
	
	    var request = new AWS.Request(this, operation, params);
	    this.addAllRequestListeners(request);
	
	    if (callback) request.send(callback);
	    return request;
	  },
	
	
	  makeUnauthenticatedRequest: function makeUnauthenticatedRequest(operation, params, callback) {
	    if (typeof params === 'function') {
	      callback = params;
	      params = {};
	    }
	
	    var request = this.makeRequest(operation, params).toUnauthenticated();
	    return callback ? request.send(callback) : request;
	  },
	
	
	  waitFor: function waitFor(state, params, callback) {
	    var waiter = new AWS.ResourceWaiter(this, state);
	    return waiter.wait(params, callback);
	  },
	
	
	  addAllRequestListeners: function addAllRequestListeners(request) {
	    var list = [AWS.events, AWS.EventListeners.Core, this.serviceInterface(),
	                AWS.EventListeners.CorePost];
	    for (var i = 0; i < list.length; i++) {
	      if (list[i]) request.addListeners(list[i]);
	    }
	
	    if (!this.config.paramValidation) {
	      request.removeListener('validate',
	        AWS.EventListeners.Core.VALIDATE_PARAMETERS);
	    }
	
	    if (this.config.logger) { // add logging events
	      request.addListeners(AWS.EventListeners.Logger);
	    }
	
	    this.setupRequestListeners(request);
	    if (typeof this.constructor.prototype.customRequestHandler === 'function') {
	      this.constructor.prototype.customRequestHandler(request);
	    }
	    if (Object.prototype.hasOwnProperty.call(this, 'customRequestHandler') && typeof this.customRequestHandler === 'function') {
	      this.customRequestHandler(request);
	    }
	  },
	
	
	  setupRequestListeners: function setupRequestListeners() {
	  },
	
	
	  getSignerClass: function getSignerClass() {
	    var version;
	    if (this.config.signatureVersion) {
	      version = this.config.signatureVersion;
	    } else {
	      version = this.api.signatureVersion;
	    }
	    return AWS.Signers.RequestSigner.getVersion(version);
	  },
	
	
	  serviceInterface: function serviceInterface() {
	    switch (this.api.protocol) {
	      case 'ec2': return AWS.EventListeners.Query;
	      case 'query': return AWS.EventListeners.Query;
	      case 'json': return AWS.EventListeners.Json;
	      case 'rest-json': return AWS.EventListeners.RestJson;
	      case 'rest-xml': return AWS.EventListeners.RestXml;
	    }
	    if (this.api.protocol) {
	      throw new Error('Invalid service `protocol\' ' +
	        this.api.protocol + ' in API config');
	    }
	  },
	
	
	  successfulResponse: function successfulResponse(resp) {
	    return resp.httpResponse.statusCode < 300;
	  },
	
	
	  numRetries: function numRetries() {
	    if (this.config.maxRetries !== undefined) {
	      return this.config.maxRetries;
	    } else {
	      return this.defaultRetryCount;
	    }
	  },
	
	
	  retryDelays: function retryDelays(retryCount) {
	    return AWS.util.calculateRetryDelay(retryCount, this.config.retryDelayOptions);
	  },
	
	
	  retryableError: function retryableError(error) {
	    if (this.networkingError(error)) return true;
	    if (this.expiredCredentialsError(error)) return true;
	    if (this.throttledError(error)) return true;
	    if (error.statusCode >= 500) return true;
	    return false;
	  },
	
	
	  networkingError: function networkingError(error) {
	    return error.code === 'NetworkingError';
	  },
	
	
	  expiredCredentialsError: function expiredCredentialsError(error) {
	    return (error.code === 'ExpiredTokenException');
	  },
	
	
	  clockSkewError: function clockSkewError(error) {
	    switch (error.code) {
	      case 'RequestTimeTooSkewed':
	      case 'RequestExpired':
	      case 'InvalidSignatureException':
	      case 'SignatureDoesNotMatch':
	      case 'AuthFailure':
	      case 'RequestInTheFuture':
	        return true;
	      default: return false;
	    }
	  },
	
	
	  throttledError: function throttledError(error) {
	    switch (error.code) {
	      case 'ProvisionedThroughputExceededException':
	      case 'Throttling':
	      case 'ThrottlingException':
	      case 'RequestLimitExceeded':
	      case 'RequestThrottled':
	        return true;
	      default:
	        return false;
	    }
	  },
	
	
	  endpointFromTemplate: function endpointFromTemplate(endpoint) {
	    if (typeof endpoint !== 'string') return endpoint;
	
	    var e = endpoint;
	    e = e.replace(/\{service\}/g, this.api.endpointPrefix);
	    e = e.replace(/\{region\}/g, this.config.region);
	    e = e.replace(/\{scheme\}/g, this.config.sslEnabled ? 'https' : 'http');
	    return e;
	  },
	
	
	  setEndpoint: function setEndpoint(endpoint) {
	    this.endpoint = new AWS.Endpoint(endpoint, this.config);
	  },
	
	
	  paginationConfig: function paginationConfig(operation, throwException) {
	    var paginator = this.api.operations[operation].paginator;
	    if (!paginator) {
	      if (throwException) {
	        var e = new Error();
	        throw AWS.util.error(e, 'No pagination configuration for ' + operation);
	      }
	      return null;
	    }
	
	    return paginator;
	  }
	});
	
	AWS.util.update(AWS.Service, {
	
	
	  defineMethods: function defineMethods(svc) {
	    AWS.util.each(svc.prototype.api.operations, function iterator(method) {
	      if (svc.prototype[method]) return;
	      var operation = svc.prototype.api.operations[method];
	      if (operation.authtype === 'none') {
	        svc.prototype[method] = function (params, callback) {
	          return this.makeUnauthenticatedRequest(method, params, callback);
	        };
	      } else {
	        svc.prototype[method] = function (params, callback) {
	          return this.makeRequest(method, params, callback);
	        };
	      }
	    });
	  },
	
	
	  defineService: function defineService(serviceIdentifier, versions, features) {
	    AWS.Service._serviceMap[serviceIdentifier] = true;
	    if (!Array.isArray(versions)) {
	      features = versions;
	      versions = [];
	    }
	
	    var svc = inherit(AWS.Service, features || {});
	
	    if (typeof serviceIdentifier === 'string') {
	      AWS.Service.addVersions(svc, versions);
	
	      var identifier = svc.serviceIdentifier || serviceIdentifier;
	      svc.serviceIdentifier = identifier;
	    } else { // defineService called with an API
	      svc.prototype.api = serviceIdentifier;
	      AWS.Service.defineMethods(svc);
	    }
	
	    return svc;
	  },
	
	
	  addVersions: function addVersions(svc, versions) {
	    if (!Array.isArray(versions)) versions = [versions];
	
	    svc.services = svc.services || {};
	    for (var i = 0; i < versions.length; i++) {
	      if (svc.services[versions[i]] === undefined) {
	        svc.services[versions[i]] = null;
	      }
	    }
	
	    svc.apiVersions = Object.keys(svc.services).sort();
	  },
	
	
	  defineServiceApi: function defineServiceApi(superclass, version, apiConfig) {
	    var svc = inherit(superclass, {
	      serviceIdentifier: superclass.serviceIdentifier
	    });
	
	    function setApi(api) {
	      if (api.isApi) {
	        svc.prototype.api = api;
	      } else {
	        svc.prototype.api = new Api(api);
	      }
	    }
	
	    if (typeof version === 'string') {
	      if (apiConfig) {
	        setApi(apiConfig);
	      } else {
	        try {
	          setApi(AWS.apiLoader(superclass.serviceIdentifier, version));
	        } catch (err) {
	          throw AWS.util.error(err, {
	            message: 'Could not find API configuration ' +
	              superclass.serviceIdentifier + '-' + version
	          });
	        }
	      }
	      if (!Object.prototype.hasOwnProperty.call(superclass.services, version)) {
	        superclass.apiVersions = superclass.apiVersions.concat(version).sort();
	      }
	      superclass.services[version] = svc;
	    } else {
	      setApi(version);
	    }
	
	    AWS.Service.defineMethods(svc);
	    return svc;
	  },
	
	
	  hasService: function(identifier) {
	    return Object.prototype.hasOwnProperty.call(AWS.Service._serviceMap, identifier);
	  },
	
	
	  _serviceMap: {}
	});
	
	module.exports = AWS.Service;
	},{"./core":201,"./model/api":218,"./region_config":233}],240:[function(require,module,exports){
	var AWS = require('../core');
	
	AWS.util.update(AWS.APIGateway.prototype, {
	
	  setAcceptHeader: function setAcceptHeader(req) {
	    var httpRequest = req.httpRequest;
	    httpRequest.headers['Accept'] = 'application/json';
	  },
	
	
	  setupRequestListeners: function setupRequestListeners(request) {
	    request.addListener('build', this.setAcceptHeader);
	    if (request.operation === 'getSdk') {
	      request.addListener('extractData', this.useRawPayload);
	    }
	  },
	
	  useRawPayload: function useRawPayload(resp) {
	    var req = resp.request;
	    var operation = req.operation;
	    var rules = req.service.api.operations[operation].output || {};
	    if (rules.payload) {
	      var body = resp.httpResponse.body;
	      resp.data[rules.payload] = body;
	    }
	  }
	});
	
	
	},{"../core":201}],241:[function(require,module,exports){
	var AWS = require('../core');
	
	require('../cloudfront/signer');
	
	AWS.util.update(AWS.CloudFront.prototype, {
	
	  setupRequestListeners: function setupRequestListeners(request) {
	    request.addListener('extractData', AWS.util.hoistPayloadMember);
	  }
	
	});
	
	},{"../cloudfront/signer":199,"../core":201}],242:[function(require,module,exports){
	var AWS = require('../core');
	
	AWS.util.update(AWS.CognitoIdentity.prototype, {
	  getOpenIdToken: function getOpenIdToken(params, callback) {
	    return this.makeUnauthenticatedRequest('getOpenIdToken', params, callback);
	  },
	
	  getId: function getId(params, callback) {
	    return this.makeUnauthenticatedRequest('getId', params, callback);
	  },
	
	  getCredentialsForIdentity: function getCredentialsForIdentity(params, callback) {
	    return this.makeUnauthenticatedRequest('getCredentialsForIdentity', params, callback);
	  }
	});
	
	},{"../core":201}],243:[function(require,module,exports){
	var AWS = require('../core');
	require('../dynamodb/document_client');
	
	AWS.util.update(AWS.DynamoDB.prototype, {
	
	  setupRequestListeners: function setupRequestListeners(request) {
	    if (request.service.config.dynamoDbCrc32) {
	      request.removeListener('extractData', AWS.EventListeners.Json.EXTRACT_DATA);
	      request.addListener('extractData', this.checkCrc32);
	      request.addListener('extractData', AWS.EventListeners.Json.EXTRACT_DATA);
	    }
	  },
	
	
	  checkCrc32: function checkCrc32(resp) {
	    if (!resp.httpResponse.streaming && !resp.request.service.crc32IsValid(resp)) {
	      resp.data = null;
	      resp.error = AWS.util.error(new Error(), {
	        code: 'CRC32CheckFailed',
	        message: 'CRC32 integrity check failed',
	        retryable: true
	      });
	      resp.request.haltHandlersOnError();
	      throw (resp.error);
	    }
	  },
	
	
	  crc32IsValid: function crc32IsValid(resp) {
	    var crc = resp.httpResponse.headers['x-amz-crc32'];
	    if (!crc) return true; // no (valid) CRC32 header
	    return parseInt(crc, 10) === AWS.util.crypto.crc32(resp.httpResponse.body);
	  },
	
	
	  defaultRetryCount: 10,
	
	
	  retryDelays: function retryDelays(retryCount) {
	    var delay = retryCount > 0 ? (50 * Math.pow(2, retryCount - 1)) : 0;
	    return delay;
	  }
	});
	
	},{"../core":201,"../dynamodb/document_client":209}],244:[function(require,module,exports){
	var AWS = require('../core');
	
	AWS.util.update(AWS.EC2.prototype, {
	
	  setupRequestListeners: function setupRequestListeners(request) {
	    request.removeListener('extractError', AWS.EventListeners.Query.EXTRACT_ERROR);
	    request.addListener('extractError', this.extractError);
	
	    if (request.operation === 'copySnapshot') {
	      request.onAsync('validate', this.buildCopySnapshotPresignedUrl);
	    }
	  },
	
	
	  buildCopySnapshotPresignedUrl: function buildCopySnapshotPresignedUrl(req, done) {
	    if (req.params.PresignedUrl || req._subRequest) {
	      return done();
	    }
	
	    req.params = AWS.util.copy(req.params);
	    req.params.DestinationRegion = req.service.config.region;
	
	    var config = AWS.util.copy(req.service.config);
	    delete config.endpoint;
	    config.region = req.params.SourceRegion;
	    var svc = new req.service.constructor(config);
	    var newReq = svc[req.operation](req.params);
	    newReq._subRequest = true;
	    newReq.presign(function(err, url) {
	      if (err) done(err);
	      else {
	        req.params.PresignedUrl = url;
	        done();
	      }
	    });
	  },
	
	
	  extractError: function extractError(resp) {
	    var httpResponse = resp.httpResponse;
	    var data = new AWS.XML.Parser().parse(httpResponse.body.toString() || '');
	    if (data.Errors) {
	      resp.error = AWS.util.error(new Error(), {
	        code: data.Errors.Error.Code,
	        message: data.Errors.Error.Message
	      });
	    } else {
	      resp.error = AWS.util.error(new Error(), {
	        code: httpResponse.statusCode,
	        message: null
	      });
	    }
	    resp.error.requestId = data.RequestID || null;
	  }
	});
	
	},{"../core":201}],245:[function(require,module,exports){
	var AWS = require('../core');
	
	
	AWS.util.update(AWS.IotData.prototype, {
	
	    validateService: function validateService() {
	        if (!this.config.endpoint || this.config.endpoint.indexOf('{') >= 0) {
	            var msg = 'AWS.IotData requires an explicit ' +
	                '`endpoint\' configuration option.';
	            throw AWS.util.error(new Error(),
	                {name: 'InvalidEndpoint', message: msg});
	        }
	    },
	
	
	    setupRequestListeners: function setupRequestListeners(request) {
	        request.addListener('validateResponse', this.validateResponseBody)
	    },
	
	
	    validateResponseBody: function validateResponseBody(resp) {
	        var body = resp.httpResponse.body.toString() || '{}';
	        var bodyCheck = body.trim();
	        if (!bodyCheck || bodyCheck.charAt(0) !== '{') {
	            resp.httpResponse.body = '';
	        }
	    }
	
	});
	
	},{"../core":201}],246:[function(require,module,exports){
	var AWS = require('../core');
	
	AWS.util.update(AWS.MachineLearning.prototype, {
	
	  setupRequestListeners: function setupRequestListeners(request) {
	    if (request.operation === 'predict') {
	      request.addListener('build', this.buildEndpoint);
	    }
	  },
	
	
	  buildEndpoint: function buildEndpoint(request) {
	    var url = request.params.PredictEndpoint;
	    if (url) {
	      request.httpRequest.endpoint = new AWS.Endpoint(url);
	    }
	  }
	
	});
	
	},{"../core":201}],247:[function(require,module,exports){
	require('../polly/presigner');
	},{"../polly/presigner":225}],248:[function(require,module,exports){
	var AWS = require('../core');
	
	
	 var crossRegionOperations = ['copyDBSnapshot', 'createDBInstanceReadReplica'];
	
	 AWS.util.update(AWS.RDS.prototype, {
	
	   setupRequestListeners: function setupRequestListeners(request) {
	     if (crossRegionOperations.indexOf(request.operation) !== -1 &&
	         request.params.SourceRegion) {
	       request.params = AWS.util.copy(request.params);
	       if (request.params.PreSignedUrl ||
	           request.params.SourceRegion === this.config.region) {
	         delete request.params.SourceRegion;
	       } else {
	         var doesParamValidation = !!this.config.paramValidation;
	         if (doesParamValidation) {
	           request.removeListener('validate', AWS.EventListeners.Core.VALIDATE_PARAMETERS);
	         }
	         request.onAsync('validate', this.buildCrossRegionPresignedUrl);
	         if (doesParamValidation) {
	           request.addListener('validate', AWS.EventListeners.Core.VALIDATE_PARAMETERS);
	         }
	       }
	     }
	   },
	
	
	   buildCrossRegionPresignedUrl: function buildCrossRegionPresignedUrl(req, done) {
	     var config = AWS.util.copy(req.service.config);
	     config.region = req.params.SourceRegion;
	     delete req.params.SourceRegion;
	     delete config.endpoint;
	     delete config.params;
	     config.signatureVersion = 'v4';
	     var destinationRegion = req.service.config.region;
	
	     var svc = new req.service.constructor(config);
	     var newReq = svc[req.operation](AWS.util.copy(req.params));
	     newReq.on('build', function addDestinationRegionParam(request) {
	       var httpRequest = request.httpRequest;
	       httpRequest.params.DestinationRegion = destinationRegion;
	       httpRequest.body = AWS.util.queryParamsToString(httpRequest.params);
	     });
	     newReq.presign(function(err, url) {
	       if (err) done(err);
	       else {
	         req.params.PreSignedUrl = url;
	         done();
	       }
	     });
	   }
	 });
	},{"../core":201}],249:[function(require,module,exports){
	var AWS = require('../core');
	
	AWS.util.update(AWS.Route53.prototype, {
	
	  setupRequestListeners: function setupRequestListeners(request) {
	    request.on('build', this.sanitizeUrl);
	  },
	
	
	  sanitizeUrl: function sanitizeUrl(request) {
	    var path = request.httpRequest.path;
	    request.httpRequest.path = path.replace(/\/%2F\w+%2F/, '/');
	  },
	
	
	  retryableError: function retryableError(error) {
	    if (error.code === 'PriorRequestNotComplete' &&
	        error.statusCode === 400) {
	      return true;
	    } else {
	      var _super = AWS.Service.prototype.retryableError;
	      return _super.call(this, error);
	    }
	  }
	});
	
	},{"../core":201}],250:[function(require,module,exports){
	var AWS = require('../core');
	
	require('../s3/managed_upload');
	
	
	var operationsWith200StatusCodeError = {
	  'completeMultipartUpload': true,
	  'copyObject': true,
	  'uploadPartCopy': true
	};
	
	
	 var regionRedirectErrorCodes = [
	  'AuthorizationHeaderMalformed', // non-head operations on virtual-hosted global bucket endpoints
	  'BadRequest', // head operations on virtual-hosted global bucket endpoints
	  'PermanentRedirect', // non-head operations on path-style or regional endpoints
	  301 // head operations on path-style or regional endpoints
	 ];
	
	AWS.util.update(AWS.S3.prototype, {
	
	  getSignerClass: function getSignerClass(request) {
	    var defaultApiVersion = this.api.signatureVersion;
	    var userDefinedVersion = this._originalConfig ? this._originalConfig.signatureVersion : null;
	    var regionDefinedVersion = this.config.signatureVersion;
	    var isPresigned = request ? request.isPresigned() : false;
	
	    if (userDefinedVersion) {
	      userDefinedVersion = userDefinedVersion === 'v2' ? 's3' : userDefinedVersion;
	      return AWS.Signers.RequestSigner.getVersion(userDefinedVersion);
	    }
	    if (regionDefinedVersion) {
	      defaultApiVersion = regionDefinedVersion;
	    }
	
	    return AWS.Signers.RequestSigner.getVersion(defaultApiVersion);
	  },
	
	
	  validateService: function validateService() {
	    var msg;
	    var messages = [];
	
	    if (!this.config.region) this.config.region = 'us-east-1';
	
	    if (!this.config.endpoint && this.config.s3BucketEndpoint) {
	      messages.push('An endpoint must be provided when configuring ' +
	                    '`s3BucketEndpoint` to true.');
	    }
	    if (messages.length === 1) {
	      msg = messages[0];
	    } else if (messages.length > 1) {
	      msg = 'Multiple configuration errors:\n' + messages.join('\n');
	    }
	    if (msg) {
	      throw AWS.util.error(new Error(),
	        {name: 'InvalidEndpoint', message: msg});
	    }
	  },
	
	
	  shouldDisableBodySigning: function shouldDisableBodySigning(request) {
	    var signerClass = this.getSignerClass();
	    if (this.config.s3DisableBodySigning === true && signerClass === AWS.Signers.V4
	        && request.httpRequest.endpoint.protocol === 'https:') {
	      return true;
	    }
	    return false;
	  },
	
	
	  setupRequestListeners: function setupRequestListeners(request) {
	    request.addListener('validate', this.validateScheme);
	    request.addListener('validate', this.validateBucketEndpoint);
	    request.addListener('validate', this.correctBucketRegionFromCache);
	    request.addListener('build', this.addContentType);
	    request.addListener('build', this.populateURI);
	    request.addListener('build', this.computeContentMd5);
	    request.addListener('build', this.computeSseCustomerKeyMd5);
	    request.addListener('afterBuild', this.addExpect100Continue);
	    request.removeListener('validate',
	      AWS.EventListeners.Core.VALIDATE_REGION);
	    request.addListener('extractError', this.extractError);
	    request.onAsync('extractError', this.requestBucketRegion);
	    request.addListener('extractData', this.extractData);
	    request.addListener('extractData', AWS.util.hoistPayloadMember);
	    request.addListener('beforePresign', this.prepareSignedUrl);
	    if (AWS.util.isBrowser()) {
	      request.onAsync('retry', this.reqRegionForNetworkingError);
	    }
	    if (this.shouldDisableBodySigning(request))  {
	      request.removeListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);
	      request.addListener('afterBuild', this.disableBodySigning);
	    }
	  },
	
	
	  validateScheme: function(req) {
	    var params = req.params,
	        scheme = req.httpRequest.endpoint.protocol,
	        sensitive = params.SSECustomerKey || params.CopySourceSSECustomerKey;
	    if (sensitive && scheme !== 'https:') {
	      var msg = 'Cannot send SSE keys over HTTP. Set \'sslEnabled\'' +
	        'to \'true\' in your configuration';
	      throw AWS.util.error(new Error(),
	        { code: 'ConfigError', message: msg });
	    }
	  },
	
	
	  validateBucketEndpoint: function(req) {
	    if (!req.params.Bucket && req.service.config.s3BucketEndpoint) {
	      var msg = 'Cannot send requests to root API with `s3BucketEndpoint` set.';
	      throw AWS.util.error(new Error(),
	        { code: 'ConfigError', message: msg });
	    }
	  },
	
	
	  isValidAccelerateOperation: function isValidAccelerateOperation(operation) {
	    var invalidOperations = [
	      'createBucket',
	      'deleteBucket',
	      'listBuckets'
	    ];
	    return invalidOperations.indexOf(operation) === -1;
	  },
	
	
	
	  populateURI: function populateURI(req) {
	    var httpRequest = req.httpRequest;
	    var b = req.params.Bucket;
	    var service = req.service;
	    var endpoint = httpRequest.endpoint;
	
	    if (b) {
	      if (!service.pathStyleBucketName(b)) {
	        if (service.config.useAccelerateEndpoint && service.isValidAccelerateOperation(req.operation)) {
	          if (service.config.useDualstack) {
	            endpoint.hostname = b + '.s3-accelerate.dualstack.amazonaws.com';
	          } else {
	            endpoint.hostname = b + '.s3-accelerate.amazonaws.com';
	          }
	        } else if (!service.config.s3BucketEndpoint) {
	          endpoint.hostname =
	            b + '.' + endpoint.hostname;
	        }
	
	        var port = endpoint.port;
	        if (port !== 80 && port !== 443) {
	          endpoint.host = endpoint.hostname + ':' +
	            endpoint.port;
	        } else {
	          endpoint.host = endpoint.hostname;
	        }
	
	        httpRequest.virtualHostedBucket = b; // needed for signing the request
	        service.removeVirtualHostedBucketFromPath(req);
	      }
	    }
	  },
	
	
	  removeVirtualHostedBucketFromPath: function removeVirtualHostedBucketFromPath(req) {
	    var httpRequest = req.httpRequest;
	    var bucket = httpRequest.virtualHostedBucket;
	    if (bucket && httpRequest.path) {
	      httpRequest.path = httpRequest.path.replace(new RegExp('/' + bucket), '');
	      if (httpRequest.path[0] !== '/') {
	        httpRequest.path = '/' + httpRequest.path;
	      }
	    }
	  },
	
	
	  addExpect100Continue: function addExpect100Continue(req) {
	    var len = req.httpRequest.headers['Content-Length'];
	    if (AWS.util.isNode() && len >= 1024 * 1024) {
	      req.httpRequest.headers['Expect'] = '100-continue';
	    }
	  },
	
	
	  addContentType: function addContentType(req) {
	    var httpRequest = req.httpRequest;
	    if (httpRequest.method === 'GET' || httpRequest.method === 'HEAD') {
	      delete httpRequest.headers['Content-Type'];
	      return;
	    }
	
	    if (!httpRequest.headers['Content-Type']) { // always have a Content-Type
	      httpRequest.headers['Content-Type'] = 'application/octet-stream';
	    }
	
	    var contentType = httpRequest.headers['Content-Type'];
	    if (AWS.util.isBrowser()) {
	      if (typeof httpRequest.body === 'string' && !contentType.match(/;\s*charset=/)) {
	        var charset = '; charset=UTF-8';
	        httpRequest.headers['Content-Type'] += charset;
	      } else {
	        var replaceFn = function(_, prefix, charsetName) {
	          return prefix + charsetName.toUpperCase();
	        };
	
	        httpRequest.headers['Content-Type'] =
	          contentType.replace(/(;\s*charset=)(.+)$/, replaceFn);
	      }
	    }
	  },
	
	
	  computableChecksumOperations: {
	    putBucketCors: true,
	    putBucketLifecycle: true,
	    putBucketLifecycleConfiguration: true,
	    putBucketTagging: true,
	    deleteObjects: true,
	    putBucketReplication: true
	  },
	
	
	  willComputeChecksums: function willComputeChecksums(req) {
	    if (this.computableChecksumOperations[req.operation]) return true;
	    if (!this.config.computeChecksums) return false;
	
	    if (!AWS.util.Buffer.isBuffer(req.httpRequest.body) &&
	        typeof req.httpRequest.body !== 'string') {
	      return false;
	    }
	
	    var rules = req.service.api.operations[req.operation].input.members;
	
	    if (req.service.shouldDisableBodySigning(req) && !Object.prototype.hasOwnProperty.call(req.httpRequest.headers, 'presigned-expires')) {
	      if (rules.ContentMD5 && !req.params.ContentMD5) {
	        return true;
	      }
	    }
	
	    if (req.service.getSignerClass(req) === AWS.Signers.V4) {
	      if (rules.ContentMD5 && !rules.ContentMD5.required) return false;
	    }
	
	    if (rules.ContentMD5 && !req.params.ContentMD5) return true;
	  },
	
	
	  computeContentMd5: function computeContentMd5(req) {
	    if (req.service.willComputeChecksums(req)) {
	      var md5 = AWS.util.crypto.md5(req.httpRequest.body, 'base64');
	      req.httpRequest.headers['Content-MD5'] = md5;
	    }
	  },
	
	
	  computeSseCustomerKeyMd5: function computeSseCustomerKeyMd5(req) {
	    var keys = {
	      SSECustomerKey: 'x-amz-server-side-encryption-customer-key-MD5',
	      CopySourceSSECustomerKey: 'x-amz-copy-source-server-side-encryption-customer-key-MD5'
	    };
	    AWS.util.each(keys, function(key, header) {
	      if (req.params[key]) {
	        var value = AWS.util.crypto.md5(req.params[key], 'base64');
	        req.httpRequest.headers[header] = value;
	      }
	    });
	  },
	
	
	  pathStyleBucketName: function pathStyleBucketName(bucketName) {
	    if (this.config.s3ForcePathStyle) return true;
	    if (this.config.s3BucketEndpoint) return false;
	
	    if (this.dnsCompatibleBucketName(bucketName)) {
	      return (this.config.sslEnabled && bucketName.match(/\./)) ? true : false;
	    } else {
	      return true; // not dns compatible names must always use path style
	    }
	  },
	
	
	  dnsCompatibleBucketName: function dnsCompatibleBucketName(bucketName) {
	    var b = bucketName;
	    var domain = new RegExp(/^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/);
	    var ipAddress = new RegExp(/(\d+\.){3}\d+/);
	    var dots = new RegExp(/\.\./);
	    return (b.match(domain) && !b.match(ipAddress) && !b.match(dots)) ? true : false;
	  },
	
	
	  successfulResponse: function successfulResponse(resp) {
	    var req = resp.request;
	    var httpResponse = resp.httpResponse;
	    if (operationsWith200StatusCodeError[req.operation] &&
	        httpResponse.body.toString().match('<Error>')) {
	      return false;
	    } else {
	      return httpResponse.statusCode < 300;
	    }
	  },
	
	
	  retryableError: function retryableError(error, request) {
	    if (operationsWith200StatusCodeError[request.operation] &&
	        error.statusCode === 200) {
	      return true;
	    } else if (request._requestRegionForBucket &&
	        request.service.bucketRegionCache[request._requestRegionForBucket]) {
	      return false;
	    } else if (error && error.code === 'RequestTimeout') {
	      return true;
	    } else if (error &&
	        regionRedirectErrorCodes.indexOf(error.code) != -1 &&
	        error.region && error.region != request.httpRequest.region) {
	      request.httpRequest.region = error.region;
	      if (error.statusCode === 301) {
	        request.service.updateReqBucketRegion(request);
	      }
	      return true;
	    } else {
	      var _super = AWS.Service.prototype.retryableError;
	      return _super.call(this, error, request);
	    }
	  },
	
	
	  updateReqBucketRegion: function updateReqBucketRegion(request, region) {
	    var httpRequest = request.httpRequest;
	    if (typeof region === 'string' && region.length) {
	      httpRequest.region = region;
	    }
	    if (!httpRequest.endpoint.host.match(/s3(?!-accelerate).*\.amazonaws\.com$/)) {
	      return;
	    }
	    var service = request.service;
	    var s3Config = service.config;
	    var s3BucketEndpoint = s3Config.s3BucketEndpoint;
	    if (s3BucketEndpoint) {
	      delete s3Config.s3BucketEndpoint;
	    }
	    var newConfig = AWS.util.copy(s3Config);
	    delete newConfig.endpoint;
	    newConfig.region = httpRequest.region;
	
	    httpRequest.endpoint = (new AWS.S3(newConfig)).endpoint;
	    service.populateURI(request);
	    s3Config.s3BucketEndpoint = s3BucketEndpoint;
	    httpRequest.headers.Host = httpRequest.endpoint.host;
	
	    if (request._asm.currentState === 'validate') {
	      request.removeListener('build', service.populateURI);
	      request.addListener('build', service.removeVirtualHostedBucketFromPath);
	    }
	  },
	
	
	  extractData: function extractData(resp) {
	    var req = resp.request;
	    if (req.operation === 'getBucketLocation') {
	      var match = resp.httpResponse.body.toString().match(/>(.+)<\/Location/);
	      delete resp.data['_'];
	      if (match) {
	        resp.data.LocationConstraint = match[1];
	      } else {
	        resp.data.LocationConstraint = '';
	      }
	    }
	    var bucket = req.params.Bucket || null;
	    if (req.operation === 'deleteBucket' && typeof bucket === 'string' && !resp.error) {
	      req.service.clearBucketRegionCache(bucket);
	    } else {
	      var headers = resp.httpResponse.headers || {};
	      var region = headers['x-amz-bucket-region'] || null;
	      if (!region && req.operation === 'createBucket' && !resp.error) {
	        var createBucketConfiguration = req.params.CreateBucketConfiguration;
	        if (!createBucketConfiguration) {
	          region = 'us-east-1';
	        } else if (createBucketConfiguration.LocationConstraint === 'EU') {
	          region = 'eu-west-1';
	        } else {
	          region = createBucketConfiguration.LocationConstraint;
	        }
	      }
	      if (region) {
	          if (bucket && region !== req.service.bucketRegionCache[bucket]) {
	            req.service.bucketRegionCache[bucket] = region;
	          }
	      }
	    }
	    req.service.extractRequestIds(resp);
	  },
	
	
	  extractError: function extractError(resp) {
	    var codes = {
	      304: 'NotModified',
	      403: 'Forbidden',
	      400: 'BadRequest',
	      404: 'NotFound'
	    };
	
	    var req = resp.request;
	    var code = resp.httpResponse.statusCode;
	    var body = resp.httpResponse.body || '';
	
	    var headers = resp.httpResponse.headers || {};
	    var region = headers['x-amz-bucket-region'] || null;
	    var bucket = req.params.Bucket || null;
	    var bucketRegionCache = req.service.bucketRegionCache;
	    if (region && bucket && region !== bucketRegionCache[bucket]) {
	      bucketRegionCache[bucket] = region;
	    }
	
	    var cachedRegion;
	    if (codes[code] && body.length === 0) {
	      if (bucket && !region) {
	        cachedRegion = bucketRegionCache[bucket] || null;
	        if (cachedRegion !== req.httpRequest.region) {
	          region = cachedRegion;
	        }
	      }
	      resp.error = AWS.util.error(new Error(), {
	        code: codes[code],
	        message: null,
	        region: region
	      });
	    } else {
	      var data = new AWS.XML.Parser().parse(body.toString());
	
	      if (data.Region && !region) {
	        region = data.Region;
	        if (bucket && region !== bucketRegionCache[bucket]) {
	          bucketRegionCache[bucket] = region;
	        }
	      } else if (bucket && !region && !data.Region) {
	        cachedRegion = bucketRegionCache[bucket] || null;
	        if (cachedRegion !== req.httpRequest.region) {
	          region = cachedRegion;
	        }
	      }
	
	      resp.error = AWS.util.error(new Error(), {
	        code: data.Code || code,
	        message: data.Message || null,
	        region: region
	      });
	    }
	    req.service.extractRequestIds(resp);
	  },
	
	
	  requestBucketRegion: function requestBucketRegion(resp, done) {
	    var error = resp.error;
	    var req = resp.request;
	    var bucket = req.params.Bucket || null;
	
	    if (!error || !bucket || error.region || req.operation === 'listObjects' ||
	        (AWS.util.isNode() && req.operation === 'headBucket') ||
	        (error.statusCode === 400 && req.operation !== 'headObject') ||
	        regionRedirectErrorCodes.indexOf(error.code) === -1) {
	      return done();
	    }
	    var reqOperation = AWS.util.isNode() ? 'headBucket' : 'listObjects';
	    var reqParams = {Bucket: bucket};
	    if (reqOperation === 'listObjects') reqParams.MaxKeys = 0;
	    var regionReq = req.service[reqOperation](reqParams);
	    regionReq._requestRegionForBucket = bucket;
	    regionReq.send(function() {
	      var region = req.service.bucketRegionCache[bucket] || null;
	      error.region = region;
	      done();
	    });
	  },
	
	
	   reqRegionForNetworkingError: function reqRegionForNetworkingError(resp, done) {
	    if (!AWS.util.isBrowser()) {
	      return done();
	    }
	    var error = resp.error;
	    var request = resp.request;
	    var bucket = request.params.Bucket;
	    if (!error || error.code !== 'NetworkingError' || !bucket ||
	        request.httpRequest.region === 'us-east-1') {
	      return done();
	    }
	    var service = request.service;
	    var bucketRegionCache = service.bucketRegionCache;
	    var cachedRegion = bucketRegionCache[bucket] || null;
	
	    if (cachedRegion && cachedRegion !== request.httpRequest.region) {
	      service.updateReqBucketRegion(request, cachedRegion);
	      done();
	    } else if (!service.dnsCompatibleBucketName(bucket)) {
	      service.updateReqBucketRegion(request, 'us-east-1');
	      if (bucketRegionCache[bucket] !== 'us-east-1') {
	        bucketRegionCache[bucket] = 'us-east-1';
	      }
	      done();
	    } else if (request.httpRequest.virtualHostedBucket) {
	      var getRegionReq = service.listObjects({Bucket: bucket, MaxKeys: 0});
	      service.updateReqBucketRegion(getRegionReq, 'us-east-1');
	      getRegionReq._requestRegionForBucket = bucket;
	
	      getRegionReq.send(function() {
	        var region = service.bucketRegionCache[bucket] || null;
	        if (region && region !== request.httpRequest.region) {
	          service.updateReqBucketRegion(request, region);
	        }
	        done();
	      });
	    } else {
	      done();
	    }
	   },
	
	
	   bucketRegionCache: {},
	
	
	   clearBucketRegionCache: function(buckets) {
	    var bucketRegionCache = this.bucketRegionCache;
	    if (!buckets) {
	      buckets = Object.keys(bucketRegionCache);
	    } else if (typeof buckets === 'string') {
	      buckets = [buckets];
	    }
	    for (var i = 0; i < buckets.length; i++) {
	      delete bucketRegionCache[buckets[i]];
	    }
	    return bucketRegionCache;
	   },
	
	
	  correctBucketRegionFromCache: function correctBucketRegionFromCache(req) {
	    var bucket = req.params.Bucket || null;
	    if (bucket) {
	      var service = req.service;
	      var requestRegion = req.httpRequest.region;
	      var cachedRegion = service.bucketRegionCache[bucket];
	      if (cachedRegion && cachedRegion !== requestRegion) {
	        service.updateReqBucketRegion(req, cachedRegion);
	      }
	    }
	  },
	
	
	  extractRequestIds: function extractRequestIds(resp) {
	    var extendedRequestId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-id-2'] : null;
	    var cfId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-cf-id'] : null;
	    resp.extendedRequestId = extendedRequestId;
	    resp.cfId = cfId;
	
	    if (resp.error) {
	      resp.error.requestId = resp.requestId || null;
	      resp.error.extendedRequestId = extendedRequestId;
	      resp.error.cfId = cfId;
	    }
	  },
	
	
	  getSignedUrl: function getSignedUrl(operation, params, callback) {
	    params = AWS.util.copy(params || {});
	    var expires = params.Expires || 900;
	    delete params.Expires; // we can't validate this
	    var request = this.makeRequest(operation, params);
	    return request.presign(expires, callback);
	  },
	
	
	  prepareSignedUrl: function prepareSignedUrl(request) {
	    request.addListener('validate', request.service.noPresignedContentLength);
	    request.removeListener('build', request.service.addContentType);
	    if (!request.params.Body) {
	      request.removeListener('build', request.service.computeContentMd5);
	    } else {
	      request.addListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);
	    }
	  },
	
	
	  disableBodySigning: function disableBodySigning(request) {
	    var headers = request.httpRequest.headers;
	    if (!Object.prototype.hasOwnProperty.call(headers, 'presigned-expires')) {
	      headers['X-Amz-Content-Sha256'] = 'UNSIGNED-PAYLOAD';
	    }
	  },
	
	
	  noPresignedContentLength: function noPresignedContentLength(request) {
	    if (request.params.ContentLength !== undefined) {
	      throw AWS.util.error(new Error(), {code: 'UnexpectedParameter',
	        message: 'ContentLength is not supported in pre-signed URLs.'});
	    }
	  },
	
	  createBucket: function createBucket(params, callback) {
	    if (typeof params === 'function' || !params) {
	      callback = callback || params;
	      params = {};
	    }
	    var hostname = this.endpoint.hostname;
	    if (hostname !== this.api.globalEndpoint && !params.CreateBucketConfiguration) {
	      params.CreateBucketConfiguration = { LocationConstraint: this.config.region };
	    }
	    return this.makeRequest('createBucket', params, callback);
	  },
	
	
	  upload: function upload(params, options, callback) {
	    if (typeof options === 'function' && callback === undefined) {
	      callback = options;
	      options = null;
	    }
	
	    options = options || {};
	    options = AWS.util.merge(options || {}, {service: this, params: params});
	
	    var uploader = new AWS.S3.ManagedUpload(options);
	    if (typeof callback === 'function') uploader.send(callback);
	    return uploader;
	  }
	});
	
	},{"../core":201,"../s3/managed_upload":237}],251:[function(require,module,exports){
	var AWS = require('../core');
	
	AWS.util.update(AWS.SQS.prototype, {
	
	  setupRequestListeners: function setupRequestListeners(request) {
	    request.addListener('build', this.buildEndpoint);
	
	    if (request.service.config.computeChecksums) {
	      if (request.operation === 'sendMessage') {
	        request.addListener('extractData', this.verifySendMessageChecksum);
	      } else if (request.operation === 'sendMessageBatch') {
	        request.addListener('extractData', this.verifySendMessageBatchChecksum);
	      } else if (request.operation === 'receiveMessage') {
	        request.addListener('extractData', this.verifyReceiveMessageChecksum);
	      }
	    }
	  },
	
	
	  verifySendMessageChecksum: function verifySendMessageChecksum(response) {
	    if (!response.data) return;
	
	    var md5 = response.data.MD5OfMessageBody;
	    var body = this.params.MessageBody;
	    var calculatedMd5 = this.service.calculateChecksum(body);
	    if (calculatedMd5 !== md5) {
	      var msg = 'Got "' + response.data.MD5OfMessageBody +
	        '", expecting "' + calculatedMd5 + '".';
	      this.service.throwInvalidChecksumError(response,
	        [response.data.MessageId], msg);
	    }
	  },
	
	
	  verifySendMessageBatchChecksum: function verifySendMessageBatchChecksum(response) {
	    if (!response.data) return;
	
	    var service = this.service;
	    var entries = {};
	    var errors = [];
	    var messageIds = [];
	    AWS.util.arrayEach(response.data.Successful, function (entry) {
	      entries[entry.Id] = entry;
	    });
	    AWS.util.arrayEach(this.params.Entries, function (entry) {
	      if (entries[entry.Id]) {
	        var md5 = entries[entry.Id].MD5OfMessageBody;
	        var body = entry.MessageBody;
	        if (!service.isChecksumValid(md5, body)) {
	          errors.push(entry.Id);
	          messageIds.push(entries[entry.Id].MessageId);
	        }
	      }
	    });
	
	    if (errors.length > 0) {
	      service.throwInvalidChecksumError(response, messageIds,
	        'Invalid messages: ' + errors.join(', '));
	    }
	  },
	
	
	  verifyReceiveMessageChecksum: function verifyReceiveMessageChecksum(response) {
	    if (!response.data) return;
	
	    var service = this.service;
	    var messageIds = [];
	    AWS.util.arrayEach(response.data.Messages, function(message) {
	      var md5 = message.MD5OfBody;
	      var body = message.Body;
	      if (!service.isChecksumValid(md5, body)) {
	        messageIds.push(message.MessageId);
	      }
	    });
	
	    if (messageIds.length > 0) {
	      service.throwInvalidChecksumError(response, messageIds,
	        'Invalid messages: ' + messageIds.join(', '));
	    }
	  },
	
	
	  throwInvalidChecksumError: function throwInvalidChecksumError(response, ids, message) {
	    response.error = AWS.util.error(new Error(), {
	      retryable: true,
	      code: 'InvalidChecksum',
	      messageIds: ids,
	      message: response.request.operation +
	               ' returned an invalid MD5 response. ' + message
	    });
	  },
	
	
	  isChecksumValid: function isChecksumValid(checksum, data) {
	    return this.calculateChecksum(data) === checksum;
	  },
	
	
	  calculateChecksum: function calculateChecksum(data) {
	    return AWS.util.crypto.md5(data, 'hex');
	  },
	
	
	  buildEndpoint: function buildEndpoint(request) {
	    var url = request.httpRequest.params.QueueUrl;
	    if (url) {
	      request.httpRequest.endpoint = new AWS.Endpoint(url);
	
	      var matches = request.httpRequest.endpoint.host.match(/^sqs\.(.+?)\./);
	      if (matches) request.httpRequest.region = matches[1];
	    }
	  }
	});
	
	},{"../core":201}],252:[function(require,module,exports){
	var AWS = require('../core');
	
	AWS.util.update(AWS.STS.prototype, {
	
	  credentialsFrom: function credentialsFrom(data, credentials) {
	    if (!data) return null;
	    if (!credentials) credentials = new AWS.TemporaryCredentials();
	    credentials.expired = false;
	    credentials.accessKeyId = data.Credentials.AccessKeyId;
	    credentials.secretAccessKey = data.Credentials.SecretAccessKey;
	    credentials.sessionToken = data.Credentials.SessionToken;
	    credentials.expireTime = data.Credentials.Expiration;
	    return credentials;
	  },
	
	  assumeRoleWithWebIdentity: function assumeRoleWithWebIdentity(params, callback) {
	    return this.makeUnauthenticatedRequest('assumeRoleWithWebIdentity', params, callback);
	  },
	
	  assumeRoleWithSAML: function assumeRoleWithSAML(params, callback) {
	    return this.makeUnauthenticatedRequest('assumeRoleWithSAML', params, callback);
	  }
	});
	
	},{"../core":201}],253:[function(require,module,exports){
	var AWS = require('../core');
	var inherit = AWS.util.inherit;
	
	
	var expiresHeader = 'presigned-expires';
	
	
	function signedUrlBuilder(request) {
	  var expires = request.httpRequest.headers[expiresHeader];
	  var signerClass = request.service.getSignerClass(request);
	
	  delete request.httpRequest.headers['User-Agent'];
	  delete request.httpRequest.headers['X-Amz-User-Agent'];
	
	  if (signerClass === AWS.Signers.V4) {
	    if (expires > 604800) { // one week expiry is invalid
	      var message = 'Presigning does not support expiry time greater ' +
	                    'than a week with SigV4 signing.';
	      throw AWS.util.error(new Error(), {
	        code: 'InvalidExpiryTime', message: message, retryable: false
	      });
	    }
	    request.httpRequest.headers[expiresHeader] = expires;
	  } else if (signerClass === AWS.Signers.S3) {
	    request.httpRequest.headers[expiresHeader] = parseInt(
	      AWS.util.date.unixTimestamp() + expires, 10).toString();
	  } else {
	    throw AWS.util.error(new Error(), {
	      message: 'Presigning only supports S3 or SigV4 signing.',
	      code: 'UnsupportedSigner', retryable: false
	    });
	  }
	}
	
	
	function signedUrlSigner(request) {
	  var endpoint = request.httpRequest.endpoint;
	  var parsedUrl = AWS.util.urlParse(request.httpRequest.path);
	  var queryParams = {};
	
	  if (parsedUrl.search) {
	    queryParams = AWS.util.queryStringParse(parsedUrl.search.substr(1));
	  }
	
	  AWS.util.each(request.httpRequest.headers, function (key, value) {
	    if (key === expiresHeader) key = 'Expires';
	    if (key.indexOf('x-amz-meta-') === 0) {
	      delete queryParams[key];
	      key = key.toLowerCase();
	    }
	    queryParams[key] = value;
	  });
	  delete request.httpRequest.headers[expiresHeader];
	
	  var auth = queryParams['Authorization'].split(' ');
	  if (auth[0] === 'AWS') {
	    auth = auth[1].split(':');
	    queryParams['AWSAccessKeyId'] = auth[0];
	    queryParams['Signature'] = auth[1];
	  } else if (auth[0] === 'AWS4-HMAC-SHA256') { // SigV4 signing
	    auth.shift();
	    var rest = auth.join(' ');
	    var signature = rest.match(/Signature=(.*?)(?:,|\s|\r?\n|$)/)[1];
	    queryParams['X-Amz-Signature'] = signature;
	    delete queryParams['Expires'];
	  }
	  delete queryParams['Authorization'];
	  delete queryParams['Host'];
	
	  endpoint.pathname = parsedUrl.pathname;
	  endpoint.search = AWS.util.queryParamsToString(queryParams);
	}
	
	
	AWS.Signers.Presign = inherit({
	
	  sign: function sign(request, expireTime, callback) {
	    request.httpRequest.headers[expiresHeader] = expireTime || 3600;
	    request.on('build', signedUrlBuilder);
	    request.on('sign', signedUrlSigner);
	    request.removeListener('afterBuild',
	      AWS.EventListeners.Core.SET_CONTENT_LENGTH);
	    request.removeListener('afterBuild',
	      AWS.EventListeners.Core.COMPUTE_SHA256);
	
	    request.emit('beforePresign', [request]);
	
	    if (callback) {
	      request.build(function() {
	        if (this.response.error) callback(this.response.error);
	        else {
	          callback(null, AWS.util.urlFormat(request.httpRequest.endpoint));
	        }
	      });
	    } else {
	      request.build();
	      if (request.response.error) throw request.response.error;
	      return AWS.util.urlFormat(request.httpRequest.endpoint);
	    }
	  }
	});
	
	module.exports = AWS.Signers.Presign;
	
	},{"../core":201}],254:[function(require,module,exports){
	var AWS = require('../core');
	var inherit = AWS.util.inherit;
	
	
	AWS.Signers.RequestSigner = inherit({
	  constructor: function RequestSigner(request) {
	    this.request = request;
	  },
	
	  setServiceClientId: function setServiceClientId(id) {
	    this.serviceClientId = id;
	  },
	
	  getServiceClientId: function getServiceClientId() {
	    return this.serviceClientId;
	  }
	});
	
	AWS.Signers.RequestSigner.getVersion = function getVersion(version) {
	  switch (version) {
	    case 'v2': return AWS.Signers.V2;
	    case 'v3': return AWS.Signers.V3;
	    case 'v4': return AWS.Signers.V4;
	    case 's3': return AWS.Signers.S3;
	    case 'v3https': return AWS.Signers.V3Https;
	  }
	  throw new Error('Unknown signing version ' + version);
	};
	
	require('./v2');
	require('./v3');
	require('./v3https');
	require('./v4');
	require('./s3');
	require('./presign');
	
	},{"../core":201,"./presign":253,"./s3":255,"./v2":256,"./v3":257,"./v3https":258,"./v4":259}],255:[function(require,module,exports){
	var AWS = require('../core');
	var inherit = AWS.util.inherit;
	
	
	AWS.Signers.S3 = inherit(AWS.Signers.RequestSigner, {
	
	  subResources: {
	    'acl': 1,
	    'accelerate': 1,
	    'analytics': 1,
	    'cors': 1,
	    'lifecycle': 1,
	    'delete': 1,
	    'inventory': 1,
	    'location': 1,
	    'logging': 1,
	    'metrics': 1,
	    'notification': 1,
	    'partNumber': 1,
	    'policy': 1,
	    'requestPayment': 1,
	    'replication': 1,
	    'restore': 1,
	    'tagging': 1,
	    'torrent': 1,
	    'uploadId': 1,
	    'uploads': 1,
	    'versionId': 1,
	    'versioning': 1,
	    'versions': 1,
	    'website': 1
	  },
	
	  responseHeaders: {
	    'response-content-type': 1,
	    'response-content-language': 1,
	    'response-expires': 1,
	    'response-cache-control': 1,
	    'response-content-disposition': 1,
	    'response-content-encoding': 1
	  },
	
	  addAuthorization: function addAuthorization(credentials, date) {
	    if (!this.request.headers['presigned-expires']) {
	      this.request.headers['X-Amz-Date'] = AWS.util.date.rfc822(date);
	    }
	
	    if (credentials.sessionToken) {
	      this.request.headers['x-amz-security-token'] = credentials.sessionToken;
	    }
	
	    var signature = this.sign(credentials.secretAccessKey, this.stringToSign());
	    var auth = 'AWS ' + credentials.accessKeyId + ':' + signature;
	
	    this.request.headers['Authorization'] = auth;
	  },
	
	  stringToSign: function stringToSign() {
	    var r = this.request;
	
	    var parts = [];
	    parts.push(r.method);
	    parts.push(r.headers['Content-MD5'] || '');
	    parts.push(r.headers['Content-Type'] || '');
	
	    parts.push(r.headers['presigned-expires'] || '');
	
	    var headers = this.canonicalizedAmzHeaders();
	    if (headers) parts.push(headers);
	    parts.push(this.canonicalizedResource());
	
	    return parts.join('\n');
	
	  },
	
	  canonicalizedAmzHeaders: function canonicalizedAmzHeaders() {
	
	    var amzHeaders = [];
	
	    AWS.util.each(this.request.headers, function (name) {
	      if (name.match(/^x-amz-/i))
	        amzHeaders.push(name);
	    });
	
	    amzHeaders.sort(function (a, b) {
	      return a.toLowerCase() < b.toLowerCase() ? -1 : 1;
	    });
	
	    var parts = [];
	    AWS.util.arrayEach.call(this, amzHeaders, function (name) {
	      parts.push(name.toLowerCase() + ':' + String(this.request.headers[name]));
	    });
	
	    return parts.join('\n');
	
	  },
	
	  canonicalizedResource: function canonicalizedResource() {
	
	    var r = this.request;
	
	    var parts = r.path.split('?');
	    var path = parts[0];
	    var querystring = parts[1];
	
	    var resource = '';
	
	    if (r.virtualHostedBucket)
	      resource += '/' + r.virtualHostedBucket;
	
	    resource += path;
	
	    if (querystring) {
	
	      var resources = [];
	
	      AWS.util.arrayEach.call(this, querystring.split('&'), function (param) {
	        var name = param.split('=')[0];
	        var value = param.split('=')[1];
	        if (this.subResources[name] || this.responseHeaders[name]) {
	          var subresource = { name: name };
	          if (value !== undefined) {
	            if (this.subResources[name]) {
	              subresource.value = value;
	            } else {
	              subresource.value = decodeURIComponent(value);
	            }
	          }
	          resources.push(subresource);
	        }
	      });
	
	      resources.sort(function (a, b) { return a.name < b.name ? -1 : 1; });
	
	      if (resources.length) {
	
	        querystring = [];
	        AWS.util.arrayEach(resources, function (res) {
	          if (res.value === undefined) {
	            querystring.push(res.name);
	          } else {
	            querystring.push(res.name + '=' + res.value);
	          }
	        });
	
	        resource += '?' + querystring.join('&');
	      }
	
	    }
	
	    return resource;
	
	  },
	
	  sign: function sign(secret, string) {
	    return AWS.util.crypto.hmac(secret, string, 'base64', 'sha1');
	  }
	});
	
	module.exports = AWS.Signers.S3;
	
	},{"../core":201}],256:[function(require,module,exports){
	var AWS = require('../core');
	var inherit = AWS.util.inherit;
	
	
	AWS.Signers.V2 = inherit(AWS.Signers.RequestSigner, {
	  addAuthorization: function addAuthorization(credentials, date) {
	
	    if (!date) date = AWS.util.date.getDate();
	
	    var r = this.request;
	
	    r.params.Timestamp = AWS.util.date.iso8601(date);
	    r.params.SignatureVersion = '2';
	    r.params.SignatureMethod = 'HmacSHA256';
	    r.params.AWSAccessKeyId = credentials.accessKeyId;
	
	    if (credentials.sessionToken) {
	      r.params.SecurityToken = credentials.sessionToken;
	    }
	
	    delete r.params.Signature; // delete old Signature for re-signing
	    r.params.Signature = this.signature(credentials);
	
	    r.body = AWS.util.queryParamsToString(r.params);
	    r.headers['Content-Length'] = r.body.length;
	  },
	
	  signature: function signature(credentials) {
	    return AWS.util.crypto.hmac(credentials.secretAccessKey, this.stringToSign(), 'base64');
	  },
	
	  stringToSign: function stringToSign() {
	    var parts = [];
	    parts.push(this.request.method);
	    parts.push(this.request.endpoint.host.toLowerCase());
	    parts.push(this.request.pathname());
	    parts.push(AWS.util.queryParamsToString(this.request.params));
	    return parts.join('\n');
	  }
	
	});
	
	module.exports = AWS.Signers.V2;
	
	},{"../core":201}],257:[function(require,module,exports){
	var AWS = require('../core');
	var inherit = AWS.util.inherit;
	
	
	AWS.Signers.V3 = inherit(AWS.Signers.RequestSigner, {
	  addAuthorization: function addAuthorization(credentials, date) {
	
	    var datetime = AWS.util.date.rfc822(date);
	
	    this.request.headers['X-Amz-Date'] = datetime;
	
	    if (credentials.sessionToken) {
	      this.request.headers['x-amz-security-token'] = credentials.sessionToken;
	    }
	
	    this.request.headers['X-Amzn-Authorization'] =
	      this.authorization(credentials, datetime);
	
	  },
	
	  authorization: function authorization(credentials) {
	    return 'AWS3 ' +
	      'AWSAccessKeyId=' + credentials.accessKeyId + ',' +
	      'Algorithm=HmacSHA256,' +
	      'SignedHeaders=' + this.signedHeaders() + ',' +
	      'Signature=' + this.signature(credentials);
	  },
	
	  signedHeaders: function signedHeaders() {
	    var headers = [];
	    AWS.util.arrayEach(this.headersToSign(), function iterator(h) {
	      headers.push(h.toLowerCase());
	    });
	    return headers.sort().join(';');
	  },
	
	  canonicalHeaders: function canonicalHeaders() {
	    var headers = this.request.headers;
	    var parts = [];
	    AWS.util.arrayEach(this.headersToSign(), function iterator(h) {
	      parts.push(h.toLowerCase().trim() + ':' + String(headers[h]).trim());
	    });
	    return parts.sort().join('\n') + '\n';
	  },
	
	  headersToSign: function headersToSign() {
	    var headers = [];
	    AWS.util.each(this.request.headers, function iterator(k) {
	      if (k === 'Host' || k === 'Content-Encoding' || k.match(/^X-Amz/i)) {
	        headers.push(k);
	      }
	    });
	    return headers;
	  },
	
	  signature: function signature(credentials) {
	    return AWS.util.crypto.hmac(credentials.secretAccessKey, this.stringToSign(), 'base64');
	  },
	
	  stringToSign: function stringToSign() {
	    var parts = [];
	    parts.push(this.request.method);
	    parts.push('/');
	    parts.push('');
	    parts.push(this.canonicalHeaders());
	    parts.push(this.request.body);
	    return AWS.util.crypto.sha256(parts.join('\n'));
	  }
	
	});
	
	module.exports = AWS.Signers.V3;
	
	},{"../core":201}],258:[function(require,module,exports){
	var AWS = require('../core');
	var inherit = AWS.util.inherit;
	
	require('./v3');
	
	
	AWS.Signers.V3Https = inherit(AWS.Signers.V3, {
	  authorization: function authorization(credentials) {
	    return 'AWS3-HTTPS ' +
	      'AWSAccessKeyId=' + credentials.accessKeyId + ',' +
	      'Algorithm=HmacSHA256,' +
	      'Signature=' + this.signature(credentials);
	  },
	
	  stringToSign: function stringToSign() {
	    return this.request.headers['X-Amz-Date'];
	  }
	});
	
	module.exports = AWS.Signers.V3Https;
	
	},{"../core":201,"./v3":257}],259:[function(require,module,exports){
	var AWS = require('../core');
	var inherit = AWS.util.inherit;
	
	
	var cachedSecret = {};
	
	
	var cacheQueue = [];
	
	
	var maxCacheEntries = 50;
	
	
	var expiresHeader = 'presigned-expires';
	
	
	AWS.Signers.V4 = inherit(AWS.Signers.RequestSigner, {
	  constructor: function V4(request, serviceName, signatureCache) {
	    AWS.Signers.RequestSigner.call(this, request);
	    this.serviceName = serviceName;
	    this.signatureCache = signatureCache;
	  },
	
	  algorithm: 'AWS4-HMAC-SHA256',
	
	  addAuthorization: function addAuthorization(credentials, date) {
	    var datetime = AWS.util.date.iso8601(date).replace(/[:\-]|\.\d{3}/g, '');
	
	    if (this.isPresigned()) {
	      this.updateForPresigned(credentials, datetime);
	    } else {
	      this.addHeaders(credentials, datetime);
	    }
	
	    this.request.headers['Authorization'] =
	      this.authorization(credentials, datetime);
	  },
	
	  addHeaders: function addHeaders(credentials, datetime) {
	    this.request.headers['X-Amz-Date'] = datetime;
	    if (credentials.sessionToken) {
	      this.request.headers['x-amz-security-token'] = credentials.sessionToken;
	    }
	  },
	
	  updateForPresigned: function updateForPresigned(credentials, datetime) {
	    var credString = this.credentialString(datetime);
	    var qs = {
	      'X-Amz-Date': datetime,
	      'X-Amz-Algorithm': this.algorithm,
	      'X-Amz-Credential': credentials.accessKeyId + '/' + credString,
	      'X-Amz-Expires': this.request.headers[expiresHeader],
	      'X-Amz-SignedHeaders': this.signedHeaders()
	    };
	
	    if (credentials.sessionToken) {
	      qs['X-Amz-Security-Token'] = credentials.sessionToken;
	    }
	
	    if (this.request.headers['Content-Type']) {
	      qs['Content-Type'] = this.request.headers['Content-Type'];
	    }
	    if (this.request.headers['Content-MD5']) {
	      qs['Content-MD5'] = this.request.headers['Content-MD5'];
	    }
	    if (this.request.headers['Cache-Control']) {
	      qs['Cache-Control'] = this.request.headers['Cache-Control'];
	    }
	
	    AWS.util.each.call(this, this.request.headers, function(key, value) {
	      if (key === expiresHeader) return;
	      if (this.isSignableHeader(key)) {
	        var lowerKey = key.toLowerCase();
	        if (lowerKey.indexOf('x-amz-meta-') === 0) {
	          qs[lowerKey] = value;
	        } else if (lowerKey.indexOf('x-amz-') === 0) {
	          qs[key] = value;
	        }
	      }
	    });
	
	    var sep = this.request.path.indexOf('?') >= 0 ? '&' : '?';
	    this.request.path += sep + AWS.util.queryParamsToString(qs);
	  },
	
	  authorization: function authorization(credentials, datetime) {
	    var parts = [];
	    var credString = this.credentialString(datetime);
	    parts.push(this.algorithm + ' Credential=' +
	      credentials.accessKeyId + '/' + credString);
	    parts.push('SignedHeaders=' + this.signedHeaders());
	    parts.push('Signature=' + this.signature(credentials, datetime));
	    return parts.join(', ');
	  },
	
	  signature: function signature(credentials, datetime) {
	    var cache = null;
	    var cacheIdentifier = this.serviceName + (this.getServiceClientId() ? '_' + this.getServiceClientId() : '');
	    if (this.signatureCache) {
	      var cache = cachedSecret[cacheIdentifier];
	      if (!cache) {
	        cacheQueue.push(cacheIdentifier);
	        if (cacheQueue.length > maxCacheEntries) {
	          delete cachedSecret[cacheQueue.shift()];
	        }
	      }
	
	    }
	    var date = datetime.substr(0, 8);
	
	    if (!cache ||
	        cache.akid !== credentials.accessKeyId ||
	        cache.region !== this.request.region ||
	        cache.date !== date) {
	
	      var kSecret = credentials.secretAccessKey;
	      var kDate = AWS.util.crypto.hmac('AWS4' + kSecret, date, 'buffer');
	      var kRegion = AWS.util.crypto.hmac(kDate, this.request.region, 'buffer');
	      var kService = AWS.util.crypto.hmac(kRegion, this.serviceName, 'buffer');
	      var kCredentials = AWS.util.crypto.hmac(kService, 'aws4_request', 'buffer');
	
	      if (!this.signatureCache) {
	        return AWS.util.crypto.hmac(kCredentials, this.stringToSign(datetime), 'hex');
	      }
	
	      cachedSecret[cacheIdentifier] = {
	        region: this.request.region, date: date,
	        key: kCredentials, akid: credentials.accessKeyId
	      };
	    }
	
	    var key = cachedSecret[cacheIdentifier].key;
	    return AWS.util.crypto.hmac(key, this.stringToSign(datetime), 'hex');
	  },
	
	  stringToSign: function stringToSign(datetime) {
	    var parts = [];
	    parts.push('AWS4-HMAC-SHA256');
	    parts.push(datetime);
	    parts.push(this.credentialString(datetime));
	    parts.push(this.hexEncodedHash(this.canonicalString()));
	    return parts.join('\n');
	  },
	
	  canonicalString: function canonicalString() {
	    var parts = [], pathname = this.request.pathname();
	    if (this.serviceName !== 's3') pathname = AWS.util.uriEscapePath(pathname);
	
	    parts.push(this.request.method);
	    parts.push(pathname);
	    parts.push(this.request.search());
	    parts.push(this.canonicalHeaders() + '\n');
	    parts.push(this.signedHeaders());
	    parts.push(this.hexEncodedBodyHash());
	    return parts.join('\n');
	  },
	
	  canonicalHeaders: function canonicalHeaders() {
	    var headers = [];
	    AWS.util.each.call(this, this.request.headers, function (key, item) {
	      headers.push([key, item]);
	    });
	    headers.sort(function (a, b) {
	      return a[0].toLowerCase() < b[0].toLowerCase() ? -1 : 1;
	    });
	    var parts = [];
	    AWS.util.arrayEach.call(this, headers, function (item) {
	      var key = item[0].toLowerCase();
	      if (this.isSignableHeader(key)) {
	        parts.push(key + ':' +
	          this.canonicalHeaderValues(item[1].toString()));
	      }
	    });
	    return parts.join('\n');
	  },
	
	  canonicalHeaderValues: function canonicalHeaderValues(values) {
	    return values.replace(/\s+/g, ' ').replace(/^\s+|\s+$/g, '');
	  },
	
	  signedHeaders: function signedHeaders() {
	    var keys = [];
	    AWS.util.each.call(this, this.request.headers, function (key) {
	      key = key.toLowerCase();
	      if (this.isSignableHeader(key)) keys.push(key);
	    });
	    return keys.sort().join(';');
	  },
	
	  credentialString: function credentialString(datetime) {
	    var parts = [];
	    parts.push(datetime.substr(0, 8));
	    parts.push(this.request.region);
	    parts.push(this.serviceName);
	    parts.push('aws4_request');
	    return parts.join('/');
	  },
	
	  hexEncodedHash: function hash(string) {
	    return AWS.util.crypto.sha256(string, 'hex');
	  },
	
	  hexEncodedBodyHash: function hexEncodedBodyHash() {
	    if (this.isPresigned() && this.serviceName === 's3' && !this.request.body) {
	      return 'UNSIGNED-PAYLOAD';
	    } else if (this.request.headers['X-Amz-Content-Sha256']) {
	      return this.request.headers['X-Amz-Content-Sha256'];
	    } else {
	      return this.hexEncodedHash(this.request.body || '');
	    }
	  },
	
	  unsignableHeaders: [
	    'authorization',
	    'content-type',
	    'content-length',
	    'user-agent',
	    expiresHeader,
	    'expect',
	    'x-amzn-trace-id'
	  ],
	
	  isSignableHeader: function isSignableHeader(key) {
	    if (key.toLowerCase().indexOf('x-amz-') === 0) return true;
	    return this.unsignableHeaders.indexOf(key) < 0;
	  },
	
	  isPresigned: function isPresigned() {
	    return this.request.headers[expiresHeader] ? true : false;
	  }
	
	});
	
	module.exports = AWS.Signers.V4;
	
	},{"../core":201}],260:[function(require,module,exports){
	function AcceptorStateMachine(states, state) {
	  this.currentState = state || null;
	  this.states = states || {};
	}
	
	AcceptorStateMachine.prototype.runTo = function runTo(finalState, done, bindObject, inputError) {
	  if (typeof finalState === 'function') {
	    inputError = bindObject; bindObject = done;
	    done = finalState; finalState = null;
	  }
	
	  var self = this;
	  var state = self.states[self.currentState];
	  state.fn.call(bindObject || self, inputError, function(err) {
	    if (err) {
	      if (state.fail) self.currentState = state.fail;
	      else return done ? done.call(bindObject, err) : null;
	    } else {
	      if (state.accept) self.currentState = state.accept;
	      else return done ? done.call(bindObject) : null;
	    }
	    if (self.currentState === finalState) {
	      return done ? done.call(bindObject, err) : null;
	    }
	
	    self.runTo(finalState, done, bindObject, err);
	  });
	};
	
	AcceptorStateMachine.prototype.addState = function addState(name, acceptState, failState, fn) {
	  if (typeof acceptState === 'function') {
	    fn = acceptState; acceptState = null; failState = null;
	  } else if (typeof failState === 'function') {
	    fn = failState; failState = null;
	  }
	
	  if (!this.currentState) this.currentState = name;
	  this.states[name] = { accept: acceptState, fail: failState, fn: fn };
	  return this;
	};
	
	module.exports = AcceptorStateMachine;
	
	},{}],261:[function(require,module,exports){
	(function (process){
	
	var AWS;
	
	
	var util = {
	  engine: function engine() {
	    if (util.isBrowser() && typeof navigator !== 'undefined') {
	      return navigator.userAgent;
	    } else {
	      var engine = process.platform + '/' + process.version;
	      if (process.env.AWS_EXECUTION_ENV) {
	        engine += ' exec-env/' + process.env.AWS_EXECUTION_ENV;
	      }
	      return engine;
	    }
	  },
	
	  userAgent: function userAgent() {
	    var name = util.isBrowser() ? 'js' : 'nodejs';
	    var agent = 'aws-sdk-' + name + '/' + require('./core').VERSION;
	    if (name === 'nodejs') agent += ' ' + util.engine();
	    return agent;
	  },
	
	  isBrowser: function isBrowser() { return process && process.browser; },
	  isNode: function isNode() { return !util.isBrowser(); },
	  uriEscape: function uriEscape(string) {
	    var output = encodeURIComponent(string);
	    output = output.replace(/[^A-Za-z0-9_.~\-%]+/g, escape);
	
	    output = output.replace(/[*]/g, function(ch) {
	      return '%' + ch.charCodeAt(0).toString(16).toUpperCase();
	    });
	
	    return output;
	  },
	
	  uriEscapePath: function uriEscapePath(string) {
	    var parts = [];
	    util.arrayEach(string.split('/'), function (part) {
	      parts.push(util.uriEscape(part));
	    });
	    return parts.join('/');
	  },
	
	  urlParse: function urlParse(url) {
	    return util.url.parse(url);
	  },
	
	  urlFormat: function urlFormat(url) {
	    return util.url.format(url);
	  },
	
	  queryStringParse: function queryStringParse(qs) {
	    return util.querystring.parse(qs);
	  },
	
	  queryParamsToString: function queryParamsToString(params) {
	    var items = [];
	    var escape = util.uriEscape;
	    var sortedKeys = Object.keys(params).sort();
	
	    util.arrayEach(sortedKeys, function(name) {
	      var value = params[name];
	      var ename = escape(name);
	      var result = ename + '=';
	      if (Array.isArray(value)) {
	        var vals = [];
	        util.arrayEach(value, function(item) { vals.push(escape(item)); });
	        result = ename + '=' + vals.sort().join('&' + ename + '=');
	      } else if (value !== undefined && value !== null) {
	        result = ename + '=' + escape(value);
	      }
	      items.push(result);
	    });
	
	    return items.join('&');
	  },
	
	  readFileSync: function readFileSync(path) {
	    if (util.isBrowser()) return null;
	    return require('fs').readFileSync(path, 'utf-8');
	  },
	
	  base64: {
	    encode: function encode64(string) {
	      if (typeof string === 'number') {
	        throw util.error(new Error('Cannot base64 encode number ' + string));
	      }
	      if (string === null || typeof string === 'undefined') {
	        return string;
	      }
	      var buf = (typeof util.Buffer.from === 'function' && util.Buffer.from !== Uint8Array.from) ? util.Buffer.from(string) : new util.Buffer(string);
	      return buf.toString('base64');
	    },
	
	    decode: function decode64(string) {
	      if (typeof string === 'number') {
	        throw util.error(new Error('Cannot base64 decode number ' + string));
	      }
	      if (string === null || typeof string === 'undefined') {
	        return string;
	      }
	      return (typeof util.Buffer.from === 'function' && util.Buffer.from !== Uint8Array.from) ? util.Buffer.from(string, 'base64') : new util.Buffer(string, 'base64');
	    }
	
	  },
	
	  buffer: {
	    toStream: function toStream(buffer) {
	      if (!util.Buffer.isBuffer(buffer)) buffer = new util.Buffer(buffer);
	
	      var readable = new (util.stream.Readable)();
	      var pos = 0;
	      readable._read = function(size) {
	        if (pos >= buffer.length) return readable.push(null);
	
	        var end = pos + size;
	        if (end > buffer.length) end = buffer.length;
	        readable.push(buffer.slice(pos, end));
	        pos = end;
	      };
	
	      return readable;
	    },
	
	
	    concat: function(buffers) {
	      var length = 0,
	          offset = 0,
	          buffer = null, i;
	
	      for (i = 0; i < buffers.length; i++) {
	        length += buffers[i].length;
	      }
	
	      buffer = new util.Buffer(length);
	
	      for (i = 0; i < buffers.length; i++) {
	        buffers[i].copy(buffer, offset);
	        offset += buffers[i].length;
	      }
	
	      return buffer;
	    }
	  },
	
	  string: {
	    byteLength: function byteLength(string) {
	      if (string === null || string === undefined) return 0;
	      if (typeof string === 'string') string = new util.Buffer(string);
	
	      if (typeof string.byteLength === 'number') {
	        return string.byteLength;
	      } else if (typeof string.length === 'number') {
	        return string.length;
	      } else if (typeof string.size === 'number') {
	        return string.size;
	      } else if (typeof string.path === 'string') {
	        return require('fs').lstatSync(string.path).size;
	      } else {
	        throw util.error(new Error('Cannot determine length of ' + string),
	          { object: string });
	      }
	    },
	
	    upperFirst: function upperFirst(string) {
	      return string[0].toUpperCase() + string.substr(1);
	    },
	
	    lowerFirst: function lowerFirst(string) {
	      return string[0].toLowerCase() + string.substr(1);
	    }
	  },
	
	  ini: {
	    parse: function string(ini) {
	      var currentSection, map = {};
	      util.arrayEach(ini.split(/\r?\n/), function(line) {
	        line = line.split(/(^|\s)[;#]/)[0]; // remove comments
	        var section = line.match(/^\s*\[([^\[\]]+)\]\s*$/);
	        if (section) {
	          currentSection = section[1];
	        } else if (currentSection) {
	          var item = line.match(/^\s*(.+?)\s*=\s*(.+?)\s*$/);
	          if (item) {
	            map[currentSection] = map[currentSection] || {};
	            map[currentSection][item[1]] = item[2];
	          }
	        }
	      });
	
	      return map;
	    }
	  },
	
	  fn: {
	    noop: function() {},
	
	
	    makeAsync: function makeAsync(fn, expectedArgs) {
	      if (expectedArgs && expectedArgs <= fn.length) {
	        return fn;
	      }
	
	      return function() {
	        var args = Array.prototype.slice.call(arguments, 0);
	        var callback = args.pop();
	        var result = fn.apply(null, args);
	        callback(result);
	      };
	    }
	  },
	
	
	  date: {
	
	
	    getDate: function getDate() {
	      if (!AWS) AWS = require('./core');
	      if (AWS.config.systemClockOffset) { // use offset when non-zero
	        return new Date(new Date().getTime() + AWS.config.systemClockOffset);
	      } else {
	        return new Date();
	      }
	    },
	
	
	    iso8601: function iso8601(date) {
	      if (date === undefined) { date = util.date.getDate(); }
	      return date.toISOString().replace(/\.\d{3}Z$/, 'Z');
	    },
	
	
	    rfc822: function rfc822(date) {
	      if (date === undefined) { date = util.date.getDate(); }
	      return date.toUTCString();
	    },
	
	
	    unixTimestamp: function unixTimestamp(date) {
	      if (date === undefined) { date = util.date.getDate(); }
	      return date.getTime() / 1000;
	    },
	
	
	    from: function format(date) {
	      if (typeof date === 'number') {
	        return new Date(date * 1000); // unix timestamp
	      } else {
	        return new Date(date);
	      }
	    },
	
	
	    format: function format(date, formatter) {
	      if (!formatter) formatter = 'iso8601';
	      return util.date[formatter](util.date.from(date));
	    },
	
	    parseTimestamp: function parseTimestamp(value) {
	      if (typeof value === 'number') { // unix timestamp (number)
	        return new Date(value * 1000);
	      } else if (value.match(/^\d+$/)) { // unix timestamp
	        return new Date(value * 1000);
	      } else if (value.match(/^\d{4}/)) { // iso8601
	        return new Date(value);
	      } else if (value.match(/^\w{3},/)) { // rfc822
	        return new Date(value);
	      } else {
	        throw util.error(
	          new Error('unhandled timestamp format: ' + value),
	          {code: 'TimestampParserError'});
	      }
	    }
	
	  },
	
	  crypto: {
	    crc32Table: [
	     0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419,
	     0x706AF48F, 0xE963A535, 0x9E6495A3, 0x0EDB8832, 0x79DCB8A4,
	     0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07,
	     0x90BF1D91, 0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,
	     0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 0x136C9856,
	     0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9,
	     0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4,
	     0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,
	     0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3,
	     0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 0x26D930AC, 0x51DE003A,
	     0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599,
	     0xB8BDA50F, 0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,
	     0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D, 0x76DC4190,
	     0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F,
	     0x9FBFE4A5, 0xE8B8D433, 0x7807C9A2, 0x0F00F934, 0x9609A88E,
	     0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,
	     0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED,
	     0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950,
	     0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3,
	     0xFBD44C65, 0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,
	     0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A,
	     0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5,
	     0xAA0A4C5F, 0xDD0D7CC9, 0x5005713C, 0x270241AA, 0xBE0B1010,
	     0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,
	     0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17,
	     0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6,
	     0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615,
	     0x73DC1683, 0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,
	     0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 0xF00F9344,
	     0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB,
	     0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0, 0x10DA7A5A,
	     0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,
	     0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1,
	     0xA6BC5767, 0x3FB506DD, 0x48B2364B, 0xD80D2BDA, 0xAF0A1B4C,
	     0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF,
	     0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,
	     0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 0xC5BA3BBE,
	     0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31,
	     0x2CD99E8B, 0x5BDEAE1D, 0x9B64C2B0, 0xEC63F226, 0x756AA39C,
	     0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,
	     0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B,
	     0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242,
	     0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1,
	     0x18B74777, 0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,
	     0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 0xA00AE278,
	     0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7,
	     0x4969474D, 0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC, 0x40DF0B66,
	     0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
	     0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605,
	     0xCDD70693, 0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8,
	     0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B,
	     0x2D02EF8D],
	
	    crc32: function crc32(data) {
	      var tbl = util.crypto.crc32Table;
	      var crc = 0 ^ -1;
	
	      if (typeof data === 'string') {
	        data = new util.Buffer(data);
	      }
	
	      for (var i = 0; i < data.length; i++) {
	        var code = data.readUInt8(i);
	        crc = (crc >>> 8) ^ tbl[(crc ^ code) & 0xFF];
	      }
	      return (crc ^ -1) >>> 0;
	    },
	
	    hmac: function hmac(key, string, digest, fn) {
	      if (!digest) digest = 'binary';
	      if (digest === 'buffer') { digest = undefined; }
	      if (!fn) fn = 'sha256';
	      if (typeof string === 'string') string = new util.Buffer(string);
	      return util.crypto.lib.createHmac(fn, key).update(string).digest(digest);
	    },
	
	    md5: function md5(data, digest, callback) {
	      return util.crypto.hash('md5', data, digest, callback);
	    },
	
	    sha256: function sha256(data, digest, callback) {
	      return util.crypto.hash('sha256', data, digest, callback);
	    },
	
	    hash: function(algorithm, data, digest, callback) {
	      var hash = util.crypto.createHash(algorithm);
	      if (!digest) { digest = 'binary'; }
	      if (digest === 'buffer') { digest = undefined; }
	      if (typeof data === 'string') data = new util.Buffer(data);
	      var sliceFn = util.arraySliceFn(data);
	      var isBuffer = util.Buffer.isBuffer(data);
	      if (util.isBrowser() && typeof ArrayBuffer !== 'undefined' && data && data.buffer instanceof ArrayBuffer) isBuffer = true;
	
	      if (callback && typeof data === 'object' &&
	          typeof data.on === 'function' && !isBuffer) {
	        data.on('data', function(chunk) { hash.update(chunk); });
	        data.on('error', function(err) { callback(err); });
	        data.on('end', function() { callback(null, hash.digest(digest)); });
	      } else if (callback && sliceFn && !isBuffer &&
	                 typeof FileReader !== 'undefined') {
	        var index = 0, size = 1024 * 512;
	        var reader = new FileReader();
	        reader.onerror = function() {
	          callback(new Error('Failed to read data.'));
	        };
	        reader.onload = function() {
	          var buf = new util.Buffer(new Uint8Array(reader.result));
	          hash.update(buf);
	          index += buf.length;
	          reader._continueReading();
	        };
	        reader._continueReading = function() {
	          if (index >= data.size) {
	            callback(null, hash.digest(digest));
	            return;
	          }
	
	          var back = index + size;
	          if (back > data.size) back = data.size;
	          reader.readAsArrayBuffer(sliceFn.call(data, index, back));
	        };
	
	        reader._continueReading();
	      } else {
	        if (util.isBrowser() && typeof data === 'object' && !isBuffer) {
	          data = new util.Buffer(new Uint8Array(data));
	        }
	        var out = hash.update(data).digest(digest);
	        if (callback) callback(null, out);
	        return out;
	      }
	    },
	
	    toHex: function toHex(data) {
	      var out = [];
	      for (var i = 0; i < data.length; i++) {
	        out.push(('0' + data.charCodeAt(i).toString(16)).substr(-2, 2));
	      }
	      return out.join('');
	    },
	
	    createHash: function createHash(algorithm) {
	      return util.crypto.lib.createHash(algorithm);
	    }
	
	  },
	
	
	
	
	  abort: {},
	
	  each: function each(object, iterFunction) {
	    for (var key in object) {
	      if (Object.prototype.hasOwnProperty.call(object, key)) {
	        var ret = iterFunction.call(this, key, object[key]);
	        if (ret === util.abort) break;
	      }
	    }
	  },
	
	  arrayEach: function arrayEach(array, iterFunction) {
	    for (var idx in array) {
	      if (Object.prototype.hasOwnProperty.call(array, idx)) {
	        var ret = iterFunction.call(this, array[idx], parseInt(idx, 10));
	        if (ret === util.abort) break;
	      }
	    }
	  },
	
	  update: function update(obj1, obj2) {
	    util.each(obj2, function iterator(key, item) {
	      obj1[key] = item;
	    });
	    return obj1;
	  },
	
	  merge: function merge(obj1, obj2) {
	    return util.update(util.copy(obj1), obj2);
	  },
	
	  copy: function copy(object) {
	    if (object === null || object === undefined) return object;
	    var dupe = {};
	    for (var key in object) {
	      dupe[key] = object[key];
	    }
	    return dupe;
	  },
	
	  isEmpty: function isEmpty(obj) {
	    for (var prop in obj) {
	      if (Object.prototype.hasOwnProperty.call(obj, prop)) {
	        return false;
	      }
	    }
	    return true;
	  },
	
	  arraySliceFn: function arraySliceFn(obj) {
	    var fn = obj.slice || obj.webkitSlice || obj.mozSlice;
	    return typeof fn === 'function' ? fn : null;
	  },
	
	  isType: function isType(obj, type) {
	    if (typeof type === 'function') type = util.typeName(type);
	    return Object.prototype.toString.call(obj) === '[object ' + type + ']';
	  },
	
	  typeName: function typeName(type) {
	    if (Object.prototype.hasOwnProperty.call(type, 'name')) return type.name;
	    var str = type.toString();
	    var match = str.match(/^\s*function (.+)\(/);
	    return match ? match[1] : str;
	  },
	
	  error: function error(err, options) {
	    var originalError = null;
	    if (typeof err.message === 'string' && err.message !== '') {
	      if (typeof options === 'string' || (options && options.message)) {
	        originalError = util.copy(err);
	        originalError.message = err.message;
	      }
	    }
	    err.message = err.message || null;
	
	    if (typeof options === 'string') {
	      err.message = options;
	    } else if (typeof options === 'object' && options !== null) {
	      util.update(err, options);
	      if (options.message)
	        err.message = options.message;
	      if (options.code || options.name)
	        err.code = options.code || options.name;
	      if (options.stack)
	        err.stack = options.stack;
	    }
	
	    if (typeof Object.defineProperty === 'function') {
	      Object.defineProperty(err, 'name', {writable: true, enumerable: false});
	      Object.defineProperty(err, 'message', {enumerable: true});
	    }
	
	    err.name = options && options.name || err.name || err.code || 'Error';
	    err.time = new Date();
	
	    if (originalError) err.originalError = originalError;
	
	    return err;
	  },
	
	
	  inherit: function inherit(klass, features) {
	    var newObject = null;
	    if (features === undefined) {
	      features = klass;
	      klass = Object;
	      newObject = {};
	    } else {
	      var ctor = function ConstructorWrapper() {};
	      ctor.prototype = klass.prototype;
	      newObject = new ctor();
	    }
	
	    if (features.constructor === Object) {
	      features.constructor = function() {
	        if (klass !== Object) {
	          return klass.apply(this, arguments);
	        }
	      };
	    }
	
	    features.constructor.prototype = newObject;
	    util.update(features.constructor.prototype, features);
	    features.constructor.__super__ = klass;
	    return features.constructor;
	  },
	
	
	  mixin: function mixin() {
	    var klass = arguments[0];
	    for (var i = 1; i < arguments.length; i++) {
	      for (var prop in arguments[i].prototype) {
	        var fn = arguments[i].prototype[prop];
	        if (prop !== 'constructor') {
	          klass.prototype[prop] = fn;
	        }
	      }
	    }
	    return klass;
	  },
	
	
	  hideProperties: function hideProperties(obj, props) {
	    if (typeof Object.defineProperty !== 'function') return;
	
	    util.arrayEach(props, function (key) {
	      Object.defineProperty(obj, key, {
	        enumerable: false, writable: true, configurable: true });
	    });
	  },
	
	
	  property: function property(obj, name, value, enumerable, isValue) {
	    var opts = {
	      configurable: true,
	      enumerable: enumerable !== undefined ? enumerable : true
	    };
	    if (typeof value === 'function' && !isValue) {
	      opts.get = value;
	    }
	    else {
	      opts.value = value; opts.writable = true;
	    }
	
	    Object.defineProperty(obj, name, opts);
	  },
	
	
	  memoizedProperty: function memoizedProperty(obj, name, get, enumerable) {
	    var cachedValue = null;
	
	    util.property(obj, name, function() {
	      if (cachedValue === null) {
	        cachedValue = get();
	      }
	      return cachedValue;
	    }, enumerable);
	  },
	
	
	  hoistPayloadMember: function hoistPayloadMember(resp) {
	    var req = resp.request;
	    var operation = req.operation;
	    var output = req.service.api.operations[operation].output;
	    if (output.payload) {
	      var payloadMember = output.members[output.payload];
	      var responsePayload = resp.data[output.payload];
	      if (payloadMember.type === 'structure') {
	        util.each(responsePayload, function(key, value) {
	          util.property(resp.data, key, value, false);
	        });
	      }
	    }
	  },
	
	
	  computeSha256: function computeSha256(body, done) {
	    if (util.isNode()) {
	      var Stream = util.stream.Stream;
	      var fs = require('fs');
	      if (body instanceof Stream) {
	        if (typeof body.path === 'string') { // assume file object
	          var settings = {};
	          if (typeof body.start === 'number') {
	            settings.start = body.start;
	          }
	          if (typeof body.end === 'number') {
	            settings.end = body.end;
	          }
	          body = fs.createReadStream(body.path, settings);
	        } else { // TODO support other stream types
	          return done(new Error('Non-file stream objects are ' +
	                                'not supported with SigV4'));
	        }
	      }
	    }
	
	    util.crypto.sha256(body, 'hex', function(err, sha) {
	      if (err) done(err);
	      else done(null, sha);
	    });
	  },
	
	
	  isClockSkewed: function isClockSkewed(serverTime) {
	    if (serverTime) {
	      util.property(AWS.config, 'isClockSkewed',
	        Math.abs(new Date().getTime() - serverTime) >= 300000, false);
	      return AWS.config.isClockSkewed;
	    }
	  },
	
	  applyClockOffset: function applyClockOffset(serverTime) {
	    if (serverTime)
	      AWS.config.systemClockOffset = serverTime - new Date().getTime();
	  },
	
	
	  extractRequestId: function extractRequestId(resp) {
	    var requestId = resp.httpResponse.headers['x-amz-request-id'] ||
	                     resp.httpResponse.headers['x-amzn-requestid'];
	
	    if (!requestId && resp.data && resp.data.ResponseMetadata) {
	      requestId = resp.data.ResponseMetadata.RequestId;
	    }
	
	    if (requestId) {
	      resp.requestId = requestId;
	    }
	
	    if (resp.error) {
	      resp.error.requestId = requestId;
	    }
	  },
	
	
	  addPromises: function addPromises(constructors, PromiseDependency) {
	    if (PromiseDependency === undefined && AWS && AWS.config) {
	      PromiseDependency = AWS.config.getPromisesDependency();
	    }
	    if (PromiseDependency === undefined && typeof Promise !== 'undefined') {
	      PromiseDependency = Promise;
	    }
	    if (typeof PromiseDependency !== 'function') var deletePromises = true;
	    if (!Array.isArray(constructors)) constructors = [constructors];
	
	    for (var ind = 0; ind < constructors.length; ind++) {
	      var constructor = constructors[ind];
	      if (deletePromises) {
	        if (constructor.deletePromisesFromClass) {
	          constructor.deletePromisesFromClass();
	        }
	      } else if (constructor.addPromisesToClass) {
	        constructor.addPromisesToClass(PromiseDependency);
	      }
	    }
	  },
	
	
	  promisifyMethod: function promisifyMethod(methodName, PromiseDependency) {
	    return function promise() {
	      var self = this;
	      return new PromiseDependency(function(resolve, reject) {
	        self[methodName](function(err, data) {
	          if (err) {
	            reject(err);
	          } else {
	            resolve(data);
	          }
	        });
	      });
	    };
	  },
	
	
	  isDualstackAvailable: function isDualstackAvailable(service) {
	    if (!service) return false;
	    var metadata = require('../apis/metadata.json');
	    if (typeof service !== 'string') service = service.serviceIdentifier;
	    if (typeof service !== 'string' || !metadata.hasOwnProperty(service)) return false;
	    return !!metadata[service].dualstackAvailable;
	  },
	
	
	  calculateRetryDelay: function calculateRetryDelay(retryCount, retryDelayOptions) {
	    if (!retryDelayOptions) retryDelayOptions = {};
	    var customBackoff = retryDelayOptions.customBackoff || null;
	    if (typeof customBackoff === 'function') {
	      return customBackoff(retryCount);
	    }
	    var base = retryDelayOptions.base || 100;
	    var delay = Math.random() * (Math.pow(2, retryCount) * base);
	    return delay;
	  },
	
	
	  handleRequestWithRetries: function handleRequestWithRetries(httpRequest, options, cb) {
	    if (!options) options = {};
	    var http = AWS.HttpClient.getInstance();
	    var httpOptions = options.httpOptions || {};
	    var retryCount = 0;
	
	    var errCallback = function(err) {
	      var maxRetries = options.maxRetries || 0;
	      if (err && err.code === 'TimeoutError') err.retryable = true;
	      if (err && err.retryable && retryCount < maxRetries) {
	        retryCount++;
	        var delay = util.calculateRetryDelay(retryCount, options.retryDelayOptions);
	        setTimeout(sendRequest, delay + (err.retryAfter || 0));
	      } else {
	        cb(err);
	      }
	    };
	
	    var sendRequest = function() {
	      var data = '';
	      http.handleRequest(httpRequest, httpOptions, function(httpResponse) {
	        httpResponse.on('data', function(chunk) { data += chunk.toString(); });
	        httpResponse.on('end', function() {
	          var statusCode = httpResponse.statusCode;
	          if (statusCode < 300) {
	            cb(null, data);
	          } else {
	            var retryAfter = parseInt(httpResponse.headers['retry-after'], 10) * 1000 || 0;
	            var err = util.error(new Error(),
	              { retryable: statusCode >= 500 || statusCode === 429 }
	            );
	            if (retryAfter && err.retryable) err.retryAfter = retryAfter;
	            errCallback(err);
	          }
	        });
	      }, errCallback);
	    };
	
	    process.nextTick(sendRequest);
	  },
	
	
	  uuid: {
	    v4: function uuidV4() {
	      return require('uuid').v4();
	    }
	  }
	
	};
	
	module.exports = util;
	
	}).call(this,require('_process'))
	},{"../apis/metadata.json":90,"./core":201,"_process":266,"fs":264,"uuid":290}],262:[function(require,module,exports){
	var util = require('../util');
	var Shape = require('../model/shape');
	
	function DomXmlParser() { }
	
	DomXmlParser.prototype.parse = function(xml, shape) {
	  if (xml.replace(/^\s+/, '') === '') return {};
	
	  var result, error;
	  try {
	    if (window.DOMParser) {
	      try {
	        var parser = new DOMParser();
	        result = parser.parseFromString(xml, 'text/xml');
	      } catch (syntaxError) {
	        throw util.error(new Error('Parse error in document'),
	          {
	            originalError: syntaxError,
	            code: 'XMLParserError',
	            retryable: true
	          });
	      }
	
	      if (result.documentElement === null) {
	        throw util.error(new Error('Cannot parse empty document.'),
	          {
	            code: 'XMLParserError',
	            retryable: true
	          });
	      }
	
	      var isError = result.getElementsByTagName('parsererror')[0];
	      if (isError && (isError.parentNode === result ||
	          isError.parentNode.nodeName === 'body' ||
	          isError.parentNode.parentNode === result ||
	          isError.parentNode.parentNode.nodeName === 'body')) {
	        var errorElement = isError.getElementsByTagName('div')[0] || isError;
	        throw util.error(new Error(errorElement.textContent || 'Parser error in document'),
	          {
	            code: 'XMLParserError',
	            retryable: true
	          });
	      }
	    } else if (window.ActiveXObject) {
	      result = new window.ActiveXObject('Microsoft.XMLDOM');
	      result.async = false;
	
	      if (!result.loadXML(xml)) {
	        throw util.error(new Error('Parse error in document'),
	          {
	            code: 'XMLParserError',
	            retryable: true
	          });
	      }
	    } else {
	      throw new Error('Cannot load XML parser');
	    }
	  } catch (e) {
	    error = e;
	  }
	
	  if (result && result.documentElement && !error) {
	    var data = parseXml(result.documentElement, shape);
	    var metadata = result.getElementsByTagName('ResponseMetadata')[0];
	    if (metadata) {
	      data.ResponseMetadata = parseXml(metadata, {});
	    }
	    return data;
	  } else if (error) {
	    throw util.error(error || new Error(), {code: 'XMLParserError', retryable: true});
	  } else { // empty xml document
	    return {};
	  }
	};
	
	function parseXml(xml, shape) {
	  if (!shape) shape = {};
	  switch (shape.type) {
	    case 'structure': return parseStructure(xml, shape);
	    case 'map': return parseMap(xml, shape);
	    case 'list': return parseList(xml, shape);
	    case undefined: case null: return parseUnknown(xml);
	    default: return parseScalar(xml, shape);
	  }
	}
	
	function parseStructure(xml, shape) {
	  var data = {};
	  if (xml === null) return data;
	
	  util.each(shape.members, function(memberName, memberShape) {
	    if (memberShape.isXmlAttribute) {
	      if (Object.prototype.hasOwnProperty.call(xml.attributes, memberShape.name)) {
	        var value = xml.attributes[memberShape.name].value;
	        data[memberName] = parseXml({textContent: value}, memberShape);
	      }
	    } else {
	      var xmlChild = memberShape.flattened ? xml :
	        xml.getElementsByTagName(memberShape.name)[0];
	      if (xmlChild) {
	        data[memberName] = parseXml(xmlChild, memberShape);
	      } else if (!memberShape.flattened && memberShape.type === 'list') {
	        data[memberName] = memberShape.defaultValue;
	      }
	    }
	  });
	
	  return data;
	}
	
	function parseMap(xml, shape) {
	  var data = {};
	  var xmlKey = shape.key.name || 'key';
	  var xmlValue = shape.value.name || 'value';
	  var tagName = shape.flattened ? shape.name : 'entry';
	
	  var child = xml.firstElementChild;
	  while (child) {
	    if (child.nodeName === tagName) {
	      var key = child.getElementsByTagName(xmlKey)[0].textContent;
	      var value = child.getElementsByTagName(xmlValue)[0];
	      data[key] = parseXml(value, shape.value);
	    }
	    child = child.nextElementSibling;
	  }
	  return data;
	}
	
	function parseList(xml, shape) {
	  var data = [];
	  var tagName = shape.flattened ? shape.name : (shape.member.name || 'member');
	
	  var child = xml.firstElementChild;
	  while (child) {
	    if (child.nodeName === tagName) {
	      data.push(parseXml(child, shape.member));
	    }
	    child = child.nextElementSibling;
	  }
	  return data;
	}
	
	function parseScalar(xml, shape) {
	  if (xml.getAttribute) {
	    var encoding = xml.getAttribute('encoding');
	    if (encoding === 'base64') {
	      shape = new Shape.create({type: encoding});
	    }
	  }
	
	  var text = xml.textContent;
	  if (text === '') text = null;
	  if (typeof shape.toType === 'function') {
	    return shape.toType(text);
	  } else {
	    return text;
	  }
	}
	
	function parseUnknown(xml) {
	  if (xml === undefined || xml === null) return '';
	
	  if (!xml.firstElementChild) {
	    if (xml.parentNode.parentNode === null) return {};
	    if (xml.childNodes.length === 0) return '';
	    else return xml.textContent;
	  }
	
	  var shape = {type: 'structure', members: {}};
	  var child = xml.firstElementChild;
	  while (child) {
	    var tag = child.nodeName;
	    if (Object.prototype.hasOwnProperty.call(shape.members, tag)) {
	      shape.members[tag].type = 'list';
	    } else {
	      shape.members[tag] = {name: tag};
	    }
	    child = child.nextElementSibling;
	  }
	  return parseStructure(xml, shape);
	}
	
	module.exports = DomXmlParser;
	
	},{"../model/shape":223,"../util":261}],263:[function(require,module,exports){
	var util = require('../util');
	var builder = require('xmlbuilder');
	
	function XmlBuilder() { }
	
	XmlBuilder.prototype.toXML = function(params, shape, rootElement, noEmpty) {
	  var xml = builder.create(rootElement);
	  applyNamespaces(xml, shape);
	  serialize(xml, params, shape);
	  return xml.children.length > 0 || noEmpty ? xml.root().toString() : '';
	};
	
	function serialize(xml, value, shape) {
	  switch (shape.type) {
	    case 'structure': return serializeStructure(xml, value, shape);
	    case 'map': return serializeMap(xml, value, shape);
	    case 'list': return serializeList(xml, value, shape);
	    default: return serializeScalar(xml, value, shape);
	  }
	}
	
	function serializeStructure(xml, params, shape) {
	  util.arrayEach(shape.memberNames, function(memberName) {
	    var memberShape = shape.members[memberName];
	    if (memberShape.location !== 'body') return;
	
	    var value = params[memberName];
	    var name = memberShape.name;
	    if (value !== undefined && value !== null) {
	      if (memberShape.isXmlAttribute) {
	        xml.att(name, value);
	      } else if (memberShape.flattened) {
	        serialize(xml, value, memberShape);
	      } else {
	        var element = xml.ele(name);
	        applyNamespaces(element, memberShape);
	        serialize(element, value, memberShape);
	      }
	    }
	  });
	}
	
	function serializeMap(xml, map, shape) {
	  var xmlKey = shape.key.name || 'key';
	  var xmlValue = shape.value.name || 'value';
	
	  util.each(map, function(key, value) {
	    var entry = xml.ele(shape.flattened ? shape.name : 'entry');
	    serialize(entry.ele(xmlKey), key, shape.key);
	    serialize(entry.ele(xmlValue), value, shape.value);
	  });
	}
	
	function serializeList(xml, list, shape) {
	  if (shape.flattened) {
	    util.arrayEach(list, function(value) {
	      var name = shape.member.name || shape.name;
	      var element = xml.ele(name);
	      serialize(element, value, shape.member);
	    });
	  } else {
	    util.arrayEach(list, function(value) {
	      var name = shape.member.name || 'member';
	      var element = xml.ele(name);
	      serialize(element, value, shape.member);
	    });
	  }
	}
	
	function serializeScalar(xml, value, shape) {
	  xml.txt(shape.toWireFormat(value));
	}
	
	function applyNamespaces(xml, shape) {
	  var uri, prefix = 'xmlns';
	  if (shape.xmlNamespaceUri) {
	    uri = shape.xmlNamespaceUri;
	    if (shape.xmlNamespacePrefix) prefix += ':' + shape.xmlNamespacePrefix;
	  } else if (xml.isRoot && shape.api.xmlNamespaceUri) {
	    uri = shape.api.xmlNamespaceUri;
	  }
	
	  if (uri) xml.att(prefix, uri);
	}
	
	module.exports = XmlBuilder;
	
	},{"../util":261,"xmlbuilder":307}],264:[function(require,module,exports){
	
	},{}],265:[function(require,module,exports){
	
	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;
	
	EventEmitter.EventEmitter = EventEmitter;
	
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;
	
	EventEmitter.defaultMaxListeners = 10;
	
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};
	
	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;
	
	  if (!this._events)
	    this._events = {};
	
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }
	
	  handler = this._events[type];
	
	  if (isUndefined(handler))
	    return false;
	
	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }
	
	  return true;
	};
	
	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events)
	    this._events = {};
	
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);
	
	  if (!this._events[type])
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    this._events[type].push(listener);
	  else
	    this._events[type] = [this._events[type], listener];
	
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }
	
	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        console.trace();
	      }
	    }
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.on = EventEmitter.prototype.addListener;
	
	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  var fired = false;
	
	  function g() {
	    this.removeListener(type, g);
	
	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }
	
	  g.listener = listener;
	  this.on(type, g);
	
	  return this;
	};
	
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events || !this._events[type])
	    return this;
	
	  list = this._events[type];
	  length = list.length;
	  position = -1;
	
	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	
	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }
	
	    if (position < 0)
	      return this;
	
	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }
	
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;
	
	  if (!this._events)
	    return this;
	
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }
	
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }
	
	  listeners = this._events[type];
	
	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];
	
	  return this;
	};
	
	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};
	
	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];
	
	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};
	
	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	
	function isUndefined(arg) {
	  return arg === void 0;
	}
	
	},{}],266:[function(require,module,exports){
	var process = module.exports = {};
	
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        return setTimeout(fun, 0);
	    }
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        return clearTimeout(marker);
	    }
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };
	
	},{}],267:[function(require,module,exports){
	(function (global){
	
	;(function(root) {
	
	
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}
	
	
		var punycode,
	
	
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1
	
	
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'
	
	
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators
	
	
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},
	
	
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,
	
	
		key;
	
	
	
	
		function error(type) {
			throw new RangeError(errors[type]);
		}
	
	
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}
	
	
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				result = parts[0] + '@';
				string = parts[1];
			}
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}
	
	
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}
	
	
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}
	
	
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}
	
	
		function digitToBasic(digit, flag) {
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}
	
	
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}
	
	
		function decode(input) {
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
	
			    baseMinusT;
	
	
			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}
	
			for (j = 0; j < basic; ++j) {
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}
	
	
			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {
	
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {
	
					if (index >= inputLength) {
						error('invalid-input');
					}
	
					digit = basicToDigit(input.charCodeAt(index++));
	
					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}
	
					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
	
					if (digit < t) {
						break;
					}
	
					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}
	
					w *= baseMinusT;
	
				}
	
				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);
	
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}
	
				n += floor(i / out);
				i %= out;
	
				output.splice(i++, 0, n);
	
			}
	
			return ucs2encode(output);
		}
	
	
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
	
			    inputLength,
	
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;
	
			input = ucs2decode(input);
	
			inputLength = input.length;
	
			n = initialN;
			delta = 0;
			bias = initialBias;
	
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}
	
			handledCPCount = basicLength = output.length;
	
	
			if (basicLength) {
				output.push(delimiter);
			}
	
			while (handledCPCount < inputLength) {
	
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}
	
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}
	
				delta += (m - n) * handledCPCountPlusOne;
				n = m;
	
				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];
	
					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}
	
					if (currentValue == n) {
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}
	
						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}
	
				++delta;
				++n;
	
			}
			return output.join('');
		}
	
	
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}
	
	
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}
	
	
	
	
		punycode = {
	
			'version': '1.4.1',
	
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};
	
	
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) {
				freeModule.exports = punycode;
			} else {
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else {
			root.punycode = punycode;
		}
	
	}(this));
	
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{}],268:[function(require,module,exports){
	
	'use strict';
	
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};
	
	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }
	
	  var regexp = /\+/g;
	  qs = qs.split(sep);
	
	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }
	
	  var len = qs.length;
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }
	
	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;
	
	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }
	
	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);
	
	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }
	
	  return obj;
	};
	
	var isArray = Array.isArray || function (xs) {
	  return Object.prototype.toString.call(xs) === '[object Array]';
	};
	
	},{}],269:[function(require,module,exports){
	
	'use strict';
	
	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;
	
	    case 'boolean':
	      return v ? 'true' : 'false';
	
	    case 'number':
	      return isFinite(v) ? v : '';
	
	    default:
	      return '';
	  }
	};
	
	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }
	
	  if (typeof obj === 'object') {
	    return map(objectKeys(obj), function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (isArray(obj[k])) {
	        return map(obj[k], function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);
	
	  }
	
	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};
	
	var isArray = Array.isArray || function (xs) {
	  return Object.prototype.toString.call(xs) === '[object Array]';
	};
	
	function map (xs, f) {
	  if (xs.map) return xs.map(f);
	  var res = [];
	  for (var i = 0; i < xs.length; i++) {
	    res.push(f(xs[i], i));
	  }
	  return res;
	}
	
	var objectKeys = Object.keys || function (obj) {
	  var res = [];
	  for (var key in obj) {
	    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
	  }
	  return res;
	};
	
	},{}],270:[function(require,module,exports){
	'use strict';
	
	exports.decode = exports.parse = require('./decode');
	exports.encode = exports.stringify = require('./encode');
	
	},{"./decode":268,"./encode":269}],271:[function(require,module,exports){
	if (typeof Object.create === 'function') {
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}
	
	},{}],272:[function(require,module,exports){
	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}
	},{}],273:[function(require,module,exports){
	(function (process,global){
	
	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }
	
	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};
	
	
	exports.deprecate = function(fn, msg) {
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }
	
	  if (process.noDeprecation === true) {
	    return fn;
	  }
	
	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }
	
	  return deprecated;
	};
	
	
	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};
	
	
	
	
	function inspect(obj, opts) {
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    ctx.showHidden = opts;
	  } else if (opts) {
	    exports._extend(ctx, opts);
	  }
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;
	
	
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};
	
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  'regexp': 'red'
	};
	
	
	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];
	
	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}
	
	
	function stylizeNoColor(str, styleType) {
	  return str;
	}
	
	
	function arrayToHash(array) {
	  var hash = {};
	
	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });
	
	  return hash;
	}
	
	
	function formatValue(ctx, value, recurseTimes) {
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      value.inspect !== exports.inspect &&
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }
	
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }
	
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);
	
	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }
	
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }
	
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }
	
	  var base = '', array = false, braces = ['{', '}'];
	
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }
	
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }
	
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }
	
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }
	
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }
	
	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }
	
	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }
	
	  ctx.seen.push(value);
	
	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }
	
	  ctx.seen.pop();
	
	  return reduceToSingleString(output, base, braces);
	}
	
	
	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}
	
	
	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}
	
	
	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}
	
	
	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }
	
	  return name + ': ' + str;
	}
	
	
	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);
	
	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }
	
	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}
	
	
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;
	
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	
	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;
	
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	
	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	
	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	
	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	
	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	
	exports.isBuffer = require('./support/isBuffer');
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	
	
	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}
	
	
	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];
	
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}
	
	
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};
	
	
	
	exports.inherits = require('inherits');
	
	exports._extend = function(origin, add) {
	  if (!add || !isObject(add)) return origin;
	
	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};
	
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"./support/isBuffer":272,"_process":266,"inherits":271}],274:[function(require,module,exports){
	(function (global){
	
	
	
	'use strict'
	
	var base64 = require('base64-js')
	var ieee754 = require('ieee754')
	var isArray = require('isarray')
	
	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	
	
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()
	
	
	exports.kMaxLength = kMaxLength()
	
	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}
	
	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}
	
	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }
	
	  return that
	}
	
	
	
	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }
	
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}
	
	Buffer.poolSize = 8192 // not used by this implementation
	
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}
	
	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }
	
	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }
	
	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }
	
	  return fromObject(that, value)
	}
	
	
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}
	
	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}
	
	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}
	
	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}
	
	
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}
	
	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}
	
	
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}
	
	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }
	
	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }
	
	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)
	
	  var actual = that.write(string, encoding)
	
	  if (actual !== length) {
	    that = that.slice(0, actual)
	  }
	
	  return that
	}
	
	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}
	
	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer
	
	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }
	
	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }
	
	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }
	
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    that = fromArrayLike(that, array)
	  }
	  return that
	}
	
	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)
	
	    if (that.length === 0) {
	      return that
	    }
	
	    obj.copy(that, 0, 0, len)
	    return that
	  }
	
	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }
	
	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }
	
	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}
	
	function checked (length) {
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}
	
	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}
	
	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}
	
	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }
	
	  if (a === b) return 0
	
	  var x = a.length
	  var y = b.length
	
	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}
	
	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }
	
	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }
	
	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }
	
	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}
	
	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }
	
	  var len = string.length
	  if (len === 0) return 0
	
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength
	
	function slowToString (encoding, start, end) {
	  var loweredCase = false
	
	
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  if (start > this.length) {
	    return ''
	  }
	
	  if (end === undefined || end > this.length) {
	    end = this.length
	  }
	
	  if (end <= 0) {
	    return ''
	  }
	
	  end >>>= 0
	  start >>>= 0
	
	  if (end <= start) {
	    return ''
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)
	
	      case 'ascii':
	        return asciiSlice(this, start, end)
	
	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)
	
	      case 'base64':
	        return base64Slice(this, start, end)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	Buffer.prototype._isBuffer = true
	
	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}
	
	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}
	
	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}
	
	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}
	
	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}
	
	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}
	
	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}
	
	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }
	
	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }
	
	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }
	
	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }
	
	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0
	
	  if (this === target) return 0
	
	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)
	
	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)
	
	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  if (buffer.length === 0) return -1
	
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }
	
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }
	
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }
	
	  if (Buffer.isBuffer(val)) {
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }
	
	  throw new TypeError('val must be string, number or Buffer')
	}
	
	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length
	
	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }
	
	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }
	
	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }
	
	  return -1
	}
	
	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}
	
	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}
	
	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}
	
	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }
	
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')
	
	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}
	
	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}
	
	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}
	
	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}
	
	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }
	
	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining
	
	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)
	
	      case 'ascii':
	        return asciiWrite(this, string, offset, length)
	
	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)
	
	      case 'base64':
	        return base64Write(this, string, offset, length)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}
	
	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}
	
	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []
	
	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1
	
	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint
	
	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }
	
	    if (codePoint === null) {
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }
	
	    res.push(codePoint)
	    i += bytesPerSequence
	  }
	
	  return decodeCodePointsArray(res)
	}
	
	var MAX_ARGUMENTS_LENGTH = 0x1000
	
	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }
	
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}
	
	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}
	
	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}
	
	function hexSlice (buf, start, end) {
	  var len = buf.length
	
	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len
	
	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}
	
	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}
	
	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end
	
	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }
	
	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }
	
	  if (end < start) end = start
	
	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }
	
	  return newBuf
	}
	
	
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}
	
	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }
	
	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}
	
	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}
	
	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}
	
	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}
	
	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}
	
	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}
	
	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}
	
	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}
	
	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}
	
	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}
	
	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}
	
	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}
	
	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}
	
	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}
	
	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}
	
	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}
	
	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}
	
	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}
	
	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}
	
	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}
	
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start
	
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0
	
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')
	
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }
	
	  var len = end - start
	  var i
	
	  if (this === target && start < targetStart && targetStart < end) {
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }
	
	  return len
	}
	
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }
	
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }
	
	  if (end <= start) {
	    return this
	  }
	
	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0
	
	  if (!val) val = 0
	
	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }
	
	  return this
	}
	
	
	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g
	
	function base64clean (str) {
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  if (str.length < 2) return ''
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}
	
	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}
	
	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}
	
	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []
	
	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)
	
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      if (!leadSurrogate) {
	        if (codePoint > 0xDBFF) {
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }
	
	        leadSurrogate = codePoint
	
	        continue
	      }
	
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }
	
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }
	
	    leadSurrogate = null
	
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }
	
	  return bytes
	}
	
	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}
	
	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break
	
	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }
	
	  return byteArray
	}
	
	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}
	
	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}
	
	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}
	
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"base64-js":275,"ieee754":276,"isarray":277}],275:[function(require,module,exports){
	'use strict'
	
	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray
	
	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array
	
	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}
	
	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63
	
	function placeHoldersCount (b64) {
	  var len = b64.length
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }
	
	  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
	}
	
	function byteLength (b64) {
	  return b64.length * 3 / 4 - placeHoldersCount(b64)
	}
	
	function toByteArray (b64) {
	  var i, j, l, tmp, placeHolders, arr
	  var len = b64.length
	  placeHolders = placeHoldersCount(b64)
	
	  arr = new Arr(len * 3 / 4 - placeHolders)
	
	  l = placeHolders > 0 ? len - 4 : len
	
	  var L = 0
	
	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
	    arr[L++] = (tmp >> 16) & 0xFF
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }
	
	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[L++] = tmp & 0xFF
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }
	
	  return arr
	}
	
	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}
	
	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}
	
	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var output = ''
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3
	
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }
	
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    output += lookup[tmp >> 2]
	    output += lookup[(tmp << 4) & 0x3F]
	    output += '=='
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
	    output += lookup[tmp >> 10]
	    output += lookup[(tmp >> 4) & 0x3F]
	    output += lookup[(tmp << 2) & 0x3F]
	    output += '='
	  }
	
	  parts.push(output)
	
	  return parts.join('')
	}
	
	},{}],276:[function(require,module,exports){
	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]
	
	  i += d
	
	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
	
	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
	
	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}
	
	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0
	
	  value = Math.abs(value)
	
	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }
	
	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }
	
	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
	
	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
	
	  buffer[offset + i - d] |= s * 128
	}
	
	},{}],277:[function(require,module,exports){
	var toString = {}.toString;
	
	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};
	
	},{}],278:[function(require,module,exports){
	var Buffer = require('buffer').Buffer;
	var intSize = 4;
	var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
	var chrsz = 8;
	
	function toArray(buf, bigEndian) {
	  if ((buf.length % intSize) !== 0) {
	    var len = buf.length + (intSize - (buf.length % intSize));
	    buf = Buffer.concat([buf, zeroBuffer], len);
	  }
	
	  var arr = [];
	  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
	  for (var i = 0; i < buf.length; i += intSize) {
	    arr.push(fn.call(buf, i));
	  }
	  return arr;
	}
	
	function toBuffer(arr, size, bigEndian) {
	  var buf = new Buffer(size);
	  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
	  for (var i = 0; i < arr.length; i++) {
	    fn.call(buf, arr[i], i * 4, true);
	  }
	  return buf;
	}
	
	function hash(buf, fn, hashSize, bigEndian) {
	  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
	  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
	  return toBuffer(arr, hashSize, bigEndian);
	}
	
	module.exports = { hash: hash };
	
	},{"buffer":274}],279:[function(require,module,exports){
	var Buffer = require('buffer').Buffer
	var sha = require('./sha')
	var sha256 = require('./sha256')
	var rng = require('./rng')
	var md5 = require('./md5')
	
	var algorithms = {
	  sha1: sha,
	  sha256: sha256,
	  md5: md5
	}
	
	var blocksize = 64
	var zeroBuffer = new Buffer(blocksize); zeroBuffer.fill(0)
	function hmac(fn, key, data) {
	  if(!Buffer.isBuffer(key)) key = new Buffer(key)
	  if(!Buffer.isBuffer(data)) data = new Buffer(data)
	
	  if(key.length > blocksize) {
	    key = fn(key)
	  } else if(key.length < blocksize) {
	    key = Buffer.concat([key, zeroBuffer], blocksize)
	  }
	
	  var ipad = new Buffer(blocksize), opad = new Buffer(blocksize)
	  for(var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 0x36
	    opad[i] = key[i] ^ 0x5C
	  }
	
	  var hash = fn(Buffer.concat([ipad, data]))
	  return fn(Buffer.concat([opad, hash]))
	}
	
	function hash(alg, key) {
	  alg = alg || 'sha1'
	  var fn = algorithms[alg]
	  var bufs = []
	  var length = 0
	  if(!fn) error('algorithm:', alg, 'is not yet supported')
	  return {
	    update: function (data) {
	      if(!Buffer.isBuffer(data)) data = new Buffer(data)
	        
	      bufs.push(data)
	      length += data.length
	      return this
	    },
	    digest: function (enc) {
	      var buf = Buffer.concat(bufs)
	      var r = key ? hmac(fn, key, buf) : fn(buf)
	      bufs = null
	      return enc ? r.toString(enc) : r
	    }
	  }
	}
	
	function error () {
	  var m = [].slice.call(arguments).join(' ')
	  throw new Error([
	    m,
	    'we accept pull requests',
	    'http://github.com/dominictarr/crypto-browserify'
	    ].join('\n'))
	}
	
	exports.createHash = function (alg) { return hash(alg) }
	exports.createHmac = function (alg, key) { return hash(alg, key) }
	exports.randomBytes = function(size, callback) {
	  if (callback && callback.call) {
	    try {
	      callback.call(this, undefined, new Buffer(rng(size)))
	    } catch (err) { callback(err) }
	  } else {
	    return new Buffer(rng(size))
	  }
	}
	
	function each(a, f) {
	  for(var i in a)
	    f(a[i], i)
	}
	
	each(['createCredentials'
	, 'createCipher'
	, 'createCipheriv'
	, 'createDecipher'
	, 'createDecipheriv'
	, 'createSign'
	, 'createVerify'
	, 'createDiffieHellman'
	, 'pbkdf2'], function (name) {
	  exports[name] = function () {
	    error('sorry,', name, 'is not implemented yet')
	  }
	})
	
	},{"./md5":280,"./rng":281,"./sha":282,"./sha256":283,"buffer":274}],280:[function(require,module,exports){
	
	
	var helpers = require('./helpers');
	
	
	function md5_vm_test()
	{
	  return hex_md5("abc") == "900150983cd24fb0d6963f7d28e17f72";
	}
	
	
	function core_md5(x, len)
	{
	
	  x[len >> 5] |= 0x80 << ((len) % 32);
	  x[(((len + 64) >>> 9) << 4) + 14] = len;
	
	  var a =  1732584193;
	  var b = -271733879;
	  var c = -1732584194;
	  var d =  271733878;
	
	  for(var i = 0; i < x.length; i += 16)
	  {
	    var olda = a;
	    var oldb = b;
	    var oldc = c;
	    var oldd = d;
	
	    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
	    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
	    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
	    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
	    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
	    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
	    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
	    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
	    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
	    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
	    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
	    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
	    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
	    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
	    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
	    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);
	
	    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
	    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
	    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
	    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
	    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
	    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
	    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
	    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
	    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
	    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
	    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
	    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
	    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
	    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
	    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
	    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);
	
	    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
	    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
	    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
	    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
	    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
	    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
	    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
	    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
	    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
	    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
	    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
	    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
	    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
	    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
	    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
	    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);
	
	    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
	    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
	    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
	    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
	    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
	    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
	    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
	    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
	    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
	    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
	    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
	    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
	    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
	    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
	    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
	    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);
	
	    a = safe_add(a, olda);
	    b = safe_add(b, oldb);
	    c = safe_add(c, oldc);
	    d = safe_add(d, oldd);
	  }
	  return Array(a, b, c, d);
	
	}
	
	
	function md5_cmn(q, a, b, x, s, t)
	{
	  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
	}
	function md5_ff(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
	}
	function md5_gg(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
	}
	function md5_hh(a, b, c, d, x, s, t)
	{
	  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
	}
	function md5_ii(a, b, c, d, x, s, t)
	{
	  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
	}
	
	
	function safe_add(x, y)
	{
	  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return (msw << 16) | (lsw & 0xFFFF);
	}
	
	
	function bit_rol(num, cnt)
	{
	  return (num << cnt) | (num >>> (32 - cnt));
	}
	
	module.exports = function md5(buf) {
	  return helpers.hash(buf, core_md5, 16);
	};
	
	},{"./helpers":278}],281:[function(require,module,exports){
	(function() {
	  var _global = this;
	
	  var mathRNG, whatwgRNG;
	
	  mathRNG = function(size) {
	    var bytes = new Array(size);
	    var r;
	
	    for (var i = 0, r; i < size; i++) {
	      if ((i & 0x03) == 0) r = Math.random() * 0x100000000;
	      bytes[i] = r >>> ((i & 0x03) << 3) & 0xff;
	    }
	
	    return bytes;
	  }
	
	  if (_global.crypto && crypto.getRandomValues) {
	    whatwgRNG = function(size) {
	      var bytes = new Uint8Array(size);
	      crypto.getRandomValues(bytes);
	      return bytes;
	    }
	  }
	
	  module.exports = whatwgRNG || mathRNG;
	
	}())
	
	},{}],282:[function(require,module,exports){
	
	
	var helpers = require('./helpers');
	
	
	function core_sha1(x, len)
	{
	
	  x[len >> 5] |= 0x80 << (24 - len % 32);
	  x[((len + 64 >> 9) << 4) + 15] = len;
	
	  var w = Array(80);
	  var a =  1732584193;
	  var b = -271733879;
	  var c = -1732584194;
	  var d =  271733878;
	  var e = -1009589776;
	
	  for(var i = 0; i < x.length; i += 16)
	  {
	    var olda = a;
	    var oldb = b;
	    var oldc = c;
	    var oldd = d;
	    var olde = e;
	
	    for(var j = 0; j < 80; j++)
	    {
	      if(j < 16) w[j] = x[i + j];
	      else w[j] = rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);
	      var t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)),
	                       safe_add(safe_add(e, w[j]), sha1_kt(j)));
	      e = d;
	      d = c;
	      c = rol(b, 30);
	      b = a;
	      a = t;
	    }
	
	    a = safe_add(a, olda);
	    b = safe_add(b, oldb);
	    c = safe_add(c, oldc);
	    d = safe_add(d, oldd);
	    e = safe_add(e, olde);
	  }
	  return Array(a, b, c, d, e);
	
	}
	
	
	function sha1_ft(t, b, c, d)
	{
	  if(t < 20) return (b & c) | ((~b) & d);
	  if(t < 40) return b ^ c ^ d;
	  if(t < 60) return (b & c) | (b & d) | (c & d);
	  return b ^ c ^ d;
	}
	
	
	function sha1_kt(t)
	{
	  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
	         (t < 60) ? -1894007588 : -899497514;
	}
	
	
	function safe_add(x, y)
	{
	  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return (msw << 16) | (lsw & 0xFFFF);
	}
	
	
	function rol(num, cnt)
	{
	  return (num << cnt) | (num >>> (32 - cnt));
	}
	
	module.exports = function sha1(buf) {
	  return helpers.hash(buf, core_sha1, 20, true);
	};
	
	},{"./helpers":278}],283:[function(require,module,exports){
	
	
	
	var helpers = require('./helpers');
	
	var safe_add = function(x, y) {
	  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return (msw << 16) | (lsw & 0xFFFF);
	};
	
	var S = function(X, n) {
	  return (X >>> n) | (X << (32 - n));
	};
	
	var R = function(X, n) {
	  return (X >>> n);
	};
	
	var Ch = function(x, y, z) {
	  return ((x & y) ^ ((~x) & z));
	};
	
	var Maj = function(x, y, z) {
	  return ((x & y) ^ (x & z) ^ (y & z));
	};
	
	var Sigma0256 = function(x) {
	  return (S(x, 2) ^ S(x, 13) ^ S(x, 22));
	};
	
	var Sigma1256 = function(x) {
	  return (S(x, 6) ^ S(x, 11) ^ S(x, 25));
	};
	
	var Gamma0256 = function(x) {
	  return (S(x, 7) ^ S(x, 18) ^ R(x, 3));
	};
	
	var Gamma1256 = function(x) {
	  return (S(x, 17) ^ S(x, 19) ^ R(x, 10));
	};
	
	var core_sha256 = function(m, l) {
	  var K = new Array(0x428A2F98,0x71374491,0xB5C0FBCF,0xE9B5DBA5,0x3956C25B,0x59F111F1,0x923F82A4,0xAB1C5ED5,0xD807AA98,0x12835B01,0x243185BE,0x550C7DC3,0x72BE5D74,0x80DEB1FE,0x9BDC06A7,0xC19BF174,0xE49B69C1,0xEFBE4786,0xFC19DC6,0x240CA1CC,0x2DE92C6F,0x4A7484AA,0x5CB0A9DC,0x76F988DA,0x983E5152,0xA831C66D,0xB00327C8,0xBF597FC7,0xC6E00BF3,0xD5A79147,0x6CA6351,0x14292967,0x27B70A85,0x2E1B2138,0x4D2C6DFC,0x53380D13,0x650A7354,0x766A0ABB,0x81C2C92E,0x92722C85,0xA2BFE8A1,0xA81A664B,0xC24B8B70,0xC76C51A3,0xD192E819,0xD6990624,0xF40E3585,0x106AA070,0x19A4C116,0x1E376C08,0x2748774C,0x34B0BCB5,0x391C0CB3,0x4ED8AA4A,0x5B9CCA4F,0x682E6FF3,0x748F82EE,0x78A5636F,0x84C87814,0x8CC70208,0x90BEFFFA,0xA4506CEB,0xBEF9A3F7,0xC67178F2);
	  var HASH = new Array(0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A, 0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19);
	    var W = new Array(64);
	    var a, b, c, d, e, f, g, h, i, j;
	    var T1, T2;
	
	  m[l >> 5] |= 0x80 << (24 - l % 32);
	  m[((l + 64 >> 9) << 4) + 15] = l;
	  for (var i = 0; i < m.length; i += 16) {
	    a = HASH[0]; b = HASH[1]; c = HASH[2]; d = HASH[3]; e = HASH[4]; f = HASH[5]; g = HASH[6]; h = HASH[7];
	    for (var j = 0; j < 64; j++) {
	      if (j < 16) {
	        W[j] = m[j + i];
	      } else {
	        W[j] = safe_add(safe_add(safe_add(Gamma1256(W[j - 2]), W[j - 7]), Gamma0256(W[j - 15])), W[j - 16]);
	      }
	      T1 = safe_add(safe_add(safe_add(safe_add(h, Sigma1256(e)), Ch(e, f, g)), K[j]), W[j]);
	      T2 = safe_add(Sigma0256(a), Maj(a, b, c));
	      h = g; g = f; f = e; e = safe_add(d, T1); d = c; c = b; b = a; a = safe_add(T1, T2);
	    }
	    HASH[0] = safe_add(a, HASH[0]); HASH[1] = safe_add(b, HASH[1]); HASH[2] = safe_add(c, HASH[2]); HASH[3] = safe_add(d, HASH[3]);
	    HASH[4] = safe_add(e, HASH[4]); HASH[5] = safe_add(f, HASH[5]); HASH[6] = safe_add(g, HASH[6]); HASH[7] = safe_add(h, HASH[7]);
	  }
	  return HASH;
	};
	
	module.exports = function sha256(buf) {
	  return helpers.hash(buf, core_sha256, 32, true);
	};
	
	},{"./helpers":278}],284:[function(require,module,exports){
	(function(exports) {
	  "use strict";
	
	  function isArray(obj) {
	    if (obj !== null) {
	      return Object.prototype.toString.call(obj) === "[object Array]";
	    } else {
	      return false;
	    }
	  }
	
	  function isObject(obj) {
	    if (obj !== null) {
	      return Object.prototype.toString.call(obj) === "[object Object]";
	    } else {
	      return false;
	    }
	  }
	
	  function strictDeepEqual(first, second) {
	    if (first === second) {
	      return true;
	    }
	
	    var firstType = Object.prototype.toString.call(first);
	    if (firstType !== Object.prototype.toString.call(second)) {
	      return false;
	    }
	    if (isArray(first) === true) {
	      if (first.length !== second.length) {
	        return false;
	      }
	      for (var i = 0; i < first.length; i++) {
	        if (strictDeepEqual(first[i], second[i]) === false) {
	          return false;
	        }
	      }
	      return true;
	    }
	    if (isObject(first) === true) {
	      var keysSeen = {};
	      for (var key in first) {
	        if (hasOwnProperty.call(first, key)) {
	          if (strictDeepEqual(first[key], second[key]) === false) {
	            return false;
	          }
	          keysSeen[key] = true;
	        }
	      }
	      for (var key2 in second) {
	        if (hasOwnProperty.call(second, key2)) {
	          if (keysSeen[key2] !== true) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }
	    return false;
	  }
	
	  function isFalse(obj) {
	
	    if (obj === "" || obj === false || obj === null) {
	        return true;
	    } else if (isArray(obj) && obj.length === 0) {
	        return true;
	    } else if (isObject(obj)) {
	        for (var key in obj) {
	            if (obj.hasOwnProperty(key)) {
	              return false;
	            }
	        }
	        return true;
	    } else {
	        return false;
	    }
	  }
	
	  function objValues(obj) {
	    var keys = Object.keys(obj);
	    var values = [];
	    for (var i = 0; i < keys.length; i++) {
	      values.push(obj[keys[i]]);
	    }
	    return values;
	  }
	
	  function merge(a, b) {
	      var merged = {};
	      for (var key in a) {
	          merged[key] = a[key];
	      }
	      for (var key2 in b) {
	          merged[key2] = b[key2];
	      }
	      return merged;
	  }
	
	  var trimLeft;
	  if (typeof String.prototype.trimLeft === "function") {
	    trimLeft = function(str) {
	      return str.trimLeft();
	    };
	  } else {
	    trimLeft = function(str) {
	      return str.match(/^\s*(.*)/)[1];
	    };
	  }
	
	  var TYPE_NUMBER = 0;
	  var TYPE_ANY = 1;
	  var TYPE_STRING = 2;
	  var TYPE_ARRAY = 3;
	  var TYPE_OBJECT = 4;
	  var TYPE_BOOLEAN = 5;
	  var TYPE_EXPREF = 6;
	  var TYPE_NULL = 7;
	  var TYPE_ARRAY_NUMBER = 8;
	  var TYPE_ARRAY_STRING = 9;
	
	  var TOK_EOF = "EOF";
	  var TOK_UNQUOTEDIDENTIFIER = "UnquotedIdentifier";
	  var TOK_QUOTEDIDENTIFIER = "QuotedIdentifier";
	  var TOK_RBRACKET = "Rbracket";
	  var TOK_RPAREN = "Rparen";
	  var TOK_COMMA = "Comma";
	  var TOK_COLON = "Colon";
	  var TOK_RBRACE = "Rbrace";
	  var TOK_NUMBER = "Number";
	  var TOK_CURRENT = "Current";
	  var TOK_EXPREF = "Expref";
	  var TOK_PIPE = "Pipe";
	  var TOK_OR = "Or";
	  var TOK_AND = "And";
	  var TOK_EQ = "EQ";
	  var TOK_GT = "GT";
	  var TOK_LT = "LT";
	  var TOK_GTE = "GTE";
	  var TOK_LTE = "LTE";
	  var TOK_NE = "NE";
	  var TOK_FLATTEN = "Flatten";
	  var TOK_STAR = "Star";
	  var TOK_FILTER = "Filter";
	  var TOK_DOT = "Dot";
	  var TOK_NOT = "Not";
	  var TOK_LBRACE = "Lbrace";
	  var TOK_LBRACKET = "Lbracket";
	  var TOK_LPAREN= "Lparen";
	  var TOK_LITERAL= "Literal";
	
	
	  var basicTokens = {
	    ".": TOK_DOT,
	    "*": TOK_STAR,
	    ",": TOK_COMMA,
	    ":": TOK_COLON,
	    "{": TOK_LBRACE,
	    "}": TOK_RBRACE,
	    "]": TOK_RBRACKET,
	    "(": TOK_LPAREN,
	    ")": TOK_RPAREN,
	    "@": TOK_CURRENT
	  };
	
	  var operatorStartToken = {
	      "<": true,
	      ">": true,
	      "=": true,
	      "!": true
	  };
	
	  var skipChars = {
	      " ": true,
	      "\t": true,
	      "\n": true
	  };
	
	
	  function isAlpha(ch) {
	      return (ch >= "a" && ch <= "z") ||
	             (ch >= "A" && ch <= "Z") ||
	             ch === "_";
	  }
	
	  function isNum(ch) {
	      return (ch >= "0" && ch <= "9") ||
	             ch === "-";
	  }
	  function isAlphaNum(ch) {
	      return (ch >= "a" && ch <= "z") ||
	             (ch >= "A" && ch <= "Z") ||
	             (ch >= "0" && ch <= "9") ||
	             ch === "_";
	  }
	
	  function Lexer() {
	  }
	  Lexer.prototype = {
	      tokenize: function(stream) {
	          var tokens = [];
	          this._current = 0;
	          var start;
	          var identifier;
	          var token;
	          while (this._current < stream.length) {
	              if (isAlpha(stream[this._current])) {
	                  start = this._current;
	                  identifier = this._consumeUnquotedIdentifier(stream);
	                  tokens.push({type: TOK_UNQUOTEDIDENTIFIER,
	                               value: identifier,
	                               start: start});
	              } else if (basicTokens[stream[this._current]] !== undefined) {
	                  tokens.push({type: basicTokens[stream[this._current]],
	                              value: stream[this._current],
	                              start: this._current});
	                  this._current++;
	              } else if (isNum(stream[this._current])) {
	                  token = this._consumeNumber(stream);
	                  tokens.push(token);
	              } else if (stream[this._current] === "[") {
	                  token = this._consumeLBracket(stream);
	                  tokens.push(token);
	              } else if (stream[this._current] === "\"") {
	                  start = this._current;
	                  identifier = this._consumeQuotedIdentifier(stream);
	                  tokens.push({type: TOK_QUOTEDIDENTIFIER,
	                               value: identifier,
	                               start: start});
	              } else if (stream[this._current] === "'") {
	                  start = this._current;
	                  identifier = this._consumeRawStringLiteral(stream);
	                  tokens.push({type: TOK_LITERAL,
	                               value: identifier,
	                               start: start});
	              } else if (stream[this._current] === "`") {
	                  start = this._current;
	                  var literal = this._consumeLiteral(stream);
	                  tokens.push({type: TOK_LITERAL,
	                               value: literal,
	                               start: start});
	              } else if (operatorStartToken[stream[this._current]] !== undefined) {
	                  tokens.push(this._consumeOperator(stream));
	              } else if (skipChars[stream[this._current]] !== undefined) {
	                  this._current++;
	              } else if (stream[this._current] === "&") {
	                  start = this._current;
	                  this._current++;
	                  if (stream[this._current] === "&") {
	                      this._current++;
	                      tokens.push({type: TOK_AND, value: "&&", start: start});
	                  } else {
	                      tokens.push({type: TOK_EXPREF, value: "&", start: start});
	                  }
	              } else if (stream[this._current] === "|") {
	                  start = this._current;
	                  this._current++;
	                  if (stream[this._current] === "|") {
	                      this._current++;
	                      tokens.push({type: TOK_OR, value: "||", start: start});
	                  } else {
	                      tokens.push({type: TOK_PIPE, value: "|", start: start});
	                  }
	              } else {
	                  var error = new Error("Unknown character:" + stream[this._current]);
	                  error.name = "LexerError";
	                  throw error;
	              }
	          }
	          return tokens;
	      },
	
	      _consumeUnquotedIdentifier: function(stream) {
	          var start = this._current;
	          this._current++;
	          while (this._current < stream.length && isAlphaNum(stream[this._current])) {
	              this._current++;
	          }
	          return stream.slice(start, this._current);
	      },
	
	      _consumeQuotedIdentifier: function(stream) {
	          var start = this._current;
	          this._current++;
	          var maxLength = stream.length;
	          while (stream[this._current] !== "\"" && this._current < maxLength) {
	              var current = this._current;
	              if (stream[current] === "\\" && (stream[current + 1] === "\\" ||
	                                               stream[current + 1] === "\"")) {
	                  current += 2;
	              } else {
	                  current++;
	              }
	              this._current = current;
	          }
	          this._current++;
	          return JSON.parse(stream.slice(start, this._current));
	      },
	
	      _consumeRawStringLiteral: function(stream) {
	          var start = this._current;
	          this._current++;
	          var maxLength = stream.length;
	          while (stream[this._current] !== "'" && this._current < maxLength) {
	              var current = this._current;
	              if (stream[current] === "\\" && (stream[current + 1] === "\\" ||
	                                               stream[current + 1] === "'")) {
	                  current += 2;
	              } else {
	                  current++;
	              }
	              this._current = current;
	          }
	          this._current++;
	          var literal = stream.slice(start + 1, this._current - 1);
	          return literal.replace("\\'", "'");
	      },
	
	      _consumeNumber: function(stream) {
	          var start = this._current;
	          this._current++;
	          var maxLength = stream.length;
	          while (isNum(stream[this._current]) && this._current < maxLength) {
	              this._current++;
	          }
	          var value = parseInt(stream.slice(start, this._current));
	          return {type: TOK_NUMBER, value: value, start: start};
	      },
	
	      _consumeLBracket: function(stream) {
	          var start = this._current;
	          this._current++;
	          if (stream[this._current] === "?") {
	              this._current++;
	              return {type: TOK_FILTER, value: "[?", start: start};
	          } else if (stream[this._current] === "]") {
	              this._current++;
	              return {type: TOK_FLATTEN, value: "[]", start: start};
	          } else {
	              return {type: TOK_LBRACKET, value: "[", start: start};
	          }
	      },
	
	      _consumeOperator: function(stream) {
	          var start = this._current;
	          var startingChar = stream[start];
	          this._current++;
	          if (startingChar === "!") {
	              if (stream[this._current] === "=") {
	                  this._current++;
	                  return {type: TOK_NE, value: "!=", start: start};
	              } else {
	                return {type: TOK_NOT, value: "!", start: start};
	              }
	          } else if (startingChar === "<") {
	              if (stream[this._current] === "=") {
	                  this._current++;
	                  return {type: TOK_LTE, value: "<=", start: start};
	              } else {
	                  return {type: TOK_LT, value: "<", start: start};
	              }
	          } else if (startingChar === ">") {
	              if (stream[this._current] === "=") {
	                  this._current++;
	                  return {type: TOK_GTE, value: ">=", start: start};
	              } else {
	                  return {type: TOK_GT, value: ">", start: start};
	              }
	          } else if (startingChar === "=") {
	              if (stream[this._current] === "=") {
	                  this._current++;
	                  return {type: TOK_EQ, value: "==", start: start};
	              }
	          }
	      },
	
	      _consumeLiteral: function(stream) {
	          this._current++;
	          var start = this._current;
	          var maxLength = stream.length;
	          var literal;
	          while(stream[this._current] !== "`" && this._current < maxLength) {
	              var current = this._current;
	              if (stream[current] === "\\" && (stream[current + 1] === "\\" ||
	                                               stream[current + 1] === "`")) {
	                  current += 2;
	              } else {
	                  current++;
	              }
	              this._current = current;
	          }
	          var literalString = trimLeft(stream.slice(start, this._current));
	          literalString = literalString.replace("\\`", "`");
	          if (this._looksLikeJSON(literalString)) {
	              literal = JSON.parse(literalString);
	          } else {
	              literal = JSON.parse("\"" + literalString + "\"");
	          }
	          this._current++;
	          return literal;
	      },
	
	      _looksLikeJSON: function(literalString) {
	          var startingChars = "[{\"";
	          var jsonLiterals = ["true", "false", "null"];
	          var numberLooking = "-0123456789";
	
	          if (literalString === "") {
	              return false;
	          } else if (startingChars.indexOf(literalString[0]) >= 0) {
	              return true;
	          } else if (jsonLiterals.indexOf(literalString) >= 0) {
	              return true;
	          } else if (numberLooking.indexOf(literalString[0]) >= 0) {
	              try {
	                  JSON.parse(literalString);
	                  return true;
	              } catch (ex) {
	                  return false;
	              }
	          } else {
	              return false;
	          }
	      }
	  };
	
	      var bindingPower = {};
	      bindingPower[TOK_EOF] = 0;
	      bindingPower[TOK_UNQUOTEDIDENTIFIER] = 0;
	      bindingPower[TOK_QUOTEDIDENTIFIER] = 0;
	      bindingPower[TOK_RBRACKET] = 0;
	      bindingPower[TOK_RPAREN] = 0;
	      bindingPower[TOK_COMMA] = 0;
	      bindingPower[TOK_RBRACE] = 0;
	      bindingPower[TOK_NUMBER] = 0;
	      bindingPower[TOK_CURRENT] = 0;
	      bindingPower[TOK_EXPREF] = 0;
	      bindingPower[TOK_PIPE] = 1;
	      bindingPower[TOK_OR] = 2;
	      bindingPower[TOK_AND] = 3;
	      bindingPower[TOK_EQ] = 5;
	      bindingPower[TOK_GT] = 5;
	      bindingPower[TOK_LT] = 5;
	      bindingPower[TOK_GTE] = 5;
	      bindingPower[TOK_LTE] = 5;
	      bindingPower[TOK_NE] = 5;
	      bindingPower[TOK_FLATTEN] = 9;
	      bindingPower[TOK_STAR] = 20;
	      bindingPower[TOK_FILTER] = 21;
	      bindingPower[TOK_DOT] = 40;
	      bindingPower[TOK_NOT] = 45;
	      bindingPower[TOK_LBRACE] = 50;
	      bindingPower[TOK_LBRACKET] = 55;
	      bindingPower[TOK_LPAREN] = 60;
	
	  function Parser() {
	  }
	
	  Parser.prototype = {
	      parse: function(expression) {
	          this._loadTokens(expression);
	          this.index = 0;
	          var ast = this.expression(0);
	          if (this._lookahead(0) !== TOK_EOF) {
	              var t = this._lookaheadToken(0);
	              var error = new Error(
	                  "Unexpected token type: " + t.type + ", value: " + t.value);
	              error.name = "ParserError";
	              throw error;
	          }
	          return ast;
	      },
	
	      _loadTokens: function(expression) {
	          var lexer = new Lexer();
	          var tokens = lexer.tokenize(expression);
	          tokens.push({type: TOK_EOF, value: "", start: expression.length});
	          this.tokens = tokens;
	      },
	
	      expression: function(rbp) {
	          var leftToken = this._lookaheadToken(0);
	          this._advance();
	          var left = this.nud(leftToken);
	          var currentToken = this._lookahead(0);
	          while (rbp < bindingPower[currentToken]) {
	              this._advance();
	              left = this.led(currentToken, left);
	              currentToken = this._lookahead(0);
	          }
	          return left;
	      },
	
	      _lookahead: function(number) {
	          return this.tokens[this.index + number].type;
	      },
	
	      _lookaheadToken: function(number) {
	          return this.tokens[this.index + number];
	      },
	
	      _advance: function() {
	          this.index++;
	      },
	
	      nud: function(token) {
	        var left;
	        var right;
	        var expression;
	        switch (token.type) {
	          case TOK_LITERAL:
	            return {type: "Literal", value: token.value};
	          case TOK_UNQUOTEDIDENTIFIER:
	            return {type: "Field", name: token.value};
	          case TOK_QUOTEDIDENTIFIER:
	            var node = {type: "Field", name: token.value};
	            if (this._lookahead(0) === TOK_LPAREN) {
	                throw new Error("Quoted identifier not allowed for function names.");
	            } else {
	                return node;
	            }
	            break;
	          case TOK_NOT:
	            right = this.expression(bindingPower.Not);
	            return {type: "NotExpression", children: [right]};
	          case TOK_STAR:
	            left = {type: "Identity"};
	            right = null;
	            if (this._lookahead(0) === TOK_RBRACKET) {
	                right = {type: "Identity"};
	            } else {
	                right = this._parseProjectionRHS(bindingPower.Star);
	            }
	            return {type: "ValueProjection", children: [left, right]};
	          case TOK_FILTER:
	            return this.led(token.type, {type: "Identity"});
	          case TOK_LBRACE:
	            return this._parseMultiselectHash();
	          case TOK_FLATTEN:
	            left = {type: TOK_FLATTEN, children: [{type: "Identity"}]};
	            right = this._parseProjectionRHS(bindingPower.Flatten);
	            return {type: "Projection", children: [left, right]};
	          case TOK_LBRACKET:
	            if (this._lookahead(0) === TOK_NUMBER || this._lookahead(0) === TOK_COLON) {
	                right = this._parseIndexExpression();
	                return this._projectIfSlice({type: "Identity"}, right);
	            } else if (this._lookahead(0) === TOK_STAR &&
	                       this._lookahead(1) === TOK_RBRACKET) {
	                this._advance();
	                this._advance();
	                right = this._parseProjectionRHS(bindingPower.Star);
	                return {type: "Projection",
	                        children: [{type: "Identity"}, right]};
	            } else {
	                return this._parseMultiselectList();
	            }
	            break;
	          case TOK_CURRENT:
	            return {type: TOK_CURRENT};
	          case TOK_EXPREF:
	            expression = this.expression(bindingPower.Expref);
	            return {type: "ExpressionReference", children: [expression]};
	          case TOK_LPAREN:
	            var args = [];
	            while (this._lookahead(0) !== TOK_RPAREN) {
	              if (this._lookahead(0) === TOK_CURRENT) {
	                expression = {type: TOK_CURRENT};
	                this._advance();
	              } else {
	                expression = this.expression(0);
	              }
	              args.push(expression);
	            }
	            this._match(TOK_RPAREN);
	            return args[0];
	          default:
	            this._errorToken(token);
	        }
	      },
	
	      led: function(tokenName, left) {
	        var right;
	        switch(tokenName) {
	          case TOK_DOT:
	            var rbp = bindingPower.Dot;
	            if (this._lookahead(0) !== TOK_STAR) {
	                right = this._parseDotRHS(rbp);
	                return {type: "Subexpression", children: [left, right]};
	            } else {
	                this._advance();
	                right = this._parseProjectionRHS(rbp);
	                return {type: "ValueProjection", children: [left, right]};
	            }
	            break;
	          case TOK_PIPE:
	            right = this.expression(bindingPower.Pipe);
	            return {type: TOK_PIPE, children: [left, right]};
	          case TOK_OR:
	            right = this.expression(bindingPower.Or);
	            return {type: "OrExpression", children: [left, right]};
	          case TOK_AND:
	            right = this.expression(bindingPower.And);
	            return {type: "AndExpression", children: [left, right]};
	          case TOK_LPAREN:
	            var name = left.name;
	            var args = [];
	            var expression, node;
	            while (this._lookahead(0) !== TOK_RPAREN) {
	              if (this._lookahead(0) === TOK_CURRENT) {
	                expression = {type: TOK_CURRENT};
	                this._advance();
	              } else {
	                expression = this.expression(0);
	              }
	              if (this._lookahead(0) === TOK_COMMA) {
	                this._match(TOK_COMMA);
	              }
	              args.push(expression);
	            }
	            this._match(TOK_RPAREN);
	            node = {type: "Function", name: name, children: args};
	            return node;
	          case TOK_FILTER:
	            var condition = this.expression(0);
	            this._match(TOK_RBRACKET);
	            if (this._lookahead(0) === TOK_FLATTEN) {
	              right = {type: "Identity"};
	            } else {
	              right = this._parseProjectionRHS(bindingPower.Filter);
	            }
	            return {type: "FilterProjection", children: [left, right, condition]};
	          case TOK_FLATTEN:
	            var leftNode = {type: TOK_FLATTEN, children: [left]};
	            var rightNode = this._parseProjectionRHS(bindingPower.Flatten);
	            return {type: "Projection", children: [leftNode, rightNode]};
	          case TOK_EQ:
	          case TOK_NE:
	          case TOK_GT:
	          case TOK_GTE:
	          case TOK_LT:
	          case TOK_LTE:
	            return this._parseComparator(left, tokenName);
	          case TOK_LBRACKET:
	            var token = this._lookaheadToken(0);
	            if (token.type === TOK_NUMBER || token.type === TOK_COLON) {
	                right = this._parseIndexExpression();
	                return this._projectIfSlice(left, right);
	            } else {
	                this._match(TOK_STAR);
	                this._match(TOK_RBRACKET);
	                right = this._parseProjectionRHS(bindingPower.Star);
	                return {type: "Projection", children: [left, right]};
	            }
	            break;
	          default:
	            this._errorToken(this._lookaheadToken(0));
	        }
	      },
	
	      _match: function(tokenType) {
	          if (this._lookahead(0) === tokenType) {
	              this._advance();
	          } else {
	              var t = this._lookaheadToken(0);
	              var error = new Error("Expected " + tokenType + ", got: " + t.type);
	              error.name = "ParserError";
	              throw error;
	          }
	      },
	
	      _errorToken: function(token) {
	          var error = new Error("Invalid token (" +
	                                token.type + "): \"" +
	                                token.value + "\"");
	          error.name = "ParserError";
	          throw error;
	      },
	
	
	      _parseIndexExpression: function() {
	          if (this._lookahead(0) === TOK_COLON || this._lookahead(1) === TOK_COLON) {
	              return this._parseSliceExpression();
	          } else {
	              var node = {
	                  type: "Index",
	                  value: this._lookaheadToken(0).value};
	              this._advance();
	              this._match(TOK_RBRACKET);
	              return node;
	          }
	      },
	
	      _projectIfSlice: function(left, right) {
	          var indexExpr = {type: "IndexExpression", children: [left, right]};
	          if (right.type === "Slice") {
	              return {
	                  type: "Projection",
	                  children: [indexExpr, this._parseProjectionRHS(bindingPower.Star)]
	              };
	          } else {
	              return indexExpr;
	          }
	      },
	
	      _parseSliceExpression: function() {
	          var parts = [null, null, null];
	          var index = 0;
	          var currentToken = this._lookahead(0);
	          while (currentToken !== TOK_RBRACKET && index < 3) {
	              if (currentToken === TOK_COLON) {
	                  index++;
	                  this._advance();
	              } else if (currentToken === TOK_NUMBER) {
	                  parts[index] = this._lookaheadToken(0).value;
	                  this._advance();
	              } else {
	                  var t = this._lookahead(0);
	                  var error = new Error("Syntax error, unexpected token: " +
	                                        t.value + "(" + t.type + ")");
	                  error.name = "Parsererror";
	                  throw error;
	              }
	              currentToken = this._lookahead(0);
	          }
	          this._match(TOK_RBRACKET);
	          return {
	              type: "Slice",
	              children: parts
	          };
	      },
	
	      _parseComparator: function(left, comparator) {
	        var right = this.expression(bindingPower[comparator]);
	        return {type: "Comparator", name: comparator, children: [left, right]};
	      },
	
	      _parseDotRHS: function(rbp) {
	          var lookahead = this._lookahead(0);
	          var exprTokens = [TOK_UNQUOTEDIDENTIFIER, TOK_QUOTEDIDENTIFIER, TOK_STAR];
	          if (exprTokens.indexOf(lookahead) >= 0) {
	              return this.expression(rbp);
	          } else if (lookahead === TOK_LBRACKET) {
	              this._match(TOK_LBRACKET);
	              return this._parseMultiselectList();
	          } else if (lookahead === TOK_LBRACE) {
	              this._match(TOK_LBRACE);
	              return this._parseMultiselectHash();
	          }
	      },
	
	      _parseProjectionRHS: function(rbp) {
	          var right;
	          if (bindingPower[this._lookahead(0)] < 10) {
	              right = {type: "Identity"};
	          } else if (this._lookahead(0) === TOK_LBRACKET) {
	              right = this.expression(rbp);
	          } else if (this._lookahead(0) === TOK_FILTER) {
	              right = this.expression(rbp);
	          } else if (this._lookahead(0) === TOK_DOT) {
	              this._match(TOK_DOT);
	              right = this._parseDotRHS(rbp);
	          } else {
	              var t = this._lookaheadToken(0);
	              var error = new Error("Sytanx error, unexpected token: " +
	                                    t.value + "(" + t.type + ")");
	              error.name = "ParserError";
	              throw error;
	          }
	          return right;
	      },
	
	      _parseMultiselectList: function() {
	          var expressions = [];
	          while (this._lookahead(0) !== TOK_RBRACKET) {
	              var expression = this.expression(0);
	              expressions.push(expression);
	              if (this._lookahead(0) === TOK_COMMA) {
	                  this._match(TOK_COMMA);
	                  if (this._lookahead(0) === TOK_RBRACKET) {
	                    throw new Error("Unexpected token Rbracket");
	                  }
	              }
	          }
	          this._match(TOK_RBRACKET);
	          return {type: "MultiSelectList", children: expressions};
	      },
	
	      _parseMultiselectHash: function() {
	        var pairs = [];
	        var identifierTypes = [TOK_UNQUOTEDIDENTIFIER, TOK_QUOTEDIDENTIFIER];
	        var keyToken, keyName, value, node;
	        for (;;) {
	          keyToken = this._lookaheadToken(0);
	          if (identifierTypes.indexOf(keyToken.type) < 0) {
	            throw new Error("Expecting an identifier token, got: " +
	                            keyToken.type);
	          }
	          keyName = keyToken.value;
	          this._advance();
	          this._match(TOK_COLON);
	          value = this.expression(0);
	          node = {type: "KeyValuePair", name: keyName, value: value};
	          pairs.push(node);
	          if (this._lookahead(0) === TOK_COMMA) {
	            this._match(TOK_COMMA);
	          } else if (this._lookahead(0) === TOK_RBRACE) {
	            this._match(TOK_RBRACE);
	            break;
	          }
	        }
	        return {type: "MultiSelectHash", children: pairs};
	      }
	  };
	
	
	  function TreeInterpreter(runtime) {
	    this.runtime = runtime;
	  }
	
	  TreeInterpreter.prototype = {
	      search: function(node, value) {
	          return this.visit(node, value);
	      },
	
	      visit: function(node, value) {
	          var matched, current, result, first, second, field, left, right, collected, i;
	          switch (node.type) {
	            case "Field":
	              if (value === null ) {
	                  return null;
	              } else if (isObject(value)) {
	                  field = value[node.name];
	                  if (field === undefined) {
	                      return null;
	                  } else {
	                      return field;
	                  }
	              } else {
	                return null;
	              }
	              break;
	            case "Subexpression":
	              result = this.visit(node.children[0], value);
	              for (i = 1; i < node.children.length; i++) {
	                  result = this.visit(node.children[1], result);
	                  if (result === null) {
	                      return null;
	                  }
	              }
	              return result;
	            case "IndexExpression":
	              left = this.visit(node.children[0], value);
	              right = this.visit(node.children[1], left);
	              return right;
	            case "Index":
	              if (!isArray(value)) {
	                return null;
	              }
	              var index = node.value;
	              if (index < 0) {
	                index = value.length + index;
	              }
	              result = value[index];
	              if (result === undefined) {
	                result = null;
	              }
	              return result;
	            case "Slice":
	              if (!isArray(value)) {
	                return null;
	              }
	              var sliceParams = node.children.slice(0);
	              var computed = this.computeSliceParams(value.length, sliceParams);
	              var start = computed[0];
	              var stop = computed[1];
	              var step = computed[2];
	              result = [];
	              if (step > 0) {
	                  for (i = start; i < stop; i += step) {
	                      result.push(value[i]);
	                  }
	              } else {
	                  for (i = start; i > stop; i += step) {
	                      result.push(value[i]);
	                  }
	              }
	              return result;
	            case "Projection":
	              var base = this.visit(node.children[0], value);
	              if (!isArray(base)) {
	                return null;
	              }
	              collected = [];
	              for (i = 0; i < base.length; i++) {
	                current = this.visit(node.children[1], base[i]);
	                if (current !== null) {
	                  collected.push(current);
	                }
	              }
	              return collected;
	            case "ValueProjection":
	              base = this.visit(node.children[0], value);
	              if (!isObject(base)) {
	                return null;
	              }
	              collected = [];
	              var values = objValues(base);
	              for (i = 0; i < values.length; i++) {
	                current = this.visit(node.children[1], values[i]);
	                if (current !== null) {
	                  collected.push(current);
	                }
	              }
	              return collected;
	            case "FilterProjection":
	              base = this.visit(node.children[0], value);
	              if (!isArray(base)) {
	                return null;
	              }
	              var filtered = [];
	              var finalResults = [];
	              for (i = 0; i < base.length; i++) {
	                matched = this.visit(node.children[2], base[i]);
	                if (!isFalse(matched)) {
	                  filtered.push(base[i]);
	                }
	              }
	              for (var j = 0; j < filtered.length; j++) {
	                current = this.visit(node.children[1], filtered[j]);
	                if (current !== null) {
	                  finalResults.push(current);
	                }
	              }
	              return finalResults;
	            case "Comparator":
	              first = this.visit(node.children[0], value);
	              second = this.visit(node.children[1], value);
	              switch(node.name) {
	                case TOK_EQ:
	                  result = strictDeepEqual(first, second);
	                  break;
	                case TOK_NE:
	                  result = !strictDeepEqual(first, second);
	                  break;
	                case TOK_GT:
	                  result = first > second;
	                  break;
	                case TOK_GTE:
	                  result = first >= second;
	                  break;
	                case TOK_LT:
	                  result = first < second;
	                  break;
	                case TOK_LTE:
	                  result = first <= second;
	                  break;
	                default:
	                  throw new Error("Unknown comparator: " + node.name);
	              }
	              return result;
	            case TOK_FLATTEN:
	              var original = this.visit(node.children[0], value);
	              if (!isArray(original)) {
	                return null;
	              }
	              var merged = [];
	              for (i = 0; i < original.length; i++) {
	                current = original[i];
	                if (isArray(current)) {
	                  merged.push.apply(merged, current);
	                } else {
	                  merged.push(current);
	                }
	              }
	              return merged;
	            case "Identity":
	              return value;
	            case "MultiSelectList":
	              if (value === null) {
	                return null;
	              }
	              collected = [];
	              for (i = 0; i < node.children.length; i++) {
	                  collected.push(this.visit(node.children[i], value));
	              }
	              return collected;
	            case "MultiSelectHash":
	              if (value === null) {
	                return null;
	              }
	              collected = {};
	              var child;
	              for (i = 0; i < node.children.length; i++) {
	                child = node.children[i];
	                collected[child.name] = this.visit(child.value, value);
	              }
	              return collected;
	            case "OrExpression":
	              matched = this.visit(node.children[0], value);
	              if (isFalse(matched)) {
	                  matched = this.visit(node.children[1], value);
	              }
	              return matched;
	            case "AndExpression":
	              first = this.visit(node.children[0], value);
	
	              if (isFalse(first) === true) {
	                return first;
	              }
	              return this.visit(node.children[1], value);
	            case "NotExpression":
	              first = this.visit(node.children[0], value);
	              return isFalse(first);
	            case "Literal":
	              return node.value;
	            case TOK_PIPE:
	              left = this.visit(node.children[0], value);
	              return this.visit(node.children[1], left);
	            case TOK_CURRENT:
	              return value;
	            case "Function":
	              var resolvedArgs = [];
	              for (i = 0; i < node.children.length; i++) {
	                  resolvedArgs.push(this.visit(node.children[i], value));
	              }
	              return this.runtime.callFunction(node.name, resolvedArgs);
	            case "ExpressionReference":
	              var refNode = node.children[0];
	              refNode.jmespathType = TOK_EXPREF;
	              return refNode;
	            default:
	              throw new Error("Unknown node type: " + node.type);
	          }
	      },
	
	      computeSliceParams: function(arrayLength, sliceParams) {
	        var start = sliceParams[0];
	        var stop = sliceParams[1];
	        var step = sliceParams[2];
	        var computed = [null, null, null];
	        if (step === null) {
	          step = 1;
	        } else if (step === 0) {
	          var error = new Error("Invalid slice, step cannot be 0");
	          error.name = "RuntimeError";
	          throw error;
	        }
	        var stepValueNegative = step < 0 ? true : false;
	
	        if (start === null) {
	            start = stepValueNegative ? arrayLength - 1 : 0;
	        } else {
	            start = this.capSliceRange(arrayLength, start, step);
	        }
	
	        if (stop === null) {
	            stop = stepValueNegative ? -1 : arrayLength;
	        } else {
	            stop = this.capSliceRange(arrayLength, stop, step);
	        }
	        computed[0] = start;
	        computed[1] = stop;
	        computed[2] = step;
	        return computed;
	      },
	
	      capSliceRange: function(arrayLength, actualValue, step) {
	          if (actualValue < 0) {
	              actualValue += arrayLength;
	              if (actualValue < 0) {
	                  actualValue = step < 0 ? -1 : 0;
	              }
	          } else if (actualValue >= arrayLength) {
	              actualValue = step < 0 ? arrayLength - 1 : arrayLength;
	          }
	          return actualValue;
	      }
	
	  };
	
	  function Runtime(interpreter) {
	    this._interpreter = interpreter;
	    this.functionTable = {
	        abs: {_func: this._functionAbs, _signature: [{types: [TYPE_NUMBER]}]},
	        avg: {_func: this._functionAvg, _signature: [{types: [TYPE_ARRAY_NUMBER]}]},
	        ceil: {_func: this._functionCeil, _signature: [{types: [TYPE_NUMBER]}]},
	        contains: {
	            _func: this._functionContains,
	            _signature: [{types: [TYPE_STRING, TYPE_ARRAY]},
	                        {types: [TYPE_ANY]}]},
	        "ends_with": {
	            _func: this._functionEndsWith,
	            _signature: [{types: [TYPE_STRING]}, {types: [TYPE_STRING]}]},
	        floor: {_func: this._functionFloor, _signature: [{types: [TYPE_NUMBER]}]},
	        length: {
	            _func: this._functionLength,
	            _signature: [{types: [TYPE_STRING, TYPE_ARRAY, TYPE_OBJECT]}]},
	        map: {
	            _func: this._functionMap,
	            _signature: [{types: [TYPE_EXPREF]}, {types: [TYPE_ARRAY]}]},
	        max: {
	            _func: this._functionMax,
	            _signature: [{types: [TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING]}]},
	        "merge": {
	            _func: this._functionMerge,
	            _signature: [{types: [TYPE_OBJECT], variadic: true}]
	        },
	        "max_by": {
	          _func: this._functionMaxBy,
	          _signature: [{types: [TYPE_ARRAY]}, {types: [TYPE_EXPREF]}]
	        },
	        sum: {_func: this._functionSum, _signature: [{types: [TYPE_ARRAY_NUMBER]}]},
	        "starts_with": {
	            _func: this._functionStartsWith,
	            _signature: [{types: [TYPE_STRING]}, {types: [TYPE_STRING]}]},
	        min: {
	            _func: this._functionMin,
	            _signature: [{types: [TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING]}]},
	        "min_by": {
	          _func: this._functionMinBy,
	          _signature: [{types: [TYPE_ARRAY]}, {types: [TYPE_EXPREF]}]
	        },
	        type: {_func: this._functionType, _signature: [{types: [TYPE_ANY]}]},
	        keys: {_func: this._functionKeys, _signature: [{types: [TYPE_OBJECT]}]},
	        values: {_func: this._functionValues, _signature: [{types: [TYPE_OBJECT]}]},
	        sort: {_func: this._functionSort, _signature: [{types: [TYPE_ARRAY_STRING, TYPE_ARRAY_NUMBER]}]},
	        "sort_by": {
	          _func: this._functionSortBy,
	          _signature: [{types: [TYPE_ARRAY]}, {types: [TYPE_EXPREF]}]
	        },
	        join: {
	            _func: this._functionJoin,
	            _signature: [
	                {types: [TYPE_STRING]},
	                {types: [TYPE_ARRAY_STRING]}
	            ]
	        },
	        reverse: {
	            _func: this._functionReverse,
	            _signature: [{types: [TYPE_STRING, TYPE_ARRAY]}]},
	        "to_array": {_func: this._functionToArray, _signature: [{types: [TYPE_ANY]}]},
	        "to_string": {_func: this._functionToString, _signature: [{types: [TYPE_ANY]}]},
	        "to_number": {_func: this._functionToNumber, _signature: [{types: [TYPE_ANY]}]},
	        "not_null": {
	            _func: this._functionNotNull,
	            _signature: [{types: [TYPE_ANY], variadic: true}]
	        }
	    };
	  }
	
	  Runtime.prototype = {
	    callFunction: function(name, resolvedArgs) {
	      var functionEntry = this.functionTable[name];
	      if (functionEntry === undefined) {
	          throw new Error("Unknown function: " + name + "()");
	      }
	      this._validateArgs(name, resolvedArgs, functionEntry._signature);
	      return functionEntry._func.call(this, resolvedArgs);
	    },
	
	    _validateArgs: function(name, args, signature) {
	        var pluralized;
	        if (signature[signature.length - 1].variadic) {
	            if (args.length < signature.length) {
	                pluralized = signature.length === 1 ? " argument" : " arguments";
	                throw new Error("ArgumentError: " + name + "() " +
	                                "takes at least" + signature.length + pluralized +
	                                " but received " + args.length);
	            }
	        } else if (args.length !== signature.length) {
	            pluralized = signature.length === 1 ? " argument" : " arguments";
	            throw new Error("ArgumentError: " + name + "() " +
	                            "takes " + signature.length + pluralized +
	                            " but received " + args.length);
	        }
	        var currentSpec;
	        var actualType;
	        var typeMatched;
	        for (var i = 0; i < signature.length; i++) {
	            typeMatched = false;
	            currentSpec = signature[i].types;
	            actualType = this._getTypeName(args[i]);
	            for (var j = 0; j < currentSpec.length; j++) {
	                if (this._typeMatches(actualType, currentSpec[j], args[i])) {
	                    typeMatched = true;
	                    break;
	                }
	            }
	            if (!typeMatched) {
	                throw new Error("TypeError: " + name + "() " +
	                                "expected argument " + (i + 1) +
	                                " to be type " + currentSpec +
	                                " but received type " + actualType +
	                                " instead.");
	            }
	        }
	    },
	
	    _typeMatches: function(actual, expected, argValue) {
	        if (expected === TYPE_ANY) {
	            return true;
	        }
	        if (expected === TYPE_ARRAY_STRING ||
	            expected === TYPE_ARRAY_NUMBER ||
	            expected === TYPE_ARRAY) {
	            if (expected === TYPE_ARRAY) {
	                return actual === TYPE_ARRAY;
	            } else if (actual === TYPE_ARRAY) {
	                var subtype;
	                if (expected === TYPE_ARRAY_NUMBER) {
	                  subtype = TYPE_NUMBER;
	                } else if (expected === TYPE_ARRAY_STRING) {
	                  subtype = TYPE_STRING;
	                }
	                for (var i = 0; i < argValue.length; i++) {
	                    if (!this._typeMatches(
	                            this._getTypeName(argValue[i]), subtype,
	                                             argValue[i])) {
	                        return false;
	                    }
	                }
	                return true;
	            }
	        } else {
	            return actual === expected;
	        }
	    },
	    _getTypeName: function(obj) {
	        switch (Object.prototype.toString.call(obj)) {
	            case "[object String]":
	              return TYPE_STRING;
	            case "[object Number]":
	              return TYPE_NUMBER;
	            case "[object Array]":
	              return TYPE_ARRAY;
	            case "[object Boolean]":
	              return TYPE_BOOLEAN;
	            case "[object Null]":
	              return TYPE_NULL;
	            case "[object Object]":
	              if (obj.jmespathType === TOK_EXPREF) {
	                return TYPE_EXPREF;
	              } else {
	                return TYPE_OBJECT;
	              }
	        }
	    },
	
	    _functionStartsWith: function(resolvedArgs) {
	        return resolvedArgs[0].lastIndexOf(resolvedArgs[1]) === 0;
	    },
	
	    _functionEndsWith: function(resolvedArgs) {
	        var searchStr = resolvedArgs[0];
	        var suffix = resolvedArgs[1];
	        return searchStr.indexOf(suffix, searchStr.length - suffix.length) !== -1;
	    },
	
	    _functionReverse: function(resolvedArgs) {
	        var typeName = this._getTypeName(resolvedArgs[0]);
	        if (typeName === TYPE_STRING) {
	          var originalStr = resolvedArgs[0];
	          var reversedStr = "";
	          for (var i = originalStr.length - 1; i >= 0; i--) {
	              reversedStr += originalStr[i];
	          }
	          return reversedStr;
	        } else {
	          var reversedArray = resolvedArgs[0].slice(0);
	          reversedArray.reverse();
	          return reversedArray;
	        }
	    },
	
	    _functionAbs: function(resolvedArgs) {
	      return Math.abs(resolvedArgs[0]);
	    },
	
	    _functionCeil: function(resolvedArgs) {
	        return Math.ceil(resolvedArgs[0]);
	    },
	
	    _functionAvg: function(resolvedArgs) {
	        var sum = 0;
	        var inputArray = resolvedArgs[0];
	        for (var i = 0; i < inputArray.length; i++) {
	            sum += inputArray[i];
	        }
	        return sum / inputArray.length;
	    },
	
	    _functionContains: function(resolvedArgs) {
	        return resolvedArgs[0].indexOf(resolvedArgs[1]) >= 0;
	    },
	
	    _functionFloor: function(resolvedArgs) {
	        return Math.floor(resolvedArgs[0]);
	    },
	
	    _functionLength: function(resolvedArgs) {
	       if (!isObject(resolvedArgs[0])) {
	         return resolvedArgs[0].length;
	       } else {
	         return Object.keys(resolvedArgs[0]).length;
	       }
	    },
	
	    _functionMap: function(resolvedArgs) {
	      var mapped = [];
	      var interpreter = this._interpreter;
	      var exprefNode = resolvedArgs[0];
	      var elements = resolvedArgs[1];
	      for (var i = 0; i < elements.length; i++) {
	          mapped.push(interpreter.visit(exprefNode, elements[i]));
	      }
	      return mapped;
	    },
	
	    _functionMerge: function(resolvedArgs) {
	      var merged = {};
	      for (var i = 0; i < resolvedArgs.length; i++) {
	        var current = resolvedArgs[i];
	        for (var key in current) {
	          merged[key] = current[key];
	        }
	      }
	      return merged;
	    },
	
	    _functionMax: function(resolvedArgs) {
	      if (resolvedArgs[0].length > 0) {
	        var typeName = this._getTypeName(resolvedArgs[0][0]);
	        if (typeName === TYPE_NUMBER) {
	          return Math.max.apply(Math, resolvedArgs[0]);
	        } else {
	          var elements = resolvedArgs[0];
	          var maxElement = elements[0];
	          for (var i = 1; i < elements.length; i++) {
	              if (maxElement.localeCompare(elements[i]) < 0) {
	                  maxElement = elements[i];
	              }
	          }
	          return maxElement;
	        }
	      } else {
	          return null;
	      }
	    },
	
	    _functionMin: function(resolvedArgs) {
	      if (resolvedArgs[0].length > 0) {
	        var typeName = this._getTypeName(resolvedArgs[0][0]);
	        if (typeName === TYPE_NUMBER) {
	          return Math.min.apply(Math, resolvedArgs[0]);
	        } else {
	          var elements = resolvedArgs[0];
	          var minElement = elements[0];
	          for (var i = 1; i < elements.length; i++) {
	              if (elements[i].localeCompare(minElement) < 0) {
	                  minElement = elements[i];
	              }
	          }
	          return minElement;
	        }
	      } else {
	        return null;
	      }
	    },
	
	    _functionSum: function(resolvedArgs) {
	      var sum = 0;
	      var listToSum = resolvedArgs[0];
	      for (var i = 0; i < listToSum.length; i++) {
	        sum += listToSum[i];
	      }
	      return sum;
	    },
	
	    _functionType: function(resolvedArgs) {
	        switch (this._getTypeName(resolvedArgs[0])) {
	          case TYPE_NUMBER:
	            return "number";
	          case TYPE_STRING:
	            return "string";
	          case TYPE_ARRAY:
	            return "array";
	          case TYPE_OBJECT:
	            return "object";
	          case TYPE_BOOLEAN:
	            return "boolean";
	          case TYPE_EXPREF:
	            return "expref";
	          case TYPE_NULL:
	            return "null";
	        }
	    },
	
	    _functionKeys: function(resolvedArgs) {
	        return Object.keys(resolvedArgs[0]);
	    },
	
	    _functionValues: function(resolvedArgs) {
	        var obj = resolvedArgs[0];
	        var keys = Object.keys(obj);
	        var values = [];
	        for (var i = 0; i < keys.length; i++) {
	            values.push(obj[keys[i]]);
	        }
	        return values;
	    },
	
	    _functionJoin: function(resolvedArgs) {
	        var joinChar = resolvedArgs[0];
	        var listJoin = resolvedArgs[1];
	        return listJoin.join(joinChar);
	    },
	
	    _functionToArray: function(resolvedArgs) {
	        if (this._getTypeName(resolvedArgs[0]) === TYPE_ARRAY) {
	            return resolvedArgs[0];
	        } else {
	            return [resolvedArgs[0]];
	        }
	    },
	
	    _functionToString: function(resolvedArgs) {
	        if (this._getTypeName(resolvedArgs[0]) === TYPE_STRING) {
	            return resolvedArgs[0];
	        } else {
	            return JSON.stringify(resolvedArgs[0]);
	        }
	    },
	
	    _functionToNumber: function(resolvedArgs) {
	        var typeName = this._getTypeName(resolvedArgs[0]);
	        var convertedValue;
	        if (typeName === TYPE_NUMBER) {
	            return resolvedArgs[0];
	        } else if (typeName === TYPE_STRING) {
	            convertedValue = +resolvedArgs[0];
	            if (!isNaN(convertedValue)) {
	                return convertedValue;
	            }
	        }
	        return null;
	    },
	
	    _functionNotNull: function(resolvedArgs) {
	        for (var i = 0; i < resolvedArgs.length; i++) {
	            if (this._getTypeName(resolvedArgs[i]) !== TYPE_NULL) {
	                return resolvedArgs[i];
	            }
	        }
	        return null;
	    },
	
	    _functionSort: function(resolvedArgs) {
	        var sortedArray = resolvedArgs[0].slice(0);
	        sortedArray.sort();
	        return sortedArray;
	    },
	
	    _functionSortBy: function(resolvedArgs) {
	        var sortedArray = resolvedArgs[0].slice(0);
	        if (sortedArray.length === 0) {
	            return sortedArray;
	        }
	        var interpreter = this._interpreter;
	        var exprefNode = resolvedArgs[1];
	        var requiredType = this._getTypeName(
	            interpreter.visit(exprefNode, sortedArray[0]));
	        if ([TYPE_NUMBER, TYPE_STRING].indexOf(requiredType) < 0) {
	            throw new Error("TypeError");
	        }
	        var that = this;
	        var decorated = [];
	        for (var i = 0; i < sortedArray.length; i++) {
	          decorated.push([i, sortedArray[i]]);
	        }
	        decorated.sort(function(a, b) {
	          var exprA = interpreter.visit(exprefNode, a[1]);
	          var exprB = interpreter.visit(exprefNode, b[1]);
	          if (that._getTypeName(exprA) !== requiredType) {
	              throw new Error(
	                  "TypeError: expected " + requiredType + ", received " +
	                  that._getTypeName(exprA));
	          } else if (that._getTypeName(exprB) !== requiredType) {
	              throw new Error(
	                  "TypeError: expected " + requiredType + ", received " +
	                  that._getTypeName(exprB));
	          }
	          if (exprA > exprB) {
	            return 1;
	          } else if (exprA < exprB) {
	            return -1;
	          } else {
	            return a[0] - b[0];
	          }
	        });
	        for (var j = 0; j < decorated.length; j++) {
	          sortedArray[j] = decorated[j][1];
	        }
	        return sortedArray;
	    },
	
	    _functionMaxBy: function(resolvedArgs) {
	      var exprefNode = resolvedArgs[1];
	      var resolvedArray = resolvedArgs[0];
	      var keyFunction = this.createKeyFunction(exprefNode, [TYPE_NUMBER, TYPE_STRING]);
	      var maxNumber = -Infinity;
	      var maxRecord;
	      var current;
	      for (var i = 0; i < resolvedArray.length; i++) {
	        current = keyFunction(resolvedArray[i]);
	        if (current > maxNumber) {
	          maxNumber = current;
	          maxRecord = resolvedArray[i];
	        }
	      }
	      return maxRecord;
	    },
	
	    _functionMinBy: function(resolvedArgs) {
	      var exprefNode = resolvedArgs[1];
	      var resolvedArray = resolvedArgs[0];
	      var keyFunction = this.createKeyFunction(exprefNode, [TYPE_NUMBER, TYPE_STRING]);
	      var minNumber = Infinity;
	      var minRecord;
	      var current;
	      for (var i = 0; i < resolvedArray.length; i++) {
	        current = keyFunction(resolvedArray[i]);
	        if (current < minNumber) {
	          minNumber = current;
	          minRecord = resolvedArray[i];
	        }
	      }
	      return minRecord;
	    },
	
	    createKeyFunction: function(exprefNode, allowedTypes) {
	      var that = this;
	      var interpreter = this._interpreter;
	      var keyFunc = function(x) {
	        var current = interpreter.visit(exprefNode, x);
	        if (allowedTypes.indexOf(that._getTypeName(current)) < 0) {
	          var msg = "TypeError: expected one of " + allowedTypes +
	                    ", received " + that._getTypeName(current);
	          throw new Error(msg);
	        }
	        return current;
	      };
	      return keyFunc;
	    }
	
	  };
	
	  function compile(stream) {
	    var parser = new Parser();
	    var ast = parser.parse(stream);
	    return ast;
	  }
	
	  function tokenize(stream) {
	      var lexer = new Lexer();
	      return lexer.tokenize(stream);
	  }
	
	  function search(data, expression) {
	      var parser = new Parser();
	      var runtime = new Runtime();
	      var interpreter = new TreeInterpreter(runtime);
	      runtime._interpreter = interpreter;
	      var node = parser.parse(expression);
	      return interpreter.search(node, data);
	  }
	
	  exports.tokenize = tokenize;
	  exports.compile = compile;
	  exports.search = search;
	  exports.strictDeepEqual = strictDeepEqual;
	})(typeof exports === "undefined" ? this.jmespath = {} : exports);
	
	},{}],285:[function(require,module,exports){
	
	'use strict';
	
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};
	
	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }
	
	  var regexp = /\+/g;
	  qs = qs.split(sep);
	
	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }
	
	  var len = qs.length;
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }
	
	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;
	
	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }
	
	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);
	
	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }
	
	  return obj;
	};
	
	},{}],286:[function(require,module,exports){
	
	'use strict';
	
	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;
	
	    case 'boolean':
	      return v ? 'true' : 'false';
	
	    case 'number':
	      return isFinite(v) ? v : '';
	
	    default:
	      return '';
	  }
	};
	
	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }
	
	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);
	
	  }
	
	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};
	
	},{}],287:[function(require,module,exports){
	arguments[4][270][0].apply(exports,arguments)
	},{"./decode":285,"./encode":286,"dup":270}],288:[function(require,module,exports){
	
	var punycode = require('punycode');
	
	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;
	
	exports.Url = Url;
	
	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}
	
	
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,
	
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
	
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
	
	    autoEscape = ['\''].concat(unwise),
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = require('querystring');
	
	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && isObject(url) && url instanceof Url) return url;
	
	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}
	
	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }
	
	  var rest = url;
	
	  rest = rest.trim();
	
	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }
	
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }
	
	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {
	
	
	
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	
	    var auth, atSign;
	    if (hostEnd === -1) {
	      atSign = rest.lastIndexOf('@');
	    } else {
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }
	
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }
	
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    if (hostEnd === -1)
	      hostEnd = rest.length;
	
	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);
	
	    this.parseHost();
	
	    this.hostname = this.hostname || '';
	
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';
	
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }
	
	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      this.hostname = this.hostname.toLowerCase();
	    }
	
	    if (!ipv6Hostname) {
	      var domainArray = this.hostname.split('.');
	      var newOut = [];
	      for (var i = 0; i < domainArray.length; ++i) {
	        var s = domainArray[i];
	        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
	            'xn--' + punycode.encode(s) : s);
	      }
	      this.hostname = newOut.join('.');
	    }
	
	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;
	
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }
	
	  if (!unsafeProtocol[lowerProto]) {
	
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }
	
	
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }
	
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }
	
	  this.href = this.format();
	  return this;
	};
	
	function urlFormat(obj) {
	  if (isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}
	
	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }
	
	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';
	
	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }
	
	  if (this.query &&
	      isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }
	
	  var search = this.search || (query && ('?' + query)) || '';
	
	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';
	
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }
	
	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;
	
	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');
	
	  return protocol + host + pathname + search + hash;
	};
	
	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}
	
	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};
	
	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}
	
	Url.prototype.resolveObject = function(relative) {
	  if (isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }
	
	  var result = new Url();
	  Object.keys(this).forEach(function(k) {
	    result[k] = this[k];
	  }, this);
	
	  result.hash = relative.hash;
	
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }
	
	  if (relative.slashes && !relative.protocol) {
	    Object.keys(relative).forEach(function(k) {
	      if (k !== 'protocol')
	        result[k] = relative[k];
	    });
	
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }
	
	    result.href = result.format();
	    return result;
	  }
	
	  if (relative.protocol && relative.protocol !== result.protocol) {
	    if (!slashedProtocol[relative.protocol]) {
	      Object.keys(relative).forEach(function(k) {
	        result[k] = relative[k];
	      });
	      result.href = result.format();
	      return result;
	    }
	
	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }
	
	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];
	
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }
	
	  if (isRelAbs) {
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	  } else if (relPath.length) {
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!isNullOrUndefined(relative.search)) {
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    if (!isNull(result.pathname) || !isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }
	
	  if (!srcPath.length) {
	    result.pathname = null;
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }
	
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host) && (last === '.' || last === '..') ||
	      last === '');
	
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last == '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }
	
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }
	
	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }
	
	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }
	
	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');
	
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }
	
	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);
	
	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }
	
	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }
	
	  if (!isNull(result.pathname) || !isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};
	
	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};
	
	function isString(arg) {
	  return typeof arg === "string";
	}
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	
	function isNull(arg) {
	  return arg === null;
	}
	function isNullOrUndefined(arg) {
	  return  arg == null;
	}
	
	},{"punycode":267,"querystring":270}],289:[function(require,module,exports){
	(function (global){
	
	var rng;
	
	var crypto = global.crypto || global.msCrypto; // for IE 11
	if (crypto && crypto.getRandomValues) {
	  var _rnds8 = new Uint8Array(16);
	  rng = function whatwgRNG() {
	    crypto.getRandomValues(_rnds8);
	    return _rnds8;
	  };
	}
	
	if (!rng) {
	  var  _rnds = new Array(16);
	  rng = function() {
	    for (var i = 0, r; i < 16; i++) {
	      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
	      _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
	    }
	
	    return _rnds;
	  };
	}
	
	module.exports = rng;
	
	
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{}],290:[function(require,module,exports){
	var _rng = require('./lib/rng');
	
	var _byteToHex = [];
	var _hexToByte = {};
	for (var i = 0; i < 256; ++i) {
	  _byteToHex[i] = (i + 0x100).toString(16).substr(1);
	  _hexToByte[_byteToHex[i]] = i;
	}
	
	function buff_to_string(buf, offset) {
	  var i = offset || 0;
	  var bth = _byteToHex;
	  return  bth[buf[i++]] + bth[buf[i++]] +
	          bth[buf[i++]] + bth[buf[i++]] + '-' +
	          bth[buf[i++]] + bth[buf[i++]] + '-' +
	          bth[buf[i++]] + bth[buf[i++]] + '-' +
	          bth[buf[i++]] + bth[buf[i++]] + '-' +
	          bth[buf[i++]] + bth[buf[i++]] +
	          bth[buf[i++]] + bth[buf[i++]] +
	          bth[buf[i++]] + bth[buf[i++]];
	}
	
	
	var _seedBytes = _rng();
	
	var _nodeId = [
	  _seedBytes[0] | 0x01,
	  _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]
	];
	
	var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;
	
	var _lastMSecs = 0, _lastNSecs = 0;
	
	function v1(options, buf, offset) {
	  var i = buf && offset || 0;
	  var b = buf || [];
	
	  options = options || {};
	
	  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;
	
	  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();
	
	  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;
	
	  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;
	
	  if (dt < 0 && options.clockseq === undefined) {
	    clockseq = clockseq + 1 & 0x3fff;
	  }
	
	  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
	    nsecs = 0;
	  }
	
	  if (nsecs >= 10000) {
	    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
	  }
	
	  _lastMSecs = msecs;
	  _lastNSecs = nsecs;
	  _clockseq = clockseq;
	
	  msecs += 12219292800000;
	
	  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
	  b[i++] = tl >>> 24 & 0xff;
	  b[i++] = tl >>> 16 & 0xff;
	  b[i++] = tl >>> 8 & 0xff;
	  b[i++] = tl & 0xff;
	
	  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
	  b[i++] = tmh >>> 8 & 0xff;
	  b[i++] = tmh & 0xff;
	
	  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
	  b[i++] = tmh >>> 16 & 0xff;
	
	  b[i++] = clockseq >>> 8 | 0x80;
	
	  b[i++] = clockseq & 0xff;
	
	  var node = options.node || _nodeId;
	  for (var n = 0; n < 6; ++n) {
	    b[i + n] = node[n];
	  }
	
	  return buf ? buf : buff_to_string(b);
	}
	
	
	function v4(options, buf, offset) {
	  var i = buf && offset || 0;
	
	  if (typeof(options) == 'string') {
	    buf = options == 'binary' ? new Array(16) : null;
	    options = null;
	  }
	  options = options || {};
	
	  var rnds = options.random || (options.rng || _rng)();
	
	  rnds[6] = (rnds[6] & 0x0f) | 0x40;
	  rnds[8] = (rnds[8] & 0x3f) | 0x80;
	
	  if (buf) {
	    for (var ii = 0; ii < 16; ++ii) {
	      buf[i + ii] = rnds[ii];
	    }
	  }
	
	  return buf || buff_to_string(rnds);
	}
	
	var uuid = v4;
	uuid.v1 = v1;
	uuid.v4 = v4;
	
	module.exports = uuid;
	
	},{"./lib/rng":289}],291:[function(require,module,exports){
	(function() {
	  var XMLAttribute, create;
	
	  create = require('lodash/object/create');
	
	  module.exports = XMLAttribute = (function() {
	    function XMLAttribute(parent, name, value) {
	      this.stringify = parent.stringify;
	      if (name == null) {
	        throw new Error("Missing attribute name of element " + parent.name);
	      }
	      if (value == null) {
	        throw new Error("Missing attribute value for attribute " + name + " of element " + parent.name);
	      }
	      this.name = this.stringify.attName(name);
	      this.value = this.stringify.attValue(value);
	    }
	
	    XMLAttribute.prototype.clone = function() {
	      return create(XMLAttribute.prototype, this);
	    };
	
	    XMLAttribute.prototype.toString = function(options, level) {
	      return ' ' + this.name + '="' + this.value + '"';
	    };
	
	    return XMLAttribute;
	
	  })();
	
	}).call(this);
	
	},{"lodash/object/create":350}],292:[function(require,module,exports){
	(function() {
	  var XMLBuilder, XMLDeclaration, XMLDocType, XMLElement, XMLStringifier;
	
	  XMLStringifier = require('./XMLStringifier');
	
	  XMLDeclaration = require('./XMLDeclaration');
	
	  XMLDocType = require('./XMLDocType');
	
	  XMLElement = require('./XMLElement');
	
	  module.exports = XMLBuilder = (function() {
	    function XMLBuilder(name, options) {
	      var root, temp;
	      if (name == null) {
	        throw new Error("Root element needs a name");
	      }
	      if (options == null) {
	        options = {};
	      }
	      this.options = options;
	      this.stringify = new XMLStringifier(options);
	      temp = new XMLElement(this, 'doc');
	      root = temp.element(name);
	      root.isRoot = true;
	      root.documentObject = this;
	      this.rootObject = root;
	      if (!options.headless) {
	        root.declaration(options);
	        if ((options.pubID != null) || (options.sysID != null)) {
	          root.doctype(options);
	        }
	      }
	    }
	
	    XMLBuilder.prototype.root = function() {
	      return this.rootObject;
	    };
	
	    XMLBuilder.prototype.end = function(options) {
	      return this.toString(options);
	    };
	
	    XMLBuilder.prototype.toString = function(options) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      r = '';
	      if (this.xmldec != null) {
	        r += this.xmldec.toString(options);
	      }
	      if (this.doctype != null) {
	        r += this.doctype.toString(options);
	      }
	      r += this.rootObject.toString(options);
	      if (pretty && r.slice(-newline.length) === newline) {
	        r = r.slice(0, -newline.length);
	      }
	      return r;
	    };
	
	    return XMLBuilder;
	
	  })();
	
	}).call(this);
	
	},{"./XMLDeclaration":299,"./XMLDocType":300,"./XMLElement":301,"./XMLStringifier":305}],293:[function(require,module,exports){
	(function() {
	  var XMLCData, XMLNode, create,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;
	
	  create = require('lodash/object/create');
	
	  XMLNode = require('./XMLNode');
	
	  module.exports = XMLCData = (function(superClass) {
	    extend(XMLCData, superClass);
	
	    function XMLCData(parent, text) {
	      XMLCData.__super__.constructor.call(this, parent);
	      if (text == null) {
	        throw new Error("Missing CDATA text");
	      }
	      this.text = this.stringify.cdata(text);
	    }
	
	    XMLCData.prototype.clone = function() {
	      return create(XMLCData.prototype, this);
	    };
	
	    XMLCData.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += '<![CDATA[' + this.text + ']]>';
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };
	
	    return XMLCData;
	
	  })(XMLNode);
	
	}).call(this);
	
	},{"./XMLNode":302,"lodash/object/create":350}],294:[function(require,module,exports){
	(function() {
	  var XMLComment, XMLNode, create,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;
	
	  create = require('lodash/object/create');
	
	  XMLNode = require('./XMLNode');
	
	  module.exports = XMLComment = (function(superClass) {
	    extend(XMLComment, superClass);
	
	    function XMLComment(parent, text) {
	      XMLComment.__super__.constructor.call(this, parent);
	      if (text == null) {
	        throw new Error("Missing comment text");
	      }
	      this.text = this.stringify.comment(text);
	    }
	
	    XMLComment.prototype.clone = function() {
	      return create(XMLComment.prototype, this);
	    };
	
	    XMLComment.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += '<!-- ' + this.text + ' -->';
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };
	
	    return XMLComment;
	
	  })(XMLNode);
	
	}).call(this);
	
	},{"./XMLNode":302,"lodash/object/create":350}],295:[function(require,module,exports){
	(function() {
	  var XMLDTDAttList, create;
	
	  create = require('lodash/object/create');
	
	  module.exports = XMLDTDAttList = (function() {
	    function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {
	      this.stringify = parent.stringify;
	      if (elementName == null) {
	        throw new Error("Missing DTD element name");
	      }
	      if (attributeName == null) {
	        throw new Error("Missing DTD attribute name");
	      }
	      if (!attributeType) {
	        throw new Error("Missing DTD attribute type");
	      }
	      if (!defaultValueType) {
	        throw new Error("Missing DTD attribute default");
	      }
	      if (defaultValueType.indexOf('#') !== 0) {
	        defaultValueType = '#' + defaultValueType;
	      }
	      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {
	        throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT");
	      }
	      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {
	        throw new Error("Default value only applies to #FIXED or #DEFAULT");
	      }
	      this.elementName = this.stringify.eleName(elementName);
	      this.attributeName = this.stringify.attName(attributeName);
	      this.attributeType = this.stringify.dtdAttType(attributeType);
	      this.defaultValue = this.stringify.dtdAttDefault(defaultValue);
	      this.defaultValueType = defaultValueType;
	    }
	
	    XMLDTDAttList.prototype.clone = function() {
	      return create(XMLDTDAttList.prototype, this);
	    };
	
	    XMLDTDAttList.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += '<!ATTLIST ' + this.elementName + ' ' + this.attributeName + ' ' + this.attributeType;
	      if (this.defaultValueType !== '#DEFAULT') {
	        r += ' ' + this.defaultValueType;
	      }
	      if (this.defaultValue) {
	        r += ' "' + this.defaultValue + '"';
	      }
	      r += '>';
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };
	
	    return XMLDTDAttList;
	
	  })();
	
	}).call(this);
	
	},{"lodash/object/create":350}],296:[function(require,module,exports){
	(function() {
	  var XMLDTDElement, create, isArray;
	
	  create = require('lodash/object/create');
	
	  isArray = require('lodash/lang/isArray');
	
	  module.exports = XMLDTDElement = (function() {
	    function XMLDTDElement(parent, name, value) {
	      this.stringify = parent.stringify;
	      if (name == null) {
	        throw new Error("Missing DTD element name");
	      }
	      if (!value) {
	        value = '(#PCDATA)';
	      }
	      if (isArray(value)) {
	        value = '(' + value.join(',') + ')';
	      }
	      this.name = this.stringify.eleName(name);
	      this.value = this.stringify.dtdElementValue(value);
	    }
	
	    XMLDTDElement.prototype.clone = function() {
	      return create(XMLDTDElement.prototype, this);
	    };
	
	    XMLDTDElement.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += '<!ELEMENT ' + this.name + ' ' + this.value + '>';
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };
	
	    return XMLDTDElement;
	
	  })();
	
	}).call(this);
	
	},{"lodash/lang/isArray":342,"lodash/object/create":350}],297:[function(require,module,exports){
	(function() {
	  var XMLDTDEntity, create, isObject;
	
	  create = require('lodash/object/create');
	
	  isObject = require('lodash/lang/isObject');
	
	  module.exports = XMLDTDEntity = (function() {
	    function XMLDTDEntity(parent, pe, name, value) {
	      this.stringify = parent.stringify;
	      if (name == null) {
	        throw new Error("Missing entity name");
	      }
	      if (value == null) {
	        throw new Error("Missing entity value");
	      }
	      this.pe = !!pe;
	      this.name = this.stringify.eleName(name);
	      if (!isObject(value)) {
	        this.value = this.stringify.dtdEntityValue(value);
	      } else {
	        if (!value.pubID && !value.sysID) {
	          throw new Error("Public and/or system identifiers are required for an external entity");
	        }
	        if (value.pubID && !value.sysID) {
	          throw new Error("System identifier is required for a public external entity");
	        }
	        if (value.pubID != null) {
	          this.pubID = this.stringify.dtdPubID(value.pubID);
	        }
	        if (value.sysID != null) {
	          this.sysID = this.stringify.dtdSysID(value.sysID);
	        }
	        if (value.nData != null) {
	          this.nData = this.stringify.dtdNData(value.nData);
	        }
	        if (this.pe && this.nData) {
	          throw new Error("Notation declaration is not allowed in a parameter entity");
	        }
	      }
	    }
	
	    XMLDTDEntity.prototype.clone = function() {
	      return create(XMLDTDEntity.prototype, this);
	    };
	
	    XMLDTDEntity.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += '<!ENTITY';
	      if (this.pe) {
	        r += ' %';
	      }
	      r += ' ' + this.name;
	      if (this.value) {
	        r += ' "' + this.value + '"';
	      } else {
	        if (this.pubID && this.sysID) {
	          r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';
	        } else if (this.sysID) {
	          r += ' SYSTEM "' + this.sysID + '"';
	        }
	        if (this.nData) {
	          r += ' NDATA ' + this.nData;
	        }
	      }
	      r += '>';
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };
	
	    return XMLDTDEntity;
	
	  })();
	
	}).call(this);
	
	},{"lodash/lang/isObject":346,"lodash/object/create":350}],298:[function(require,module,exports){
	(function() {
	  var XMLDTDNotation, create;
	
	  create = require('lodash/object/create');
	
	  module.exports = XMLDTDNotation = (function() {
	    function XMLDTDNotation(parent, name, value) {
	      this.stringify = parent.stringify;
	      if (name == null) {
	        throw new Error("Missing notation name");
	      }
	      if (!value.pubID && !value.sysID) {
	        throw new Error("Public or system identifiers are required for an external entity");
	      }
	      this.name = this.stringify.eleName(name);
	      if (value.pubID != null) {
	        this.pubID = this.stringify.dtdPubID(value.pubID);
	      }
	      if (value.sysID != null) {
	        this.sysID = this.stringify.dtdSysID(value.sysID);
	      }
	    }
	
	    XMLDTDNotation.prototype.clone = function() {
	      return create(XMLDTDNotation.prototype, this);
	    };
	
	    XMLDTDNotation.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += '<!NOTATION ' + this.name;
	      if (this.pubID && this.sysID) {
	        r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';
	      } else if (this.pubID) {
	        r += ' PUBLIC "' + this.pubID + '"';
	      } else if (this.sysID) {
	        r += ' SYSTEM "' + this.sysID + '"';
	      }
	      r += '>';
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };
	
	    return XMLDTDNotation;
	
	  })();
	
	}).call(this);
	
	},{"lodash/object/create":350}],299:[function(require,module,exports){
	(function() {
	  var XMLDeclaration, XMLNode, create, isObject,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;
	
	  create = require('lodash/object/create');
	
	  isObject = require('lodash/lang/isObject');
	
	  XMLNode = require('./XMLNode');
	
	  module.exports = XMLDeclaration = (function(superClass) {
	    extend(XMLDeclaration, superClass);
	
	    function XMLDeclaration(parent, version, encoding, standalone) {
	      var ref;
	      XMLDeclaration.__super__.constructor.call(this, parent);
	      if (isObject(version)) {
	        ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;
	      }
	      if (!version) {
	        version = '1.0';
	      }
	      if (version != null) {
	        this.version = this.stringify.xmlVersion(version);
	      }
	      if (encoding != null) {
	        this.encoding = this.stringify.xmlEncoding(encoding);
	      }
	      if (standalone != null) {
	        this.standalone = this.stringify.xmlStandalone(standalone);
	      }
	    }
	
	    XMLDeclaration.prototype.clone = function() {
	      return create(XMLDeclaration.prototype, this);
	    };
	
	    XMLDeclaration.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += '<?xml';
	      if (this.version != null) {
	        r += ' version="' + this.version + '"';
	      }
	      if (this.encoding != null) {
	        r += ' encoding="' + this.encoding + '"';
	      }
	      if (this.standalone != null) {
	        r += ' standalone="' + this.standalone + '"';
	      }
	      r += '?>';
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };
	
	    return XMLDeclaration;
	
	  })(XMLNode);
	
	}).call(this);
	
	},{"./XMLNode":302,"lodash/lang/isObject":346,"lodash/object/create":350}],300:[function(require,module,exports){
	(function() {
	  var XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLProcessingInstruction, create, isObject;
	
	  create = require('lodash/object/create');
	
	  isObject = require('lodash/lang/isObject');
	
	  XMLCData = require('./XMLCData');
	
	  XMLComment = require('./XMLComment');
	
	  XMLDTDAttList = require('./XMLDTDAttList');
	
	  XMLDTDEntity = require('./XMLDTDEntity');
	
	  XMLDTDElement = require('./XMLDTDElement');
	
	  XMLDTDNotation = require('./XMLDTDNotation');
	
	  XMLProcessingInstruction = require('./XMLProcessingInstruction');
	
	  module.exports = XMLDocType = (function() {
	    function XMLDocType(parent, pubID, sysID) {
	      var ref, ref1;
	      this.documentObject = parent;
	      this.stringify = this.documentObject.stringify;
	      this.children = [];
	      if (isObject(pubID)) {
	        ref = pubID, pubID = ref.pubID, sysID = ref.sysID;
	      }
	      if (sysID == null) {
	        ref1 = [pubID, sysID], sysID = ref1[0], pubID = ref1[1];
	      }
	      if (pubID != null) {
	        this.pubID = this.stringify.dtdPubID(pubID);
	      }
	      if (sysID != null) {
	        this.sysID = this.stringify.dtdSysID(sysID);
	      }
	    }
	
	    XMLDocType.prototype.clone = function() {
	      return create(XMLDocType.prototype, this);
	    };
	
	    XMLDocType.prototype.element = function(name, value) {
	      var child;
	      child = new XMLDTDElement(this, name, value);
	      this.children.push(child);
	      return this;
	    };
	
	    XMLDocType.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
	      var child;
	      child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
	      this.children.push(child);
	      return this;
	    };
	
	    XMLDocType.prototype.entity = function(name, value) {
	      var child;
	      child = new XMLDTDEntity(this, false, name, value);
	      this.children.push(child);
	      return this;
	    };
	
	    XMLDocType.prototype.pEntity = function(name, value) {
	      var child;
	      child = new XMLDTDEntity(this, true, name, value);
	      this.children.push(child);
	      return this;
	    };
	
	    XMLDocType.prototype.notation = function(name, value) {
	      var child;
	      child = new XMLDTDNotation(this, name, value);
	      this.children.push(child);
	      return this;
	    };
	
	    XMLDocType.prototype.cdata = function(value) {
	      var child;
	      child = new XMLCData(this, value);
	      this.children.push(child);
	      return this;
	    };
	
	    XMLDocType.prototype.comment = function(value) {
	      var child;
	      child = new XMLComment(this, value);
	      this.children.push(child);
	      return this;
	    };
	
	    XMLDocType.prototype.instruction = function(target, value) {
	      var child;
	      child = new XMLProcessingInstruction(this, target, value);
	      this.children.push(child);
	      return this;
	    };
	
	    XMLDocType.prototype.root = function() {
	      return this.documentObject.root();
	    };
	
	    XMLDocType.prototype.document = function() {
	      return this.documentObject;
	    };
	
	    XMLDocType.prototype.toString = function(options, level) {
	      var child, i, indent, len, newline, offset, pretty, r, ref, ref1, ref2, ref3, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += '<!DOCTYPE ' + this.root().name;
	      if (this.pubID && this.sysID) {
	        r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';
	      } else if (this.sysID) {
	        r += ' SYSTEM "' + this.sysID + '"';
	      }
	      if (this.children.length > 0) {
	        r += ' [';
	        if (pretty) {
	          r += newline;
	        }
	        ref3 = this.children;
	        for (i = 0, len = ref3.length; i < len; i++) {
	          child = ref3[i];
	          r += child.toString(options, level + 1);
	        }
	        r += ']';
	      }
	      r += '>';
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };
	
	    XMLDocType.prototype.ele = function(name, value) {
	      return this.element(name, value);
	    };
	
	    XMLDocType.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
	      return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);
	    };
	
	    XMLDocType.prototype.ent = function(name, value) {
	      return this.entity(name, value);
	    };
	
	    XMLDocType.prototype.pent = function(name, value) {
	      return this.pEntity(name, value);
	    };
	
	    XMLDocType.prototype.not = function(name, value) {
	      return this.notation(name, value);
	    };
	
	    XMLDocType.prototype.dat = function(value) {
	      return this.cdata(value);
	    };
	
	    XMLDocType.prototype.com = function(value) {
	      return this.comment(value);
	    };
	
	    XMLDocType.prototype.ins = function(target, value) {
	      return this.instruction(target, value);
	    };
	
	    XMLDocType.prototype.up = function() {
	      return this.root();
	    };
	
	    XMLDocType.prototype.doc = function() {
	      return this.document();
	    };
	
	    return XMLDocType;
	
	  })();
	
	}).call(this);
	
	},{"./XMLCData":293,"./XMLComment":294,"./XMLDTDAttList":295,"./XMLDTDElement":296,"./XMLDTDEntity":297,"./XMLDTDNotation":298,"./XMLProcessingInstruction":303,"lodash/lang/isObject":346,"lodash/object/create":350}],301:[function(require,module,exports){
	(function() {
	  var XMLAttribute, XMLElement, XMLNode, XMLProcessingInstruction, create, every, isArray, isFunction, isObject,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;
	
	  create = require('lodash/object/create');
	
	  isObject = require('lodash/lang/isObject');
	
	  isArray = require('lodash/lang/isArray');
	
	  isFunction = require('lodash/lang/isFunction');
	
	  every = require('lodash/collection/every');
	
	  XMLNode = require('./XMLNode');
	
	  XMLAttribute = require('./XMLAttribute');
	
	  XMLProcessingInstruction = require('./XMLProcessingInstruction');
	
	  module.exports = XMLElement = (function(superClass) {
	    extend(XMLElement, superClass);
	
	    function XMLElement(parent, name, attributes) {
	      XMLElement.__super__.constructor.call(this, parent);
	      if (name == null) {
	        throw new Error("Missing element name");
	      }
	      this.name = this.stringify.eleName(name);
	      this.children = [];
	      this.instructions = [];
	      this.attributes = {};
	      if (attributes != null) {
	        this.attribute(attributes);
	      }
	    }
	
	    XMLElement.prototype.clone = function() {
	      var att, attName, clonedSelf, i, len, pi, ref, ref1;
	      clonedSelf = create(XMLElement.prototype, this);
	      if (clonedSelf.isRoot) {
	        clonedSelf.documentObject = null;
	      }
	      clonedSelf.attributes = {};
	      ref = this.attributes;
	      for (attName in ref) {
	        if (!hasProp.call(ref, attName)) continue;
	        att = ref[attName];
	        clonedSelf.attributes[attName] = att.clone();
	      }
	      clonedSelf.instructions = [];
	      ref1 = this.instructions;
	      for (i = 0, len = ref1.length; i < len; i++) {
	        pi = ref1[i];
	        clonedSelf.instructions.push(pi.clone());
	      }
	      clonedSelf.children = [];
	      this.children.forEach(function(child) {
	        var clonedChild;
	        clonedChild = child.clone();
	        clonedChild.parent = clonedSelf;
	        return clonedSelf.children.push(clonedChild);
	      });
	      return clonedSelf;
	    };
	
	    XMLElement.prototype.attribute = function(name, value) {
	      var attName, attValue;
	      if (name != null) {
	        name = name.valueOf();
	      }
	      if (isObject(name)) {
	        for (attName in name) {
	          if (!hasProp.call(name, attName)) continue;
	          attValue = name[attName];
	          this.attribute(attName, attValue);
	        }
	      } else {
	        if (isFunction(value)) {
	          value = value.apply();
	        }
	        if (!this.options.skipNullAttributes || (value != null)) {
	          this.attributes[name] = new XMLAttribute(this, name, value);
	        }
	      }
	      return this;
	    };
	
	    XMLElement.prototype.removeAttribute = function(name) {
	      var attName, i, len;
	      if (name == null) {
	        throw new Error("Missing attribute name");
	      }
	      name = name.valueOf();
	      if (isArray(name)) {
	        for (i = 0, len = name.length; i < len; i++) {
	          attName = name[i];
	          delete this.attributes[attName];
	        }
	      } else {
	        delete this.attributes[name];
	      }
	      return this;
	    };
	
	    XMLElement.prototype.instruction = function(target, value) {
	      var i, insTarget, insValue, instruction, len;
	      if (target != null) {
	        target = target.valueOf();
	      }
	      if (value != null) {
	        value = value.valueOf();
	      }
	      if (isArray(target)) {
	        for (i = 0, len = target.length; i < len; i++) {
	          insTarget = target[i];
	          this.instruction(insTarget);
	        }
	      } else if (isObject(target)) {
	        for (insTarget in target) {
	          if (!hasProp.call(target, insTarget)) continue;
	          insValue = target[insTarget];
	          this.instruction(insTarget, insValue);
	        }
	      } else {
	        if (isFunction(value)) {
	          value = value.apply();
	        }
	        instruction = new XMLProcessingInstruction(this, target, value);
	        this.instructions.push(instruction);
	      }
	      return this;
	    };
	
	    XMLElement.prototype.toString = function(options, level) {
	      var att, child, i, indent, instruction, j, len, len1, name, newline, offset, pretty, r, ref, ref1, ref2, ref3, ref4, ref5, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      ref3 = this.instructions;
	      for (i = 0, len = ref3.length; i < len; i++) {
	        instruction = ref3[i];
	        r += instruction.toString(options, level + 1);
	      }
	      if (pretty) {
	        r += space;
	      }
	      r += '<' + this.name;
	      ref4 = this.attributes;
	      for (name in ref4) {
	        if (!hasProp.call(ref4, name)) continue;
	        att = ref4[name];
	        r += att.toString(options);
	      }
	      if (this.children.length === 0 || every(this.children, function(e) {
	        return e.value === '';
	      })) {
	        r += '/>';
	        if (pretty) {
	          r += newline;
	        }
	      } else if (pretty && this.children.length === 1 && (this.children[0].value != null)) {
	        r += '>';
	        r += this.children[0].value;
	        r += '</' + this.name + '>';
	        r += newline;
	      } else {
	        r += '>';
	        if (pretty) {
	          r += newline;
	        }
	        ref5 = this.children;
	        for (j = 0, len1 = ref5.length; j < len1; j++) {
	          child = ref5[j];
	          r += child.toString(options, level + 1);
	        }
	        if (pretty) {
	          r += space;
	        }
	        r += '</' + this.name + '>';
	        if (pretty) {
	          r += newline;
	        }
	      }
	      return r;
	    };
	
	    XMLElement.prototype.att = function(name, value) {
	      return this.attribute(name, value);
	    };
	
	    XMLElement.prototype.ins = function(target, value) {
	      return this.instruction(target, value);
	    };
	
	    XMLElement.prototype.a = function(name, value) {
	      return this.attribute(name, value);
	    };
	
	    XMLElement.prototype.i = function(target, value) {
	      return this.instruction(target, value);
	    };
	
	    return XMLElement;
	
	  })(XMLNode);
	
	}).call(this);
	
	},{"./XMLAttribute":291,"./XMLNode":302,"./XMLProcessingInstruction":303,"lodash/collection/every":308,"lodash/lang/isArray":342,"lodash/lang/isFunction":344,"lodash/lang/isObject":346,"lodash/object/create":350}],302:[function(require,module,exports){
	(function() {
	  var XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLElement, XMLNode, XMLRaw, XMLText, isArray, isEmpty, isFunction, isObject,
	    hasProp = {}.hasOwnProperty;
	
	  isObject = require('lodash/lang/isObject');
	
	  isArray = require('lodash/lang/isArray');
	
	  isFunction = require('lodash/lang/isFunction');
	
	  isEmpty = require('lodash/lang/isEmpty');
	
	  XMLElement = null;
	
	  XMLCData = null;
	
	  XMLComment = null;
	
	  XMLDeclaration = null;
	
	  XMLDocType = null;
	
	  XMLRaw = null;
	
	  XMLText = null;
	
	  module.exports = XMLNode = (function() {
	    function XMLNode(parent) {
	      this.parent = parent;
	      this.options = this.parent.options;
	      this.stringify = this.parent.stringify;
	      if (XMLElement === null) {
	        XMLElement = require('./XMLElement');
	        XMLCData = require('./XMLCData');
	        XMLComment = require('./XMLComment');
	        XMLDeclaration = require('./XMLDeclaration');
	        XMLDocType = require('./XMLDocType');
	        XMLRaw = require('./XMLRaw');
	        XMLText = require('./XMLText');
	      }
	    }
	
	    XMLNode.prototype.clone = function() {
	      throw new Error("Cannot clone generic XMLNode");
	    };
	
	    XMLNode.prototype.element = function(name, attributes, text) {
	      var item, j, key, lastChild, len, ref, val;
	      lastChild = null;
	      if (attributes == null) {
	        attributes = {};
	      }
	      attributes = attributes.valueOf();
	      if (!isObject(attributes)) {
	        ref = [attributes, text], text = ref[0], attributes = ref[1];
	      }
	      if (name != null) {
	        name = name.valueOf();
	      }
	      if (isArray(name)) {
	        for (j = 0, len = name.length; j < len; j++) {
	          item = name[j];
	          lastChild = this.element(item);
	        }
	      } else if (isFunction(name)) {
	        lastChild = this.element(name.apply());
	      } else if (isObject(name)) {
	        for (key in name) {
	          if (!hasProp.call(name, key)) continue;
	          val = name[key];
	          if (isFunction(val)) {
	            val = val.apply();
	          }
	          if ((isObject(val)) && (isEmpty(val))) {
	            val = null;
	          }
	          if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {
	            lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);
	          } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && key.indexOf(this.stringify.convertPIKey) === 0) {
	            lastChild = this.instruction(key.substr(this.stringify.convertPIKey.length), val);
	          } else if (isObject(val)) {
	            if (!this.options.ignoreDecorators && this.stringify.convertListKey && key.indexOf(this.stringify.convertListKey) === 0 && isArray(val)) {
	              lastChild = this.element(val);
	            } else {
	              lastChild = this.element(key);
	              lastChild.element(val);
	            }
	          } else {
	            lastChild = this.element(key, val);
	          }
	        }
	      } else {
	        if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {
	          lastChild = this.text(text);
	        } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {
	          lastChild = this.cdata(text);
	        } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {
	          lastChild = this.comment(text);
	        } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {
	          lastChild = this.raw(text);
	        } else {
	          lastChild = this.node(name, attributes, text);
	        }
	      }
	      if (lastChild == null) {
	        throw new Error("Could not create any elements with: " + name);
	      }
	      return lastChild;
	    };
	
	    XMLNode.prototype.insertBefore = function(name, attributes, text) {
	      var child, i, removed;
	      if (this.isRoot) {
	        throw new Error("Cannot insert elements at root level");
	      }
	      i = this.parent.children.indexOf(this);
	      removed = this.parent.children.splice(i);
	      child = this.parent.element(name, attributes, text);
	      Array.prototype.push.apply(this.parent.children, removed);
	      return child;
	    };
	
	    XMLNode.prototype.insertAfter = function(name, attributes, text) {
	      var child, i, removed;
	      if (this.isRoot) {
	        throw new Error("Cannot insert elements at root level");
	      }
	      i = this.parent.children.indexOf(this);
	      removed = this.parent.children.splice(i + 1);
	      child = this.parent.element(name, attributes, text);
	      Array.prototype.push.apply(this.parent.children, removed);
	      return child;
	    };
	
	    XMLNode.prototype.remove = function() {
	      var i, ref;
	      if (this.isRoot) {
	        throw new Error("Cannot remove the root element");
	      }
	      i = this.parent.children.indexOf(this);
	      [].splice.apply(this.parent.children, [i, i - i + 1].concat(ref = [])), ref;
	      return this.parent;
	    };
	
	    XMLNode.prototype.node = function(name, attributes, text) {
	      var child, ref;
	      if (name != null) {
	        name = name.valueOf();
	      }
	      if (attributes == null) {
	        attributes = {};
	      }
	      attributes = attributes.valueOf();
	      if (!isObject(attributes)) {
	        ref = [attributes, text], text = ref[0], attributes = ref[1];
	      }
	      child = new XMLElement(this, name, attributes);
	      if (text != null) {
	        child.text(text);
	      }
	      this.children.push(child);
	      return child;
	    };
	
	    XMLNode.prototype.text = function(value) {
	      var child;
	      child = new XMLText(this, value);
	      this.children.push(child);
	      return this;
	    };
	
	    XMLNode.prototype.cdata = function(value) {
	      var child;
	      child = new XMLCData(this, value);
	      this.children.push(child);
	      return this;
	    };
	
	    XMLNode.prototype.comment = function(value) {
	      var child;
	      child = new XMLComment(this, value);
	      this.children.push(child);
	      return this;
	    };
	
	    XMLNode.prototype.raw = function(value) {
	      var child;
	      child = new XMLRaw(this, value);
	      this.children.push(child);
	      return this;
	    };
	
	    XMLNode.prototype.declaration = function(version, encoding, standalone) {
	      var doc, xmldec;
	      doc = this.document();
	      xmldec = new XMLDeclaration(doc, version, encoding, standalone);
	      doc.xmldec = xmldec;
	      return doc.root();
	    };
	
	    XMLNode.prototype.doctype = function(pubID, sysID) {
	      var doc, doctype;
	      doc = this.document();
	      doctype = new XMLDocType(doc, pubID, sysID);
	      doc.doctype = doctype;
	      return doctype;
	    };
	
	    XMLNode.prototype.up = function() {
	      if (this.isRoot) {
	        throw new Error("The root node has no parent. Use doc() if you need to get the document object.");
	      }
	      return this.parent;
	    };
	
	    XMLNode.prototype.root = function() {
	      var child;
	      if (this.isRoot) {
	        return this;
	      }
	      child = this.parent;
	      while (!child.isRoot) {
	        child = child.parent;
	      }
	      return child;
	    };
	
	    XMLNode.prototype.document = function() {
	      return this.root().documentObject;
	    };
	
	    XMLNode.prototype.end = function(options) {
	      return this.document().toString(options);
	    };
	
	    XMLNode.prototype.prev = function() {
	      var i;
	      if (this.isRoot) {
	        throw new Error("Root node has no siblings");
	      }
	      i = this.parent.children.indexOf(this);
	      if (i < 1) {
	        throw new Error("Already at the first node");
	      }
	      return this.parent.children[i - 1];
	    };
	
	    XMLNode.prototype.next = function() {
	      var i;
	      if (this.isRoot) {
	        throw new Error("Root node has no siblings");
	      }
	      i = this.parent.children.indexOf(this);
	      if (i === -1 || i === this.parent.children.length - 1) {
	        throw new Error("Already at the last node");
	      }
	      return this.parent.children[i + 1];
	    };
	
	    XMLNode.prototype.importXMLBuilder = function(xmlbuilder) {
	      var clonedRoot;
	      clonedRoot = xmlbuilder.root().clone();
	      clonedRoot.parent = this;
	      clonedRoot.isRoot = false;
	      this.children.push(clonedRoot);
	      return this;
	    };
	
	    XMLNode.prototype.ele = function(name, attributes, text) {
	      return this.element(name, attributes, text);
	    };
	
	    XMLNode.prototype.nod = function(name, attributes, text) {
	      return this.node(name, attributes, text);
	    };
	
	    XMLNode.prototype.txt = function(value) {
	      return this.text(value);
	    };
	
	    XMLNode.prototype.dat = function(value) {
	      return this.cdata(value);
	    };
	
	    XMLNode.prototype.com = function(value) {
	      return this.comment(value);
	    };
	
	    XMLNode.prototype.doc = function() {
	      return this.document();
	    };
	
	    XMLNode.prototype.dec = function(version, encoding, standalone) {
	      return this.declaration(version, encoding, standalone);
	    };
	
	    XMLNode.prototype.dtd = function(pubID, sysID) {
	      return this.doctype(pubID, sysID);
	    };
	
	    XMLNode.prototype.e = function(name, attributes, text) {
	      return this.element(name, attributes, text);
	    };
	
	    XMLNode.prototype.n = function(name, attributes, text) {
	      return this.node(name, attributes, text);
	    };
	
	    XMLNode.prototype.t = function(value) {
	      return this.text(value);
	    };
	
	    XMLNode.prototype.d = function(value) {
	      return this.cdata(value);
	    };
	
	    XMLNode.prototype.c = function(value) {
	      return this.comment(value);
	    };
	
	    XMLNode.prototype.r = function(value) {
	      return this.raw(value);
	    };
	
	    XMLNode.prototype.u = function() {
	      return this.up();
	    };
	
	    return XMLNode;
	
	  })();
	
	}).call(this);
	
	},{"./XMLCData":293,"./XMLComment":294,"./XMLDeclaration":299,"./XMLDocType":300,"./XMLElement":301,"./XMLRaw":304,"./XMLText":306,"lodash/lang/isArray":342,"lodash/lang/isEmpty":343,"lodash/lang/isFunction":344,"lodash/lang/isObject":346}],303:[function(require,module,exports){
	(function() {
	  var XMLProcessingInstruction, create;
	
	  create = require('lodash/object/create');
	
	  module.exports = XMLProcessingInstruction = (function() {
	    function XMLProcessingInstruction(parent, target, value) {
	      this.stringify = parent.stringify;
	      if (target == null) {
	        throw new Error("Missing instruction target");
	      }
	      this.target = this.stringify.insTarget(target);
	      if (value) {
	        this.value = this.stringify.insValue(value);
	      }
	    }
	
	    XMLProcessingInstruction.prototype.clone = function() {
	      return create(XMLProcessingInstruction.prototype, this);
	    };
	
	    XMLProcessingInstruction.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += '<?';
	      r += this.target;
	      if (this.value) {
	        r += ' ' + this.value;
	      }
	      r += '?>';
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };
	
	    return XMLProcessingInstruction;
	
	  })();
	
	}).call(this);
	
	},{"lodash/object/create":350}],304:[function(require,module,exports){
	(function() {
	  var XMLNode, XMLRaw, create,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;
	
	  create = require('lodash/object/create');
	
	  XMLNode = require('./XMLNode');
	
	  module.exports = XMLRaw = (function(superClass) {
	    extend(XMLRaw, superClass);
	
	    function XMLRaw(parent, text) {
	      XMLRaw.__super__.constructor.call(this, parent);
	      if (text == null) {
	        throw new Error("Missing raw text");
	      }
	      this.value = this.stringify.raw(text);
	    }
	
	    XMLRaw.prototype.clone = function() {
	      return create(XMLRaw.prototype, this);
	    };
	
	    XMLRaw.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += this.value;
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };
	
	    return XMLRaw;
	
	  })(XMLNode);
	
	}).call(this);
	
	},{"./XMLNode":302,"lodash/object/create":350}],305:[function(require,module,exports){
	(function() {
	  var XMLStringifier,
	    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    hasProp = {}.hasOwnProperty;
	
	  module.exports = XMLStringifier = (function() {
	    function XMLStringifier(options) {
	      this.assertLegalChar = bind(this.assertLegalChar, this);
	      var key, ref, value;
	      this.allowSurrogateChars = options != null ? options.allowSurrogateChars : void 0;
	      ref = (options != null ? options.stringify : void 0) || {};
	      for (key in ref) {
	        if (!hasProp.call(ref, key)) continue;
	        value = ref[key];
	        this[key] = value;
	      }
	    }
	
	    XMLStringifier.prototype.eleName = function(val) {
	      val = '' + val || '';
	      return this.assertLegalChar(val);
	    };
	
	    XMLStringifier.prototype.eleText = function(val) {
	      val = '' + val || '';
	      return this.assertLegalChar(this.elEscape(val));
	    };
	
	    XMLStringifier.prototype.cdata = function(val) {
	      val = '' + val || '';
	      if (val.match(/]]>/)) {
	        throw new Error("Invalid CDATA text: " + val);
	      }
	      return this.assertLegalChar(val);
	    };
	
	    XMLStringifier.prototype.comment = function(val) {
	      val = '' + val || '';
	      if (val.match(/--/)) {
	        throw new Error("Comment text cannot contain double-hypen: " + val);
	      }
	      return this.assertLegalChar(val);
	    };
	
	    XMLStringifier.prototype.raw = function(val) {
	      return '' + val || '';
	    };
	
	    XMLStringifier.prototype.attName = function(val) {
	      return '' + val || '';
	    };
	
	    XMLStringifier.prototype.attValue = function(val) {
	      val = '' + val || '';
	      return this.attEscape(val);
	    };
	
	    XMLStringifier.prototype.insTarget = function(val) {
	      return '' + val || '';
	    };
	
	    XMLStringifier.prototype.insValue = function(val) {
	      val = '' + val || '';
	      if (val.match(/\?>/)) {
	        throw new Error("Invalid processing instruction value: " + val);
	      }
	      return val;
	    };
	
	    XMLStringifier.prototype.xmlVersion = function(val) {
	      val = '' + val || '';
	      if (!val.match(/1\.[0-9]+/)) {
	        throw new Error("Invalid version number: " + val);
	      }
	      return val;
	    };
	
	    XMLStringifier.prototype.xmlEncoding = function(val) {
	      val = '' + val || '';
	      if (!val.match(/[A-Za-z](?:[A-Za-z0-9._-]|-)*/)) {
	        throw new Error("Invalid encoding: " + val);
	      }
	      return val;
	    };
	
	    XMLStringifier.prototype.xmlStandalone = function(val) {
	      if (val) {
	        return "yes";
	      } else {
	        return "no";
	      }
	    };
	
	    XMLStringifier.prototype.dtdPubID = function(val) {
	      return '' + val || '';
	    };
	
	    XMLStringifier.prototype.dtdSysID = function(val) {
	      return '' + val || '';
	    };
	
	    XMLStringifier.prototype.dtdElementValue = function(val) {
	      return '' + val || '';
	    };
	
	    XMLStringifier.prototype.dtdAttType = function(val) {
	      return '' + val || '';
	    };
	
	    XMLStringifier.prototype.dtdAttDefault = function(val) {
	      if (val != null) {
	        return '' + val || '';
	      } else {
	        return val;
	      }
	    };
	
	    XMLStringifier.prototype.dtdEntityValue = function(val) {
	      return '' + val || '';
	    };
	
	    XMLStringifier.prototype.dtdNData = function(val) {
	      return '' + val || '';
	    };
	
	    XMLStringifier.prototype.convertAttKey = '@';
	
	    XMLStringifier.prototype.convertPIKey = '?';
	
	    XMLStringifier.prototype.convertTextKey = '#text';
	
	    XMLStringifier.prototype.convertCDataKey = '#cdata';
	
	    XMLStringifier.prototype.convertCommentKey = '#comment';
	
	    XMLStringifier.prototype.convertRawKey = '#raw';
	
	    XMLStringifier.prototype.convertListKey = '#list';
	
	    XMLStringifier.prototype.assertLegalChar = function(str) {
	      var chars, chr;
	      if (this.allowSurrogateChars) {
	        chars = /[\u0000-\u0008\u000B-\u000C\u000E-\u001F\uFFFE-\uFFFF]/;
	      } else {
	        chars = /[\u0000-\u0008\u000B-\u000C\u000E-\u001F\uD800-\uDFFF\uFFFE-\uFFFF]/;
	      }
	      chr = str.match(chars);
	      if (chr) {
	        throw new Error("Invalid character (" + chr + ") in string: " + str + " at index " + chr.index);
	      }
	      return str;
	    };
	
	    XMLStringifier.prototype.elEscape = function(str) {
	      return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\r/g, '&#xD;');
	    };
	
	    XMLStringifier.prototype.attEscape = function(str) {
	      return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/"/g, '&quot;').replace(/\t/g, '&#x9;').replace(/\n/g, '&#xA;').replace(/\r/g, '&#xD;');
	    };
	
	    return XMLStringifier;
	
	  })();
	
	}).call(this);
	
	},{}],306:[function(require,module,exports){
	(function() {
	  var XMLNode, XMLText, create,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;
	
	  create = require('lodash/object/create');
	
	  XMLNode = require('./XMLNode');
	
	  module.exports = XMLText = (function(superClass) {
	    extend(XMLText, superClass);
	
	    function XMLText(parent, text) {
	      XMLText.__super__.constructor.call(this, parent);
	      if (text == null) {
	        throw new Error("Missing element text");
	      }
	      this.value = this.stringify.eleText(text);
	    }
	
	    XMLText.prototype.clone = function() {
	      return create(XMLText.prototype, this);
	    };
	
	    XMLText.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += this.value;
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };
	
	    return XMLText;
	
	  })(XMLNode);
	
	}).call(this);
	
	},{"./XMLNode":302,"lodash/object/create":350}],307:[function(require,module,exports){
	(function() {
	  var XMLBuilder, assign;
	
	  assign = require('lodash/object/assign');
	
	  XMLBuilder = require('./XMLBuilder');
	
	  module.exports.create = function(name, xmldec, doctype, options) {
	    options = assign({}, xmldec, doctype, options);
	    return new XMLBuilder(name, options).root();
	  };
	
	}).call(this);
	
	},{"./XMLBuilder":292,"lodash/object/assign":349}],308:[function(require,module,exports){
	var arrayEvery = require('../internal/arrayEvery'),
	    baseCallback = require('../internal/baseCallback'),
	    baseEvery = require('../internal/baseEvery'),
	    isArray = require('../lang/isArray');
	
	
	function every(collection, predicate, thisArg) {
	  var func = isArray(collection) ? arrayEvery : baseEvery;
	  if (typeof predicate != 'function' || typeof thisArg != 'undefined') {
	    predicate = baseCallback(predicate, thisArg, 3);
	  }
	  return func(collection, predicate);
	}
	
	module.exports = every;
	
	},{"../internal/arrayEvery":309,"../internal/baseCallback":311,"../internal/baseEvery":315,"../lang/isArray":342}],309:[function(require,module,exports){
	
	function arrayEvery(array, predicate) {
	  var index = -1,
	      length = array.length;
	
	  while (++index < length) {
	    if (!predicate(array[index], index, array)) {
	      return false;
	    }
	  }
	  return true;
	}
	
	module.exports = arrayEvery;
	
	},{}],310:[function(require,module,exports){
	var baseCopy = require('./baseCopy'),
	    keys = require('../object/keys');
	
	
	function baseAssign(object, source, customizer) {
	  var props = keys(source);
	  if (!customizer) {
	    return baseCopy(source, object, props);
	  }
	  var index = -1,
	      length = props.length;
	
	  while (++index < length) {
	    var key = props[index],
	        value = object[key],
	        result = customizer(value, source[key], key, object, source);
	
	    if ((result === result ? (result !== value) : (value === value)) ||
	        (typeof value == 'undefined' && !(key in object))) {
	      object[key] = result;
	    }
	  }
	  return object;
	}
	
	module.exports = baseAssign;
	
	},{"../object/keys":351,"./baseCopy":312}],311:[function(require,module,exports){
	var baseMatches = require('./baseMatches'),
	    baseMatchesProperty = require('./baseMatchesProperty'),
	    baseProperty = require('./baseProperty'),
	    bindCallback = require('./bindCallback'),
	    identity = require('../utility/identity'),
	    isBindable = require('./isBindable');
	
	
	function baseCallback(func, thisArg, argCount) {
	  var type = typeof func;
	  if (type == 'function') {
	    return (typeof thisArg != 'undefined' && isBindable(func))
	      ? bindCallback(func, thisArg, argCount)
	      : func;
	  }
	  if (func == null) {
	    return identity;
	  }
	  if (type == 'object') {
	    return baseMatches(func);
	  }
	  return typeof thisArg == 'undefined'
	    ? baseProperty(func + '')
	    : baseMatchesProperty(func + '', thisArg);
	}
	
	module.exports = baseCallback;
	
	},{"../utility/identity":355,"./baseMatches":322,"./baseMatchesProperty":323,"./baseProperty":324,"./bindCallback":327,"./isBindable":332}],312:[function(require,module,exports){
	
	function baseCopy(source, object, props) {
	  if (!props) {
	    props = object;
	    object = {};
	  }
	  var index = -1,
	      length = props.length;
	
	  while (++index < length) {
	    var key = props[index];
	    object[key] = source[key];
	  }
	  return object;
	}
	
	module.exports = baseCopy;
	
	},{}],313:[function(require,module,exports){
	(function (global){
	var isObject = require('../lang/isObject');
	
	
	var baseCreate = (function() {
	  function Object() {}
	  return function(prototype) {
	    if (isObject(prototype)) {
	      Object.prototype = prototype;
	      var result = new Object;
	      Object.prototype = null;
	    }
	    return result || global.Object();
	  };
	}());
	
	module.exports = baseCreate;
	
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"../lang/isObject":346}],314:[function(require,module,exports){
	var baseForOwn = require('./baseForOwn'),
	    isLength = require('./isLength'),
	    toObject = require('./toObject');
	
	
	function baseEach(collection, iteratee) {
	  var length = collection ? collection.length : 0;
	  if (!isLength(length)) {
	    return baseForOwn(collection, iteratee);
	  }
	  var index = -1,
	      iterable = toObject(collection);
	
	  while (++index < length) {
	    if (iteratee(iterable[index], index, iterable) === false) {
	      break;
	    }
	  }
	  return collection;
	}
	
	module.exports = baseEach;
	
	},{"./baseForOwn":317,"./isLength":335,"./toObject":340}],315:[function(require,module,exports){
	var baseEach = require('./baseEach');
	
	
	function baseEvery(collection, predicate) {
	  var result = true;
	  baseEach(collection, function(value, index, collection) {
	    result = !!predicate(value, index, collection);
	    return result;
	  });
	  return result;
	}
	
	module.exports = baseEvery;
	
	},{"./baseEach":314}],316:[function(require,module,exports){
	var toObject = require('./toObject');
	
	
	function baseFor(object, iteratee, keysFunc) {
	  var index = -1,
	      iterable = toObject(object),
	      props = keysFunc(object),
	      length = props.length;
	
	  while (++index < length) {
	    var key = props[index];
	    if (iteratee(iterable[key], key, iterable) === false) {
	      break;
	    }
	  }
	  return object;
	}
	
	module.exports = baseFor;
	
	},{"./toObject":340}],317:[function(require,module,exports){
	var baseFor = require('./baseFor'),
	    keys = require('../object/keys');
	
	
	function baseForOwn(object, iteratee) {
	  return baseFor(object, iteratee, keys);
	}
	
	module.exports = baseForOwn;
	
	},{"../object/keys":351,"./baseFor":316}],318:[function(require,module,exports){
	var baseIsEqualDeep = require('./baseIsEqualDeep');
	
	
	function baseIsEqual(value, other, customizer, isWhere, stackA, stackB) {
	  if (value === other) {
	    return value !== 0 || (1 / value == 1 / other);
	  }
	  var valType = typeof value,
	      othType = typeof other;
	
	  if ((valType != 'function' && valType != 'object' && othType != 'function' && othType != 'object') ||
	      value == null || other == null) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, baseIsEqual, customizer, isWhere, stackA, stackB);
	}
	
	module.exports = baseIsEqual;
	
	},{"./baseIsEqualDeep":319}],319:[function(require,module,exports){
	var equalArrays = require('./equalArrays'),
	    equalByTag = require('./equalByTag'),
	    equalObjects = require('./equalObjects'),
	    isArray = require('../lang/isArray'),
	    isTypedArray = require('../lang/isTypedArray');
	
	
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    objectTag = '[object Object]';
	
	
	var objectProto = Object.prototype;
	
	
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	
	var objToString = objectProto.toString;
	
	
	function baseIsEqualDeep(object, other, equalFunc, customizer, isWhere, stackA, stackB) {
	  var objIsArr = isArray(object),
	      othIsArr = isArray(other),
	      objTag = arrayTag,
	      othTag = arrayTag;
	
	  if (!objIsArr) {
	    objTag = objToString.call(object);
	    if (objTag == argsTag) {
	      objTag = objectTag;
	    } else if (objTag != objectTag) {
	      objIsArr = isTypedArray(object);
	    }
	  }
	  if (!othIsArr) {
	    othTag = objToString.call(other);
	    if (othTag == argsTag) {
	      othTag = objectTag;
	    } else if (othTag != objectTag) {
	      othIsArr = isTypedArray(other);
	    }
	  }
	  var objIsObj = objTag == objectTag,
	      othIsObj = othTag == objectTag,
	      isSameTag = objTag == othTag;
	
	  if (isSameTag && !(objIsArr || objIsObj)) {
	    return equalByTag(object, other, objTag);
	  }
	  var valWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	      othWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
	
	  if (valWrapped || othWrapped) {
	    return equalFunc(valWrapped ? object.value() : object, othWrapped ? other.value() : other, customizer, isWhere, stackA, stackB);
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  stackA || (stackA = []);
	  stackB || (stackB = []);
	
	  var length = stackA.length;
	  while (length--) {
	    if (stackA[length] == object) {
	      return stackB[length] == other;
	    }
	  }
	  stackA.push(object);
	  stackB.push(other);
	
	  var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isWhere, stackA, stackB);
	
	  stackA.pop();
	  stackB.pop();
	
	  return result;
	}
	
	module.exports = baseIsEqualDeep;
	
	},{"../lang/isArray":342,"../lang/isTypedArray":348,"./equalArrays":329,"./equalByTag":330,"./equalObjects":331}],320:[function(require,module,exports){
	
	function baseIsFunction(value) {
	  return typeof value == 'function' || false;
	}
	
	module.exports = baseIsFunction;
	
	},{}],321:[function(require,module,exports){
	var baseIsEqual = require('./baseIsEqual');
	
	
	var objectProto = Object.prototype;
	
	
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	
	function baseIsMatch(object, props, values, strictCompareFlags, customizer) {
	  var length = props.length;
	  if (object == null) {
	    return !length;
	  }
	  var index = -1,
	      noCustomizer = !customizer;
	
	  while (++index < length) {
	    if ((noCustomizer && strictCompareFlags[index])
	          ? values[index] !== object[props[index]]
	          : !hasOwnProperty.call(object, props[index])
	        ) {
	      return false;
	    }
	  }
	  index = -1;
	  while (++index < length) {
	    var key = props[index];
	    if (noCustomizer && strictCompareFlags[index]) {
	      var result = hasOwnProperty.call(object, key);
	    } else {
	      var objValue = object[key],
	          srcValue = values[index];
	
	      result = customizer ? customizer(objValue, srcValue, key) : undefined;
	      if (typeof result == 'undefined') {
	        result = baseIsEqual(srcValue, objValue, customizer, true);
	      }
	    }
	    if (!result) {
	      return false;
	    }
	  }
	  return true;
	}
	
	module.exports = baseIsMatch;
	
	},{"./baseIsEqual":318}],322:[function(require,module,exports){
	var baseIsMatch = require('./baseIsMatch'),
	    isStrictComparable = require('./isStrictComparable'),
	    keys = require('../object/keys');
	
	
	var objectProto = Object.prototype;
	
	
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	
	function baseMatches(source) {
	  var props = keys(source),
	      length = props.length;
	
	  if (length == 1) {
	    var key = props[0],
	        value = source[key];
	
	    if (isStrictComparable(value)) {
	      return function(object) {
	        return object != null && object[key] === value && hasOwnProperty.call(object, key);
	      };
	    }
	  }
	  var values = Array(length),
	      strictCompareFlags = Array(length);
	
	  while (length--) {
	    value = source[props[length]];
	    values[length] = value;
	    strictCompareFlags[length] = isStrictComparable(value);
	  }
	  return function(object) {
	    return baseIsMatch(object, props, values, strictCompareFlags);
	  };
	}
	
	module.exports = baseMatches;
	
	},{"../object/keys":351,"./baseIsMatch":321,"./isStrictComparable":337}],323:[function(require,module,exports){
	var baseIsEqual = require('./baseIsEqual'),
	    isStrictComparable = require('./isStrictComparable');
	
	
	function baseMatchesProperty(key, value) {
	  if (isStrictComparable(value)) {
	    return function(object) {
	      return object != null && object[key] === value;
	    };
	  }
	  return function(object) {
	    return object != null && baseIsEqual(value, object[key], null, true);
	  };
	}
	
	module.exports = baseMatchesProperty;
	
	},{"./baseIsEqual":318,"./isStrictComparable":337}],324:[function(require,module,exports){
	
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}
	
	module.exports = baseProperty;
	
	},{}],325:[function(require,module,exports){
	var identity = require('../utility/identity'),
	    metaMap = require('./metaMap');
	
	
	var baseSetData = !metaMap ? identity : function(func, data) {
	  metaMap.set(func, data);
	  return func;
	};
	
	module.exports = baseSetData;
	
	},{"../utility/identity":355,"./metaMap":338}],326:[function(require,module,exports){
	
	function baseToString(value) {
	  if (typeof value == 'string') {
	    return value;
	  }
	  return value == null ? '' : (value + '');
	}
	
	module.exports = baseToString;
	
	},{}],327:[function(require,module,exports){
	var identity = require('../utility/identity');
	
	
	function bindCallback(func, thisArg, argCount) {
	  if (typeof func != 'function') {
	    return identity;
	  }
	  if (typeof thisArg == 'undefined') {
	    return func;
	  }
	  switch (argCount) {
	    case 1: return function(value) {
	      return func.call(thisArg, value);
	    };
	    case 3: return function(value, index, collection) {
	      return func.call(thisArg, value, index, collection);
	    };
	    case 4: return function(accumulator, value, index, collection) {
	      return func.call(thisArg, accumulator, value, index, collection);
	    };
	    case 5: return function(value, other, key, object, source) {
	      return func.call(thisArg, value, other, key, object, source);
	    };
	  }
	  return function() {
	    return func.apply(thisArg, arguments);
	  };
	}
	
	module.exports = bindCallback;
	
	},{"../utility/identity":355}],328:[function(require,module,exports){
	var bindCallback = require('./bindCallback'),
	    isIterateeCall = require('./isIterateeCall');
	
	
	function createAssigner(assigner) {
	  return function() {
	    var args = arguments,
	        length = args.length,
	        object = args[0];
	
	    if (length < 2 || object == null) {
	      return object;
	    }
	    var customizer = args[length - 2],
	        thisArg = args[length - 1],
	        guard = args[3];
	
	    if (length > 3 && typeof customizer == 'function') {
	      customizer = bindCallback(customizer, thisArg, 5);
	      length -= 2;
	    } else {
	      customizer = (length > 2 && typeof thisArg == 'function') ? thisArg : null;
	      length -= (customizer ? 1 : 0);
	    }
	    if (guard && isIterateeCall(args[1], args[2], guard)) {
	      customizer = length == 3 ? null : customizer;
	      length = 2;
	    }
	    var index = 0;
	    while (++index < length) {
	      var source = args[index];
	      if (source) {
	        assigner(object, source, customizer);
	      }
	    }
	    return object;
	  };
	}
	
	module.exports = createAssigner;
	
	},{"./bindCallback":327,"./isIterateeCall":334}],329:[function(require,module,exports){
	
	function equalArrays(array, other, equalFunc, customizer, isWhere, stackA, stackB) {
	  var index = -1,
	      arrLength = array.length,
	      othLength = other.length,
	      result = true;
	
	  if (arrLength != othLength && !(isWhere && othLength > arrLength)) {
	    return false;
	  }
	  while (result && ++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index];
	
	    result = undefined;
	    if (customizer) {
	      result = isWhere
	        ? customizer(othValue, arrValue, index)
	        : customizer(arrValue, othValue, index);
	    }
	    if (typeof result == 'undefined') {
	      if (isWhere) {
	        var othIndex = othLength;
	        while (othIndex--) {
	          othValue = other[othIndex];
	          result = (arrValue && arrValue === othValue) || equalFunc(arrValue, othValue, customizer, isWhere, stackA, stackB);
	          if (result) {
	            break;
	          }
	        }
	      } else {
	        result = (arrValue && arrValue === othValue) || equalFunc(arrValue, othValue, customizer, isWhere, stackA, stackB);
	      }
	    }
	  }
	  return !!result;
	}
	
	module.exports = equalArrays;
	
	},{}],330:[function(require,module,exports){
	
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    stringTag = '[object String]';
	
	
	function equalByTag(object, other, tag) {
	  switch (tag) {
	    case boolTag:
	    case dateTag:
	      return +object == +other;
	
	    case errorTag:
	      return object.name == other.name && object.message == other.message;
	
	    case numberTag:
	      return (object != +object)
	        ? other != +other
	        : (object == 0 ? ((1 / object) == (1 / other)) : object == +other);
	
	    case regexpTag:
	    case stringTag:
	      return object == (other + '');
	  }
	  return false;
	}
	
	module.exports = equalByTag;
	
	},{}],331:[function(require,module,exports){
	var keys = require('../object/keys');
	
	
	var objectProto = Object.prototype;
	
	
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	
	function equalObjects(object, other, equalFunc, customizer, isWhere, stackA, stackB) {
	  var objProps = keys(object),
	      objLength = objProps.length,
	      othProps = keys(other),
	      othLength = othProps.length;
	
	  if (objLength != othLength && !isWhere) {
	    return false;
	  }
	  var hasCtor,
	      index = -1;
	
	  while (++index < objLength) {
	    var key = objProps[index],
	        result = hasOwnProperty.call(other, key);
	
	    if (result) {
	      var objValue = object[key],
	          othValue = other[key];
	
	      result = undefined;
	      if (customizer) {
	        result = isWhere
	          ? customizer(othValue, objValue, key)
	          : customizer(objValue, othValue, key);
	      }
	      if (typeof result == 'undefined') {
	        result = (objValue && objValue === othValue) || equalFunc(objValue, othValue, customizer, isWhere, stackA, stackB);
	      }
	    }
	    if (!result) {
	      return false;
	    }
	    hasCtor || (hasCtor = key == 'constructor');
	  }
	  if (!hasCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;
	
	    if (objCtor != othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      return false;
	    }
	  }
	  return true;
	}
	
	module.exports = equalObjects;
	
	},{"../object/keys":351}],332:[function(require,module,exports){
	var baseSetData = require('./baseSetData'),
	    isNative = require('../lang/isNative'),
	    support = require('../support');
	
	
	var reFuncName = /^\s*function[ \n\r\t]+\w/;
	
	
	var reThis = /\bthis\b/;
	
	
	var fnToString = Function.prototype.toString;
	
	
	function isBindable(func) {
	  var result = !(support.funcNames ? func.name : support.funcDecomp);
	
	  if (!result) {
	    var source = fnToString.call(func);
	    if (!support.funcNames) {
	      result = !reFuncName.test(source);
	    }
	    if (!result) {
	      result = reThis.test(source) || isNative(func);
	      baseSetData(func, result);
	    }
	  }
	  return result;
	}
	
	module.exports = isBindable;
	
	},{"../lang/isNative":345,"../support":354,"./baseSetData":325}],333:[function(require,module,exports){
	
	var MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;
	
	
	function isIndex(value, length) {
	  value = +value;
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return value > -1 && value % 1 == 0 && value < length;
	}
	
	module.exports = isIndex;
	
	},{}],334:[function(require,module,exports){
	var isIndex = require('./isIndex'),
	    isLength = require('./isLength'),
	    isObject = require('../lang/isObject');
	
	
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number') {
	    var length = object.length,
	        prereq = isLength(length) && isIndex(index, length);
	  } else {
	    prereq = type == 'string' && index in object;
	  }
	  if (prereq) {
	    var other = object[index];
	    return value === value ? (value === other) : (other !== other);
	  }
	  return false;
	}
	
	module.exports = isIterateeCall;
	
	},{"../lang/isObject":346,"./isIndex":333,"./isLength":335}],335:[function(require,module,exports){
	
	var MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;
	
	
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}
	
	module.exports = isLength;
	
	},{}],336:[function(require,module,exports){
	
	function isObjectLike(value) {
	  return (value && typeof value == 'object') || false;
	}
	
	module.exports = isObjectLike;
	
	},{}],337:[function(require,module,exports){
	var isObject = require('../lang/isObject');
	
	
	function isStrictComparable(value) {
	  return value === value && (value === 0 ? ((1 / value) > 0) : !isObject(value));
	}
	
	module.exports = isStrictComparable;
	
	},{"../lang/isObject":346}],338:[function(require,module,exports){
	(function (global){
	var isNative = require('../lang/isNative');
	
	
	var WeakMap = isNative(WeakMap = global.WeakMap) && WeakMap;
	
	
	var metaMap = WeakMap && new WeakMap;
	
	module.exports = metaMap;
	
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"../lang/isNative":345}],339:[function(require,module,exports){
	var isArguments = require('../lang/isArguments'),
	    isArray = require('../lang/isArray'),
	    isIndex = require('./isIndex'),
	    isLength = require('./isLength'),
	    keysIn = require('../object/keysIn'),
	    support = require('../support');
	
	
	var objectProto = Object.prototype;
	
	
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	
	function shimKeys(object) {
	  var props = keysIn(object),
	      propsLength = props.length,
	      length = propsLength && object.length;
	
	  var allowIndexes = length && isLength(length) &&
	    (isArray(object) || (support.nonEnumArgs && isArguments(object)));
	
	  var index = -1,
	      result = [];
	
	  while (++index < propsLength) {
	    var key = props[index];
	    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	      result.push(key);
	    }
	  }
	  return result;
	}
	
	module.exports = shimKeys;
	
	},{"../lang/isArguments":341,"../lang/isArray":342,"../object/keysIn":352,"../support":354,"./isIndex":333,"./isLength":335}],340:[function(require,module,exports){
	var isObject = require('../lang/isObject');
	
	
	function toObject(value) {
	  return isObject(value) ? value : Object(value);
	}
	
	module.exports = toObject;
	
	},{"../lang/isObject":346}],341:[function(require,module,exports){
	var isLength = require('../internal/isLength'),
	    isObjectLike = require('../internal/isObjectLike');
	
	
	var argsTag = '[object Arguments]';
	
	
	var objectProto = Object.prototype;
	
	
	var objToString = objectProto.toString;
	
	
	function isArguments(value) {
	  var length = isObjectLike(value) ? value.length : undefined;
	  return (isLength(length) && objToString.call(value) == argsTag) || false;
	}
	
	module.exports = isArguments;
	
	},{"../internal/isLength":335,"../internal/isObjectLike":336}],342:[function(require,module,exports){
	var isLength = require('../internal/isLength'),
	    isNative = require('./isNative'),
	    isObjectLike = require('../internal/isObjectLike');
	
	
	var arrayTag = '[object Array]';
	
	
	var objectProto = Object.prototype;
	
	
	var objToString = objectProto.toString;
	
	
	var nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray;
	
	
	var isArray = nativeIsArray || function(value) {
	  return (isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag) || false;
	};
	
	module.exports = isArray;
	
	},{"../internal/isLength":335,"../internal/isObjectLike":336,"./isNative":345}],343:[function(require,module,exports){
	var isArguments = require('./isArguments'),
	    isArray = require('./isArray'),
	    isFunction = require('./isFunction'),
	    isLength = require('../internal/isLength'),
	    isObjectLike = require('../internal/isObjectLike'),
	    isString = require('./isString'),
	    keys = require('../object/keys');
	
	
	function isEmpty(value) {
	  if (value == null) {
	    return true;
	  }
	  var length = value.length;
	  if (isLength(length) && (isArray(value) || isString(value) || isArguments(value) ||
	      (isObjectLike(value) && isFunction(value.splice)))) {
	    return !length;
	  }
	  return !keys(value).length;
	}
	
	module.exports = isEmpty;
	
	},{"../internal/isLength":335,"../internal/isObjectLike":336,"../object/keys":351,"./isArguments":341,"./isArray":342,"./isFunction":344,"./isString":347}],344:[function(require,module,exports){
	(function (global){
	var baseIsFunction = require('../internal/baseIsFunction'),
	    isNative = require('./isNative');
	
	
	var funcTag = '[object Function]';
	
	
	var objectProto = Object.prototype;
	
	
	var objToString = objectProto.toString;
	
	
	var Uint8Array = isNative(Uint8Array = global.Uint8Array) && Uint8Array;
	
	
	var isFunction = !(baseIsFunction(/x/) || (Uint8Array && !baseIsFunction(Uint8Array))) ? baseIsFunction : function(value) {
	  return objToString.call(value) == funcTag;
	};
	
	module.exports = isFunction;
	
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"../internal/baseIsFunction":320,"./isNative":345}],345:[function(require,module,exports){
	var escapeRegExp = require('../string/escapeRegExp'),
	    isObjectLike = require('../internal/isObjectLike');
	
	
	var funcTag = '[object Function]';
	
	
	var reHostCtor = /^\[object .+?Constructor\]$/;
	
	
	var objectProto = Object.prototype;
	
	
	var fnToString = Function.prototype.toString;
	
	
	var objToString = objectProto.toString;
	
	
	var reNative = RegExp('^' +
	  escapeRegExp(objToString)
	  .replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);
	
	
	function isNative(value) {
	  if (value == null) {
	    return false;
	  }
	  if (objToString.call(value) == funcTag) {
	    return reNative.test(fnToString.call(value));
	  }
	  return (isObjectLike(value) && reHostCtor.test(value)) || false;
	}
	
	module.exports = isNative;
	
	},{"../internal/isObjectLike":336,"../string/escapeRegExp":353}],346:[function(require,module,exports){
	
	function isObject(value) {
	  var type = typeof value;
	  return type == 'function' || (value && type == 'object') || false;
	}
	
	module.exports = isObject;
	
	},{}],347:[function(require,module,exports){
	var isObjectLike = require('../internal/isObjectLike');
	
	
	var stringTag = '[object String]';
	
	
	var objectProto = Object.prototype;
	
	
	var objToString = objectProto.toString;
	
	
	function isString(value) {
	  return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag) || false;
	}
	
	module.exports = isString;
	
	},{"../internal/isObjectLike":336}],348:[function(require,module,exports){
	var isLength = require('../internal/isLength'),
	    isObjectLike = require('../internal/isObjectLike');
	
	
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';
	
	var arrayBufferTag = '[object ArrayBuffer]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';
	
	
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
	
	
	var objectProto = Object.prototype;
	
	
	var objToString = objectProto.toString;
	
	
	function isTypedArray(value) {
	  return (isObjectLike(value) && isLength(value.length) && typedArrayTags[objToString.call(value)]) || false;
	}
	
	module.exports = isTypedArray;
	
	},{"../internal/isLength":335,"../internal/isObjectLike":336}],349:[function(require,module,exports){
	var baseAssign = require('../internal/baseAssign'),
	    createAssigner = require('../internal/createAssigner');
	
	
	var assign = createAssigner(baseAssign);
	
	module.exports = assign;
	
	},{"../internal/baseAssign":310,"../internal/createAssigner":328}],350:[function(require,module,exports){
	var baseCopy = require('../internal/baseCopy'),
	    baseCreate = require('../internal/baseCreate'),
	    isIterateeCall = require('../internal/isIterateeCall'),
	    keys = require('./keys');
	
	
	function create(prototype, properties, guard) {
	  var result = baseCreate(prototype);
	  if (guard && isIterateeCall(prototype, properties, guard)) {
	    properties = null;
	  }
	  return properties ? baseCopy(properties, result, keys(properties)) : result;
	}
	
	module.exports = create;
	
	},{"../internal/baseCopy":312,"../internal/baseCreate":313,"../internal/isIterateeCall":334,"./keys":351}],351:[function(require,module,exports){
	var isLength = require('../internal/isLength'),
	    isNative = require('../lang/isNative'),
	    isObject = require('../lang/isObject'),
	    shimKeys = require('../internal/shimKeys');
	
	
	var nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys;
	
	
	var keys = !nativeKeys ? shimKeys : function(object) {
	  if (object) {
	    var Ctor = object.constructor,
	        length = object.length;
	  }
	  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	      (typeof object != 'function' && (length && isLength(length)))) {
	    return shimKeys(object);
	  }
	  return isObject(object) ? nativeKeys(object) : [];
	};
	
	module.exports = keys;
	
	},{"../internal/isLength":335,"../internal/shimKeys":339,"../lang/isNative":345,"../lang/isObject":346}],352:[function(require,module,exports){
	var isArguments = require('../lang/isArguments'),
	    isArray = require('../lang/isArray'),
	    isIndex = require('../internal/isIndex'),
	    isLength = require('../internal/isLength'),
	    isObject = require('../lang/isObject'),
	    support = require('../support');
	
	
	var objectProto = Object.prototype;
	
	
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	
	function keysIn(object) {
	  if (object == null) {
	    return [];
	  }
	  if (!isObject(object)) {
	    object = Object(object);
	  }
	  var length = object.length;
	  length = (length && isLength(length) &&
	    (isArray(object) || (support.nonEnumArgs && isArguments(object))) && length) || 0;
	
	  var Ctor = object.constructor,
	      index = -1,
	      isProto = typeof Ctor == 'function' && Ctor.prototype === object,
	      result = Array(length),
	      skipIndexes = length > 0;
	
	  while (++index < length) {
	    result[index] = (index + '');
	  }
	  for (var key in object) {
	    if (!(skipIndexes && isIndex(key, length)) &&
	        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}
	
	module.exports = keysIn;
	
	},{"../internal/isIndex":333,"../internal/isLength":335,"../lang/isArguments":341,"../lang/isArray":342,"../lang/isObject":346,"../support":354}],353:[function(require,module,exports){
	var baseToString = require('../internal/baseToString');
	
	
	var reRegExpChars = /[.*+?^${}()|[\]\/\\]/g,
	    reHasRegExpChars = RegExp(reRegExpChars.source);
	
	
	function escapeRegExp(string) {
	  string = baseToString(string);
	  return (string && reHasRegExpChars.test(string))
	    ? string.replace(reRegExpChars, '\\$&')
	    : string;
	}
	
	module.exports = escapeRegExp;
	
	},{"../internal/baseToString":326}],354:[function(require,module,exports){
	(function (global){
	var isNative = require('./lang/isNative');
	
	
	var reThis = /\bthis\b/;
	
	
	var objectProto = Object.prototype;
	
	
	var document = (document = global.window) && document.document;
	
	
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;
	
	
	var support = {};
	
	(function(x) {
	
	
	  support.funcDecomp = !isNative(global.WinRTError) && reThis.test(function() { return this; });
	
	
	  support.funcNames = typeof Function.name == 'string';
	
	
	  try {
	    support.dom = document.createDocumentFragment().nodeType === 11;
	  } catch(e) {
	    support.dom = false;
	  }
	
	
	  try {
	    support.nonEnumArgs = !propertyIsEnumerable.call(arguments, 1);
	  } catch(e) {
	    support.nonEnumArgs = true;
	  }
	}(0, 0));
	
	module.exports = support;
	
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"./lang/isNative":345}],355:[function(require,module,exports){
	
	function identity(value) {
	  return value;
	}
	
	module.exports = identity;
	
	},{}],356:[function(require,module,exports){
	require('./browser_loader');
	
	var AWS = require('./core');
	
	if (typeof window !== 'undefined') window.AWS = AWS;
	if (typeof module !== 'undefined') module.exports = AWS;
	if (typeof self !== 'undefined') self.AWS = AWS;
	
	
	require('../clients/browser_default');
	},{"../clients/browser_default":140,"./browser_loader":198,"./core":201}]},{},[356]);
	
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(180).Buffer))

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */
	
	'use strict'
	
	var base64 = __webpack_require__(181)
	var ieee754 = __webpack_require__(182)
	var isArray = __webpack_require__(183)
	
	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	
	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.
	
	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()
	
	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()
	
	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}
	
	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}
	
	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }
	
	  return that
	}
	
	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */
	
	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }
	
	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}
	
	Buffer.poolSize = 8192 // not used by this implementation
	
	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}
	
	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }
	
	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }
	
	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }
	
	  return fromObject(that, value)
	}
	
	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}
	
	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}
	
	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}
	
	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}
	
	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}
	
	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}
	
	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}
	
	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }
	
	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }
	
	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)
	
	  var actual = that.write(string, encoding)
	
	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }
	
	  return that
	}
	
	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}
	
	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer
	
	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }
	
	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }
	
	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }
	
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}
	
	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)
	
	    if (that.length === 0) {
	      return that
	    }
	
	    obj.copy(that, 0, 0, len)
	    return that
	  }
	
	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }
	
	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }
	
	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}
	
	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}
	
	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}
	
	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}
	
	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }
	
	  if (a === b) return 0
	
	  var x = a.length
	  var y = b.length
	
	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}
	
	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }
	
	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }
	
	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }
	
	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}
	
	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }
	
	  var len = string.length
	  if (len === 0) return 0
	
	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength
	
	function slowToString (encoding, start, end) {
	  var loweredCase = false
	
	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.
	
	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }
	
	  if (end === undefined || end > this.length) {
	    end = this.length
	  }
	
	  if (end <= 0) {
	    return ''
	  }
	
	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0
	
	  if (end <= start) {
	    return ''
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)
	
	      case 'ascii':
	        return asciiSlice(this, start, end)
	
	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)
	
	      case 'base64':
	        return base64Slice(this, start, end)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true
	
	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}
	
	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}
	
	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}
	
	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}
	
	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}
	
	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}
	
	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}
	
	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }
	
	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }
	
	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }
	
	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }
	
	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0
	
	  if (this === target) return 0
	
	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)
	
	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)
	
	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1
	
	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }
	
	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }
	
	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }
	
	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }
	
	  throw new TypeError('val must be string, number or Buffer')
	}
	
	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length
	
	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }
	
	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }
	
	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }
	
	  return -1
	}
	
	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}
	
	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}
	
	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}
	
	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }
	
	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')
	
	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}
	
	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}
	
	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}
	
	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}
	
	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }
	
	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining
	
	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)
	
	      case 'ascii':
	        return asciiWrite(this, string, offset, length)
	
	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)
	
	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}
	
	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}
	
	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []
	
	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1
	
	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint
	
	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }
	
	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }
	
	    res.push(codePoint)
	    i += bytesPerSequence
	  }
	
	  return decodeCodePointsArray(res)
	}
	
	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000
	
	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }
	
	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}
	
	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}
	
	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}
	
	function hexSlice (buf, start, end) {
	  var len = buf.length
	
	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len
	
	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}
	
	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}
	
	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end
	
	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }
	
	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }
	
	  if (end < start) end = start
	
	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }
	
	  return newBuf
	}
	
	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}
	
	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }
	
	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}
	
	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}
	
	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}
	
	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}
	
	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}
	
	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}
	
	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}
	
	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}
	
	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}
	
	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}
	
	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}
	
	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}
	
	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}
	
	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}
	
	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}
	
	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}
	
	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}
	
	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}
	
	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}
	
	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}
	
	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}
	
	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}
	
	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}
	
	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start
	
	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0
	
	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')
	
	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }
	
	  var len = end - start
	  var i
	
	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }
	
	  return len
	}
	
	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }
	
	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }
	
	  if (end <= start) {
	    return this
	  }
	
	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0
	
	  if (!val) val = 0
	
	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }
	
	  return this
	}
	
	// HELPER FUNCTIONS
	// ================
	
	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g
	
	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}
	
	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}
	
	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}
	
	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []
	
	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)
	
	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }
	
	        // valid lead
	        leadSurrogate = codePoint
	
	        continue
	      }
	
	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }
	
	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }
	
	    leadSurrogate = null
	
	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }
	
	  return bytes
	}
	
	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}
	
	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break
	
	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }
	
	  return byteArray
	}
	
	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}
	
	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}
	
	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 181 */
/***/ function(module, exports) {

	'use strict'
	
	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray
	
	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array
	
	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}
	
	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63
	
	function placeHoldersCount (b64) {
	  var len = b64.length
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }
	
	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
	}
	
	function byteLength (b64) {
	  // base64 is 4/3 + up to two characters of the original data
	  return b64.length * 3 / 4 - placeHoldersCount(b64)
	}
	
	function toByteArray (b64) {
	  var i, j, l, tmp, placeHolders, arr
	  var len = b64.length
	  placeHolders = placeHoldersCount(b64)
	
	  arr = new Arr(len * 3 / 4 - placeHolders)
	
	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len
	
	  var L = 0
	
	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
	    arr[L++] = (tmp >> 16) & 0xFF
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }
	
	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[L++] = tmp & 0xFF
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }
	
	  return arr
	}
	
	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}
	
	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}
	
	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var output = ''
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3
	
	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }
	
	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    output += lookup[tmp >> 2]
	    output += lookup[(tmp << 4) & 0x3F]
	    output += '=='
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
	    output += lookup[tmp >> 10]
	    output += lookup[(tmp >> 4) & 0x3F]
	    output += lookup[(tmp << 2) & 0x3F]
	    output += '='
	  }
	
	  parts.push(output)
	
	  return parts.join('')
	}


/***/ },
/* 182 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]
	
	  i += d
	
	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
	
	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
	
	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}
	
	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0
	
	  value = Math.abs(value)
	
	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }
	
	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }
	
	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
	
	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
	
	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 183 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ }
/******/ ]);
//# sourceMappingURL=index.js.map